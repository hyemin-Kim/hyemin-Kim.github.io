{"meta":{"title":"Hyemin Kim","subtitle":"김혜민 / 金慧敏","description":"","author":"Hyemin Kim","url":"https://hyemin-kim.github.io","root":"/"},"pages":[{"title":"","date":"2020-05-04T18:01:24.474Z","updated":"2020-05-04T18:01:24.474Z","comments":false,"path":"about/index.html","permalink":"https://hyemin-kim.github.io/about/index.html","excerpt":"","text":"Hello document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-05-20T10:31:42.690Z","updated":"2020-05-04T13:34:00.910Z","comments":false,"path":"categories/index - default.html","permalink":"https://hyemin-kim.github.io/categories/index%20-%20default.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Categories","date":"2020-04-30T15:00:00.000Z","updated":"2020-05-21T11:27:57.020Z","comments":false,"path":"categories/index.html","permalink":"https://hyemin-kim.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tagcloud","date":"2020-05-08T05:30:56.000Z","updated":"2020-05-08T05:34:14.280Z","comments":false,"path":"tagcloud/index.html","permalink":"https://hyemin-kim.github.io/tagcloud/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-05-20T08:48:36.782Z","updated":"2020-05-04T13:34:13.986Z","comments":false,"path":"tags/index - default.html","permalink":"https://hyemin-kim.github.io/tags/index%20-%20default.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Tag Cloud","date":"2020-04-30T15:00:00.000Z","updated":"2020-05-21T14:01:11.233Z","comments":false,"path":"tags/index.html","permalink":"https://hyemin-kim.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Links","date":"2020-05-20T08:53:04.000Z","updated":"2020-05-21T11:40:00.304Z","comments":false,"path":"link/index.html","permalink":"https://hyemin-kim.github.io/link/index.html","excerpt":"","text":"Some Useful Links Github Hexo Themes Hexo Usage Hexo Plugins document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Python >> Pandas 데이터 파악 - (5) 결측값 확인 및 추출","slug":"S-Python-Pandas5","date":"2020-06-11T16:21:05.000Z","updated":"2020-06-11T17:09:25.690Z","comments":true,"path":"2020/06/12/S-Python-Pandas5/","link":"","permalink":"https://hyemin-kim.github.io/2020/06/12/S-Python-Pandas5/","excerpt":"","text":"결측값 확인 및 추출 1. 결측값에 대하여 2. column별 (비)결측값 개수 확인 – info() 3. (비)결측값 위치 확인 3-1. 전체 Data 3-2. 특정 column 4. (비)결측값 추출 4-1. 해당 column만 추출 4-2. 전체 column 추출 4-3. 지정한 column 추출 1import pandas as pd 1df = pd.read_csv('korean-idol.csv') 1. 결측값에 대하여 Null 값은 비어있는 값, 고급 언어로 결측값이다 pandas 에서는 NaN =&gt; Not a Number 로 표기 된다 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 2. column별 (비)결측값 개수 확인 – info() info() 로 각 column별의 결측값(NaN) 개수를 쉽게 확인할 수 있다. 1df.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 15 entries, 0 to 14 Data columns (total 8 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 이름 15 non-null object 1 그룹 14 non-null object 2 소속사 15 non-null object 3 성별 15 non-null object 4 생년월일 15 non-null object 5 키 13 non-null float64 6 혈액형 15 non-null object 7 브랜드평판지수 15 non-null int64 dtypes: float64(1), int64(1), object(6) memory usage: 1.1+ KB 3. (비)결측값 위치 확인 .isna() .isnull() .notna() .notnull() 3-1. 전체 Data df_name .명령어 (1) 결측값 = True 1df.isna() 1df.isnull() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 False False False False False False False False 1 False False False False False False False False 2 False True False False False False False False 3 False False False False False False False False 4 False False False False False False False False 5 False False False False False False False False 6 False False False False False False False False 7 False False False False False True False False 8 False False False False False False False False 9 False False False False False False False False 10 False False False False False True False False 11 False False False False False False False False 12 False False False False False False False False 13 False False False False False False False False 14 False False False False False False False False (2) 비결측값 = True 1df.notna() 1df.notnull() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 True True True True True True True True 1 True True True True True True True True 2 True False True True True True True True 3 True True True True True True True True 4 True True True True True True True True 5 True True True True True True True True 6 True True True True True True True True 7 True True True True True False True True 8 True True True True True True True True 9 True True True True True True True True 10 True True True True True False True True 11 True True True True True True True True 12 True True True True True True True True 13 True True True True True True True True 14 True True True True True True True True 3-2. 특정 column df_name [ ‘col_name’ ] .명령어 (1) 결측값 = True 1df['그룹'].isna() 1df['그룹'].isnull() 0 False 1 False 2 True 3 False 4 False 5 False 6 False 7 False 8 False 9 False 10 False 11 False 12 False 13 False 14 False Name: 그룹, dtype: bool (2) 비결측값 = True 1df['그룹'].notna() 1df['그룹'].notnull() 0 True 1 True 2 False 3 True 4 True 5 True 6 True 7 True 8 True 9 True 10 True 11 True 12 True 13 True 14 True Name: 그룹, dtype: bool 4. (비)결측값 추출 4-1. 해당 column만 추출 결측값: df_name [ ‘col_name’] [ df_name [ ‘col_name’ ] .isna() / isnull() ] 비결측값: df_name [ ‘col_name’ ] [df_name [ ‘col_name’ ] .notna() / notnull()] 1df['그룹'][df['그룹'].isna()] 2 NaN Name: 그룹, dtype: object 1df['그룹'][df['그룹'].notnull()] 0 방탄소년단 1 빅뱅 3 방탄소년단 4 마마무 5 방탄소년단 6 뉴이스트 7 아이들 8 방탄소년단 9 핫샷 10 소녀시대 11 아스트로 12 뉴이스트 13 뉴이스트 14 방탄소년단 Name: 그룹, dtype: object 4-2. 전체 column 추출 결측값: df_name .loc [df_name [ ‘col_name’ ] .isna() / isnull() ] 비결측값: df_name .loc [df_name ['col_name] .notna() / notnull() ] 1df.loc[df['그룹'].isna()] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 1df.loc[df['그룹'].notnull()] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 4-3. 지정한 column 추출 결측값: df_name .loc [df_name [ ‘na_col_name’ ] .isna() / isnull() , [‘col_name1’, ‘col_name2’, …]] 비결측값: df_name .loc [df_name ['na_col_name] .notna() / notnull() , [‘col_name1’, ‘col_name2’, …]] 1df.loc[df['그룹'].isna(), ['이름', '소속사']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 소속사 2 강다니엘 커넥트 1df.loc[df['그룹'].notnull(), ['이름', '소속사']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 소속사 0 지민 빅히트 1 지드래곤 YG 3 뷔 빅히트 4 화사 RBW 5 정국 빅히트 6 민현 플레디스 7 소연 큐브 8 진 빅히트 9 하성운 스타크루이엔티 10 태연 SM 11 차은우 판타지오 12 백호 플레디스 13 JR 플레디스 14 슈가 빅히트 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"}]},{"title":"Python >> Pandas 데이터 파악 - (4) 범위선택","slug":"S-Python-Pandas4","date":"2020-05-24T12:58:03.000Z","updated":"2020-06-11T17:08:46.651Z","comments":true,"path":"2020/05/24/S-Python-Pandas4/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/24/S-Python-Pandas4/","excerpt":"","text":"범위선텍 0. DataFrame 로드 1. Column을 선택하는 방법 2. 범위 선택 (range selection) 2-1. 단순 index에 대한 범위 선택 2-2. index &amp; column 범위선택 – loc 2-3. index &amp; column 범위선택 – iloc (position으로 색인) 3. 조건범위선택 – Boolean Indexing 3-1. 조건에 만족한 row들의 모든 column을 추출 3-2. 조건에 만족한 row들의 특정 column들을 추출 4. 조건범위선택 – inis을 활용한 색인 0. DataFrame 로드 1import pandas as pd 1df = pd.read_csv('korean-idol.csv') 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 1. Column을 선택하는 방법 df_name['column 명 '] df_name[\"column 명 \"] df_name.column 명 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 1df['이름'] 0 지민 1 지드래곤 2 강다니엘 3 뷔 4 화사 5 정국 6 민현 7 소연 8 진 9 하성운 10 태연 11 차은우 12 백호 13 JR 14 슈가 Name: 이름, dtype: object 1df[\"이름\"] 0 지민 1 지드래곤 2 강다니엘 3 뷔 4 화사 5 정국 6 민현 7 소연 8 진 9 하성운 10 태연 11 차은우 12 백호 13 JR 14 슈가 Name: 이름, dtype: object 1df.이름 0 지민 1 지드래곤 2 강다니엘 3 뷔 4 화사 5 정국 6 민현 7 소연 8 진 9 하성운 10 태연 11 차은우 12 백호 13 JR 14 슈가 Name: 이름, dtype: object 2. 범위 선택 (range selection) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 2-1. 단순 index에 대한 범위 선택 1df[:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 1df.head(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 2-2. index &amp; column 범위선택 – loc df_name.loc[행(index) 범위, (열)column 범위] 행 범위는 “:” “:b” “a:b” 등 형식을 사용 열 범위는 ['column name '] ['column name1 ', 'column name2 '] 'column name1 ’ : 'column name2 ’ 등 형식을 사용 주의: pandas의 loc에서 범위 [a, b]는 index a &amp; index b 모두 포함 numpy에서는 index a 포함, index b 미포함 1df.loc[:, '이름'] 0 지민 1 지드래곤 2 강다니엘 3 뷔 4 화사 5 정국 6 민현 7 소연 8 진 9 하성운 10 태연 11 차은우 12 백호 13 JR 14 슈가 Name: 이름, dtype: object 1df.loc[:, ['이름', '생년월일']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 생년월일 0 지민 1995-10-13 1 지드래곤 1988-08-18 2 강다니엘 1996-12-10 3 뷔 1995-12-30 4 화사 1995-07-23 5 정국 1997-09-01 6 민현 1995-08-09 7 소연 1998-08-26 8 진 1992-12-04 9 하성운 1994-03-22 10 태연 1989-03-09 11 차은우 1997-03-30 12 백호 1995-07-21 13 JR 1995-06-08 14 슈가 1993-03-09 1df.loc[3:8, ['이름', '생년월일']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 생년월일 3 뷔 1995-12-30 4 화사 1995-07-23 5 정국 1997-09-01 6 민현 1995-08-09 7 소연 1998-08-26 8 진 1992-12-04 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 1df.loc[2:5, '이름':'생년월일'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 2 강다니엘 NaN 커넥트 남자 1996-12-10 3 뷔 방탄소년단 빅히트 남자 1995-12-30 4 화사 마마무 RBW 여자 1995-07-23 5 정국 방탄소년단 빅히트 남자 1997-09-01 2-3. index &amp; column 범위선택 – iloc (position으로 색인) 행(index) 범위 선택은 loc와 동일 열(column) 범위는 'column 명’대신 column position을 사용 행 범위는 “:” “:b” “a:b” 등 형식을 사용 열 범위는 [c] [c, d] c:d 등 형식을 사용 주의: pandas의 iloc에서 범위 [a, b]는 index a 포함, index b 미포함 (numpy와 동일) pandas의 loc에서 범위 [a, b]는 index a &amp; index b 모두 포함 1df.iloc[:, [0, 2]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 소속사 0 지민 빅히트 1 지드래곤 YG 2 강다니엘 커넥트 3 뷔 빅히트 4 화사 RBW 5 정국 빅히트 6 민현 플레디스 7 소연 큐브 8 진 빅히트 9 하성운 스타크루이엔티 10 태연 SM 11 차은우 판타지오 12 백호 플레디스 13 JR 플레디스 14 슈가 빅히트 1df.iloc[1:5, [0, 2]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 소속사 1 지드래곤 YG 2 강다니엘 커넥트 3 뷔 빅히트 4 화사 RBW 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 1df.iloc[1:5, 0:4] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 1 지드래곤 빅뱅 YG 남자 2 강다니엘 NaN 커넥트 남자 3 뷔 방탄소년단 빅히트 남자 4 화사 마마무 RBW 여자 3. 조건범위선택 – Boolean Indexing Boolean indexing은 Numpy에서의 Boolean indexing과 같은 원리다 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 3-1. 조건에 만족한 row들의 모든 column을 추출 df [조건 ] 1df['키'] &gt; 180 0 False 1 False 2 False 3 False 4 False 5 False 6 True 7 False 8 False 9 False 10 False 11 True 12 False 13 False 14 False Name: 키, dtype: bool 1df[df['키'] &gt; 180] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 3-2. 조건에 만족한 row들의 특정 column들을 추출 방법 1. df_name [조건 ] [column범위 ] 1df[ df['키'] &gt; 180 ] ['이름'] 6 민현 11 차은우 Name: 이름, dtype: object 1df [ df['키'] &gt; 180 ] [['이름', '키']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 키 6 민현 182.3 11 차은우 183.0 방법 2. loc를 활용: df_name.loc[ 조건 , column범위 ] 【추천】 1df.loc[ df['키'] &gt; 180, '이름' ] 6 민현 11 차은우 Name: 이름, dtype: object 1df.loc[ df['키'] &gt; 180, ['이름', '그룹'] ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 6 민현 뉴이스트 11 차은우 아스트로 1df.loc[ df['키'] &gt; 180, '이름' : '성별'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 6 민현 뉴이스트 플레디스 남자 11 차은우 아스트로 판타지오 남자 4. 조건범위선택 – inis을 활용한 색인 column값이 미리 정의한 list에 속한다는 조건을 걸고자 할 때 사용한다 1my_condition = ['플레디스', 'SM'] 1df['소속사'].isin(my_condition) 0 False 1 False 2 False 3 False 4 False 5 False 6 True 7 False 8 False 9 False 10 True 11 False 12 True 13 True 14 False Name: 소속사, dtype: bool 1df.loc[ df['소속사'].isin(my_condition) ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 1df.loc[ df['소속사'].isin(my_condition) , ['이름', '소속사'] ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 소속사 6 민현 플레디스 10 태연 SM 12 백호 플레디스 13 JR 플레디스 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"}]},{"title":"Python >> Pandas 데이터 파악 - (3) 요약정보, 통계값, 정렬","slug":"S-Python-Pandas3","date":"2020-05-24T08:06:08.000Z","updated":"2020-06-11T17:08:26.017Z","comments":true,"path":"2020/05/24/S-Python-Pandas3/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/24/S-Python-Pandas3/","excerpt":"","text":"요약정보(info), 통계값(describe), 정렬(sort) 1. 파일 읽어오기 (csv) 2. 기본 정보 알아보기 (column, index, info) 2-1. colomn (열) 출력하기 2-2. colomn (열) 이름 재정의하기 2-3. index (행) 출력하기 2-4. info (기본적인 row의 정보와 데이터 타입을 알려줌) 3. 통계 정보 알아보기 (describe) 4. 형태 (shape) 알아보기 5. 상위 5개, 하위 5개의 정보만 보기 6. 정렬하기 6-1. index 순으로 정렬 6-2. column별로 정렬 6-3. 복수 column 정렬 1import pandas as pd 1. 파일 읽어오기 (csv) 1df = pd.read_csv('korean-idol.csv') 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 2. 기본 정보 알아보기 (column, index, info) 2-1. colomn (열) 출력하기 1df.columns Index(['이름', '그룹', '소속사', '성별', '생년월일', '키', '혈액형', '브랜드평판지수'], dtype='object') 2-2. colomn (열) 이름 재정의하기 예: “이름” --&gt; “name”: 1new_col = ['name', '그룹', '소속사', '성별', '생년월일', '키', '혈액형', '브랜드평판지수'] 1df.columns = new_col 1df.columns Index(['name', '그룹', '소속사', '성별', '생년월일', '키', '혈액형', '브랜드평판지수'], dtype='object') 2-3. index (행) 출력하기 1df.index RangeIndex(start=0, stop=15, step=1) 2-4. info (기본적인 row의 정보와 데이터 타입을 알려줌) Tip: info메소드는 주로 빠진 값 (null 값)과 데이터 타입을 볼 때 활용함 1df.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 15 entries, 0 to 14 Data columns (total 8 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 name 15 non-null object 1 그룹 14 non-null object 2 소속사 15 non-null object 3 성별 15 non-null object 4 생년월일 15 non-null object 5 키 13 non-null float64 6 혈액형 15 non-null object 7 브랜드평판지수 15 non-null int64 dtypes: float64(1), int64(1), object(6) memory usage: 1.1+ KB “object” type은 주로 문자형 데이터를 가리킴. 3. 통계 정보 알아보기 (describe) 산술 연산이 가능한 column만 출력 1df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 키 브랜드평판지수 count 13.000000 1.500000e+01 mean 175.792308 5.655856e+06 std 5.820576 2.539068e+06 min 162.100000 2.925442e+06 25% 174.000000 3.712344e+06 50% 177.000000 4.668615e+06 75% 179.200000 7.862214e+06 max 183.000000 1.052326e+07 4. 형태 (shape) 알아보기 shape는 tuple형태로 반환되며, 첫번째는 row, 두번째는 column의 숫자를 의미함. 1df.shape (15, 8) 5. 상위 5개, 하위 5개의 정보만 보기 head() 상위 5개 row tail() 하위 5개 row head(3) 상위 3개 row tail(2) 하위 2개 row 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 1df.tail() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 1df.head(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 1df.tail(2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 6. 정렬하기 6-1. index 순으로 정렬 오름차순 정렬: df_name.sort_index() (default) 내림차순 정렬: df_name.sort_index(ascending = False) 1df.sort_index() # 오름차순 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 1df.sort_index(ascending = False) # 내림차순 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 6-2. column별로 정렬 오름차순 정렬: df_name.sort_values(by = ‘column명’) 내림차순 정렬: df_name.sort_values(by = ‘column명’, ascending = False) 1df.sort_values(by='키') # 오름차순 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 1df.sort_values(by = '키', ascending = False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 6-3. 복수 column 정렬 먼저 column1 기준으로 정렬하고, column1 값이 동일한 row들은 column2기준으로 정렬: df_name.sort_values(by = [‘column명 1’, ‘column명 2’] 1df.sort_values(by = ['키', '브랜드평판지수']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 1df.sort_values(by = ['키', '브랜드평판지수'], ascending = False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"}]},{"title":"Python >> Pandas 데이터 파악 - (2) 파일 불러오기","slug":"S-Python-Pandas2","date":"2020-05-24T06:04:59.000Z","updated":"2020-06-11T17:08:13.718Z","comments":true,"path":"2020/05/24/S-Python-Pandas2/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/24/S-Python-Pandas2/","excerpt":"","text":"파일 불러오기 1. csv파일 읽어오기 – \"pd.read_csv\" 1-1. Jupyter Notebook 기반 1-2. Colab 기반 2. Excle파일 읽어오기 – \"pd.read_excel\" 2-1. Jupyter Notebook 기반 2-2. Colab 기반 1. csv파일 읽어오기 – \"pd.read_csv\" 1-1. Jupyter Notebook 기반 1import pandas as pd 1pd.read_csv('korean-idol.csv') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 1-2. Colab 기반 방법 1. 로컬에서 파일 읽어오기 123456from google.colab import filesmyfile = files.upload()import iopd.read_csv(io.BytesIO(myfile['korean-idol.csv'])) 방법 2: 구글 드라이브에 있는 샘플 파일 읽어오기 123456789from google.colab import drivedrive.mount('/content/drive')# 나타나는 link에 따라 google drive 로그인하여 link복사, # 'Enter your authorization code:'에서 복사된 link를 입력filename = 'colab 왼쪽 목록에서 파일 경로를 복사하여 붙혀놓기'pd.read_csv(filename) 2. Excle파일 읽어오기 – \"pd.read_excel\" 2-1. Jupyter Notebook 기반 1pd.read_excel('korean-idol.xlsx') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 이름 그룹 소속사 성별 생년월일 키 혈액형 브랜드평판지수 0 지민 방탄소년단 빅히트 남자 1995-10-13 173.6 A 10523260 1 지드래곤 빅뱅 YG 남자 1988-08-18 177.0 A 9916947 2 강다니엘 NaN 커넥트 남자 1996-12-10 180.0 A 8273745 3 뷔 방탄소년단 빅히트 남자 1995-12-30 178.0 AB 8073501 4 화사 마마무 RBW 여자 1995-07-23 162.1 A 7650928 5 정국 방탄소년단 빅히트 남자 1997-09-01 178.0 A 5208335 6 민현 뉴이스트 플레디스 남자 1995-08-09 182.3 O 4989792 7 소연 아이들 큐브 여자 1998-08-26 NaN B 4668615 8 진 방탄소년단 빅히트 남자 1992-12-04 179.2 O 4570308 9 하성운 핫샷 스타크루이엔티 남자 1994-03-22 167.1 A 4036489 10 태연 소녀시대 SM 여자 1989-03-09 NaN A 3918661 11 차은우 아스트로 판타지오 남자 1997-03-30 183.0 B 3506027 12 백호 뉴이스트 플레디스 남자 1995-07-21 175.0 AB 3301654 13 JR 뉴이스트 플레디스 남자 1995-06-08 176.0 O 3274137 14 슈가 방탄소년단 빅히트 남자 1993-03-09 174.0 O 2925442 2-2. Colab 기반 구글 드라이브에 있는 샘플 파일 읽어오기 123456from google.colab import drivedrive.mount('/content/drive')filename = '파일 경로 붙혀놓기'pd.read_excel(filename) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"}]},{"title":"Python >> Pandas 데이터 파악 - (1) Series와 DataFrame","slug":"S-Python-Pandas1","date":"2020-05-22T11:37:46.000Z","updated":"2020-06-11T17:07:56.050Z","comments":true,"path":"2020/05/22/S-Python-Pandas1/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/22/S-Python-Pandas1/","excerpt":"","text":"Series &amp; DataFrame 1. pandas 패키지 로드 2. pandas의 Series 와 DataFrame 2-1. Series 2-2. DataFrame 방법 1. list로 만들기 방법 2. dict로 만들기 2-3. index를 특정column으로 지정하기 2-4. column = Series 1. pandas 패키지 로드 1import pandas 별칭은 주로 pd로 사용한다 1import pandas as pd 1pd &lt;module 'pandas' from 'D:\\\\Anaconda\\\\lib\\\\site-packages\\\\pandas\\\\__init__.py'&gt; 2. pandas의 Series 와 DataFrame 1차원, 1개의 column은 Series라고 한다 2-1. Series Series 생성: pd.Series(“list”) pd.Series(“list_name”) (1) pd.Series(“list”) 1pd.Series([1, 2, 3, 4]) 0 1 1 2 2 3 3 4 dtype: int64 (2) pd.Series(“list_name”) 1a = [1, 2, 3, 4] 1pd.Series(a) 0 1 1 2 2 3 3 4 dtype: int64 1mylist = [1, 2, 3, 4] 1pd.Series(mylist) 0 1 1 2 2 3 3 4 dtype: int64 2-2. DataFrame 방법 1. list로 만들기 123company1 = [['삼성', 2000, '스마트폰'], ['현대', 1000, '자동차'], ['네이버', 500, '포털']] 1pd.DataFrame(company1) .dataframe tbody tr th:only-of-type { vertical-align: middle } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 삼성 2000 스마트폰 1 현대 1000 자동차 2 네이버 500 포털 &lt;활용을 하기 위해 DataFrame을 변수에 지정하기&gt; 1df1 = pd.DataFrame(company1) 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 삼성 2000 스마트폰 1 현대 1000 자동차 2 네이버 500 포털 &lt;제목컬럼 만들기&gt; – “dfname.column = [ ]” 1df1.columns = ['기업명', '매출액', '업종'] 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 기업명 매출액 업종 0 삼성 2000 스마트폰 1 현대 1000 자동차 2 네이버 500 포털 주의: column명의 개수는 반드시 DataFrame의 column수와 동일해야 함 방법 2. dict로 만들기 1234company2 = {'기업명': ['삼성', '현대', '네이버'], '매출액': [2000, 1000, 500], '업종': ['스므트폰', '자동차', '포털'] } 1df2 = pd.DataFrame(company2) 1df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 기업명 매출액 업종 0 삼성 2000 스므트폰 1 현대 1000 자동차 2 네이버 500 포털 2-3. index를 특정column으로 지정하기 “dfname.index = [ ]” 명령을 사용한다 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 기업명 매출액 업종 0 삼성 2000 스마트폰 1 현대 1000 자동차 2 네이버 500 포털 1df1.index = df1['기업명'] 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 기업명 매출액 업종 기업명 삼성 삼성 2000 스마트폰 현대 현대 1000 자동차 네이버 네이버 500 포털 2-4. column = Series 1df1['매출액'] 기업명 삼성 2000 현대 1000 네이버 500 Name: 매출액, dtype: int64 1type(df1['매출액']) pandas.core.series.Series document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"}]},{"title":"Python >> Numpy - (4) 행렬. Broadcasting","slug":"S-Python-Numpy4","date":"2020-05-20T07:55:34.000Z","updated":"2020-06-11T17:09:58.983Z","comments":true,"path":"2020/05/20/S-Python-Numpy4/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/20/S-Python-Numpy4/","excerpt":"행렬 (덧셈, 뺄셈, 곱셈). Broadcasting.","text":"행렬 (덧셈, 뺄셈, 곱셈). Broadcasting. 목록 1. 행렬 - 덧셈 1-1. 덧셈 1-2. Sum – Matrix안의 계산 2. 행렬 - 뺄셈 3. 행렬 - 곱셈 3-1. 일반 곱셈 3-2. dot product / 내적곱 4. Broadcasting 4-1. 숫자의 연산 4-2. array (배열)의 broadcasting 1import numpy as np 1. 행렬 - 덧셈 행렬의 shape이 같아야 덧셈 가능 1-1. 덧셈 12a = np.array([[1, 2, 3], [2, 3, 4]]) 12b = np.array([[3, 4, 5], [1, 2, 3]]) 1a + b array([[4, 6, 8], [3, 5, 7]]) 12a = np.array([[1, 2, 3], [2, 3, 4]]) 123b = np.array([[1, 2], [3, 4], [5, 6]]) 1a + b # shape이 다르면 error발생 --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-7-37f7d36ad418&gt; in &lt;module&gt; ----&gt; 1 a + b # shape이 다르면 error발생 ValueError: operands could not be broadcast together with shapes (2,3) (3,2) 1-2. Sum – Matrix안의 계산 명령어: np.sum(‘array_name’, axis = ‘0/1/…’) 주의: 계산할 때 axis의 방향대로 Sum을 구한다. 예를 들면, 2darray에서, axis = 0 이면: 수직방향으로 Sum을 구한다 axis = 1 이면: 수평방향으로 Sum을 구한다 12a = np.array([[1, 2, 3], [2, 3, 4]]) 1np.sum(a, axis = 0) array([3, 5, 7]) 1np.sum(a, axis = 1) array([6, 9]) 2. 행렬 - 뺄셈 12a = np.array([[1, 2, 3], [2, 3, 4]]) 12b = np.array([[3, 4, 5], [1, 2, 3]]) 1a - b array([[-2, -2, -2], [ 1, 1, 1]]) 12a = np.array([[1, 2, 3], [2, 3, 4]]) 123b = np.array([[1, 2], [3, 4], [5, 6]]) 1a - b # shape이 다르면 error발생 --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-18-e62ba154daaa&gt; in &lt;module&gt; ----&gt; 1 a - b # shape이 다르면 error발생 ValueError: operands could not be broadcast together with shapes (2,3) (3,2) 3. 행렬 - 곱셈 3-1. 일반 곱셈 일반곱셈은 덧셈과 뺏셈이랑 동일하게 같은 위치에 있는 애들끼리 곱한다. [shape이 완전 같아야 함] 12a = np.array([[1, 2, 3], [2, 3, 4]]) 12b = np.array([[3, 4, 5], [1, 2, 3]]) 1a * b array([[ 3, 8, 15], [ 2, 6, 12]]) 3-2. dot product / 내적곱 [맞닿는 shape이 같아야 함] 12a = np.array([[1, 2, 3], [2, 3, 4]]) 123b = np.array([[1, 2], [3, 4], [5, 6]]) 1a.shape, b.shape ((2, 3), (3, 2)) 방법 1: np.dot(a, b) 1np.dot(a, b) array([[22, 28], [31, 40]]) 방법2: a.dot(b) 1a.dot(b) array([[22, 28], [31, 40]]) 4. Broadcasting 4-1. 숫자의 연산 array a 의 모든 원소에 3을 더하고 싶다면: 단순히 행렬 덧셈을 사용할 때: 12a = np.array([[1, 2, 3], [2, 3, 4]]) 12b = np.array([[3, 3, 3], [3, 3, 3]]) 1a + b array([[4, 5, 6], [5, 6, 7]]) Broadcasting 사용할 때: 12a = np.array([[1, 2, 3], [2, 3, 4]]) 1a + 3 array([[4, 5, 6], [5, 6, 7]]) 1a - 3 array([[-2, -1, 0], [-1, 0, 1]]) 1a * 3 array([[ 3, 6, 9], [ 6, 9, 12]]) 1a / 3 array([[0.33333333, 0.66666667, 1. ], [0.66666667, 1. , 1.33333333]]) 4-2. array (배열)의 broadcasting original array의 shape이 유지됨. 12a = np.array([[1, 2, 3], [2, 3, 4]]) 12b = np.array([[1], [2]]) 1a.shape, b.shape ((2, 3), (2, 1)) 1a * b array([[1, 2, 3], [4, 6, 8]]) 12a = np.array([[1, 2, 3], [2, 3, 4]]) 1b = np.array([1, 2, 3]) 1a * b array([[ 1, 4, 9], [ 2, 6, 12]]) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"https://hyemin-kim.github.io/tags/Numpy/"}]},{"title":"Python >> Numpy - (3) 수열. 정렬","slug":"S-Python-Numpy3","date":"2020-05-19T17:10:54.000Z","updated":"2020-06-11T17:09:51.726Z","comments":true,"path":"2020/05/20/S-Python-Numpy3/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/20/S-Python-Numpy3/","excerpt":"arange. range. 정렬(sort &amp; argsort)","text":"arange. range. 정렬(sort &amp; argsort) 목록 1. arange란? 1-1. 순서대로 리스트에 값을 생성하려면? 1-2. arange를 사용해서 쉽게 생성하기 1-3. keyword인자를 사용해보기 1-4. 홀수의 값만 생성 2. range (Numpy와는 상관없는 Python문법) 3. 정렬 3-1. 1차원 정렬 3-2. N차원 정렬 3-3. index를 반환하는 argsort 1import numpy as np 1. arange란? arange와 range를 같이 보고 이해하면 됨 [실제 상황 예시] 우리는 순차적인 값을 생성할 때가 많다. 예를 들면: 회원에 대한 가입번호 부여 100개 한정 판매 상품에 대한 고유 번호 부여 이 밖에도 데이터 관리를 위한 인덱스를 차례대로 부여하는 것은 매우 흔한 일이다. 1-1. 순서대로 리스트에 값을 생성하려면? 1~10까지 값을 생성하려면? 1arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 1arr [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 1-2. arange를 사용해서 쉽게 생성하기 np.arange(a, b): a 부터 b-1 까지 생성한다 (a포함, b미포함) 1arr = np.arange(1, 11) 1arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 1-3. keyword인자를 사용해보기 np.arange(start = a, stop = b) 1arr = np.arange(start=1, stop=11) 1arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 1arr = np.arange(stop=11, start=1) # start &amp; stop 지정했기 때문에 순서 바꿔도 됨 1arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 1arr = np.arange(11,1) # start &amp; stop 지정 안하면 순서 바꿨을 때 오류 남 1arr array([], dtype=int32) 1-4. 홀수의 값만 생성 1~10 사이의 값중 홀수만 생성 step 키워드 활용 np.arange(start, stop, step) 1arr = np.arange(1, 11, 2) 1arr array([1, 3, 5, 7, 9]) 1arr = np.arange(start=1, stop=11, step=2) 1arr array([1, 3, 5, 7, 9]) 2. range (Numpy와는 상관없는 Python문법) range는 말 그대로 범위를 지정해 주는 것이다 보통 for-in 의 반복문에서 많이 사용된다 arange와는 다르게 array형태로 저장되어있지 않고 그냥 가볍게 바로바로 쓴다 arange 구문 활용시 1arr = np.arange(1, 11) 1arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 12for i in arr: print(i) 1 2 3 4 5 6 7 8 9 10 range 구문 활용시 12for i in range(1, 11): print(i) 1 2 3 4 5 6 7 8 9 10 12for i in range(1, 11, 2): print(i) 1 3 5 7 9 3. 정렬 3-1. 1차원 정렬 1차원 정렬은 매우 간단함 오름차순으로 정렬: np.sort(arr) 내림차순으로 정렬: np.sort(arr)[::-1] 1arr = np.array([1, 10, 5, 8, 2, 4, 3, 6, 8, 7, 9]) 1arr array([ 1, 10, 5, 8, 2, 4, 3, 6, 8, 7, 9]) 1np.sort(arr) array([ 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) 1np.sort(arr)[::-1] array([10, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1]) 하지만, 그냥 이상태에서는 정렬된 이 값들이 유지가 안됨 값을 sort 된 상태로 유지시키려면: 변수로 다시 지정해주기 np.sort(arr) 대신 arr.sort() 쓴다 [arr자체에 sort명령을 씌워줌] 1arr array([ 1, 10, 5, 8, 2, 4, 3, 6, 8, 7, 9]) 1np.sort(arr) array([ 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) 1arr # np.sort 만 실행했을 때 유지가 안됨 array([ 1, 10, 5, 8, 2, 4, 3, 6, 8, 7, 9]) 1arr2 = np.sort(arr) # 방법1: arr2로 지정하기 1arr2 array([ 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) 1arr.sort() # 방법2: arr.sort 사용하기 1arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) 3-2. N차원 정렬 N차원 정렬에서는 axis 중요함. (즉, 정렬 기준이 되는 축) 123arr2d = np.array([[5, 6, 7, 8], [4, 3, 2, 1], [10, 9, 12, 11]]) 1arr2d.shape (3, 4) 열 정렬 (왼쪽에서 오른쪽으로 정렬) – axis 1을 기준으로 삼 1arr2d # 정렬 전 array([[ 5, 6, 7, 8], [ 4, 3, 2, 1], [10, 9, 12, 11]]) 1np.sort(arr2d, axis = 1) # 정렬 후 array([[ 5, 6, 7, 8], [ 1, 2, 3, 4], [ 9, 10, 11, 12]]) 행 정렬 (위에서 아래로 정렬) – axis 0을 기준으로 삼 1arr2d # 정렬 전 array([[ 5, 6, 7, 8], [ 4, 3, 2, 1], [10, 9, 12, 11]]) 1np.sort(arr2d, axis = 0) # 정렬 후 array([[ 4, 3, 2, 1], [ 5, 6, 7, 8], [10, 9, 12, 11]]) 3-3. index를 반환하는 argsort 정렬한 결과에는 값을 반환하는 것이 아닌 index를 반환한다 열 정렬 (왼쪽에서 오른쪽으로 정렬) 1arr2d # 정렬 전 array([[ 5, 6, 7, 8], [ 4, 3, 2, 1], [10, 9, 12, 11]]) 1np.sort(arr2d, axis = 1) # sort 정렬 후 array([[ 5, 6, 7, 8], [ 1, 2, 3, 4], [ 9, 10, 11, 12]]) 1np.argsort(arr2d, axis = 1) # argsort 정렬 후 array([[0, 1, 2, 3], [3, 2, 1, 0], [1, 0, 3, 2]], dtype=int64) 행 정렬 (위에서 아래로 정렬) 1arr2d # 정렬 전 array([[ 5, 6, 7, 8], [ 4, 3, 2, 1], [10, 9, 12, 11]]) 1np.sort(arr2d, axis = 0) # sort 정렬 후 array([[ 4, 3, 2, 1], [ 5, 6, 7, 8], [10, 9, 12, 11]]) 1np.argsort(arr2d, axis = 0) # argsort 정렬 후 array([[1, 1, 1, 1], [0, 0, 0, 0], [2, 2, 2, 2]], dtype=int64) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"https://hyemin-kim.github.io/tags/Numpy/"}]},{"title":"Python >> Numpy - (2) Slicing. 인덱싱","slug":"S-Python-Numpy2","date":"2020-05-19T12:55:06.000Z","updated":"2020-06-11T17:09:45.587Z","comments":true,"path":"2020/05/19/S-Python-Numpy2/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/19/S-Python-Numpy2/","excerpt":"슬라이싱 (Slicing). Fancy 인덱싱. Boolean 인덱싱.","text":"슬라이싱 (Slicing). Fancy 인덱싱. Boolean 인덱싱. 목록 1. 슬라이싱 (Slicing) 1-1. index 지정하여 색인 1차원 array 2차원 array 1-2. 범위 색인 1차원 array 2차원 array 2. Fancy 인덱싱 2-1. 1차원 array 2-2. 2차원 array 3. Boolean 인덱싱 3-1. True와 False값으로 색인하기 3-2. 조건필터 1. 슬라이싱 (Slicing) 1import numpy as np 베열의 부분 선택 (과일을 슬라이스해서 부분만 먹듯…) 1arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 1arr.shape (10,) 1-1. index 지정하여 색인 1차원 array 1arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 1arr[0] # index: 앞에서 부터 0, 1, 2, ... 0 1arr[5] 5 1arr[10] # index가 넘으면 error남 --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-7-ff656e92d79c&gt; in &lt;module&gt; ----&gt; 1 arr[10] IndexError: index 10 is out of bounds for axis 0 with size 10 1arr[-1] # 뒤에서 부터 1번째. index: 뒤에서 부터 -1, -2, -3,... 9 1arr[-10] 0 1arr[-11] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-10-91f133f07612&gt; in &lt;module&gt; ----&gt; 1 arr[-11] IndexError: index -11 is out of bounds for axis 0 with size 10 2차원 array 123arr2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) 1arr2d.shape (3, 4) arr2d[행, 열] 1arr2d[0, 2] 3 1arr2d[2, 1] 10 1-2. 범위 색인 1차원 array arr[a, b] – arr의 “index a” 부터 \"index b-1\"까지 (a 포함, b 미포함) index: 1 이상 1arr array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 1arr[1:] # index 1 포함 array([1, 2, 3, 4, 5, 6, 7, 8, 9]) index: 5 미만 1arr[:5] # index 5 미포함 array([0, 1, 2, 3, 4]) index: 1이상 5미만 1arr[1:5] # index 1 포함 &amp; index 5 미포함 array([1, 2, 3, 4]) index: -1까지 1arr[:-1] # index -1 (index 9) 미포함 array([0, 1, 2, 3, 4, 5, 6, 7, 8]) 2차원 array 123arr2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) row(행)을 모두 가져오려는 경우 1arr2d[0,:] # 0번 행의 모든 열 가져오기 array([1, 2, 3, 4]) colomn(열)을 모두 가져오려는 경우 1arr2d[:,2] array([ 3, 7, 11]) 부분적으로 가져오려는 경우 1arr2d[:2, :] # 0,1번 행의 모든 열 가져오기 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1arr2d[:2, 2:] # 0,1번 행의 2,3번 열 가져오기 array([[3, 4], [7, 8]]) 2. Fancy 인덱싱 fancy인덱싱은 범위가 아닌 특정 index의 집합의 값을 선택하여 추출하고 싶을 때 활용한다 1arr = np.array([10, 23, 2, 7, 90, 65, 32, 66, 70]) 2-1. 1차원 array 방법 1: 추출하고 싶은 index의 집합을 **[꺾쇠 괄호로]**묶어서 추출 1arr[[1, 3, 5]] array([23, 7, 65]) 방법 2: 추출하고 싶은 index의 집합을 변수에 지정한 후 추출 1idx = [1, 3, 5] 1arr[index] array([23, 7, 65]) 2-2. 2차원 array 123arr2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) 1arr2d[[0,1], :] array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1arr2d[:, [1,3]] array([[ 2, 4], [ 6, 8], [10, 12]]) 3. Boolean 인덱싱 조건 필터링을 통하여 Boolean값을 이용한 색인 1arr = np.array([1, 2, 3, 4, 5, 6, 7]) 123arr2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) 3-1. True와 False값으로 색인하기 boolean index의 수가 꼭 array의 index와 같아야 됨! 1myTrueFalse = [True, False, True] 1arr[myTrueFalse] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-43-9c52b39d81ae&gt; in &lt;module&gt; ----&gt; 1 arr[myTrueFalse] IndexError: boolean index did not match indexed array along dimension 0; dimension is 7 but corresponding boolean dimension is 3 1myTrueFalse = [True, False, True, False, True, False, True] 1arr[myTrueFalse] array([1, 3, 5, 7]) 3-2. 조건필터 조건 연산자를 활용하여 필터를 생성할 수 있다 1arr2d array([[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12]]) 1arr2d &gt; 2 # \"2보다 크다\"라는 조건의 만족여부에 따라 Boolean index 생성 array([[False, False, True, True], [ True, True, True, True], [ True, True, True, True]]) 위 Boolean index를 다시 array에 적용하여 해당 부분을 추출: arr2d[조건필터] 1arr2d[arr2d &gt; 2] # 1차원 array로 반환 array([ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) 1arr2d[arr2d &lt; 5] array([1, 2, 3, 4]) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"https://hyemin-kim.github.io/tags/Numpy/"}]},{"title":"Python >> Numpy - (1) Numpy. array","slug":"S-Python-Numpy1","date":"2020-05-18T15:07:32.000Z","updated":"2020-06-11T17:09:39.042Z","comments":true,"path":"2020/05/19/S-Python-Numpy1/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/19/S-Python-Numpy1/","excerpt":"Numpy개요. Numpy import하기. nd array 생성. array에서의 데이터 타입","text":"Numpy개요. Numpy import하기. nd array 생성. array에서의 데이터 타입 목록 1. Numpy 개요 1-1. Numpy이란? 1-2. 별칭 - np 1-3. array (배열) 1-4. shape(차원) &amp; axis(축) 2. Numpy import하기 2-1. 별칭 (alias) 지정하기 (항상 해주세요!) 3. ndarray 생성하기 – \"np.array([…])\" 3-1. list로 부터 생성하기 – “np.array(list_name)” 3-2. shape확인하기 – “array_name .shape” 4. array에서의 data type 4-1. list에서의 data type 4-2. array에서의 data type case 1. int와 float타입이 혼재된 경우 case 2. int와 float 타입이 혼재되었으나, dtype을 지정한 경우 case 3. int / float 와 str 타입이 혼재된 경우 case 4. int와 str 타입이 혼재되어 있고 dtype이 int로 지정한 경우 1. Numpy 개요 1-1. Numpy이란? Numpy: 수학, 과학 계산용 패키지 ​ 1-2. 별칭 - np 1import numpy as np 1-3. array (배열) 배열: 여러 값들의 그룹 &lt; 1차원 배열 &gt; numpy.array([1, 2, 3, 4]) &lt; 2차원 배열 &gt; numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) &lt; n차원 배열 &gt; (nd array: n dimention array) 1-4. shape(차원) &amp; axis(축) shape은 차원의 수 를 확인 (3, ) =&gt; 3 X 1의 배열 (4,3) =&gt; 4 X 3의 배열 (2,5,3) =&gt; 2 X 5 X 3의 배열 axis는 기준이 되는 축 axis는 앞에서 부터 0, 1, 2… nd array의 축: axis 0, axis 1, axis 2, … axis n 2. Numpy import하기 1import numpy 1numpy &lt;module 'numpy' from 'D:\\\\Anaconda\\\\lib\\\\site-packages\\\\numpy\\\\__init__.py'&gt; 2-1. 별칭 (alias) 지정하기 (항상 해주세요!) 1import numpy as np 1np &lt;module 'numpy' from 'D:\\\\Anaconda\\\\lib\\\\site-packages\\\\numpy\\\\__init__.py'&gt; 3. ndarray 생성하기 – \"np.array([…])\" 1arr = np.array([1,2,3,4], dtype=int) 1arr # 주의: list와 다름 array([1, 2, 3, 4]) 1[1, 2, 3, 4] # list [1, 2, 3, 4] 1type(arr) numpy.ndarray 3-1. list로 부터 생성하기 – “np.array(list_name)” 1mylist1 = [1, 2, 3, 4] 12mylist2 = [[1, 2, 3, 4], [5, 6, 7, 8]] 1arr1 = np.array(mylist1) 1arr1 array([1, 2, 3, 4]) 1arr2 = np.array(mylist2) 1arr2 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 3-2. shape확인하기 – “array_name .shape” 1arr1.shape (4,) 1arr2.shape (2, 4) 4. array에서의 data type array에서는 list와 다르게 1개의 단일 데이터 타입 만 허용 된다 4-1. list에서의 data type 1mylist = [1, 3.14, '사과', '1234'] 1mylist [1, 3.14, '사과', '1234'] 1mylist[0] 1 1mylist[2] '사과' 4-2. array에서의 data type case 1. int와 float타입이 혼재된 경우 int와 float타입이 혼재된 경우 int(정수)가 float(실수)로 바꿔진다 1arr = np.array([1, 2, 3, 3.14]) 1arr # 정수가 실수로 바꿔진다 array([1. , 2. , 3. , 3.14]) ​ case 2. int와 float 타입이 혼재되었으나, dtype을 지정한 경우 int와 float 타입이 혼재되었으나, dtype가 int로 지정된 경우, float의 앞에 정수 부분만 보류된다 1arr = np.array([1, 2, 3, 3.14], dtype = int) 1arr array([1, 2, 3, 3]) case 3. int / float 와 str 타입이 혼재된 경우 int / float 와 float타입이 혼재된 경우 int(정수)가 str(문자열)로 바꿔진다 1arr = np.array([1, 3.14, '사과', '1234']) 1arr array(['1', '3.14', '사과', '1234'], dtype='&lt;U32') 1arr[0] + arr[1] #str로 되어버려서 숫자의 사치연산이 안됨 '13.14' case 4. int와 str 타입이 혼재되어 있고 dtype이 int로 지정한 경우 (1) 문자내용인 str이 존재한 경우 error 발생 1arr = np.array([1, 3.14, '사과', '1234', '5.8'], dtype = int) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-50-88e75a912236&gt; in &lt;module&gt; ----&gt; 1 arr = np.array([1, 3.14, '사과', '1234', '5.8'], dtype = int) ValueError: invalid literal for int() with base 10: '사과' (2) 실수(float)내용인 str이 존재한 경우도 error발생 1arr = np.array([1, 3.14, '1234', '5.8'], dtype = int) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-52-98017763e514&gt; in &lt;module&gt; ----&gt; 1 arr = np.array([1, 3.14, '1234', '5.8'], dtype = int) ValueError: invalid literal for int() with base 10: '5.8' (3) 정수(int)내용인 str만 존재한 경우 해당 str이 자동으로 int로 바꿔짐 1arr = np.array([1, 3.14, '1234'], dtype = int) 1arr array([ 1, 3, 1234]) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"https://hyemin-kim.github.io/tags/Numpy/"}]},{"title":"Python 기초문법 - (6) Package","slug":"S-Python-base6","date":"2020-05-16T04:52:05.000Z","updated":"2020-06-11T17:10:50.910Z","comments":true,"path":"2020/05/16/S-Python-base6/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/16/S-Python-base6/","excerpt":"패키지(Package) 와 import","text":"패키지(Package) 와 import 목록 1. 패키지와 모듈 그리고 함수의 관계도 2. 모듈 import 하기 3. 패키지 에서 import하기 4. 별칭 (alias) 지어주기 5. 앞으로 자주 사용할 패키지, 모듈 미리보기 패키지(Package) 와 import 1. 패키지와 모듈 그리고 함수의 관계도 함수들이 뭉쳐진 하나의 .py파일 안에 이루어진 것을 모듈이라고 한다 여러 개의 모듈을 그룹화 하면 패키지가 된다 패키지는 종종 라이브러비라고도 불린다 123from IPython.display import Image# 출척: pythonstudy.xyzImage('http://pythonstudy.xyz/images/basics/python-package.png') 2. 모듈 import 하기 import 하는 방법 .py (파이썬 파일 확장자)로 된 파일을 우리는 모듈 이라고 한다, import 구문을 통해 해당 파일을 불러올 수 있다 1import pandas 위의 코드는 pandas라는 모듈을 우리가 불러오겠다라는 의미이다 3. 패키지 에서 import하기 패키지 안에서 하나의 모듈을 불러온다 1from pandas import DataFrame # pandas라는 패키지 안에서 DataFrame이라는 모듈을 불러온다 1DataFrame() # 모듈 DataFrame사용 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 통째로 패키지나 모듈을 불러온다 1import pandas 1pandas.DataFrame() # DataFrame이라는 모듈을 사용하기 위해서는 .을 찍고 이어서 쓰면 됨 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 4. 별칭 (alias) 지어주기 pandas라는 패키지 이름이 너무 길기 때문에 우리는 약어로 줄여쓸 수 있다. 보통 pd를 보편적으로 많이 사용한다. 줄여서 별명을 지어줄 때는 as를 붙혀준다 1import pandas as pd 1pd.DataFrame() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 5. 앞으로 자주 사용할 패키지, 모듈 미리보기 1234import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns numpy: 과학계산을 위한 패키지 pandas: 데이터 분석을 할 때 가장 많이 쓰이는 패키지 matplotlib: 시각확를 위한 패키지 seaborn: 시각화를 위한 패키지 (matplotlib을 더 쉽게 사용할 수 있도록 도와주는 패키지) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"Python 기초문법 - (5) List Comprehension. 문자열","slug":"S-Python-base5","date":"2020-05-13T16:37:58.000Z","updated":"2020-06-11T17:10:41.561Z","comments":true,"path":"2020/05/14/S-Python-base5/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/14/S-Python-base5/","excerpt":"List Comprehension (List에 조건필터를 적용). 문자열을 가지고 노는 방법.","text":"List Comprehension (List에 조건필터를 적용). 문자열을 가지고 노는 방법. 목록 1. List Comprehension (파이썬 고유의 아름다운 문법) 1-1. list comprehension 조건필터 1-2. [STEP 1] list를 만들어야 하니 일단 꺾쇠[ ]를 씌운다 1-3. [STEP 2] 조건 필터를 걸어 준다 1-4. [응용 STEP] 변수 값을 가공할 수도 있다 2. 문자열(string)을 가지고 놀기 2-1. 문자의 길이 2-2. 문장 쪼개기 – “.split” 2-3. 대문자 / 소문자로 만들기 – “.upper” / “.lower” 2.4. ~로 시작하는, ~로 끝나는 – “.startswith” , “.endswith” 2-5. 바꾸기 – “.replace(‘바꿀 대상, 바꿔야할 값’)” 2-6. 불필요한 공백 제거하기 – “.strip” 1. List Comprehension (파이썬 고유의 아름다운 문법) for ~ in 구조를 기본적으로 가지고 있다 List Comprehension 이니까 당연히 List를 사용한다 [실제 사례 연구] mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 이라는 list를 만들어 주고 우리는 이 중 짝수만 출력하고 싶으면 아래와 같이 쓸 수 있다: 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 123for i in mylist: if i % 2 == 0: print(i) 2 4 6 8 10 그럼 mylist에서 짝수만 뽑아서 list로 만들어 주고 싶다면: 12345678mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]even = []for i in mylist: if i % 2 == 0: even.append(i)print(even) [2, 4, 6, 8, 10] 이렇게 for in 문으로 해줄 수 있다. 하지만, 우리는 list comprehension을 통해 더욱 쉽게 해결 할 수 있다!! 1-1. list comprehension 조건필터 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 아래 문법이 바로 list comprehension 이다. 한 줄로 해결해 버리는 것이 매력임! 1even = [i for i in mylist if i % 2 == 0] 1even [2, 4, 6, 8, 10] 1-2. [STEP 1] list를 만들어야 하니 일단 꺾쇠[ ]를 씌운다 꺾쇠 안에 반복문이 들어간다 반복문을 돌면서 return 된 i값을 list에 넣는 원리이기 때문에 for구분 앞에 i를 써준다 1even = [i for i in mylist] 1even [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 1-3. [STEP 2] 조건 필터를 걸어 준다 [i for i in mylist (이곳에 조건문)] 1[i for i in mylist if i % 2 == 0] [2, 4, 6, 8, 10] 이것을 변수에 다시 할당해주면 끝! 1even = [i for i in mylist if i % 2 == 0] 1even [2, 4, 6, 8, 10] 1-4. [응용 STEP] 변수 값을 가공할 수도 있다 예를 들어: mylist의 모든 값에 +2를 하고 다시 even이라는 list에 저장하고 싶다면 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 1even = [i+2 for i in mylist] 1even [3, 4, 5, 6, 7, 8, 9, 10, 11, 12] 2. 문자열(string)을 가지고 놀기 2-1. 문자의 길이 1a = 'banana' 1len(a) 6 1a = 'banana pen' 1len(a) # 공백도 count된다 10 1b = '한글' 1len(b) 2 1b = '한글 바나나' 1len(b) 6 2-2. 문장 쪼개기 – “.split” split은 문장을 특정 규칙에 의해 쪼개 주는 기능을 한다 명령어: 변수명.split(‘쪼개는 기준’) 쪼개는 기준이 설정되어 있지 않으면 그냥 '빈칸’으로 인식된다 1a = 'This is a pen' 1a.split(' ') ['This', 'is', 'a', 'pen'] 1a.split() ['This', 'is', 'a', 'pen'] 1b = 'This-is-a-pen' 1b.split('-') ['This', 'is', 'a', 'pen'] return된 값을 list형식으로 저장한다 1aa = a.split(' ') 1aa ['This', 'is', 'a', 'pen'] 1aa[0] 'This' 1aa[2] 'a' 1aa[0] + aa[2] 'Thisa' 1c = '한글은 어떻게 될까요?' 1c.split() ['한글은', '어떻게', '될까요?'] 2-3. 대문자 / 소문자로 만들기 – “.upper” / “.lower” 1a = 'My name is hyemin' 1a.upper() 'MY NAME IS HYEMIN' 1a.lower() 'my name is hyemin' 1b = '한글엔 대소문자가 없어요ㅠ' 1b.upper() '한글엔 대소문자가 없어요ㅠ' 1b.lower() '한글엔 대소문자가 없어요ㅠ' 2.4. ~로 시작하는, ~로 끝나는 – “.startswith” , “.endswith” 123a = '01-sample.png'b = '02-sample.jpg'c = '03-sample.pdf' 1a.startswith('01') True 1a.endswith('.jpg') False 1b.endswith('.jpg') True 조건(혹은 형식)에 맞는 파일을 추출하고 싶을 때: 1mylist = [a, b] 123for file in mylist: if file.endswith('jpg'): print(file) 02-sample.jpg 2-5. 바꾸기 – “.replace(‘바꿀 대상, 바꿔야할 값’)” [예] file형식을 바꾸고 싶다면: 1a = '01-sample.png' 1a.replace('.png', '.jpg') '01-sample.jpg' 이 때 a의 값이 변하지 않아. 다시 할당 해야 함 1a '01-sample.png' 1a_new = a.replace('.png', '.jpg') # 새로 지정 1a_new '01-sample.jpg' 1a = a.replace('.png', '.jpg') # 덮어쒸우기 1a '01-sample.jpg' 2-6. 불필요한 공백 제거하기 – “.strip” [예] 12a = ' 01-sample.png'b = '01-sample.png' 1a == b False strip은 양 끝 불필요한 공백을 제거해 줌. 1a.strip() '01-sample.png' 1a.strip() == b True document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"Python 기초문법 - (4) 비교/논리 연산자. 조건문. 반복문","slug":"S-Python-base4","date":"2020-05-13T08:25:46.000Z","updated":"2020-06-11T17:10:35.405Z","comments":true,"path":"2020/05/13/S-Python-base4/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/13/S-Python-base4/","excerpt":"비교연산자. 조건문. 논리연산자. 반복문","text":"비교연산자. 조건문. 논리연산자. 반복문 목록 1. 비교연산자 1-1. 대소비교 &gt;, &gt;=, &lt;, &lt;= 1-2. 같다 == 1-3. 같지 않다 != 2. 조건문 2-1. 개념 2-2. if 2-3. else 2-4. elif 2-5. 1이나 0은 참이나 거짓을 표현하기도 한다 3. 논리 연산자 (and, or) 3-1. and 3-2. or 4. 반복문 4-1. 반복문이란? 4-2. for 와 in을 활용하자! 4-3. 반복문에서 짝수만 출력하려면? (continue구문) 4-4. 조건을 충족시 순환에서 빠져나와보자! (break구문) 1. 비교연산자 비교 연산자는 주로 대소비교를 할 때 사용한다. 1-1. 대소비교 &gt;, &gt;=, &lt;, &lt;= 11 &gt; 2 False 110 &gt;= 10 True 19 &lt; 10 True 18 &lt;= 7 False 1-2. 같다 == 주의: = 는 대입연산자. == 는 비교연산자 중의 “같다” 숫자형 &amp; 문자형 모두 비교 가능 12 = 2 File \"&lt;ipython-input-6-a8e553549e25&gt;\", line 1 2 = 2 ^ SyntaxError: can't assign to literal 12 == 2 True 12 == 3 False 1\"나\" == \"나\" True 1-3. 같지 않다 != 숫자형 &amp; 문자형 모두 비교 가능 12 != 2 False 12 != 3 True 1\"나\" != \"너\" True 2. 조건문 2-1. 개념 주어진 조건이 참인 경우 그 다음 내가 규칙(로직)을 실행하는 개념이다 2-2. if if는 어떤 조건이 성립한다면 ~이라는 의미 if구문 끝에는 반드시 콜론( : )이 있어야 함 12if 5 &gt; 3: print('참') 참 if구문 뒤에 indent가 있는 명령어는 if조건이 성립하면 실행 indent가 없으면 if의 성립여부와 무관하여 무조건 실행 12345if 5 &gt; 3: print('참') print('참') print('끝') 참 참 끝 12345if 5 &lt; 3: print('참') print('참') print('끝') # 앞에 indent가 없으면 if의 성립여부와 무관하여 실행 끝 2-3. else else는 if 조견 후에 따라오면, if가 아닌 경우에 실행 됨 1234if 5 &lt; 3: print(\"성립한다\")else: print(\"성립하지 않은다\") 성립하지 않은다 else는 꼭 if랑 같이 써야함. 단독으로 실행할 수 없음 12else: print(\"성립하지 않은다\") File \"&lt;ipython-input-22-6c0f4debaa4b&gt;\", line 1 else: ^ SyntaxError: invalid syntax 2-4. elif elif구문은 3가지 이상 문기(조건)의 동작을 수행할 때 사용 123456if 3 &gt; 5: print('if 구문')elif 3 &lt; 4: print('elif 구문')else: print('이것도 저것도 아니다') elif 구문 그럼, elif구문이 참인 여러 구문을 나열 했을 때는 어떻게 될까? 12345678910if 3 &gt; 5: print('if 구문')elif 3 &lt; 4: print('elif 1 구문')elif 3 &lt; 5: print('elif 2 구문')elif 3 &lt; 6: print('elif 3 구문')else: print('이것도 저것도 아니다') elif 1 구문 elif구문이 참인 여러 구문을 나열 했을 때는 첫번째 참인 elif구문만 실행됨 2-5. 1이나 0은 참이나 거짓을 표현하기도 한다 1234if 1: print('참')else: print('거짓') 참 1234if 0: print('참')else: print('거짓') 거짓 3. 논리 연산자 (and, or) and나 or조건은 두 가지 이상 조건을 다룰 때 활용한다 3-1. and and 조건은 모두 만족할 때 참으로 인식한다 1True and True and True True 1True and False and True False 1234if (0 &lt; 1) and (0 &lt; 2): print('모두 참')else: print('거짓') 모두 참 1234if (0 &lt; 1) and (0 &gt; 2): print('모두 참')else: print('거짓') 거짓 3-2. or or조건은 조건 중 하나라도 만족할 때 참으로 인식한다 1True or False or False True 1False or False or False False 1234if (0 &lt; 1) or (0 &gt; 2): print('하나라도 참')else: print('모두 거짓') 하나라도 참 1234if (0 &gt; 1) or (0 &gt; 2): print('하나라도 참')else: print('모두 거짓') 모두 거짓 4. 반복문 4-1. 반복문이란? 일을 반복 처리 해준다는 것 대상은 반드시 list, dict, set등 집합이어야 한다 [예] 반복문 쓰지 않을 때: 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] mylist에 들어 닜는 모든 값들을 출력하려고 한다면? 123456print(mylist[0])print(mylist[1])print(mylist[2])print('...')print(mylist[8])print(mylist[9]) 1 2 3 ... 9 10 반복문은 노가다를 획기적으로 줄여주는 방법이다! 4-2. for 와 in을 활용하자! [기본 문법] for 지정한 변수명 in [꺼내올 집합]: 명령어 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 12for i in mylist: print(i) 1 2 3 4 5 6 7 8 9 10 4-3. 반복문에서 짝수만 출력하려면? (continue구문) 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 방법1: 123for i in mylist: if i % 2 == 0: print(i) 2 4 6 8 10 방법2: continue구문을 사용하면 조건이 충족할 때 아래 명령어를 SKIP하고 다시 다음 순환으로 넘어간다 1234for i in mylist: if i % 2 == 1: continue print(i) 2 4 6 8 10 4-4. 조건을 충족시 순환에서 빠져나와보자! (break구문) 1mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] i가 6 이상이면 STOP 1234for i in mylist: if i &gt;= 6: # i &gt; 6 이면 6까지 출력한다 break print(i) 1 2 3 4 5 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"Python 기초문법 - (3) 함수","slug":"S-Python-base3","date":"2020-05-13T07:16:31.000Z","updated":"2020-06-11T17:10:29.795Z","comments":true,"path":"2020/05/13/S-Python-base3/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/13/S-Python-base3/","excerpt":"함수의 기초","text":"함수의 기초 목록 1. 함수란 무엇일까? 2. 함수 정의: def (define) 3. 함수는 값을 return할 수 있고, 안해도 됨 4. parameter가 여러 개 있으면, 함수에 넘겨 줄 때 순서가 중요 함수 1. 함수란 무엇일까? 반복적으로 사용되는 부문을 묶어서, 재사용 가능하도록 만들어 주는 것 함수에는 **들어가는 놈 (input)**이 있고, **나오는 놈 (output 혹은 return)**이 있다. 전해진 로직(규칙)에 따라, input -&gt; output으로 효율적으로 바꿔주는 역할을 한다 [예시] 함수 없이 계산할 때 123a = 1b = 2c = 3 1(a + b) * c 9 123a = 2b = 2c = 3 1(a + b) * c 12 함수로 변경 후 12def func(a, b, c): return (a + b) * c 1func(1, 2, 3) 9 1func(2, 2, 3) 12 2. 함수 정의: def (define) 사용법: def 함수이름 (parameter1, parameter2, parameter3…): parameter는 함수로 부터 넘겨 받은 변수 또는 값이다 끝에 콜론 ( : ) 빼먹지 않음에 주의 해야함! 12def myfunc(var1): print(var1) # 실행 명령 1myfunc(\"안녕하세요\") 안녕하세요 3. 함수는 값을 return할 수 있고, 안해도 됨 리턴이 없는 경우 12def my_func(a, b): print(a, b) 1my_func(1,10) 1 10 리턴이 있는 경우 123def my_func(a, b): s = a + b return s 1my_func(2, 3) 5 리턴이 있는 경우는 변수에 값을 다시 할당 할 수 있음 1result = my_func(2,3) 1print(result) 5 1print(result + 10) 15 4. parameter가 여러 개 있으면, 함수에 넘겨 줄 때 순서가 중요 12def my_func(a, b, c): return (a + b) * c 123a = 10b = 20c = 3 1(a + b) * c 90 1my_func(a, b, c) 90 1my_func(c, b, a) # (c + b) * a = (3 + 20) * 10 230 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"Python 기초문법 - (2) 집합 형태의 데이터 타입","slug":"S-Python-base2","date":"2020-05-12T17:26:49.000Z","updated":"2020-06-11T17:10:22.797Z","comments":true,"path":"2020/05/13/S-Python-base2/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/13/S-Python-base2/","excerpt":"","text":"집합 형태의 데이터 타입 1. list (순서가 있는 집합) 1-1. [ ] 형테로 표현 1-2. 값 추가 – “.append( )” 1-3. 값 제거 – “.remove” / “.clear” 1-4. 인덱싱(Indexing) -&gt; 색인 1-5. 인덱스로 접근하여 값 바꾸기 1-6. 길이 파악하기 2. tuple (순서가 있는 집합, 읽기 전용) 2-1. ( ) 형태로 표현 2-2. 읽기 전용이라 “값 추가”, “값 제거”, “값 바꾸기” 모두 안됨 2-3. 길이 파악하기 3. set (순서 X, 중복 X) 3-1. set의 할당: set() 3-2. 값 추가 – \".add \" 3-3. 값 제거 – “.remove” / “.clear” 4. dict (사전형 집합, key와 value 쌍) 4-1. { } 형태로 표헌 4-2. 값 추가 (key와 value 모두 지정) 4-3. 값 바꾸기 4-4. 값 제거 – “.pop” / “.clear” 4-5. 길이 파악하기 짐합 형태의 데이터 타입 list (순서 O, 짐합) tuple (순서 X, 읽기 전용 집합) set (순서 X, 중복 X 집합) dict (key, value로 이루어진 사전형 집합) 1. list (순서가 있는 집합) 1-1. [ ] 형테로 표현 1mylist = [] 1mylist [] 1type(mylist) list 12mylist = [1,2,3,4,5]mylist [1, 2, 3, 4, 5] 12mylist2 = [5,4,3,2,1] # 순서가 있다mylist2 [5, 4, 3, 2, 1] 1-2. 값 추가 – “.append( )” 12mylist = []mylist [] 12mylist.append(1)mylist [1] 123mylist.append(2)mylist.append(3)mylist [1, 2, 3] .append 함수 안에 1 argument만 들어갈 수 있다 12mylist.append(4,5)mylist --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-22-6f00703728b8&gt; in &lt;module&gt; ----&gt; 1 mylist.append(4,5) 2 mylist TypeError: append() takes exactly one argument (2 given) 1-3. 값 제거 – “.remove” / “.clear” 부분 제거 – \".remove\" 1mylist [1, 2, 3] 12mylist.remove(1)mylist [2, 3] 전부 제거 – \".clear\" 1mylist.clear() 1mylist [] 같은 값이 여러 개 포함되어 있을 때의 제거 순서 앞에서 부터 순차적으로 제거 됨 12mylist = [1,2,3,1,2,3]mylist [1, 2, 3, 1, 2, 3] 12mylist.remove(1)mylist [2, 3, 1, 2, 3] 12mylist.remove(1)mylist [2, 3, 2, 3] 1-4. 인덱싱(Indexing) -&gt; 색인 인덱스는 0번 부터 시작한다 1mylist = [1,2,3,4] # 인덱스: 0번, 1번, 2번, 3번 1mylist[0] 1 1mylist[3] 4 1mylist[4] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-34-88b11041aa4f&gt; in &lt;module&gt; ----&gt; 1 mylist[4] IndexError: list index out of range 인덱스가 음수일 경우: 뒤에서 부터 n번째 1mylist[-1] 4 1-5. 인덱스로 접근하여 값 바꾸기 1mylist [1, 2, 3, 4] 1mylist[0] 1 1mylist[0] = 100 1mylist [100, 2, 3, 4] 1-6. 길이 파악하기 1mylist [100, 2, 3, 4] 1len(mylist) # length 4 2. tuple (순서가 있는 집합, 읽기 전용) 2-1. ( ) 형태로 표현 1mytuple = (1,2,3,4,5) 2-2. 읽기 전용이라 “값 추가”, “값 제거”, “값 바꾸기” 모두 안됨 1mytuple.append(1) # 읽기 전용이라 값을 추가할 수 없음 --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) &lt;ipython-input-45-d0f55ea1e3f6&gt; in &lt;module&gt; ----&gt; 1 mytuple.append(1) # 읽기 전용이라 값을 추가할 수 없음 AttributeError: 'tuple' object has no attribute 'append' 1mytuple.remove(1) --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) &lt;ipython-input-46-05a40423345b&gt; in &lt;module&gt; ----&gt; 1 mytuple.remove(1) AttributeError: 'tuple' object has no attribute 'remove' 1mytuple[0] = 100 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-48-4e527888818c&gt; in &lt;module&gt; ----&gt; 1 mytuple[0] = 100 TypeError: 'tuple' object does not support item assignment 2-3. 길이 파악하기 1mytuple (1, 2, 3, 4, 5) 1len(mytuple) 5 3. set (순서 X, 중복 X) 3-1. set의 할당: set() 12myset = set()myset set() 1type(myset) set 3-2. 값 추가 – \".add \" 1234myset.add(1)myset.add(2)myset.add(3)myset {1, 2, 3} 1234567myset.add(1) myset.add(2)myset.add(3)myset.add(1) # 중복된 값을 한번만 기록myset.add(2)myset.add(3)myset {1, 2, 3} 12myset.add(4)myset {1, 2, 3, 4} 3-3. 값 제거 – “.remove” / “.clear” 부분 제거 – \".remove\" 1myset {1, 2, 3, 4} 1myset.remove(3) 1myset {1, 2, 4} 전부 제거 – \".clear\" 1mylist.clear() 1mylist [] 4. dict (사전형 집합, key와 value 쌍) 4-1. { } 형태로 표헌 1mydict = dict() 1mydict {} 1type(mydict) dict 4-2. 값 추가 (key와 value 모두 지정) mydict [ \" key \" ] = value key는 문자형 (str) / 숫자형 (int &amp; float) 모두 가능 1mydict[\"apple\"] = 123 1mydict {'apple': 123} 1mydict[\"apple\"] 123 1mydict[0] = 2 1mydict {'apple': 123, 0: 2} 1mydict[0] 2 1mydict[3.14] = 1 1mydict {'apple': 123, 0: 2, 3.14: 1} 1mydict[3.14] 1 4-3. 값 바꾸기 새 값을 해당 key에 할당하기 1mydict[\"apple\"] = \"hello\" 1mydict {'apple': 'hello', 0: 2, 3.14: 1} 4-4. 값 제거 – “.pop” / “.clear” 부분 제거 – \".pop\" 1mydict.pop('apple') 'hello' 1mydict {0: 2, 3.14: 1} 1mydict.pop(0) 2 1mydict {3.14: 1} 전부 제거 – \".clear\" 1mydict.clear() 1mydict {} 4-5. 길이 파악하기 123mydict[\"apple\"] = 123mydict[0] = 2mydict[3.14] = 1 1mydict {'apple': 'hello', 0: 2, 3.14: 1} 1len(mydict) 3 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"Python 기초문법 - (1) 출력. 데이터 타입. 데이터의 응용","slug":"S-Python-base1","date":"2020-05-11T17:18:11.000Z","updated":"2020-06-11T17:10:13.174Z","comments":true,"path":"2020/05/12/S-Python-base1/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/12/S-Python-base1/","excerpt":"출력. 변수. 데이터 타입. 데이터의 응용. 데이터 타입의 변환.","text":"출력. 변수. 데이터 타입. 데이터의 응용. 데이터 타입의 변환. 목록 1. 출력 (print) print( ) 함수 2. 변수와 대입 2-1. 변수의 이름 【가능한 경우】 【불가한 경우】 2-2. 변수의 대입 2-3. 변수의 출력 3. 데이터 타입 3-1. int(정수) 3-2. float(실수) 3-3. str 혹은 object (문자열) 3-4. bool (참/거짓) 3-5. 아무것도 아닌 None타입도 있다 4. 데이터의 응용 4-1. 사칙 연산자 4-2. 문자열의 연결 5. 데이터 타입 변환 5-1. 문자열로 변환: “str( ) 함수” or “따움표” 5-2. 정수로 변환: \" int( ) 함수\" 5-3. 실수로 변환: “float( ) 함수” 1. 출력 (print) print( ) 함수 숫자를 출력할 때 따움표(’ ’ or \" \") 필요없음 문자를 출력할 때 따움표 필요 ’ ’ 와 \" \" 차이없음 ‘’’ ‘’’ 를 사용하면 출력시 “줄 바꿈” 형식이 보류될 수 있음 1print(1) 1 1print(1+2) 3 1print('안녕하세요') 안녕하세요 1print(\"반갑습니다\") 반갑습니다 1234print('''안녕하세요,반갑습니다.''') 안녕하세요, 반갑습니다. 2. 변수와 대입 2-1. 변수의 이름 【가능한 경우】 case 1. 알파벳 1a = 1 1A = 1 case 2. 알파벳 + 숫자 1a1 = 1 case 3. 알파벳 + 언더바(_) 1a_ = 1 case 4. 언더바(_) + 알파벳 1_a = 1 【불가한 경우】 case 1. 언더바(_)를 제외한 특수문자 1* = 1 File \"&lt;ipython-input-23-6d0163a9fd4c&gt;\", line 1 * = 1 ^ SyntaxError: invalid syntax case 2. 알파벳 + 언더바를 제외한 특수문자 1a$ = 1 File \"&lt;ipython-input-25-2501fc576aab&gt;\", line 1 a$ = 1 ^ SyntaxError: invalid syntax case 3. 변수의 이름 사이의 공백 1a b = 1 File \"&lt;ipython-input-26-2bab97d7970c&gt;\", line 1 a b = 1 ^ SyntaxError: invalid syntax 2-2. 변수의 대입 변수 값을 부여할 때 \"=\"를 사용한다 1a = 1 2-3. 변수의 출력 print() 구문 사이에 값을 직접 입력하면, 바로 값이 출력됨. 1print(123) # 숫자는 \"\" 필요없음 123 1print(\"text\") # 문자는 \"\" 필요함 text print()구분 사이에 변수 이름을 입력하면, 변수의 값이 출력됨. 12a = 123print(a) 123 12b = \"text\"print(b) text 3. 데이터 타입 데이터 type: 1. int(정수) 2. float(실수) 3. str(문자열) 4. bool(참/거짓) 3-1. int(정수) 1a = 1 1type(a) int 1print(a) 1 코딩에서 1은 참으로 취급, 0은 거짓으로 취급 다음 코딩으로 진단해보자: 1234if 1: print('1은 참으로 취급')else: print('1은 거짓부렁이') 1은 참으로 취급 1234if 0: print('0은 참으로 취급')else: print('0은 거짓부렁이') 0은 거짓부렁이 1234if 123: print('123은 참으로 취급')else: print('123은 거짓부렁이') 123은 참으로 취급 [0 이외의 정수 다 참으로 취급] 3-2. float(실수) 1a = 3.14 1type(a) float 1print(a) 3.14 3-3. str 혹은 object (문자열) 문자열은 반드시 ’ ’ 혹은 \" \" 로 묶어야 함 1word = '안녕하세요' 1type(word) str 1print(word) 안녕하세요 1word = \"안녕하세요\" 1type(word) str 1print(word) 안녕하세요 ’\" \"’ 를 사용하면 출력시 “줄 바꿈” 형식이 보류될 수 있음 1234print('''안녕하세요,반갑습니다.''') 안녕하세요, 반갑습니다. 3-4. bool (참/거짓) 참: True 거짓: False 1a = True 1a True 1type(a) bool 1b = False 1b False 1type(b) bool 11 == True True 10 == False True 1123 == True False 1 이외의 정수는 조건절에서 참으로 인식되지만, bool과 비교할 때 참이 아니다 3-5. 아무것도 아닌 None타입도 있다 Null값을 넣는다고도 한다. Null: Nullify (무효화하다) – 사전상 의미 Python에서는 None 입니다 1a = None 1print(a) None 1type(a) NoneType 조건문에 None이라면? 1234if None: print(\"None은 참으로 취급\")else: print(\"None은 거짓부렁이\") None은 거짓부렁이 4. 데이터의 응용 4-1. 사칙 연산자 연산자 의미 예 + 더하기 2 + 1 -&gt; 3 - 빼기 1 - 2 -&gt; -1 * 곱하기 1 * 2 -&gt; 2 / 나누기 1 / 2 -&gt; 0.5 % 몫 5 % 2 -&gt; 2 // 나머지 5 // 2 -&gt; 1 ** 멱 2**3 -&gt; 8 4-2. 문자열의 연결 여러 개 문자열을 \"+\"을 통해 연결할 수 있다 12345subject = \"나는 \"object = \"치킨을 \"verb = \"좋아한다\"print(subject + object + verb) 나는 치킨을 좋아한다 하지만 문자열(str)과 숫자(int &amp; float)는 직접 연결할 수 없다 1234567a = \"내가 \"b = \"친구랑 \"c = 12d = \"시에 \"e = \"보기로 했다\"print(a + b + c + d + e) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-82-34cd0f9ce519&gt; in &lt;module&gt; 5 e = \"보기로 했다\" 6 ----&gt; 7 print(a + b + c + d + e) TypeError: can only concatenate str (not \"int\") to str 이 때는 데이터 타입을 변환할 필요가 있다 5. 데이터 타입 변환 5-1. 문자열로 변환: “str( ) 함수” or “따움표” 1type(6) int 1type(str(6)) str 1type('6') str 1type(3.14) float 1type(str(3.14)) str 1type(\"3.14\") str 12345a = \"내가 \"b = \"친구랑 \"c = 12d = \"시에 \"e = \"보기로 했다\" 1print(a + b + str(c) + d + e) 내가 친구랑 12시에 보기로 했다 1print(a + b + '12' + d + e)a 내가 친구랑 12시에 보기로 했다 5-2. 정수로 변환: \" int( ) 함수\" \"str\" --&gt; “int”: str( ) 안 내용이 정수일 때만 가능 1type(int(\"2\")) int 12number1 = \"2\"number2 = \"3\" 1print(int(number1) + int(number2)) 5 1print(int(\"2.6\")) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-103-f4645c45f771&gt; in &lt;module&gt; ----&gt; 1 print(int(\"2.6\")) ValueError: invalid literal for int() with base 10: '2.6' \"float\" --&gt; “int”: 소수점 버림 1type(int(3.6)) int 1print(int(3.6)) 3 5-3. 실수로 변환: “float( ) 함수” \"str\" --&gt; “float”: str( ) 안 내용이 정수일 때만 가능 1type(float(\"3.14\")) float 1print(float(\"3.14\")) 3.14 \"int\" --&gt; “float”: 소수점 하나 추가 1type(float(178)) float 1print(float(178)) 178.0 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"}]},{"title":"利用Git Pages+Hexo搭建博客过程中的参考资料","slug":"Reference","date":"2020-05-07T17:16:53.000Z","updated":"2020-05-22T10:10:51.388Z","comments":true,"path":"2020/05/08/Reference/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/08/Reference/","excerpt":"","text":"博客搭建 bilibili — 超简单易懂的Git入门教程 bilibili — github+hexo搭建个人博客 bilibili — github博客搭建（二）：Markdown语法及hexo主题修改 Git Pages + Jekyll/Hexo搭建自己的博客(最全总结你想知道的都在这里了) 网页配置 &amp; 主题配置 Hexo Usage Documents Hexo Themes default — [Demo] tomotoes — [Demo] / [Documents] Butterfly — [Demo] / [Documents] (应用中) Git Pages + Jekyll/Hexo搭建自己的博客(最全总结你想知道的都在这里了) Hexo主题升级方法（实用！） Markdown渲染 bilibili — github博客搭建（二）：Markdown语法及hexo主题修改 [字体修改方法(17:30)] Markdown在Hexo中的使用实例 [分割线，空行插入方法] Markdown渲染插件 hexo-renderer-markdown-it 插件 快速配置 hexo-renderer-markdown-it [Documents] hexo-renderer-markdown-it-plus （应用中） hexo-renderer-markdown 插入本地图片 markdown插入本地图片小技巧 typora + hexo博客中插入图片（应用中） 其他 记录网站访问量: 不蒜子 hexo博客解决不蒜子统计无法显示问题 设置博客评论： Gitalk申请页面 在个人博客里添加评论系统–Gitalk hexo 使用 gitalk 评论组件的几个注意点 多语言版本: Hexo 巧用 abbrlink 插件实现文章多语言版本 (既然没人帮我，那就)自己弄了个 Hexo 多语言 index 生成插件 更改tag大小写后出现404页面 Hexo 部署到 Github Pages 文件夹大小写问题 更改博客 Front Page 的默认配置 hexo博客Front-matter模板配置 Git &amp; Github bilibili — 【教程】学会Git玩转Github【全】 bilibili — 超简单易懂的Git入门教程 Git与Github的连接与使用 Git和GitHub使用教程 Jupyter Notebook bilibili — python数据分析神器Jupyter notebook快速入门 bilibili —【冷门教学】记笔记神器-jupyter notebook 第二弹 史上最详细、最完全的jupyter notebook使用教程，Python使用者必备！——ipython系列之三 机器学习新手必看：Jupyter Notebook入门指南 Jupyter notebook简介及嵌入Hexo博客中 用 Hexo 搭建个人博客-02：进阶试验（包括添加Jupyter Notebook支持的方法） 如何在你的Jupyter Notebook中使用R语言？ Markdown &amp; Typora bilibili — 二十分钟精通排版神器Markdown Typora官网 [Documents] Typora中下载并安装主题 bilibili — Typora 编辑器 —— 书写即为美学 bilibili — 【软件教程】如何用Typora记笔记？ | 附带Markdown基础教程 Typora设置（中文字体、颜色、行距、内边距等） Markdown中插入本地图片 markdown插入本地图片小技巧 typora + hexo博客中插入图片 在此感谢所有提供了宝贵学习资料的原po主们~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Usage","slug":"【Study】/Usage","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Usage/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hyemin-kim.github.io/tags/Hexo/"},{"name":"Typora","slug":"Typora","permalink":"https://hyemin-kim.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://hyemin-kim.github.io/tags/Markdown/"},{"name":"Git","slug":"Git","permalink":"https://hyemin-kim.github.io/tags/Git/"},{"name":"Github","slug":"Github","permalink":"https://hyemin-kim.github.io/tags/Github/"},{"name":"Jupyter notebook","slug":"Jupyter-notebook","permalink":"https://hyemin-kim.github.io/tags/Jupyter-notebook/"}]},{"title":"在Hexo博文中添加本地图片的方法（基于Typora编辑器）","slug":"Hexo-Insert-local-images","date":"2020-05-06T12:20:48.531Z","updated":"2020-05-22T07:31:34.789Z","comments":true,"path":"2020/05/06/Hexo-Insert-local-images/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/06/Hexo-Insert-local-images/","excerpt":"当我们想在markdown文档中添加网络图片时，可以使用命令!['图片名称'](图片网络地址)进行实现，然而这条命令却不适用于添加本地图片。本文将介绍在使用Typora编辑器编辑Hexo博文时，向markdown文档中添加本地图片的方法。快来看看吧","text":"当我们想在markdown文档中添加网络图片时，可以使用命令!['图片名称'](图片网络地址)进行实现，然而这条命令却不适用于添加本地图片。本文将介绍在使用Typora编辑器编辑Hexo博文时，向markdown文档中添加本地图片的方法。快来看看吧 【编写博客前】— 进行配置 【编写博客时】— 图片导入方法 【编写博客后】— 图片存档结果 【编写博客前】— 进行配置 建立 资源文件夹(Asset Floder)，用来保存添加到博文中的本地图片 在本地Hexo根目录下的source文件夹中创建一个名为 images 的文件夹 在Typora中设置图片的相对路径 打开Typora的文件 &gt; 偏好设置 &gt; 图像，进行如下设置： 此设置会使source/images文件夹下新增一个与所编辑的markdown文档同名的文件夹，文档中所添加的 本地图片 都将存档于此（即拥有了如下路径：'hexo根目录'/source/images/'md文档名'/'图片名称'）)。 撰写markdown文档时配置 图片根目录 ，使其能够同步到hexo博客中去 撰写博文时，先点击Typora菜单栏中的格式 &gt; 图像 &gt; 设置图片根目录 , 将根目录配置为'hexo根目录'/source。然后再撰写博文。【注：每篇需要添加本地图片的博文都要先进行此步骤】 【编写博客时】— 图片导入方法 直接拖拽 将原本存放于其他本地文件夹中的图片直接拖拽到文档中的相应位置中去 此时图片会被自动存档至生成的同名文件夹'hexo根目录'/source/images/'md文档名'中 文档中图片地址的代码会显示成 自动生成的相对路径，即/images/'md文档名'/'图片名称' 利用相对路径调取 当利用 方法1 插入了至少一张图片时（即已生成同名文件夹时），便可以把接下来要插入的图片复制到此同名文件夹中，在文档中利用相对路径 调取图片： 所使用的命令是：![图片显示名称](/images/'md文档名'/'图片名称') 这里的图片显示名称不必与文件夹中保存的图片名称保持一致，'图片名称'中要记得包含图片格式（例如：tupian.jpg 或 picture.png 等） 【注意】当还没有利用 方法1 插入过图片时（即同名文件夹尚未生成时），不可以自己创建同名文件夹保存图片。亲测不好使！！（.md文档中可以显示，但是hexo博文中无法显示） 【编写博客后】— 图片存档结果 在利用上述方法完成了含有本地图片的markdown博文后，我们的资源文件夹'hexo根目录'/source/images/内最终会显示成什么样子呢？ 每一篇配置了图片根目录的博文（即【编写博客前】的第3步），都会在'hexo根目录'/source/images/文件夹中有一个与文档名称同名的文件夹'hexo根目录'/source/images/'md文档名' 该文件夹中会保存博文编写中曾经添加的所有本地图片 所有的含义是：即使编辑过程中某些本地图片在添加后又被删除了，它们也仍然会保留在文件夹中，即该文件夹会备份你在博文中添加的 所有本地图片历史 本地图片的含义是：这里只会保存插入的本地图片，而不会保存插入的网络图片。尽管在【编写博客前】的第2步配置中，我们也同样勾选了对网络位置的图片应用上述规则。（请原谅我并不知道其中的缘由。。） 就此，在Typora编辑器中编写Hexo博文时，向markdown文档中添加本地图片的方法就介绍完毕啦！快去应用到你的博文中去吧~ 本文参考了yinyoupoet的typora + hexo博客中插入图片 更多关于Typora中插入图片的内容可以参考Typora的官方说明 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Usage","slug":"【Study】/Usage","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Usage/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hyemin-kim.github.io/tags/Hexo/"},{"name":"Typora","slug":"Typora","permalink":"https://hyemin-kim.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://hyemin-kim.github.io/tags/Markdown/"}]},{"title":"Markdown 常用语法（持续更新）","slug":"Markdown-Syntax","date":"2020-05-03T16:40:07.372Z","updated":"2020-05-22T16:16:06.234Z","comments":true,"path":"2020/05/04/Markdown-Syntax/","link":"","permalink":"https://hyemin-kim.github.io/2020/05/04/Markdown-Syntax/","excerpt":"","text":"Markdown 常用语法 标题 一级标题： “#” + 空格 + “一级标题” 二级标题： “##” + 空格 + “二级标题” 三级标题： “###” + 空格 + “三级标题” …… 以此类推 【最多到6级】 换行 “内容” 末尾 + 2个空格 + Enter 斜体 方法一：“内容”前后加1个 * 号（无空格） 方法二：“内容”前后加1个下划线（无空格） *“内容” * ——&gt; “内容” _ “内容” _ ——&gt; 内容 加粗 方法一：“内容”前后加2个 * 号（无空格） 方法二：“内容”前后加2个下划线（无空格） ** “内容” ** ——&gt; \"内容\" __ “内容” __ ——&gt; “内容” 斜体加粗 “内容”前后加 3 个 * 号 （无空格） “内容” 删除线 ”内容”前后加 2 个波浪线（~） ~~ “内容” ~~ ——&gt; “内容” 高亮 “内容”前后加 2 个 = 号 == “内容” == ——&gt; “内容” 字体，颜色，字号 使用 font 标签 1&lt;font face='Microsift Yahei' color='red' size='6'&gt; 字体，颜色和字号 &lt;/font&gt; 字体，颜色和字号 上标 &amp; 下标 上标：“内容”前后加 1 个 ^ 号 下标：“内容”前后加 1 个 ~ 号 我是 ^ 上标 ^ ——&gt; 我是上标 我是 ~ 下标 ~ ——&gt; 我是下标 引用 “内容”前加 &gt; 号 “内容” 引用号可叠用，&gt;号越多，级数越低 例如：可以使用&gt;, &gt;&gt;, &gt;&gt;&gt; 的形式 一级引用 二级引用 三级引用 文字内容对齐设置 1. 使用div标签： 1&lt;div style=\"text-align: right\"&gt;your-text-here&lt;/div&gt; 居左 居中 居右 2. 使用p标签：(在Jupyter Notebook中不适用) 居中：&lt;center&gt; 内容 &lt;/center&gt; 居左/居右：&lt;p align='left'&gt; 内容 &lt;/p&gt; 居左 居中 居右 插入链接 ​ 中括号内输入“显示的文字”，紧接着小括号内输入“网址链接” ​ 【注意：网站地址需要 http 开头，最好直接复制】 点我进入百度 插入图片 ​ 感叹号 + 中括号内输入“显示的文字”，紧接着小括号内输入“图片链接” ​ 【注意：图片链接非网页的网址栏链接，而是右键“复制图片地址”得到的链接 (Chrome)】 调整图片大小： 1&lt;img src=\"链接\" width=\"宽度(数字or百分比)\" height=\"高度\" alt=\"图片名称\" align=center/left/right&gt; 列表 （1） 有序列表 ​ （序号1+点+空格）+内容+回车 ​ （序号2+点+空格）+内容+回车 ​ （序号3+点+空格）+内容+回车 第一行 第二行 第三行 ​ 【注意】：系统会默认调整有序列表的序列数。即，即使你误输入成了1.，2.，4.，系统也会自动更正为 1.，2.，3. 第一点 第二点 第四点 （2）无序列表 ​ 使用“ + ”+空格+内容 ​ ​ 或者“ - ”+空格+内容 ​ ​ 或者“ * ”+空格+内容 ​ 下一级：前面加 tab 第一章 第二章 第三章 第一节 （3）任务列表 ​ 短横线 + 1 个空格 + 中括号（括号中间带 1 个空格） + 1 个空格 + “内容” [x] 学习python [ ] 学习SQL 添加表格 竖线作为列分界线，换行竖线中间输入短横线作为行分界线 1 2 3 a b c d e f 代码 三个 ` 号，再输入所使用的编程语言 1print(\"Python\") # python 1install.packages(\"ggplot2\") # R语言 插入目录 [Only for Typora] 中括号内输入toc In Hexo: @[toc] (在使用hexo-renderer-markdown-it-plus插件时) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Usage","slug":"【Study】/Usage","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Usage/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://hyemin-kim.github.io/tags/Markdown/"}]}],"categories":[{"name":"【Study】","slug":"【Study】","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"},{"name":"Python","slug":"【Study】/Python","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"},{"name":"Usage","slug":"【Study】/Usage","permalink":"https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Usage/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hyemin-kim.github.io/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"https://hyemin-kim.github.io/tags/Pandas/"},{"name":"Numpy","slug":"Numpy","permalink":"https://hyemin-kim.github.io/tags/Numpy/"},{"name":"Python_Base","slug":"Python-Base","permalink":"https://hyemin-kim.github.io/tags/Python-Base/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hyemin-kim.github.io/tags/Hexo/"},{"name":"Typora","slug":"Typora","permalink":"https://hyemin-kim.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://hyemin-kim.github.io/tags/Markdown/"},{"name":"Git","slug":"Git","permalink":"https://hyemin-kim.github.io/tags/Git/"},{"name":"Github","slug":"Github","permalink":"https://hyemin-kim.github.io/tags/Github/"},{"name":"Jupyter notebook","slug":"Jupyter-notebook","permalink":"https://hyemin-kim.github.io/tags/Jupyter-notebook/"}]}