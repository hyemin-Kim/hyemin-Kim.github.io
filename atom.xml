<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hyemin Kim</title>
  
  <subtitle>김혜민 / 金慧敏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyemin-kim.github.io/"/>
  <updated>2020-12-22T09:58:21.139Z</updated>
  <id>https://hyemin-kim.github.io/</id>
  
  <author>
    <name>Hyemin Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 데이터 조작 및 테이블 관리</title>
    <link href="https://hyemin-kim.github.io/2020/12/22/E-SQL-Manipulation-and-Table/"/>
    <id>https://hyemin-kim.github.io/2020/12/22/E-SQL-Manipulation-and-Table/</id>
    <published>2020-12-22T09:48:12.000Z</published>
    <updated>2020-12-22T09:58:21.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-데이터-조작-및-테이블-관리"><a class="markdownIt-Anchor" href="#실습-데이터-조작-및-테이블-관리"></a> 【실습】 데이터 조작 및 테이블 관리</h1><br><h3 id="1-dvd렌탈-시스템의-관리자가-고객별-매출-순위를-알고-싶다-신규-테이블을-생성해서-고객의-매출-순위를-관리하고-싶으며-신규-테이블의-이름은-customer_rank이고-테이블-구성은-customer_id-customer_rank로-정했다-ctas-기법을-이용하여-신규-테이블을-생성하면서-데이터를-입력해라"><a class="markdownIt-Anchor" href="#1-dvd렌탈-시스템의-관리자가-고객별-매출-순위를-알고-싶다-신규-테이블을-생성해서-고객의-매출-순위를-관리하고-싶으며-신규-테이블의-이름은-customer_rank이고-테이블-구성은-customer_id-customer_rank로-정했다-ctas-기법을-이용하여-신규-테이블을-생성하면서-데이터를-입력해라"></a> [1]  DVD렌탈 시스템의 관리자가 고객별 매출 순위를 알고 싶다. 신규 테이블을 생성해서 고객의 매출 순위를 관리하고 싶으며 신규 테이블의 이름은 CUSTOMER_RANK이고 테이블 구성은 CUSTOMER_ID, CUSTOMER_RANK로 정했다. CTAS 기법을 이용하여 신규 테이블을 생성하면서 데이터를 입력해라.</h3><img src="/images/E-SQL-Manipulation-and-Table/image-20201222171831673.png" alt="image-20201222171831673" style="zoom:80%;"><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PAYMENT <span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222175413890.png" alt="image-20201222175413890" style="zoom:80%;"><br><br><ol><li><p>우선 고객별 총 매출액을 계산한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">         <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222172206108.png" alt="image-20201222172206108" style="zoom:80%;"><br><br></li><li><p>그 다음 고객 총매출 순위를 매긴다 (내림차순)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.CUSTOMER_ID,</span><br><span class="line">       <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> A.AMOUNT_SUM <span class="keyword">DESC</span>) <span class="keyword">AS</span> CUSTOMER_RANK</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">          <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">           <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">        <span class="keyword">FROM</span> PAYMENT</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> CUSTOMER_ID</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span></span><br><span class="line">       ) A;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222172543446.png" alt="image-20201222172543446" style="zoom:80%;"></li></ol><br><ol start="3"><li><p>마지막으로 CTAS 문을 이용하여 CUSTOMER_RANK 테이블 생성하고 데이터를 입력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMER_RANK (CUSTOMER_ID, CUSTOMER_RANK) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> A.CUSTOMER_ID,</span><br><span class="line">       <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> A.AMOUNT_SUM <span class="keyword">DESC</span>) <span class="keyword">AS</span> CUSTOMER_RANK</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">          <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">           <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">        <span class="keyword">FROM</span> PAYMENT</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> CUSTOMER_ID</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span></span><br><span class="line">       ) A;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_RANK;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222172543446.png" alt="image-20201222172543446" style="zoom:80%;"></li></ol><br><br><br><h3 id="2-dvd렌탈-시스템의-관리자는-매달-마다-매출-순위-1위를-한-고객에게-특별한-선물을-주고자-한다-이러한-업무를-달성하기-위해서-customer_rank_yyyymm이라는-테이블을-ctas-기법으로-생성하는-sql문을-작성하라-단-선물-제공-기준을-정하기-위해-고객별-총-매출액도-저장하라"><a class="markdownIt-Anchor" href="#2-dvd렌탈-시스템의-관리자는-매달-마다-매출-순위-1위를-한-고객에게-특별한-선물을-주고자-한다-이러한-업무를-달성하기-위해서-customer_rank_yyyymm이라는-테이블을-ctas-기법으로-생성하는-sql문을-작성하라-단-선물-제공-기준을-정하기-위해-고객별-총-매출액도-저장하라"></a> [2] DVD렌탈 시스템의 관리자는 매달 마다 매출 순위 1위를 한 고객에게 특별한 선물을 주고자 한다. 이러한 업무를 달성하기 위해서 CUSTOMER_RANK_YYYYMM이라는 테이블을 CTAS 기법으로 생성하는 SQL문을 작성하라. (단 선물 제공 기준을 정하기 위해 고객별 총 매출액도 저장하라)</h3><img src="/images/E-SQL-Manipulation-and-Table/image-20201222185331599.png" alt="image-20201222185331599" style="zoom:80%;"><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PAYMENT <span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222175413890.png" alt="image-20201222175413890" style="zoom:80%;"><br><br><ol><li><p>먼저 년월별 고객별 총 매출액을 계산한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">         TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>) <span class="keyword">AS</span> YYYYMM,</span><br><span class="line">         <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>),</span><br><span class="line">         CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> YYYYMM, AMOUNT_SUM <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222184237522.png" alt="image-20201222184237522" style="zoom:80%;"></li></ol><br><ol start="2"><li><p>총 매출액 기준으로 년월별 고객 순위를 매긴다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.CUSTOMER_ID,</span><br><span class="line">       A.YYYYMM,</span><br><span class="line">       A.AMOUNT_SUM,</span><br><span class="line">       <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> A.YYYYMM <span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span>) <span class="keyword">AS</span> RANK_YYYYMM</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">         TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>) <span class="keyword">AS</span> YYYYMM,</span><br><span class="line">         <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>),</span><br><span class="line">         CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> YYYYMM, AMOUNT_SUM <span class="keyword">DESC</span> </span><br><span class="line">       ) A;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222184359999.png" alt="image-20201222184359999" style="zoom:80%;"></li></ol><br><ol start="3"><li><p>마지막으로 CTAS 문을 이용하여 CUSTOMER_RANK_YYYYMM테이블 생성하고 데이터를 입력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMER_RANK_YYYYMM <span class="keyword">AS</span>      </span><br><span class="line"><span class="keyword">SELECT</span> A.CUSTOMER_ID,</span><br><span class="line">       A.YYYYMM,</span><br><span class="line">       A.AMOUNT_SUM,</span><br><span class="line">       <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> A.YYYYMM <span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span>) <span class="keyword">AS</span> RANK_YYYYMM</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> CUSTOMER_ID,</span><br><span class="line">         TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>) <span class="keyword">AS</span> YYYYMM,</span><br><span class="line">         <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYYMM'</span>),</span><br><span class="line">         CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> YYYYMM, AMOUNT_SUM <span class="keyword">DESC</span> </span><br><span class="line">       ) A;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FORM</span> CUSTOMER_RANK_YYYYMM;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Manipulation-and-Table/image-20201222184557948.png" alt="image-20201222184557948" style="zoom:80%;"></li></ol><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-데이터-조작-및-테이블-관리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-데이터-조작-및-테이블-관리&quot;&gt;&lt;/a&gt; 【실습】 데이터 조작 및 테이블 관리&lt;/h1&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-dvd렌탈-시스템의
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Manipulation" scheme="https://hyemin-kim.github.io/tags/Manipulation/"/>
    
      <category term="Table" scheme="https://hyemin-kim.github.io/tags/Table/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (3)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-3/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-3/</id>
    <published>2020-12-21T09:13:02.000Z</published>
    <updated>2020-12-21T10:10:45.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-3"><a class="markdownIt-Anchor" href="#테이블-관리-3"></a> 테이블 관리 (3)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0"><strong>1. 테이블 제거</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EB%AC%B8%EB%B2%95">1-2. 테이블 제거 문법</a></li><li><a href="#1-3-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">1-3. 테이블 제거 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt;  실습 준비</a></li><li><a href="#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">&gt;&gt; 테이블 제거 실습</a></li></ul></li></ul></li><li><a href="#2-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94"><strong>2. 임시 테이블</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1-%EB%AC%B8%EB%B2%95">2-2. 임시 테이블 생성 문법</a></li><li><a href="#2-3-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%8B%A4%EC%8A%B5">2-3. 임시 테이블 실습</a></li></ul></li><li><a href="#3-truncate"><strong>3. TRUNCATE</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-truncate-%EB%AC%B8%EB%B2%95">3-2. TRUNCATE 문법</a></li><li><a href="#3-3-truncate-%EC%8B%A4%EC%8A%B5">3-3. TRUNCATE 실습</a></li></ul></li></ul><p></p><br><h2 id="1-테이블-제거"><a class="markdownIt-Anchor" href="#1-테이블-제거"></a> <strong>1. 테이블 제거</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>존재하는 테이블을 제거할 수 있다. 하지반 테이블 제거 시는 항상 주의해야하고 FK (Foreign Key) 관계도 유의해야 한다.</p><br><h3 id="1-2-테이블-제거-문법"><a class="markdownIt-Anchor" href="#1-2-테이블-제거-문법"></a> 1-2. 테이블 제거 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-테이블-제거-실습"><a class="markdownIt-Anchor" href="#1-3-테이블-제거-실습"></a> 1-3. 테이블 제거 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt;  실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DIRECTOR</span><br><span class="line">(</span><br><span class="line">  DIRECTOR_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FIRSTNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>),</span><br><span class="line">  LASTNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> FILMS</span><br><span class="line">(</span><br><span class="line">  FILM_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PREMIERE_DAY <span class="built_in">DATE</span>,</span><br><span class="line">  DIRECTOR_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (DIRECTOR_ID) <span class="keyword">REFERENCES</span> DIRECTOR (DIRECTOR_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DIRECTOR</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'준호'</span>, <span class="string">'봉'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> FILMS</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'기생충'</span>, <span class="string">'2019-05-30'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201218235703439.png" alt="image-20201218235703439"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILMS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201218235726706.png" alt="image-20201218235726706"></p><br><p><img src="/images/S-SQL-Table-3/image-20201219000405118.png" alt="image-20201219000405118"></p><br><br><h4 id="테이블-제거-실습"><a class="markdownIt-Anchor" href="#테이블-제거-실습"></a> &gt;&gt; 테이블 제거 실습</h4><p><strong>[MISSION 1]</strong>  부모 테이블 (DIRECTOR 테이블)을 제거하기</p><blockquote><p>부모 테이블은 바로 제거할 수 없다. 부모 테이블의 컬럼이 자식 테이블에서 첨조되고 있기 때문에 참조 누락성 제약조건으로 인해 제거할 수 없다. 굳이 제거하고 싶으면 CASCADE 옵션을 사용해야한다.</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219001645684.png" alt="image-20201219001645684" style="zoom:80%;"><br><p>지금 DIRECTOR 테이블의 DIRECTOR_ID 컬럼이 FILMS 테이블에서 FK로 참조되고 있기 때문에 FK 제약 조건으로 인해 테이블 제거할 수 없다.</p><p>이 경우에 <code>DROP TABLE ... CASCADE</code> 명령어를 이용하여 해당 테이블과 관계된 모든 개체를 함계 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> DIRECTOR <span class="keyword">CASCADE</span>;  <span class="comment">-- CASCADE 옵션으로 제거 성공</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 제거 성공 확인</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219002930259.png" alt="image-20201219002930259" style="zoom:80%;"><br><p>부모 테이블이 제거된 경우 자식 테이블의 행은 존재하지반 FK 제약 조건은 삭제됨.</p><p><img src="/images/S-SQL-Table-3/image-20201219003312930.png" alt="image-20201219003312930"></p><br><img src="/images/S-SQL-Table-3/image-20201219003236123.png" alt="image-20201219003236123" style="zoom:80%;"><br><br><p><strong>[MISSION 2]</strong>  자식 테이블 (FILMS 테이블)을 제거하기</p><blockquote><p>자식 테이블은 바로 제거할 수 있다.</p></blockquote><p>두 테이블을 다시 생성한 후 자식 테이블 (FILMS 테이블)을 먼저 제거 한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> FILMS;  <span class="comment">-- 자식 테이블 제거 성공</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 제거 성공 확인</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILMS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219004411124.png" alt="image-20201219004411124" style="zoom:80%;"><br><br><h2 id="2-임시-테이블"><a class="markdownIt-Anchor" href="#2-임시-테이블"></a> <strong>2. 임시 테이블</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>임시 테이블은 DB 접속 세션의 활동 기간 동안 존재하는 테이블이다. 세션이 종료되면 임시 테이블은 자동으로 소멸된다.</p><br><h3 id="2-2-임시-테이블-생성-문법"><a class="markdownIt-Anchor" href="#2-2-임시-테이블-생성-문법"></a> 2-2. 임시 테이블 생성 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> </span><br><span class="line">  TABLE_NAME (<span class="keyword">COLUMN</span>);</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-임시-테이블-실습"><a class="markdownIt-Anchor" href="#2-3-임시-테이블-실습"></a> 2-3. 임시 테이블 실습</h3><p><strong>[실습 1]  임시 테이블 생성 후 세션 재접속</strong></p><blockquote><p>세션을 종료 후 재접속을 하면 임시 테이블이 소멸된다.</p></blockquote><br><ol><li><p>임시 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> </span><br><span class="line">  TB_CUST_TEMP_TEST (CUST_ID <span class="built_in">INT</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219145857043.png" alt="image-20201219145857043"></p></li></ol><br><ol start="2"><li><p>테이블에 값을 입력하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_CUST_TEMP_TEST</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219150041690.png" alt="image-20201219150041690"></p><br></li><li><p>세션 종료 후 재접속</p><img src="/images/S-SQL-Table-3/image-20201219152332829.png" alt="image-20201219152332829" style="zoom:67%;"></li></ol><br><ol start="4"><li><p>임시 테이블 불러오기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219152608366.png" alt="image-20201219152608366" style="zoom:80%;"><br></li></ol><ul><li>세션을 종료 후 재접속을 하면 임시 테이블이 소멸된 것을 확인할 수 있다.</li></ul><br><br><p><strong>[실습 2]  기존에 존재하는 테이블과 같은 이름으로 임시 테이블 생성 후 제거</strong></p><blockquote><p>같은 이름의 일반 테이블과 임시 테이블이 동시에 존재할 경우:</p><ul><li><p>SELECT 문으로 테이블 조회할 때 <strong>임시 테이블</strong>을 볼러온다</p></li><li><p>DROP 문으로 테이블 제거할 때도 <strong>임시 테이블</strong>을 먼저 제거한다.</p></li></ul></blockquote><br><ol><li><p>일반 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST</span><br><span class="line">(</span><br><span class="line">  CUST_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CUST_NAME <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></li></ol><br><ol start="2"><li><p>같은 이름의 임시 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST</span><br><span class="line">( CUST_ID <span class="built_in">INT</span> );</span><br></pre></td></tr></tbody></table></figure></li></ol><br><ol start="3"><li><p>테이블 조회</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219164733538.png" alt="image-20201219164733538"></p><ul><li>임시 테이블을 불러오는 것을 확인할 수 있다</li></ul></li></ol><br><ol start="4"><li><p>테이블 제거</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219164935024.png" alt="image-20201219164935024"></p><ul><li>임시 테이블이 제거되고 일반 테이블이 그대로 남아있는 것을 확인할 수 있다.</li></ul></li></ol><br><br><h2 id="3-truncate"><a class="markdownIt-Anchor" href="#3-truncate"></a> <strong>3. TRUNCATE</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>대용량의 테이블을 빠르게 지우는 방법으로 TRUNCATE가 있다. 테이블의 세그먼트 자체를 바로 지우기 때문에 빠르게 데이터가 지워진다.</p><br><p><strong>&gt;&gt; DELETE  <font color="red">VS</font>  TRUNCATE</strong></p><img src="/images/S-SQL-Table-3/image-20201221144141568.png" alt="image-20201221144141568" style="zoom: 50%;"><br><table><thead><tr><th style="text-align:left">DELETE</th><th style="text-align:left">TRUNCATE</th></tr></thead><tbody><tr><td style="text-align:left">데이터가 지워지지만 테이블 용량이 줄어 들지 않는다.</td><td style="text-align:left">테이블을 삭제하지 않고 데이터만 삭제하지만, 테이블 용량이 줄어 든다.</td></tr><tr><td style="text-align:left">원하는 데이터만 지울 수 있다.</td><td style="text-align:left">한꺼번에 다 지워야 한다.</td></tr><tr><td style="text-align:left">삭제 후 잘못 삭제한 것을 되돌릴 수 있다.</td><td style="text-align:left">삭제 후 되돌릴 수 없다.</td></tr><tr><td style="text-align:left">속도가 느리다.</td><td style="text-align:left">속도가 빠르다.</td></tr></tbody></table><br><h3 id="3-2-truncate-문법"><a class="markdownIt-Anchor" href="#3-2-truncate-문법"></a> 3-2. TRUNCATE 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1개의 테이블 데이터를 빠라게 삭제</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- N개의 테이블 데이터를 빠르게 삭제</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE_1, BIG_TABLE_2;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-truncate-실습"><a class="markdownIt-Anchor" href="#3-3-truncate-실습"></a> 3-3. TRUNCATE 실습</h3><p>먼저 ACCOUNT 테이블과 동일한 새로운 테이블 BIG_TABLE를 만든다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BIG_TABLE <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FORM</span> <span class="keyword">ACCOUNT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221150858588.png" alt="image-20201221150858588"></p><br><p>이제 TRUNCATE 문을 이용하여 BIG_TABLE의 데이터를 모두 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221151023059.png" alt="image-20201221151023059"></p><br><p>* ROLLBACK을 통해 데이터를 다시 복원할 수 없다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FORM</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221151023059.png" alt="image-20201221151023059"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      테이블 제거, 임시 테이블, TRUNCATE
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-2/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-2/</id>
    <published>2020-12-21T09:03:29.000Z</published>
    <updated>2020-12-21T10:09:39.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-2"><a class="markdownIt-Anchor" href="#테이블-관리-2"></a> 테이블 관리 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80"><strong>1. 컬럼 추가</strong></a><ul><li><a href="#1-1-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80-%EB%AC%B8%EB%B2%95">1-1. 컬럼 추가 문법</a></li><li><a href="#1-2-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80-%EC%8B%A4%EC%8A%B5">1-2. 컬럼 추가 실습</a></li></ul></li><li><a href="#2-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0"><strong>2. 컬럼 제거</strong></a><ul><li><a href="#2-1-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EB%AC%B8%EB%B2%95">2-1. 컬럼 제거 문법</a></li><li><a href="#2-2-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">2-2. 컬럼 제거 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">&gt;&gt; 컬럼 제거 실습</a></li></ul></li></ul></li><li><a href="#3-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD"><strong>3. 컬럼 데이터 타입 변경</strong></a><ul><li><a href="#3-1-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">3-1. 컬럼 데이터 타입 변경 문법</a></li><li><a href="#3-2-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">3-2. 컬럼 데이터 타입 변경 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">&gt;&gt; 컬럼 데이터 타입 변경 실습</a></li></ul></li></ul></li><li><a href="#4-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD"><strong>4. 컬럼 이름 변경</strong></a><ul><li><a href="#4-1-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">4-1. 컬럼 이름 변경 문법</a></li><li><a href="#4-2-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">4-2. 컬럼 이름 변경 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-3">&gt;&gt;  실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">&gt;&gt;  컬럼 이름 변경 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-컬럼-추가"><a class="markdownIt-Anchor" href="#1-컬럼-추가"></a> <strong>1. 컬럼 추가</strong></h2><h3 id="1-1-컬럼-추가-문법"><a class="markdownIt-Anchor" href="#1-1-컬럼-추가-문법"></a> 1-1. 컬럼 추가 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> COL_NAME_1 SETTING</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> COL_NAME_2 SETTING</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-2-컬럼-추가-실습"><a class="markdownIt-Anchor" href="#1-2-컬럼-추가-실습"></a> 1-2. 컬럼 추가 실습</h3><br><blockquote><p>ORACLE (오라클):</p><ul><li>create, drop, alter 명령어 (DDL)를 치는 순간 자동으로 commit이 됩니다. 즉, commit 할 필요가 없습니다.</li><li>하지만 delete, update, merge, insert 등 명령어는 commit 필요</li></ul><p>PostgreSQL:</p><ul><li>create, drop, alter, delete, update, merge, insert 명령어 모두 commit 을 필요합니다.</li></ul></blockquote><br><p><strong>(1) 아래와 같은 테이블을 생성한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TB_CUST(</span><br><span class="line">  CUST_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CUST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094138951.png" alt="image-20201210094138951"></p><br><br><p><strong>(2) 폰변호를 저장할 컬럼을 추가한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> PHONE_NUMBER <span class="built_in">VARCHAR</span>(<span class="number">13</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094238362.png" alt="image-20201210094238362"></p><br><br><p><strong>(3) 팩스번호 및 이메일 주소를 저장할 컬럼을 추가한다. (한 번에 2개 추가)</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> FAX_NUMBER <span class="built_in">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> EMAIL_ADDR <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094317700.png" alt="image-20201210094317700"></p><br><br><p><strong>&gt;&gt; TB_CUST의 생성 과정(DDL) 확인</strong></p><img src="/images/S-SQL-Table-2/image-20201210095902038.png" alt="image-20201210095902038" style="zoom:80%;"><br><br><p><strong>(4) NOT NULL 제약 컬럼 추가</strong></p><p><strong>&gt;&gt; 문제</strong></p><p>테이블에 데이터가 있을 때는 NOT NULL 제약 컬럼을 바로 추가할 수 없다.</p><p>추가하는 순간 해당 컬럼에 값이 없어서 NOT NULL 제약을 위반하게 되기 때문이다.</p><br><p>[[ 실습 ]]</p><ul><li><p>먼저 테이블에 데이터를 입력한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_CUST</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'홍길동'</span>, <span class="string">'010-1234-5678'</span>, <span class="string">'02-123-1234'</span>, <span class="string">'dbmsexpert@naver.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210103454365.png" alt="image-20201210103454365"><br></li><li><p>데이터를 입력 후 아래와 같이 NOT NULL 컬럼을 추가하면 기존에 레코드가 있기 때문에 ERROR가 발생한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ADDRESS <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210105714436.png" alt="image-20201210105714436" style="zoom:80%;"></li></ul><br><p><strong>&gt;&gt; 해결</strong></p><p>이런 경우 해결책은 우선 NULL 조건으로 컬럼을 추가한 다음, 컬럼 값을 부여하는 UPDATE 작업을 진행하고 다시 NOT NULL 제약을 추가하는 것이다.</p><br><p>[[ 실습 ]]</p><ul><li><p>먼저 NULL 조건으로 컬럼을 추가한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ADDRESS <span class="built_in">VARCHAR</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><br><ul><li><p>그 다음 ADDRESS 컬럼을 UPDATE 한다. (컬럼 값 부여)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TB_CUST</span><br><span class="line">   <span class="keyword">SET</span> ADDRESS = <span class="string">'서울시 영등포구'</span></span><br><span class="line"> <span class="keyword">WHERE</span> CUST_ID = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210142057665.png" alt=""></p>  <br><img src="/images/S-SQL-Table-2/image-20201210142716523.png" alt="image-20201210142716523" style="zoom:80%;"></li></ul><br><ul><li><p>마지막으로 ALTER COLUMN으로 NOT NULL로 제약 조건을 준다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ADDRESS <span class="keyword">SET</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210142834604.png" alt="image-20201210142834604" style="zoom:80%;"></li></ul><br><br><h2 id="2-컬럼-제거"><a class="markdownIt-Anchor" href="#2-컬럼-제거"></a> <strong>2. 컬럼 제거</strong></h2><h3 id="2-1-컬럼-제거-문법"><a class="markdownIt-Anchor" href="#2-1-컬럼-제거-문법"></a> 2-1. 컬럼 제거 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME_1,</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME_2, </span><br><span class="line">  ... ;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CASCADE 옵션: 해당 컬럼과 관련 있는 모든 개체들이 함께 삭제(DROP)된다.</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-2-컬럼-제거-실습"><a class="markdownIt-Anchor" href="#2-2-컬럼-제거-실습"></a> 2-2. 컬럼 제거 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PUBLISHERS (</span><br><span class="line">  PUBLISHER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORIES (</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BOOKS (</span><br><span class="line">  BOOK_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ISBN <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PUBLISHED_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">VARCHAR</span>,</span><br><span class="line">  CATEGORY_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PUBLISHER_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (CATEGORY_ID) <span class="keyword">REFERENCES</span> CATEGORIES (CATEGORY_ID),</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (PUBLISHER_ID) <span class="keyword">REFERENCES</span> PUBLISHERS (PUBLISHER_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217140819313.png" alt="image-20201217140819313" style="zoom:67%;"><br><br><p>3개의 TABLE을 하나의 뷰로 생성한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BOOK_INFO <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  B.BOOK_ID,</span><br><span class="line">  B.TITLE,</span><br><span class="line">  B.ISBN,</span><br><span class="line">  B.PUBLISHED_DATE,</span><br><span class="line">  P.NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BOOKS B,</span><br><span class="line">  PUBLISHERS P</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  P.PUBLISHER_ID = B.PUBLISHER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.TITLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217140850918.png" alt="image-20201217140850918"></p><br><br><h4 id="컬럼-제거-실습"><a class="markdownIt-Anchor" href="#컬럼-제거-실습"></a> &gt;&gt; 컬럼 제거 실습</h4><img src="/images/S-SQL-Table-2/image-20201217140819313.png" alt="image-20201217140819313" style="zoom:67%;"><p><strong>관계:</strong></p><ul><li>한 개의 카테고리가 여러 개의 책을 가진다. 한 개의 책은 반드시 카테고리를 가진다.</li><li>한 개의 출판사는 여러 개의 책을 출판한다. 한 개의 책은 반드시 출판사를 가진다.</li></ul><br><p><strong>[실습 1]  BOOKS 테이블에서 CATEGORY_ID 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217142424062.png" alt="image-20201217142424062"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> CATEGORY_ID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217142727702.png" alt="image-20201217142727702"></p><ul><li>BOOKS 테이블은 자식 테이블이므로 CATEGORY_ID 컬럼은 제거가 가능하다.</li><li>컬럼이 제거되면서 CATEGORY_ID의 FK (Foreign Key) 도 함께 삭제된다.</li></ul><br><p><strong>[실습 2]  BOOKS 테이블에서 PUBLISHER_ID 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PUBLISHER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217143419783.png" alt="image-20201217143419783" style="zoom:80%;"><ul><li>PUBLISHER_ID 컬럼을 제거하고자 하는 경우 위와 같은 에러가 발생한다.</li><li>해당 컬럼은 BOOK_INFO 뷰에서 참조하고 있기 때문이다.</li></ul><br><p>이런 경우에는 CASCADE 옵션을 줘서 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PUBLISHER_ID <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217144023588.png" alt="image-20201217144023588"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOK_INFO;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217144204332.png" alt="image-20201217144204332" style="zoom:80%;"><ul><li>컬럼 삭제에는 성공했지만 BOOK_INFO 뷰도 같이 DROP 되었다.</li></ul><br><p><strong>[실습 3]  동시에 N개의 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> ISBN,</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> DESCRIPTION;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217144804982.png" alt="image-20201217144804982"></p><br><br><h2 id="3-컬럼-데이터-타입-변경"><a class="markdownIt-Anchor" href="#3-컬럼-데이터-타입-변경"></a> <strong>3. 컬럼 데이터 타입 변경</strong></h2><h3 id="3-1-컬럼-데이터-타입-변경-문법"><a class="markdownIt-Anchor" href="#3-1-컬럼-데이터-타입-변경-문법"></a> 3-1. 컬럼 데이터 타입 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> COL_NAME_1 <span class="keyword">TYPE</span> NEW_TYPE,</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> COL_NAME_2 <span class="keyword">TYPE</span> NEW_TYPE,</span><br><span class="line">  ... ;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-2-컬럼-데이터-타입-변경-실습"><a class="markdownIt-Anchor" href="#3-2-컬럼-데이터-타입-변경-실습"></a> 3-2. 컬럼 데이터 타입 변경 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ASSETS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ASSET_NO <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">TEXT</span>,</span><br><span class="line">  LOCATION <span class="built_in">TEXT</span>,</span><br><span class="line">  DATE_ACQUIRED <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ASSETS (</span><br><span class="line">  <span class="keyword">NAME</span>,</span><br><span class="line">  ASSET_NO,</span><br><span class="line">  LOCATION,</span><br><span class="line">  DATE_ACQUIRED</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Server'</span>, <span class="string">'10001'</span>, <span class="string">'Server room'</span>, <span class="string">'2017-01-01'</span>),</span><br><span class="line">(<span class="string">'UPS'</span>, <span class="string">'10002'</span>, <span class="string">'Server room'</span>, <span class="string">'2017-01-02'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ASSETS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218185044584.png" alt="image-20201218185044584"></p><br><h4 id="컬럼-데이터-타입-변경-실습"><a class="markdownIt-Anchor" href="#컬럼-데이터-타입-변경-실습"></a> &gt;&gt; 컬럼 데이터 타입 변경 실습</h4><p><img src="/images/S-SQL-Table-2/image-20201218185255265.png" alt="image-20201218185255265"></p><p><strong>[MISSION 1]</strong>  NAME, DESCRIPTION, LOCATION 컬럼의 데이터 타입을 TEXT에서 VARCHAR로 바꾸기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1개 컬럼의 데이터 타입 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 한번에 N개 컬럼의 데이터 타입 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS </span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> DESCRIPTION <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> LOCATION <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">500</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190150074.png" alt="image-20201218190150074" style="zoom:80%;"><br><br><p><strong>[MISSION 2]</strong>  ASSET_NO 컬럼의 데이터 타입을 VARCHAR 에서 INT로 바꾸기</p><ul><li><p>그냥 <code>TYPE INT</code> 로 바꾸면 ERROR 가 발생한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ASSET_NO <span class="keyword">TYPE</span> <span class="built_in">INT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190725819.png" alt="image-20201218190725819" style="zoom:80%;"><br></li><li><p><strong>[주의]</strong> <code>USING col_name::integer</code> 구문을 추가해야 함</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ASSET_NO <span class="keyword">TYPE</span> <span class="built_in">INT</span> <span class="keyword">USING</span> ASSET_NO::<span class="built_in">INTEGER</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190942598.png" alt="image-20201218190942598" style="zoom:80%;"></li></ul><br><br><h2 id="4-컬럼-이름-변경"><a class="markdownIt-Anchor" href="#4-컬럼-이름-변경"></a> <strong>4. 컬럼 이름 변경</strong></h2><h3 id="4-1-컬럼-이름-변경-문법"><a class="markdownIt-Anchor" href="#4-1-컬럼-이름-변경-문법"></a> 4-1. 컬럼 이름 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> COL_NAME_OLD <span class="keyword">TO</span> COL_NAME_NEW;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-2-컬럼-이름-변경-실습"><a class="markdownIt-Anchor" href="#4-2-컬럼-이름-변경-실습"></a> 4-2. 컬럼 이름 변경 실습</h3><h4 id="실습-준비-3"><a class="markdownIt-Anchor" href="#실습-준비-3"></a> &gt;&gt;  실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CUSTOMERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMERS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PHONE <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span>,</span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>) <span class="keyword">REFERENCES</span> CUSTOMER_GROUPS (<span class="keyword">ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_GROUPS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220746648.png" alt="image-20201218220746648"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220814142.png" alt="image-20201218220814142"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CUSTOMER_DATA</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">  C.ID,</span><br><span class="line">  C.NAME,</span><br><span class="line">  G.NAME CUSTOMER_GROUP</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMERS C,</span><br><span class="line">  CUSTOMER_GROUPS G</span><br><span class="line"><span class="keyword">WHERE</span> C.GROUP_ID = G.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220315994.png" alt="image-20201218220315994"></p><br><h4 id="컬럼-이름-변경-실습"><a class="markdownIt-Anchor" href="#컬럼-이름-변경-실습"></a> &gt;&gt;  컬럼 이름 변경 실습</h4><p><strong>[MISSION 1]</strong>  CUSTOMERS 테이블 EMIAL 컬럼의 이름을 바꾸기:  EMAIL --&gt; CONTACT_EMAIL</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> CUSTOMERS</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> EMIAL <span class="keyword">TO</span> CONTACT_EMAIL;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221154310.png" alt="image-20201218221154310"></p><br><p><strong>[MISSION 2]</strong>  CUSTOMER_GROUPS 테이블의 NAME 컬럼의 이름을 바꾸기:  NAME --&gt; GROUP_NAME</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="keyword">TO</span> GROUP_NAME;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_GROUPS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221509265.png" alt="image-20201218221509265"></p><br><p>뷰 CUSTOMER_DATA 에서 참조중인 CUSTOMER_GROUP 테이블의 NAME 컬럼의 이름도 바뀌었는지 살펴본다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221834951.png" alt="image-20201218221834951"></p><ul><li>컬럼명이 바뀐 것이 뷰에 자동으로 적용된 것을 확인할 수 있다.</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      컬럼 추가, 컬럼 제거, 컬럼 데이터 타입 변경, 컬럼 이름 변겅
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-1/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-1/</id>
    <published>2020-12-21T08:53:24.000Z</published>
    <updated>2020-12-21T10:08:29.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-1"><a class="markdownIt-Anchor" href="#테이블-관리-1"></a> 테이블 관리 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85"><strong>1. 데이터 타입</strong></a><ul><li><a href="#boolean-character-numeric">&gt;&gt; Boolean, Character, Numeric</a></li><li><a href="#time-arrays-json">&gt;&gt; Time, Arrays, JSON</a></li></ul></li><li><a href="#2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1"><strong>2. 테이블 생성</strong></a></li><li><a href="#3-ctas-create-table-as-select"><strong>3. CTAS (CREATE TABLE AS SELECT)</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-ctas-%EB%AC%B8%EB%B2%95">3-2. CTAS 문법</a></li><li><a href="#3-3-ctas-%EC%8B%A4%EC%8A%B5">3-3. CTAS 실습</a></li></ul></li><li><a href="#4-%ED%85%8C%EC%9D%B4%EB%B8%94-%EA%B5%AC%EC%A1%B0-%EB%B3%80%EA%B2%BD"><strong>4. 테이블 구조 변경</strong></a></li><li><a href="#5-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD"><strong>5. 테이블 이름 변경</strong></a><ul><li><a href="#5-1-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">5-1. 테이블 이름 변경 문법</a></li><li><a href="#5-2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">5-2. 테이블 이름 변경 실습</a></li><li><a href="#5-3-%EA%B1%B8%EB%A1%A0">5-3. 걸론</a></li></ul></li></ul><p></p><br><h2 id="1-데이터-타입"><a class="markdownIt-Anchor" href="#1-데이터-타입"></a> <strong>1. 데이터 타입</strong></h2><p>테이블은 컬럼으로 이루어져 있고 컬럼은 다양한 데이터 타입을 지원한다. 이는 RDBMS가 제 역할을 하는데 있어서 매우 중요하다.</p><br><p>다양한 데이터 타입 지원:</p><ul><li>Boolean</li><li>Character</li><li>Numeric</li><li>Time</li><li>Arrays</li><li>JSON</li></ul><br><h3 id="boolean-character-numeric"><a class="markdownIt-Anchor" href="#boolean-character-numeric"></a> &gt;&gt; Boolean, Character, Numeric</h3><table><thead><tr><th style="text-align:left">데이터 타입</th><th style="text-align:left">세부 타입</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">Boolean</td><td style="text-align:left">Boolean</td><td style="text-align:left">참과 거짓의 값을 저장한다.</td></tr><tr><td style="text-align:left">Character</td><td style="text-align:left">CHAR</td><td style="text-align:left">고정형 길이의 문자열을 저장한다. <br>만약 CHAR(10)인데 'ABCDE’만 입력할 경우 실제로는 'ABCDE     '로 뒤에 공백을 붙여 저장한다.</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">VARCHAR</td><td style="text-align:left">가변형 길이의 분자열을 저장한다. <br> 만약 VARCHAR(10) 인데 'ABCDE’만 입력할 경우 실제로 'ABCDE’만 저장한다. (뒤에 공백을 붙이지 않는다)</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">TEXT</td><td style="text-align:left">대용량의 문자데이터를 저장한다.</td></tr><tr><td style="text-align:left">Numeric</td><td style="text-align:left">INT</td><td style="text-align:left">정수형데이터를 저장한다. 크기는 4byte이다. (범위는 -2,147,483,648 to 2,147,483,647)</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">SMALLINT</td><td style="text-align:left">정수형 데이터를 저장한다. 크기는 2byte이다. (범위는 -32,768 to 32,767)</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">float</td><td style="text-align:left">부동 소수점의 데이터를 저장한다. 크기는 8byte이다.</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">numeric</td><td style="text-align:left">NUMERIC(15, 2)와 같이 전체 크기와 소수점의 자리를 지정할 수 있다.</td></tr></tbody></table><br><p><strong>[실습]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">DATA_TYPE_TEST_1</span><br><span class="line">(</span><br><span class="line">  A_BOOLEAN <span class="built_in">BOOLEAN</span>,</span><br><span class="line">  B_CHAR <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">  C_VARCHAR <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  D_TEXT <span class="built_in">TEXT</span>,</span><br><span class="line">  E_INT <span class="built_in">INT</span>,</span><br><span class="line">  F_SMALLINT <span class="built_in">SMALLINT</span>,</span><br><span class="line">  G_FLOAT <span class="built_in">FLOAT</span>,</span><br><span class="line">  H_NUMERIC <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">DATA_TYPE_TEST_1</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  <span class="literal">TRUE</span>,        <span class="comment">-- A_BOOLEAN</span></span><br><span class="line">  <span class="string">'ABCDE'</span>,     <span class="comment">-- B_CHAR</span></span><br><span class="line">  <span class="string">'ABCDE'</span>,     <span class="comment">-- C_VARCHAR</span></span><br><span class="line">  <span class="string">'TEXT'</span>,      <span class="comment">-- D_TEXT</span></span><br><span class="line">  <span class="number">1000</span>,        <span class="comment">-- E_INT</span></span><br><span class="line">  <span class="number">10</span>,          <span class="comment">-- F_SMALLINT</span></span><br><span class="line">  <span class="number">10.12345</span>,    <span class="comment">-- G_FLOAT</span></span><br><span class="line">  <span class="number">10.25</span>        <span class="comment">-- H_NUMERIC</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATA_TYPE_TEST_1;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201207164552207.png" alt="image-20201207164552207"></p><br><br><h3 id="time-arrays-json"><a class="markdownIt-Anchor" href="#time-arrays-json"></a> &gt;&gt; Time, Arrays, JSON</h3><table><thead><tr><th style="text-align:left">데이터 타입</th><th style="text-align:left">세부 타입</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">Time</td><td style="text-align:left">Date</td><td style="text-align:left">일자 데이터를 저장한다.</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">TIME</td><td style="text-align:left">시간 데이터를 저장한다.</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">일자와 시간 데이터를 모두 저장한다.</td></tr><tr><td style="text-align:left">Arrays</td><td style="text-align:left">array</td><td style="text-align:left">배열 형식의 데이터를 저장한다. <br> 한개의 컬럼에 여러개의 데이터를 동시에 저장할 수 있으며 저장한 데이터의 순서로 조회할 수 있다.</td></tr><tr><td style="text-align:left">JSON</td><td style="text-align:left">JSON</td><td style="text-align:left">JSON형식의 데이터를 저장한다. <br> JSON형식의 데이터를 입력해서 JSON형식대로 각 LEVEL의 데이터를 저장할 수 있다.</td></tr></tbody></table><br><p><strong>[실습]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DATA_TYPE_TEST_2</span><br><span class="line">(</span><br><span class="line">  A_DATE <span class="built_in">DATE</span>,</span><br><span class="line">  B_TIME <span class="built_in">TIME</span>,</span><br><span class="line">  C_TIMESTAMP <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">  D_ARRAY <span class="built_in">TEXT</span>[],</span><br><span class="line">  E_JSON <span class="keyword">JSON</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DATA_TYPE_TEST_2</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line"> <span class="keyword">CURRENT_DATE</span>,        <span class="comment">-- A_DATE</span></span><br><span class="line"> <span class="keyword">LOCALTIME</span>,           <span class="comment">-- B_TIME</span></span><br><span class="line"> <span class="keyword">CURRENT_TIMESTAMP</span>,   <span class="comment">-- C_TIMESTAMP</span></span><br><span class="line"> <span class="built_in">ARRAY</span> [<span class="string">'010-1234-1234'</span>, <span class="string">'010-4321-4321'</span>],  <span class="comment">-- D_ARRAY</span></span><br><span class="line"> <span class="string">'{"customer": "John Doe", "items": {"product": "Beer", "qty": 6}}'</span>  <span class="comment">-- E_JSON</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATA_TYPE_TEST_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201207171138943.png" alt="image-20201207171138943"><br><br><h2 id="2-테이블-생성"><a class="markdownIt-Anchor" href="#2-테이블-생성"></a> <strong>2. 테이블 생성</strong></h2><p>테이블은 데이터를 담는 그릇으로써 반드시 생성해야만 데이터를 저장할 수 있다.</p><br><p><strong>&gt;&gt; 테이블 생성 시 컬럼의 제약 조건</strong></p><table><thead><tr><th style="text-align:left">제약조건명</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">NOT NULL</td><td style="text-align:left">해당 제약 조건이 있는 컬럼은 NULL이 저장될 수 없다.</td></tr><tr><td style="text-align:left">UNIQUE</td><td style="text-align:left">해당 제약 조건이 있는 컬럼의 값은 테이블 내에서 유일해야 한다.</td></tr><tr><td style="text-align:left">PRIMARY KEY</td><td style="text-align:left">해당 제약 조건이 있는 컬럼의 값은 테이블 내에서 유일해야 하고 반드시 NOT NULL이어야 한다.</td></tr><tr><td style="text-align:left">CHECK</td><td style="text-align:left">해당 제약 조건이 있는 컬럼은 지정하는 조건에 맞는 값이 들어가야 한다.</td></tr><tr><td style="text-align:left">REFERENCES</td><td style="text-align:left">해당 제약 조건이 있는 컬럼의 값은 참조하는 테이블의 특정 컬럼에 값이 존재해야 한다.</td></tr></tbody></table><br><p><strong>&gt;&gt; 테이블 생성 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">ACCOUNT</span></span><br><span class="line">(</span><br><span class="line">  USER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  USERNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span> (<span class="number">355</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  CREATED_ON <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_LOGIN <span class="built_in">TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">ROLE</span></span><br><span class="line">(</span><br><span class="line">  ROLE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  ROLE_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ACCOUNT_ROLE</span><br><span class="line">(</span><br><span class="line">  USER_ID <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ROLE_ID <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  GRANT_DATE <span class="built_in">TIMESTAMP</span> <span class="keyword">WITHOUT</span> <span class="built_in">TIME</span> ZONE,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (USER_ID, ROLE_ID),   <span class="comment">-- 기본키는 USER_ID + ROLE_ID로 한다</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> ACCOUNT_ROLE_ROLE_ID_FKEY <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (ROLE_ID)  <span class="comment">-- ROLE_ID 컬럼은 ROLE 테이블의 ROLE_ID 컬럼을 참조한다</span></span><br><span class="line">  <span class="keyword">REFERENCES</span> <span class="keyword">ROLE</span> (ROLE_ID) <span class="keyword">MATCH</span> SIMPLE  <span class="comment">-- ROLE_ID 컬럼은 ROLE 테이블의 ROLE_ID컬럼에 대한 삭제 혹은 변경 시 아무것도 하지 않는다</span></span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> ACCOUNT_ROLE_USER_ID_FKEY <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (USER_ID)  <span class="comment">-- USER_ID 컬럼은 ACCOUNT 테이블의 USER_ID 컬럼을 참조한다</span></span><br><span class="line">  <span class="keyword">REFERENCES</span> <span class="keyword">ACCOUNT</span> (USER_ID) <span class="keyword">MATCH</span> SIMPLE  <span class="comment">-- USER_ID 컬럼은 ACCOUNT 테이블의  USER_ID 컬럼에 대한 삭제 혹은 변경 시 아무것도 하지 않는다</span></span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208111620532.png" alt="image-20201208111620532"><ul><li>ACCOUNT 테이블과 ROLE 테이블은 다대다의 매칭관계이다.</li><li>두 테이블의 내용이 매칭될 수 있도록 ACCOUNT_ROLE 테이블을 생성하여 1대다의 관계를 만들어 준다.</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'홍길동'</span>, <span class="string">'1234'</span>, <span class="string">'honggd@naver.com'</span>, <span class="keyword">CURRENT_TIMESTAMP</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">ACCOUNT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208113648219.png" alt="image-20201208113648219"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">ROLE</span></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'DBA'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">ROLE</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208113804601.png" alt="image-20201208113804601"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACCOUNT_ROLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208114018320.png" alt="image-20201208114018320"></p><br><p><strong>&gt;&gt; 에러</strong></p><p><strong>(1)  참조 누락성 제약 조건 위반</strong></p><ul><li>참조키(Foreign Key)에 해당 데이터가 존재하지 않는 경우</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131508151.png" alt="image-20201208131508151" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131440441.png" alt="image-20201208131440441" style="zoom:80%;"><br><p><strong>(2)  고유 제약 조건 위반</strong></p><ul><li>중복값이 없어야 하는 PRIMARY KEY에 중복이 발생한 경우</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131635637.png" alt="image-20201208131635637" style="zoom:80%;"><br><p><strong>(3)  참조 시 갱신/삭제 불가</strong></p><ul><li>데이터가 참조되어 있을 때 해당 데이터를 갱신/삭제 불가한다.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">SET</span> USER_ID = <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> USER_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208133014712.png" alt="image-20201208133014712" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">WHERE</span> USER_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208133014712.png" alt="image-20201208133014712" style="zoom:80%;"><br><br><h2 id="3-ctas-create-table-as-select"><a class="markdownIt-Anchor" href="#3-ctas-create-table-as-select"></a> <strong>3. CTAS (CREATE TABLE AS SELECT)</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>CTAS는 CREATE TABLE AS SELECT의 약어로써 SELECT문을 기반으로 CREATE TABLE을 할 수 있는 CREATE문이다.</p><br><h3 id="3-2-ctas-문법"><a class="markdownIt-Anchor" href="#3-2-ctas-문법"></a> 3-2. CTAS 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> NEW_TABLE   <span class="comment">-- 새로운 테이블의 이름을 설정한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> NEW_TABLE (NEW_COLUMN_1, NEW_COLUMN_2)  <span class="comment">-- 새로운 테이블명의 이름과 컬럼명을 설정한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> NEW_TABLE   <span class="comment">-- 기존에 테이블이 존재하지 않는 경우만 생성한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-ctas-실습"><a class="markdownIt-Anchor" href="#3-3-ctas-실습"></a> 3-3. CTAS 실습</h3><p><strong>[MISSION]</strong>  액션영화의 정보만으로 신규 테이블을 생성</p><img src="/images/S-SQL-Table-1/image-20201208140314164.png" alt="image-20201208140314164" style="zoom:67%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">CATEGORY</span> <span class="keyword">WHERE</span> CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208140547218.png" alt="image-20201208140547218"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.FILM_ID, </span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RELEASE_YEAR,</span><br><span class="line">  A.LENGTH,</span><br><span class="line">  A.RATING</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">AND</span> B.CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208140813355.png" alt="image-20201208140813355" style="zoom:80%;"><br><br><p>&gt;&gt; 액션 영화 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ACTION_FILM <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.FILM_ID, </span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RELEASE_YEAR,</span><br><span class="line">  A.LENGTH,</span><br><span class="line">  A.RATING</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">AND</span> B.CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACTION_FILM;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208140813355.png" alt="image-20201208140813355" style="zoom:80%;"><br><br><h2 id="4-테이블-구조-변경"><a class="markdownIt-Anchor" href="#4-테이블-구조-변경"></a> <strong>4. 테이블 구조 변경</strong></h2><p>한번 만들어진 테이블이라고 하더라도 데이블 구조를 변경할 수 있다. 이 기능으로 인해 업무변화에 유연하게 대처할 수 있다.</p><br><p><strong>&gt;&gt; 테이블 구조 변경 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> LINKS </span><br><span class="line">(</span><br><span class="line">  LINK_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> (<span class="number">512</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">URL</span> <span class="built_in">VARCHAR</span> (<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143703988.png" alt="image-20201208143703988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1) ACTIVE 컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ACTIVE <span class="built_in">BOOLEAN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143726988.png" alt="image-20201208143726988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2) ACTIVE 컬럼을 제거</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> ACTIVE;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143703988.png" alt="image-20201208143703988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 3) TITLE 컬럼을 LINK_TITLE 컬럼으로 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> TITLE <span class="keyword">TO</span> LINK_TITLE;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144037777.png" alt="image-20201208144037777"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 4) TARGET 컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> TARGET <span class="built_in">VARCHAR</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144143373.png" alt="image-20201208144143373"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 5) TARGET 컬럼의 DEFAULT값을 "_blank"로 설정</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> TARGET</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">'_blank'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144308010.png" alt="image-20201208144308010"></p><br><ul><li><p>데이터 추가 해보기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'PostgreSQL Tutorial'</span>, <span class="string">'http://www.postgresqltutorial.com/'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208151743700.png" alt="image-20201208151743700"></p></li></ul><br><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 6) 체크 제약 조건 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (TARGET <span class="keyword">IN</span> (<span class="string">'_self'</span>, <span class="string">'_blank'</span>, <span class="string">'_parent'</span>, <span class="string">'_top'</span>));</span><br></pre></td></tr></tbody></table></figure><br><ul><li><p>TARGET 컬럼의 체크 제약 조건에 없는 ‘whatever’ 값으로 INSERT 시도</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>, TARGET)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'PostgreSQL'</span>, <span class="string">'http://www.postgresql.org/'</span>, <span class="string">'whatever'</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208154416334.png" alt="image-20201208154416334" style="zoom:80%;"></li></ul><br><ul><li><p>TARGET 컬럼의 체크 제약 조건에 없는 ‘whatever’ 값으로 INSERT 시도</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>, TARGET)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'PostgreSQL'</span>, <span class="string">'http://www.postgresql.org/'</span>, <span class="string">'_self'</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208154617221.png" alt="image-20201208154617221" style="zoom:80%;"></li></ul><br><br><h2 id="5-테이블-이름-변경"><a class="markdownIt-Anchor" href="#5-테이블-이름-변경"></a> <strong>5. 테이블 이름 변경</strong></h2><p>한번 만들어진 테이블이라고 하더라도 테이블 이름을 변경할 수 있다. 이 기능으로 인해 업무변화에 유연하게 대처할 수 있다.</p><br><h3 id="5-1-테이블-이름-변경-문법"><a class="markdownIt-Anchor" href="#5-1-테이블-이름-변경-문법"></a> 5-1. 테이블 이름 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> OLD_TABLE_NAME</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">TO</span> NEW_TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="5-2-테이블-이름-변경-실습"><a class="markdownIt-Anchor" href="#5-2-테이블-이름-변경-실습"></a> 5-2. 테이블 이름 변경 실습</h3><p><strong>&gt;&gt; 테이블 이름 변경 실습 (1)</strong></p><p><strong>[MISSION]</strong> VENDORS 테이블을 SUPPLIERS 테이블로 변경</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- VENDORS 테이블 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> VENDORS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> VENDORS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208164854947.png" alt="image-20201208164854947"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- VENDORS 테이블의 이름을 SUPPLIERS 로 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> VENDORS <span class="keyword">RENAME</span> <span class="keyword">TO</span> SUPPLIERS;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SUPPLIERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208164854947.png" alt="image-20201208164854947"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> VENDORS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208171311297.png" alt="image-20201208171311297" style="zoom:80%;"><br><p><strong>&gt;&gt; 테이블 이름 변경 실습 (2)</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SUPPLIER_GROUPS 테이블 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SUPPLIER_GROUPS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SUPPLIERS 테이블에 컬럼 추가 후 FK 생성</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIERS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;  <span class="comment">-- SUPPLIERS 테이블에 GROUP_ID 컬럼 추가</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIERS <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>)  </span><br><span class="line"><span class="keyword">REFERENCES</span> SUPPLIER_GROUPS (<span class="keyword">ID</span>);   <span class="comment">-- SUPPLIER_GROUPS 테이블의 ID 컬럼을 참조하여 SUPPLIERS 테이블의 GROUP_ID 컬러의 값을 지정</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208170321928.png" alt="image-20201208170321928"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 아래와 같은 뷰를 생성 (뷰는 실체하는 데이터가 아닌 보기용)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> SUPPLIER_DATA <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  S.ID,</span><br><span class="line">  S.NAME,</span><br><span class="line">  G.NAME <span class="string">"GROUP"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SUPPLIERS S, SUPPLIER_GROUPS G</span><br><span class="line"><span class="keyword">WHERE</span> G.ID = S.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208171537315.png" alt="image-20201208171537315"></p><br><p><strong>1)  먼저 SUPPLIERS 테이블의 생성 과정 (DDL)를 살펴 본다</strong></p><p>[SUPPLIERS 테이블 --&gt; 우클릭 --&gt; SQL 생성 --&gt; DDL]</p><img src="/images/S-SQL-Table-1/image-20201208172445817.png" alt="image-20201208172445817" style="zoom: 67%;"><ul><li>지금 SUPPLIERS 테이블의 GROUP_ID 컬럼은 SUPPLIER_GROUPS 테이블의 ID 컬럼을 참조하고 있다.</li><li>그렇다면 여기서 부모 테이블인 SUPPLIER_GROUPS 테이블의 테이블명을 바꾸면 자식 테이블인 SUPPLIERS 테이블은 어떻게 될까?</li></ul><br><p><strong>2) SUPPLIER_GROUPS 테이블의 이름을 “GROUPS” 로 바꾼다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIER_GROUPS <span class="keyword">RENAME</span> <span class="keyword">TO</span> <span class="keyword">GROUPS</span>;</span><br></pre></td></tr></tbody></table></figure><p>다시 SUPPLIERS 테이블의 DDL을 확인:</p><img src="/images/S-SQL-Table-1/image-20201209093846550.png" alt="image-20201209093846550" style="zoom: 67%;"><ul><li>이제 SUPPLIERS 테이블의 GROUP_ID 컬럼은 GROUPS 테이블의 ID 컬럼을 참조하고 있다.</li><li>즉 테이블명의 변경이 자동으로 반영된다.</li></ul><br><p>그렇다면 우리가 만들었던 SUPPLIER_DATA 뷰는 어떻게 되었을까?</p><img src="/images/S-SQL-Table-1/image-20201209093635706.png" alt="image-20201209093635706" style="zoom:80%;"><ul><li>테이블명이 바뀌었음에도 불구하고 자동으로 GROUPS 테이블을 참조하고 있다.</li><li>즉 테이블명의 변경이 자동으로 반영된다.</li></ul><br><h3 id="5-3-걸론"><a class="markdownIt-Anchor" href="#5-3-걸론"></a> 5-3. 걸론</h3><ol><li>ALTER TALBE 문을 활용하여 테이블의 이름을 변경 가능.</li><li>테이블 이름 변경하면, 기존의 참조무걸성 제약조건이나 뷰 등이 자동으로 반영된다.</li></ol><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 타입, 테이블 생성, CTAS (CREATE TABLE AS SELECT), 테이블 구조 변경, 테이블 이름 변경
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조작 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-2/"/>
    <id>https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-2/</id>
    <published>2020-12-07T04:46:50.000Z</published>
    <updated>2020-12-22T05:45:46.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조작-2"><a class="markdownIt-Anchor" href="#데이터-조작-2"></a> 데이터 조작 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-delete-%EB%AC%B8"><strong>1. DELETE 문</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-delete-%EB%AC%B8%EB%B2%95">1-2. DELETE 문법</a><ul><li><a href="#1-delete">(1) DELETE</a></li><li><a href="#2-delete-join">(2) DELETE JOIN</a></li></ul></li><li><a href="#1-3-delete-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. DELETE 문 실습</a><ul><li><a href="#1-%ED%8A%B9%EC%A0%95-%EC%A1%B0%EA%B1%B4%EC%9D%98-%ED%96%89%EC%9D%84-%EC%82%AD%EC%A0%9C">(1) 특정 조건의 행을 삭제</a></li><li><a href="#2-delete-join%EC%9D%98-%EC%82%AC%EC%9A%A9">(2) DELETE JOIN의 사용</a></li><li><a href="#3-%EC%A0%84%EC%B2%B4-%ED%96%89-%EC%82%AD%EC%A0%9C">(3) 전체 행 삭제</a></li></ul></li></ul></li><li><a href="#2-upsert-%EB%AC%B8"><strong>2. UPSERT 문</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-upsert-%EB%AC%B8%EB%B2%95">2-2. UPSERT 문법</a></li><li><a href="#2-3-upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">2-3. UPSERT 문 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5-do-nothing">&gt;&gt; UPSERT 문 실습 – DO NOTHING</a></li><li><a href="#upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5-update">&gt;&gt; UPSERT 문 실습 – UPDATE</a></li></ul></li></ul></li><li><a href="#3-export-%EC%9E%91%EC%97%85"><strong>3. EXPORT 작업</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-export-%EC%9E%91%EC%97%85-%EC%8B%A4%EC%8A%B5">3-2. EXPORT 작업 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%97%91%EC%85%80csv-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 엑셀(.CSV) 형식으로 출력</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%ED%85%8D%EC%8A%A4%ED%8A%B8txt-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 텍스트(.TXT) 파일로 출력</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%BB%AC%EB%9F%BC%EB%AA%85-%EC%97%86%EC%9D%B4-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 컬럼명 없이 출력</a></li></ul></li></ul></li><li><a href="#4-import-%EC%9E%91%EC%97%85"><strong>4. IMPORT 작업</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-import-%EC%9E%91%EC%97%85-%EC%8B%A4%EC%8A%B5">4-2. IMPORT 작업 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%97%91%EC%85%80%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 엑셀파일을 적재</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 텍스트 파일을 적재</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%BB%AC%EB%9F%BC%EB%AA%85%EC%9D%B4-%EC%97%86%EB%8A%94-%EC%97%91%EC%85%80-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 컬럼명이 없는 엑셀 파일 적재</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-delete-문"><a class="markdownIt-Anchor" href="#1-delete-문"></a> <strong>1. DELETE 문</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>DELETE문은 테이블에서 특정 데이터를 삭제하거나 테이블 내에 존재하는 모든 데이터를 삭제할 수 있다.</p><br><h3 id="1-2-delete-문법"><a class="markdownIt-Anchor" href="#1-2-delete-문법"></a> 1-2. DELETE 문법</h3><h4 id="1-delete"><a class="markdownIt-Anchor" href="#1-delete"></a> (1) DELETE</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> TARGET_TABLE A</span><br><span class="line"> <span class="keyword">WHERE</span> 조건식;          <span class="comment">-- 삭제할 행에 대한 조건</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-delete-join"><a class="markdownIt-Anchor" href="#2-delete-join"></a> (2) DELETE JOIN</h4><p>DELETE 시 다른 테이블의 내용을 참조하고 싶을 때 DELETE JOIN 문을 사용한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> TARGET_TABLE A</span><br><span class="line"> <span class="keyword">USING</span> REF_TABLE B     <span class="comment">-- 참조 테이블 지정 </span></span><br><span class="line"> <span class="keyword">WHERE</span> 조건식;          <span class="comment">-- JOIN &amp; DELETE 조건</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><br><h3 id="1-3-delete-문-실습"><a class="markdownIt-Anchor" href="#1-3-delete-문-실습"></a> 1-3. DELETE 문 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135107666.png" alt="image-20201204135107666" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><h4 id="1-특정-조건의-행을-삭제"><a class="markdownIt-Anchor" href="#1-특정-조건의-행을-삭제"></a> (1) 특정 조건의 행을 삭제</h4><p><strong>[MISSION]</strong> LINK테이블에서 ID가 5인 행을 삭제</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135107666.png" alt="image-20201204135107666" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">LINK</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><br><h4 id="2-delete-join의-사용"><a class="markdownIt-Anchor" href="#2-delete-join의-사용"></a> (2) DELETE JOIN의 사용</h4><p><strong>[MISSION]</strong>  LINK_TMP 테이블에서 ID가 LINK 테이블의 ID 와 매칭된 행을 삭제</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> LINK_TMP A</span><br><span class="line"> <span class="keyword">USING</span> <span class="keyword">LINK</span> B</span><br><span class="line"> <span class="keyword">WHERE</span> A.ID = B.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-2/image-20201204144847961.png" alt="image-20201204144847961"></p><br><br><h4 id="3-전체-행-삭제"><a class="markdownIt-Anchor" href="#3-전체-행-삭제"></a> (3) 전체 행 삭제</h4><p><strong>&gt;&gt; LINK 테이블</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204150231132.png" alt="image-20201204150231132" style="zoom:80%;"><br><br><p><strong>&gt;&gt; LINK_TMP 테이블</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204144847961.png" alt="image-20201204144847961" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> LINK_TMP;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-2/image-20201204150440196.png" alt="image-20201204150440196"></p><br><br><h2 id="2-upsert-문"><a class="markdownIt-Anchor" href="#2-upsert-문"></a> <strong>2. UPSERT 문</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>UPSERT문은 INSERT를 시도할 때 조건(상황)에 따라 UPDATE를 할 수 있는 구문이다. 복잡한 업무 처리에 자주 사용된다.</p><br><h3 id="2-2-upsert-문법"><a class="markdownIt-Anchor" href="#2-2-upsert-문법"></a> 2-2. UPSERT 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLE_NAME (COLUMN_1) </span><br><span class="line">     <span class="keyword">VALUES</span> (VALUE_1)                 <span class="comment">-- INSERT 시도</span></span><br><span class="line"><span class="keyword">ON</span> CONFLICT TARGET <span class="keyword">ACTION</span>;            <span class="comment">-- 충돌 시 다른 액션</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-upsert-문-실습"><a class="markdownIt-Anchor" href="#2-3-upsert-문-실습"></a> 2-3. UPSERT 문 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMERS</span><br><span class="line">(</span><br><span class="line">  CUSTOMER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ACTIVE <span class="built_in">BOOL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li><p>NAME 컬럼이 UNIQUE 제약 조건 컬럼임을 주의 한다.</p></li><li><p>즉 NAME 컬럼은 중복된 값이 존재할 수 없다</p><br></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'IBM'</span>, <span class="string">'contact@ibm.com'</span>),</span><br><span class="line">  (<span class="string">'Microsoft'</span>, <span class="string">'contact@microsoft.com'</span>),</span><br><span class="line">  (<span class="string">'Intel'</span>, <span class="string">'contact@intel.com'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204161107381.png" alt="image-20201204161107381" style="zoom:80%;"><br><br><h4 id="upsert-문-실습-do-nothing"><a class="markdownIt-Anchor" href="#upsert-문-실습-do-nothing"></a> &gt;&gt; UPSERT 문 실습 – DO NOTHING</h4><p><strong>DO NOTHING:</strong>  INSERT 액션이 충돌 시 (기존에 존재할 경우) 아무것도 안함</p><br><p><strong>[MISSION]</strong>  Microsoft(기존에 존재하는 NAME)에 EMAIL 주소 추가</p><ul><li>'Microsoft’라는 NAME이 이미 존재하므로 NAME의 UNIQUE 조건과 충돌</li><li>이런 경우에 아무 액션도 취하지 않음 (즉, 변화 없음)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)      <span class="comment">-- 충돌 시(기존에 존재할 경우)</span></span><br><span class="line"><span class="keyword">DO</span> <span class="keyword">NOTHING</span>;             <span class="comment">-- 아무 것도 안함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204161107381.png" alt="image-20201204161107381" style="zoom:80%;"><br><ul><li>해당 DO NOTHING 명령어 없으면 SQL ERROR 발생</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207095200026.png" alt="image-20201207095200026" style="zoom: 80%;"><br><br><h4 id="upsert-문-실습-update"><a class="markdownIt-Anchor" href="#upsert-문-실습-update"></a> &gt;&gt; UPSERT 문 실습 – UPDATE</h4><p><strong>UPDATE:</strong>  INSERT 액션이 충돌 시 (기존에 존재할 경우) UPDATE 함</p><br><p><strong>[MISSION]</strong>  Microsoft(기존에 존재하는 NAME)에 EMAIL 주소 추가</p><ul><li><p>'Microsoft’라는 NAME이 이미 존재하므로 NAME의 UNIQUE 조건과 충돌</p></li><li><p>이런 경우에 데이터를 UPDATE함</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)       <span class="comment">-- 충돌 검증 컬럼</span></span><br><span class="line">  <span class="keyword">DO</span> <span class="keyword">UPDATE</span></span><br><span class="line">        <span class="keyword">SET</span> EMAIL = EXCLUDED.EMAIL || <span class="string">'; '</span> || CUSTOMERS.EMAIL;</span><br><span class="line">            <span class="comment">-- EXCLUDED.EMAIL은 위에서 INSERT 시도한 EMAIL값을 가리킴</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207102128506.png" alt="image-20201207102128506" style="zoom:80%;"><br><br><h2 id="3-export-작업"><a class="markdownIt-Anchor" href="#3-export-작업"></a> <strong>3. EXPORT 작업</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>EXPORT는 테이블의 데이터를 다른 형태의 데이터로 추출하는 작업이다. 대표적으로 CSV 형식으로 가장 많이 추출한다.</p><br><h3 id="3-2-export-작업-실습"><a class="markdownIt-Anchor" href="#3-2-export-작업-실습"></a> 3-2. EXPORT 작업 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATEGORY;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207110518434.png" alt="image-20201207110518434" style="zoom:80%;"><br><h4 id="실습-엑셀csv-형식으로-출력"><a class="markdownIt-Anchor" href="#실습-엑셀csv-형식으로-출력"></a> &gt;&gt; 실습 – 엑셀(.CSV) 형식으로 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY (CATEGORY_ID, NAME, LAST_UPDATE)  <span class="comment">-- 추출할 테이블과 컬럼을 지정</span></span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY.csv'               <span class="comment">-- 추출한 데이터를 저장할 파일을 지정</span></span><br><span class="line">DELIMITER ','       <span class="comment">-- 구분자를 지정</span></span><br><span class="line">CSV HEADER;         <span class="comment">-- 파일 형식을 지정</span></span><br></pre></td></tr></tbody></table></figure><ul><li>저장 디랙토리(폴더)는 반드시 미리 존재해야 한다 (여기서는 ‘E:\Study_SQL’)</li></ul><br><img src="/images/S-SQL-Manipulation-2/image-20201207111613206.png" alt="image-20201207111613206" style="zoom: 60%;"><br><img src="/images/S-SQL-Manipulation-2/image-20201207111745428.png" alt="image-20201207111745428" style="zoom:50%;"><br><h4 id="실습-텍스트txt-파일로-출력"><a class="markdownIt-Anchor" href="#실습-텍스트txt-파일로-출력"></a> &gt;&gt; 실습 – 텍스트(.TXT) 파일로 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY(CATEGORY_ID, NAME, LAST_UPDATE)</span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY.txt'</span><br><span class="line">DELIMITER '|'</span><br><span class="line">CSV HEADER;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207112258741.png" alt="image-20201207112258741" style="zoom:60%;"><br><img src="/images/S-SQL-Manipulation-2/image-20201207112337940.png" alt="image-20201207112337940" style="zoom:50%;"><br><h4 id="실습-컬럼명-없이-출력"><a class="markdownIt-Anchor" href="#실습-컬럼명-없이-출력"></a> &gt;&gt; 실습 – 컬럼명 없이 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY(CATEGORY_ID, NAME, LAST_UPDATE)</span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207112700637.png" alt="image-20201207112700637" style="zoom:50%;"><br><br><h2 id="4-import-작업"><a class="markdownIt-Anchor" href="#4-import-작업"></a> <strong>4. IMPORT 작업</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>IMPORT는 다른 형식의 데이터를 테이블에 넣는 작업을 말한다. 데이터 구축 시 자주 사용 된다.</p><br><h3 id="4-2-import-작업-실습"><a class="markdownIt-Anchor" href="#4-2-import-작업-실습"></a> 4-2. IMPORT 작업 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORY_IMPORT</span><br><span class="line">(</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">"NAME"</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_UPDATE <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOW</span>(),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> CATEGORY_IMPORT_PKEY PRIMARY <span class="keyword">KEY</span> (CATEGORY_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207113847655.png" alt="image-20201207113847655"><br><h4 id="실습-엑셀파일을-적재"><a class="markdownIt-Anchor" href="#실습-엑셀파일을-적재"></a> &gt;&gt; 실습 – 엑셀파일을 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)  <span class="comment">-- 적재할 테이블 및 컬럼을 지정</span></span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY.csv'                     <span class="comment">-- 적재할 파일을 지정</span></span><br><span class="line">DELIMITER ','        <span class="comment">-- 적재할 파일의 구분자를 알려준다</span></span><br><span class="line">CSV HEADER;          <span class="comment">-- 파일 형식을 지정한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207114306348.png" alt="image-20201207114306348" style="zoom:80%;"><br><h4 id="실습-텍스트-파일을-적재"><a class="markdownIt-Anchor" href="#실습-텍스트-파일을-적재"></a> &gt;&gt; 실습 – 텍스트 파일을 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 실습 전 먼저 데이터를 삭제해야 함</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY.txt'</span><br><span class="line">DELIMITER '|'</span><br><span class="line">CSV HEADER;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207130748150.png" alt="image-20201207130748150" style="zoom:80%;"><br><h4 id="실습-컬럼명이-없는-엑셀-파일-적재"><a class="markdownIt-Anchor" href="#실습-컬럼명이-없는-엑셀-파일-적재"></a> &gt;&gt; 실습 – 컬럼명이 없는 엑셀 파일 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 실습 전 먼저 데이터를 삭제해야 함</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207131800879.png" alt="image-20201207131800879" style="zoom:80%;"><br><ul><li><p>DB_CATEGOROY_2.csv 파일은 컬럼명(header) 이 존재하지 않으므로 반드시 HEADER를 제거해야한다.</p></li><li><p>HEADER를 제거하지 않을 경우 가장 첫번째 데이터를 헤더로 인식하여 한건이 누락된다</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV HEADER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207132305818.png" alt="image-20201207132305818" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      DELETE 문, UPSERT 문, EXPORT 작업, IMPORT 작업
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 8. Manipulation" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-8-Manipulation/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Manipulation" scheme="https://hyemin-kim.github.io/tags/Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조작 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-1/"/>
    <id>https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-1/</id>
    <published>2020-12-07T04:45:49.000Z</published>
    <updated>2020-12-22T05:41:02.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조작-1"><a class="markdownIt-Anchor" href="#데이터-조작-1"></a> 데이터 조작 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-insert-%EB%AC%B8"><strong>1. INSERT 문</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-insert-%EB%AC%B8%EB%B2%95">1-2. INSERT 문법</a></li><li><a href="#1-3-insert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. INSERT 문 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#insert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; INSERT 문 실습</a></li></ul></li></ul></li><li><a href="#2-update-%EB%AC%B8"><strong>2. UPDATE 문</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-update-%EB%AC%B8%EB%B2%95">2-2. UPDATE 문법</a></li><li><a href="#2-3-update-%EC%8B%A4%EC%8A%B5">2-3. UPDATE 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#update-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; UPDATE 문 실습</a></li></ul></li></ul></li><li><a href="#3-update-join-%EB%AC%B8"><strong>3. UPDATE JOIN 문</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-update-join-%EB%AC%B8%EB%B2%95">3-2. UPDATE JOIN 문법</a></li><li><a href="#3-3-update-join-%EC%8B%A4%EC%8A%B5">3-3. UPDATE JOIN 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-3">&gt;&gt; 실습 준비</a></li><li><a href="#update-join-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; UPDATE JOIN 문 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-insert-문"><a class="markdownIt-Anchor" href="#1-insert-문"></a> <strong>1. INSERT 문</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>INSERT는 테이블이 만들어지면 데이블 안에 데이터를 추가하는 명령어이다.</p><br><h3 id="1-2-insert-문법"><a class="markdownIt-Anchor" href="#1-2-insert-문법"></a> 1-2. INSERT 문법</h3><p><strong>&gt;&gt; 1) 테이블의 컬럼 순서대로 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">  TABLE_NAME      <span class="comment">-- INSERT할 테이블 지정</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  VALUE1,         <span class="comment">-- 각 컬럼 값을 입력한다</span></span><br><span class="line">  VALUE2,</span><br><span class="line">  VALUE3,</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; 2) 테이블 컬럼 지정</strong>  (더 많이 쓰임. 컬럼 명을 명시해주기 때문에 유지보수에 용이함)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">   TABLE_NAME</span><br><span class="line">   (</span><br><span class="line">    COLUMN_1,</span><br><span class="line">    COLUMN_2</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  VALUE1,</span><br><span class="line">  VALUE2</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-insert-문-실습"><a class="markdownIt-Anchor" href="#1-3-insert-문-실습"></a> 1-3. INSERT 문 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LINK라는 테이블을 생성함</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">URL</span> <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</span><br><span class="line">  REL <span class="built_in">VARCHAR</span> (<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><br><h4 id="insert-문-실습"><a class="markdownIt-Anchor" href="#insert-문-실습"></a> &gt;&gt; INSERT 문 실습</h4><p><strong>(1) 1개 ROW 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'http://naver.com'</span>, <span class="string">'Naver'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203111802507.png" alt="image-20201203111802507"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 내용 안에 작은 따움표를 추가하고 싶으면 작은 따움표 두개(''##'')를 더 추가해주면 됨. </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'''http://naver.com'''</span>, <span class="string">'Naver'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILM;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-1/image-20201203113353940.png" alt="image-20201203113353940"></p><br><br><p><strong>(2) 동시에 N개 ROW 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'http://www.google.com'</span>, <span class="string">'Google'</span>),</span><br><span class="line"> (<span class="string">'http://www.bing.com'</span>, <span class="string">'Bing'</span>),</span><br><span class="line"> (<span class="string">'http://www.baidu.com'</span>, <span class="string">'BaiDu'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><p><strong>(3) 테이블 프레임에 테이블을 입력</strong></p><p>&gt;  LINK 테이블의 스키마(껍데기)만 가져와서 LINK_TMP 테이블을 생성한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> LINK_TMP <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span> = <span class="number">1</span>;      <span class="comment">-- LINK_TMP 테이블의 구조는 LINK와 같고 데이터는 0건이 된다.</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">       LINK_TMP</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><h2 id="2-update-문"><a class="markdownIt-Anchor" href="#2-update-문"></a> <strong>2. UPDATE 문</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>UPDATE 문은 테이블에 존재하는 데이터를 수정하는 작업이다. 업무를 처리하는데 필수적인 것이며 동시성에 유의해야 한다.</p><ul><li>UPDATE는 대상 행에 대해서 락(LOCK)을 잡는다.</li><li>락(LOCK)이란 다른 사용자는 해당 행에 대해서 작업을 하지 못한다는 것이다. (대기하게 됨)</li><li>즉 UPDATE를 한 후 재빨리 COMMIT을 하지 않는다면 RDBMS의 동시성이 낮아진다.</li></ul><br><h3 id="2-2-update-문법"><a class="markdownIt-Anchor" href="#2-2-update-문법"></a> 2-2. UPDATE 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  TABLE_NAME           <span class="comment">-- UPDATE할 테이블 지정</span></span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  COLUMN_1 = VALUE1,   <span class="comment">-- 수정할 컬럼 및 값 입력</span></span><br><span class="line">  COLUMN_2 = VALUE2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  조건;                 <span class="comment">-- 대상 조건</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-update-실습"><a class="markdownIt-Anchor" href="#2-3-update-실습"></a> 2-3. UPDATE 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> LAST_UPDATE <span class="built_in">DATE</span>;    <span class="comment">-- LINK테이블에 LAST_UPDATE컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> LAST_UPDATE <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_DATE</span>;  <span class="comment">-- LAST_UPDATE 컬럼의 기본값을 현재시간으로 함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203160947571.png" alt="image-20201203160947571" style="zoom:80%;"><br><br><h4 id="update-문-실습"><a class="markdownIt-Anchor" href="#update-문-실습"></a> &gt;&gt; UPDATE 문 실습</h4><p><strong>(1) 지정 범위 수정</strong> (WHERE절)</p><p><strong>[MISSION]</strong>  LAST_UPDATE 컬럼의 값을 지정한 DEFAULT값으로 UPDATE하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> LAST_UPDATE = <span class="keyword">DEFAULT</span></span><br><span class="line"> <span class="keyword">WHERE</span> LAST_UPDATE <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203171411659.png" alt="image-20201203171411659" style="zoom:80%;"><br><br><p><strong>(2) 전체 테이블 수정</strong></p><p><strong>[MISSION]</strong>  REL컬럼의 값을 'NO DATA’로 수정하기</p><ul><li>이 기능은 조심해서 사용 필요.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> REL = <span class="string">'NO DATA'</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203172450557.png" alt="image-20201203172450557" style="zoom:80%;"><br><br><p><strong>(3) 전체 테이블 수정 – 특정 컬럼을 이용</strong></p><p><strong>[MISSION]</strong>  DESCRIPTION 컬럼을 NAME 컬럼의 값으로 채우기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> DESCRIPTION = <span class="keyword">NAME</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204092744650.png" alt="image-20201204092744650" style="zoom:80%;"><br><br><h2 id="3-update-join-문"><a class="markdownIt-Anchor" href="#3-update-join-문"></a> <strong>3. UPDATE JOIN 문</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>UPDATA 시 다른 테이블의 내용을 참조하고 싶을 때 UPDATE JOIN 문을 사용한다. 복잡한 업무를 처리하는데 매우 유용한 방법이다.</p><br><h3 id="3-2-update-join-문법"><a class="markdownIt-Anchor" href="#3-2-update-join-문법"></a> 3-2. UPDATE JOIN 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">       TARGET_TABLE A              <span class="comment">-- UPDATE할 테이블 지정</span></span><br><span class="line">   <span class="keyword">SET</span> A.COLUMN_1 = 표현식          <span class="comment">-- 특정 컬럼 UPDATE</span></span><br><span class="line">  <span class="keyword">FROM</span> REF_TABLE B                 <span class="comment">-- 참조 테이블 지정</span></span><br><span class="line"> <span class="keyword">WHERE</span> A.COLUMN_1 = B.COLUMN_1;    <span class="comment">-- 조인 조건</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-update-join-실습"><a class="markdownIt-Anchor" href="#3-3-update-join-실습"></a> 3-3. UPDATE JOIN 실습</h3><h4 id="실습-준비-3"><a class="markdownIt-Anchor" href="#실습-준비-3"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT_SEGMENT</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"> <span class="keyword">SEGMENT</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> DISCOUNT <span class="built_in">NUMERIC</span> (<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT_SEGMENT</span><br><span class="line">(<span class="keyword">SEGMENT</span>, DISCOUNT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">   (<span class="string">'Grand Luxury'</span>, <span class="number">0.05</span>),</span><br><span class="line">   (<span class="string">'Luxury'</span>, <span class="number">0.06</span>),</span><br><span class="line">   (<span class="string">'Mass'</span>, <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> PRICE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">2</span>),          <span class="comment">-- 정가</span></span><br><span class="line"> NET_PRICE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">2</span>),      <span class="comment">-- 할인가 (실 판매가)</span></span><br><span class="line"> SEGMENT_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(SEGMENT_ID)</span><br><span class="line"> <span class="keyword">REFERENCES</span> PRODUCT_SEGMENT(<span class="keyword">ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT (<span class="keyword">NAME</span>, PRICE, SEGMENT_ID)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'K5'</span>, <span class="number">804.89</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'K7'</span>, <span class="number">228.55</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">'K9'</span>, <span class="number">366.45</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SONATA'</span>, <span class="number">145.33</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'SPARK'</span>, <span class="number">551.77</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'AVANTE'</span>, <span class="number">261.58</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'LOZTE'</span>, <span class="number">519.62</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SANTAFE'</span>, <span class="number">843.31</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TUSON'</span>, <span class="number">254.18</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'TRAX'</span>, <span class="number">427.78</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'ORANDO'</span>, <span class="number">936.29</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'RAY'</span>, <span class="number">910.34</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'MORNING'</span>, <span class="number">208.33</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'VERNA'</span>, <span class="number">985.45</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'K8'</span>, <span class="number">841.26</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TICO'</span>, <span class="number">896.38</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'MATIZ'</span>, <span class="number">575.74</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SPORTAGE'</span>, <span class="number">530.64</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'ACCENT'</span>, <span class="number">892.43</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TOSCA'</span>, <span class="number">161.71</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-1/image-20201204103115223.png" alt="image-20201204103115223"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_SEGMENT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204103657029.png" alt="image-20201204103657029" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204103747274.png" alt="image-20201204103747274" style="zoom:80%;"><br><br><h4 id="update-join-문-실습"><a class="markdownIt-Anchor" href="#update-join-문-실습"></a> &gt;&gt; UPDATE JOIN 문 실습</h4><p><strong>[MISSION]</strong>  PRODUCT_SEGMENT 테이블에 있는 할인율(DISCOUNT) 정보를 이용해서 PRODUCT 테이블의 NET_PRICE (할인가 / 실 판매가)를 계산하여 채우기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> PRODUCT A</span><br><span class="line">   <span class="keyword">SET</span> NET_PRICE = A.PRICE * (<span class="number">1</span> - B.DISCOUNT)</span><br><span class="line">  <span class="keyword">FROM</span> PRODUCT_SEGMENT B</span><br><span class="line"> <span class="keyword">WHERE</span> A.SEGMENT_ID = B.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204112104933.png" alt="image-20201204112104933" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      INSERT 문, UPDATE 문, UPDATE JOIN 문
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 8. Manipulation" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-8-Manipulation/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Manipulation" scheme="https://hyemin-kim.github.io/tags/Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 집합 연산자와 서브쿼리</title>
    <link href="https://hyemin-kim.github.io/2020/12/01/E-SQL-Aggregate-and-SubQuery/"/>
    <id>https://hyemin-kim.github.io/2020/12/01/E-SQL-Aggregate-and-SubQuery/</id>
    <published>2020-12-01T02:19:23.000Z</published>
    <updated>2020-12-01T03:48:24.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-집합-연산자와-서브쿼리"><a class="markdownIt-Anchor" href="#실습-집합-연산자와-서브쿼리"></a> 【실습】 집합 연산자와 서브쿼리</h1><br><h3 id="1-아래-sql문은-film-테이블을-2번-스캔하고-rental_rate가-평균-이상인-film의-id-제목과-rental_rate를-출력했다-film-테이블을-한번만-scan하여-동일한-결과-집합을-구하는-sql을-작성하라"><a class="markdownIt-Anchor" href="#1-아래-sql문은-film-테이블을-2번-스캔하고-rental_rate가-평균-이상인-film의-id-제목과-rental_rate를-출력했다-film-테이블을-한번만-scan하여-동일한-결과-집합을-구하는-sql을-작성하라"></a> <strong>[1] 아래 SQL문은 FILM 테이블을 2번 스캔하고 RENTAL_RATE가 평균 이상인 FILM의 ID, 제목과 RENTAL_RATE를 출력했다. FILM 테이블을 한번만 SCAN하여 동일한 결과 집합을 구하는 SQL을 작성하라.</strong></h3><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201093133569.png" alt="image-20201201093133569" style="zoom:80%;"><br><br><p><strong>&gt;&gt; 두 번 스캔</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  RENTAL_RATE &gt;</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line">  <span class="keyword">FROM</span> FILM</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201095113118.png" alt="image-20201201095113118" style="zoom:80%;"><br><br><p><strong>&gt;&gt; 한 번만 스캔</strong></p><p><strong>1) 우선 분석함수 AVG를 사용해서 평균을 구한다.</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE,</span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">OVER</span>() <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201101435553.png" alt="image-20201201101435553" style="zoom:80%;"><br><br><p><strong>2) 1번에서 구한 집합을 인라인뷰로 감싸서 평균보다 큰 값을 구한다.</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, TITLE, RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    FILM_ID,</span><br><span class="line">    TITLE,</span><br><span class="line">    RENTAL_RATE,</span><br><span class="line">    <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">OVER</span>() <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    FILM</span><br><span class="line">) A</span><br><span class="line"><span class="keyword">WHERE</span> A.RENTAL_RATE &gt; A.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201095113118.png" alt="image-20201201095113118" style="zoom:80%;"><br><ul><li>똑같은 결과가 나오는 것을 확인할 수 있다</li></ul><br><br><h3 id="2-아래-sql문은-except-연산을-사용하여-재고가-없는-영화를-구하고-있다-해당-sql문은-except연산을-사용하지-말고-같은-결과를-도출하라"><a class="markdownIt-Anchor" href="#2-아래-sql문은-except-연산을-사용하여-재고가-없는-영화를-구하고-있다-해당-sql문은-except연산을-사용하지-말고-같은-결과를-도출하라"></a> <strong>[2] 아래 SQL문은 EXCEPT 연산을 사용하여 재고가 없는 영화를 구하고 있다. 해당 SQL문은 EXCEPT연산을 사용하지 말고 같은 결과를 도출하라.</strong></h3><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201103003214.png" alt="image-20201201103003214" style="zoom:80%;"><br><br><p><strong>&gt;&gt; EXCEPT 연산 사용</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">  INVENTORY.FILM_ID, TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ON</span> FILM.FILM_ID = INVENTORY.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201105357613.png" alt="image-20201201105357613" style="zoom:80%;"><br><br><p><strong>&gt;&gt; NOT EXISTS 연산 사용</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM F</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">    <span class="keyword">FROM</span> INVENTORY I</span><br><span class="line">   <span class="keyword">WHERE</span> F.FILM_ID = I.FILM_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201105357613.png" alt="image-20201201105357613" style="zoom:80%;"><br><ul><li>똑같은 결과가 나오는 것을 확인할 수 있다</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-집합-연산자와-서브쿼리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-집합-연산자와-서브쿼리&quot;&gt;&lt;/a&gt; 【실습】 집합 연산자와 서브쿼리&lt;/h1&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-아래-sql문은-film-테이블을-
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="SubQuery" scheme="https://hyemin-kim.github.io/tags/SubQuery/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 서브쿼리 (SubQuery)</title>
    <link href="https://hyemin-kim.github.io/2020/11/27/S-SQL-SubQuery/"/>
    <id>https://hyemin-kim.github.io/2020/11/27/S-SQL-SubQuery/</id>
    <published>2020-11-27T02:16:42.000Z</published>
    <updated>2020-11-27T04:07:01.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="서브쿼리"><a class="markdownIt-Anchor" href="#서브쿼리"></a> 서브쿼리</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EB%9E%80"><strong>1. 서브쿼리란?</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC-%EC%9D%B4%ED%95%B4">1-2. 서브쿼리 이해</a><ul><li><a href="#mission">[MISSION]</a></li><li><a href="#method-1-%EB%A9%94%EC%9D%B8%EC%BF%BC%EB%A6%AC-2%EA%B0%9C-%EC%82%AC%EC%9A%A9">&gt;&gt; Method 1: 메인쿼리 2개 사용</a></li><li><a href="#method-2-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC-%EC%82%AC%EC%9A%A9">&gt;&gt; Method 2: 서브쿼리 사용</a><ul><li><a href="#1-%EC%A4%91%EC%B2%A9-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EC%9D%98-%ED%99%9C%EC%9A%A9">(1) 중첩 서브쿼리의 활용</a></li><li><a href="#2-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EB%B7%B0%EC%9D%98-%ED%99%9C%EC%9A%A9">(2) 인라인 뷰의 활용</a></li><li><a href="#3-%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EC%9D%98-%ED%99%9C%EC%9A%A9">(3) 스칼라 서브쿼리의 활용</a></li></ul></li></ul></li></ul></li><li><a href="#2-any-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>2. ANY 연산자</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-any-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">2-2. ANY 연산자 실습</a><ul><li><a href="#%EC%A4%80%EB%B9%84">&gt;&gt; 준비</a></li><li><a href="#mission-1">&gt;&gt; MISSION 1</a></li><li><a href="#mission-2">&gt;&gt; MISSION 2</a></li></ul></li></ul></li><li><a href="#3-all-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>3. ALL 연산자</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-all-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">3-2. ALL 연산자 실습</a><ul><li><a href="#mission-1-2">&gt;&gt; MISSION 1</a></li><li><a href="#mission-2-2">&gt;&gt; MISSION 2</a></li></ul></li></ul></li><li><a href="#4-exists-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>4. EXISTS 연산자</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-exists-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">4-2. EXISTS 연산자 실습</a><ul><li><a href="#mission-2">&gt;&gt; MISSION</a></li></ul></li></ul></li><li><a href="#5-not-exists-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>5. NOT EXISTS 연산자</strong></a><ul><li><a href="#5-1-%EA%B0%9C%EB%85%90">5-1. 개념</a></li><li><a href="#5-2-not-exists-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">5-2. NOT EXISTS 연산자 실습</a><ul><li><a href="#mission-3">&gt;&gt; MISSION</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-서브쿼리란"><a class="markdownIt-Anchor" href="#1-서브쿼리란"></a> <strong>1. 서브쿼리란?</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>서브쿼리는 SQL문 내에서 메인 쿼리가 아닌 하위에 존재하는 쿼리를 말한다.</p><p>서브쿼리를 활용함으로써 다양한 결과를 도출할 수 있다.</p><br><h3 id="1-2-서브쿼리-이해"><a class="markdownIt-Anchor" href="#1-2-서브쿼리-이해"></a> 1-2. 서브쿼리 이해</h3><h4 id="mission"><a class="markdownIt-Anchor" href="#mission"></a> [MISSION]</h4><p><strong>FILM 테이블에서 RENTAL_RATE가 평균 보다 큰 집합 구하기</strong></p><img src="/images/S-SQL-SubQuery/image-20201123221816036.png" alt="image-20201123221816036" style="zoom:80%;"><br><br><h4 id="method-1-메인쿼리-2개-사용"><a class="markdownIt-Anchor" href="#method-1-메인쿼리-2개-사용"></a> &gt;&gt; Method 1: 메인쿼리 2개 사용</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-SubQuery/image-20201123222059927.png" alt="image-20201123222059927"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  RENTAL_RATE &gt; <span class="number">2.98</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><p><strong>Q:</strong>  위 2개의 SQL문을 결합하여 하나의 SQL문으로 결과를 도출할 수 없을까?</p><p><strong>A:</strong>  서브쿼리를 사용하면 된다! (<strong>중첩 서브쿼리</strong>, <strong>인라인 뷰</strong>, <strong>스칼라 서브쿼리</strong>가 존재한다.)</p><br><h4 id="method-2-서브쿼리-사용"><a class="markdownIt-Anchor" href="#method-2-서브쿼리-사용"></a> &gt;&gt; Method 2: 서브쿼리 사용</h4><h5 id="1-중첩-서브쿼리의-활용"><a class="markdownIt-Anchor" href="#1-중첩-서브쿼리의-활용"></a> (1) 중첩 서브쿼리의 활용</h5><p><em><strong>중첩 서브쿼리 (Nested Subquery):</strong></em>  메인쿼리의 WHERE절에 나타나는 서브쿼리</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  RENTAL_RATE &gt; </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h5 id="2-인라인-뷰의-활용"><a class="markdownIt-Anchor" href="#2-인라인-뷰의-활용"></a> (2) 인라인 뷰의 활용</h5><p><em><strong>인라인 뷰 (Inline View):</strong></em> 메인쿼리의 FROM 절에 나타나는 서브쿼리 (서브쿼리 SELECT 절의 결과를 메인쿼리의 FROM 절에서 하나의 테이블처럼 사용)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">      <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line">   <span class="keyword">FROM</span></span><br><span class="line">      FILM</span><br><span class="line">  ) B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.RENTAL_RATE &gt; B.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h5 id="3-스칼라-서브쿼리의-활용"><a class="markdownIt-Anchor" href="#3-스칼라-서브쿼리의-활용"></a> (3) 스칼라 서브쿼리의 활용</h5><p><em><strong>스칼라 서브쿼리 (Scala Subquery):</strong></em>  SELECT의 리스트 안에 존재하는 서브쿼리</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">    A.FILM_ID,</span><br><span class="line">    A.TITLE,</span><br><span class="line">    A.RENTAL_RATE,</span><br><span class="line">    (</span><br><span class="line">     <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(L.RENTAL_RATE)</span><br><span class="line">       <span class="keyword">FROM</span> FILM L</span><br><span class="line">    ) <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line"> <span class="keyword">FROM</span> </span><br><span class="line">    FILM A</span><br><span class="line">) A</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.RENTAL_RATE &gt; A.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h2 id="2-any-연산자"><a class="markdownIt-Anchor" href="#2-any-연산자"></a> <strong>2. ANY 연산자</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>ANY 연산자는 주로 메인쿼리 WHERE절의 비교 조건식에서 서브쿼리와 함께 사용된다. 서브쿼리에 의해 반환된 값 집합과 비교할 때 한번이라도 조건에 만족한다면 TURE를 반환한다. (즉, 서브쿼리 결과 집합중의 어떤 한 값 보다만 어떻다라면 TRUE를 반환)</p><br><h3 id="2-2-any-연산자-실습"><a class="markdownIt-Anchor" href="#2-2-any-연산자-실습"></a> 2-2. ANY 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201124090317401.png" alt="image-20201124090317401" style="zoom: 67%;"><br><br><h4 id="준비"><a class="markdownIt-Anchor" href="#준비"></a> &gt;&gt; 준비</h4><p><strong>먼저 영화 분류별 상영시간이 가장 긴 영화의 카테고리 ID 및 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  B.CATEGORY_ID,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124095000723.png" alt="image-20201124095000723" style="zoom:80%;"><br><br><h4 id="mission-1"><a class="markdownIt-Anchor" href="#mission-1"></a> &gt;&gt; MISSION 1</h4><p><strong>영화의 상영시간이 위 집합 중 어느 하나의(ANY) 값 보다만 크거나 같으면 추출 [즉, 위에서 추출된 값 들의 최소값 보다만 크거나 같으면 추출]</strong></p><blockquote><p>" &gt;= ANY " 활용</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ANY</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)        <span class="comment">-- SELECT한 변수는 하나여야 함</span></span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MIN(max) = 178 min 보다 긴거나 같은 영화를 모두 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124101911386.png" alt="image-20201124101911386" style="zoom:80%;"><br><ul><li><p>서브쿼리가 반환되는 결과가 하나의 값이 아닌 여러 값의 집합이기 때문에 ANY 연산자를 안 쓰면 ERROR가 난다.  (명확한 기준이 없기 때문)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;=</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124102530072.png" alt="image-20201124102530072"><br></li></ul><br><h4 id="mission-2"><a class="markdownIt-Anchor" href="#mission-2"></a> &gt;&gt; MISSION 2</h4><p><strong>영화의 상영시간이 위에서 추출된 값들과 동일한 영화만 추출  [즉, 위 집합 중 어느 하나의(ANY) 값과 같으면 추출]</strong></p><blockquote><p>" = ANY " 활용</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> = <span class="keyword">ANY</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124104225665.png" alt="image-20201124104225665" style="zoom:80%;"><br><br><ul><li><p>"=ANY"는 "IN"과 동일</p><p>의미: 추출된 결과 집합 리스트 안의 값들과 매칭되는 값들을 찾는다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124104225665.png" alt="image-20201124104225665" style="zoom:80%;"><br></li></ul><br><h2 id="3-all-연산자"><a class="markdownIt-Anchor" href="#3-all-연산자"></a> <strong>3. ALL 연산자</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>ALL 연산자는 주로 메인쿼리 WHERE절의 비교 조건식에서 서브쿼리와 함께 사용된다. 서브쿼리에 의해 반환된 값 집합과 비교할 때 모두 조건에 만족해야만 TURE를 반환한다. (즉, 서브쿼리 결과 집합중의 모든 값 보다 어떻다해야 TRUE를 반환)</p><br><h3 id="3-2-all-연산자-실습"><a class="markdownIt-Anchor" href="#3-2-all-연산자-실습"></a> 3-2. ALL 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201124090317401.png" alt="image-20201124090317401" style="zoom:67%;"><br><br><h4 id="mission-1-2"><a class="markdownIt-Anchor" href="#mission-1-2"></a> &gt;&gt; MISSION 1</h4><p><strong>[준비] : 먼저 영화 분류별 상영시간이 가장 긴 영화의 카테고리 ID 및 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  B.CATEGORY_ID,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124095000723.png" alt="image-20201124095000723" style="zoom:80%;"><br><p><strong>[MISSION] : 영화의 상영시간이 위 집합의 모든(ALL) 값 보다 크거나 같아야 추출 [즉, 위에서 추출된 값 들의 최대값 보다 크거나 같아야 추출]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span>  B.CATEGORY_ID</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MAX(max) = 185 min 보다 긴거나 같은 영화를 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125110610018.png" alt="image-20201125110610018" style="zoom:80%;"><br><br><h4 id="mission-2-2"><a class="markdownIt-Anchor" href="#mission-2-2"></a> &gt;&gt; MISSION 2</h4><p><strong>[준비] : 먼저 평가기준(RATING)별 영화의 평균 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  RATING,</span><br><span class="line">  <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(<span class="keyword">LENGTH</span>), <span class="number">2</span>) <span class="keyword">AS</span> AVG_LENGTH  <span class="comment">-- 소수점 2자리</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  RATING</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  AVG_LENGTH;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125115107688.png" alt="image-20201125115107688" style="zoom:80%;"><br><p><strong>[MISSION] : 위에서 출력된 평균 상영시간보다 긴 영화의 정보를 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(LENHTH), <span class="number">2</span>)    <span class="comment">-- SELECT한 변수는 하나여야 함</span></span><br><span class="line">    <span class="keyword">FROM</span> FILM</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> RATING</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MAX(avg_length) = 120.44 min 보다 긴거나 같은 영화를 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125115313350.png" alt="image-20201125115313350" style="zoom:80%;"><br><br><h2 id="4-exists-연산자"><a class="markdownIt-Anchor" href="#4-exists-연산자"></a> <strong>4. EXISTS 연산자</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>EXISTS 연산자는 주로 메인쿼리 WHERE절에서 서브쿼리와 함께 사용된다.</p><p>동작원리는 다음과 같습니다:</p><ol><li><p>먼저 메인쿼리의 TABLE에 접근하여 하나의 레코드를 가져온다.</p></li><li><p>이 레코드에 대해서 EXISTS 이하의 서브쿼리를 실행하고 서브쿼리에 의해 반환된 값 집합이 존재하는지를 판단한다.</p></li><li><p>서브쿼리에 의해 반환된 값 집합이 <strong>존재한다면</strong> <code>TRUE</code>를 반환하고 메인쿼리의 SELECT문을 그대로 실행한다.</p><p>반환된 값 집합이 <strong>존재하지 않다면</strong> <code>FALSE</code>를 반환하고 메인쿼리의 SELECT문을 실행하지 않고 바로 다음 레코드로 넘어간다.</p><br> </li></ol><p><strong>&gt;&gt; 장점:</strong> 서브쿼리에 의해 반환된 값 집합의 존재여부만을 판단하므로 연산 시 부하가 줄어든다 (성능상 유리함)</p><br><blockquote><p>EXISTS 연산자와 IN 연산자의 차이점은 <a href="https://doorbw.tistory.com/" target="_blank" rel="noopener">Tigercow.Dor</a>님의 <a href="https://doorbw.tistory.com/222" target="_blank" rel="noopener">IN / EXISTS / NOT IN / NOT EXISTS 비교</a> 에서 자세히 설명되어 있음. 참고 바람.</p></blockquote><br><h3 id="4-2-exists-연산자-실습"><a class="markdownIt-Anchor" href="#4-2-exists-연산자-실습"></a> 4-2. EXISTS 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201126110600155.png" alt="image-20201126110600155" style="zoom:67%;"><br><br><h4 id="mission-2"><a class="markdownIt-Anchor" href="#mission-2"></a> &gt;&gt; MISSION</h4><p><strong>지불내역(AMOUNT)이 11달러 초과한 고객의 이름을 출력하라</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">EXISTS</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span>         <span class="comment">-- 반환 값이 임의로 지정해도 좋다. 존재 여부만 판단하기 떄문에 무엇을 반환하든 상관없음.</span></span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT P</span><br><span class="line">   <span class="keyword">WHERE</span> P.CUSTOMER_ID = C.CUSTOMER_ID</span><br><span class="line">     <span class="keyword">AND</span> AMOUNT &gt; <span class="number">11</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME, LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201126113245331.png" alt="image-20201126113245331" style="zoom:80%;"><br><ul><li><p>동작 순서:</p><ol><li><p>먼저 메인쿼리의 CUSTOMER 테이블에서 N번째 레코드를 가져온다</p></li><li><p>그 다음 EXISTS 이하의 서브쿼리를 실행:</p><p>PAYMENT 테이블에서</p><ul><li>CUSTOMER_ID는 CUSTOMER 테이블의 CUSTOMER_ID과 동일하면서 (가져온 N번째 레코드의 CUSTOMER_ID랑만 비교)</li><li>지불내역(AMOUNT)이 11달러 초과한</li></ul><p>값의 존재 여부를 판단(하여 TURE이면 1를 반환)</p></li><li><p>STEP 2에서</p><ul><li><p>TURE로 판단되면 메인쿼리의 SELECT문을 그대로 실행 (즉 N번째 고객의 이름을 추출);</p></li><li><p>FALSE로 판단되면 메인쿼리의 SELECT 문을 실현하지 않고 그 다음 레코드 (N+1 번째 레코드)를 가져와 STEP 2 를 진행한다.</p></li></ul></li><li><p>위 과정을 반복하여 마지막 레코드까지 완료되면 해당 SQL문의 동작이 종료된다.</p></li></ol></li></ul><br><br><h2 id="5-not-exists-연산자"><a class="markdownIt-Anchor" href="#5-not-exists-연산자"></a> <strong>5. NOT EXISTS 연산자</strong></h2><h3 id="5-1-개념"><a class="markdownIt-Anchor" href="#5-1-개념"></a> 5-1. 개념</h3><p>NOT EXISTS 연산자는 주로 메인쿼리 WHERE절에서 서브쿼리와 함께 사용된다. 위에서 EXISTS에 대해서 이해했다면 크게 어려운 점이 없다.</p><p>동작원리는 다음과 같습니다:</p><ol><li><p>먼저 메인쿼리의 TABLE에 접근하여 하나의 레코드를 가져온다.</p></li><li><p>이 레코드에 대해서 EXISTS 이하의 서브쿼리를 실행하고 서브쿼리에 의해 반환된 값 집합이 존재하는지를 판단한다.</p></li><li><p>STEP 3는 EXISTS 연산자와 정 반대이다:</p><p>서브쿼리에 의해 반환된 값 집합이 <strong>존재하지 않다면</strong> <code>TRUE</code> 를 반환하고 메인쿼리의 SELECT문을 그대로 실행한다.</p><p>반환된 값 집합이 <strong>존재한다면</strong> <code>FALSE</code>를 반환하고 메인쿼리의 SELECT문을 실행하지 않고 바로 다음 레코드로 넘어간다.</p><br> </li></ol><p><strong>&gt;&gt; 장점:</strong> 서브쿼리에 의해 반환된 값 집합의 존재여부만을 판단하므로 연산 시 부하가 줄어든다 (성능상 유리함)</p><br><h3 id="5-2-not-exists-연산자-실습"><a class="markdownIt-Anchor" href="#5-2-not-exists-연산자-실습"></a> 5-2. NOT EXISTS 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201126110600155.png" alt="image-20201126110600155" style="zoom:67%;"><br><br><h4 id="mission-3"><a class="markdownIt-Anchor" href="#mission-3"></a> &gt;&gt; MISSION</h4><p><strong>지불내역(AMOUNT)이 11달러 초과한 적이 없는 고객의 이름을 출력하라</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT P</span><br><span class="line">   <span class="keyword">WHERE</span> P.CUSTOMER_ID = C.CUSTOMER_ID</span><br><span class="line">     <span class="keyword">AND</span> P.AMOUNT &gt; <span class="number">11</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME, LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201127111302306.png" alt="image-20201127111302306" style="zoom:80%;"><br><br><p>​</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      서브쿼리, ANY 연산다, ALL 연산자, EXISTS 연산다, NOT EXISTS 연산자
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 7. SubQuery" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-7-SubQuery/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집합 연산자</title>
    <link href="https://hyemin-kim.github.io/2020/11/20/S-SQL-Operation/"/>
    <id>https://hyemin-kim.github.io/2020/11/20/S-SQL-Operation/</id>
    <published>2020-11-20T05:13:20.000Z</published>
    <updated>2020-11-20T06:52:35.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집합-연산자"><a class="markdownIt-Anchor" href="#집합-연산자"></a> 집합 연산자</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-union-%EC%97%B0%EC%82%B0"><strong>1. UNION 연산</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-union-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">1-2. UNION 연산 문법</a></li><li><a href="#1-3-union-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">1-3. UNION 연산 실습</a><ul><li><a href="#1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">(1) 실습 준비</a></li><li><a href="#2-union-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">(2) UNION 연산 실습</a></li></ul></li></ul></li><li><a href="#2-union-all-%EC%97%B0%EC%82%B0"><strong>2. UNION ALL 연산</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-union-all-%EB%AC%B8%EB%B2%95">2-2. UNION ALL 문법</a></li><li><a href="#2-3-union-all-%EC%8B%A4%EC%8A%B5">2-3. UNION ALL 실습</a></li></ul></li><li><a href="#3-intersect-%EC%97%B0%EC%82%B0"><strong>3. INTERSECT 연산</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-intersect-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">3-2. INTERSECT 연산 문법</a></li><li><a href="#3-3-intersect-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">3-3. INTERSECT 연산 실습</a><ul><li><a href="#1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">(1) 실습 준비</a></li><li><a href="#2-intersect-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">(2) INTERSECT 연산 실습</a></li></ul></li></ul></li><li><a href="#4-except-%EC%97%B0%EC%82%B0"><strong>4. EXCEPT 연산</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-except-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">4-2. EXCEPT 연산 문법</a></li><li><a href="#4-3-except-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">4-3. EXCEPT 연산 실습</a></li></ul></li></ul><p></p><br><h2 id="1-union-연산"><a class="markdownIt-Anchor" href="#1-union-연산"></a> <strong>1. UNION 연산</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>두 개 이상의 SELECT 문들의 결과 집합을 단일 결과 집합으로 결합하며 결합 시 <strong>중복된 데이터는 제거</strong> 된다.</p><img src="/images/S-SQL-Operation/image-20201120094109951.png" alt="image-20201120094109951" style="zoom: 67%;"><br><h3 id="1-2-union-연산-문법"><a class="markdownIt-Anchor" href="#1-2-union-연산-문법"></a> 1-2. UNION 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_1_1,</span><br><span class="line">    COLUMN_1_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_2_1,</span><br><span class="line">    COLUMN_2_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>두 개의 SELECT 문에서 중복되는 데이터 값이 있다면 중복을 제거 된다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="1-3-union-연산-실습"><a class="markdownIt-Anchor" href="#1-3-union-연산-실습"></a> 1-3. UNION 연산 실습</h3><h4 id="1-실습-준비"><a class="markdownIt-Anchor" href="#1-실습-준비"></a> (1) 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES2007_1</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  AMOUNT <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES2007_1</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Mike'</span>, <span class="number">150000.25</span>),</span><br><span class="line">  (<span class="string">'Jon'</span>, <span class="number">132000.75</span>),</span><br><span class="line">  (<span class="string">'Mary'</span>, <span class="number">100000</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES2007_2</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  AMOUNT <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES2007_2</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Mike'</span>, <span class="number">120000.25</span>),</span><br><span class="line">  (<span class="string">'Jon'</span>, <span class="number">142000.75</span>),</span><br><span class="line">  (<span class="string">'Mary'</span>, <span class="number">100000</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES2007_1;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119164810289.png" alt="image-20201119164810289" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119164843257.png" alt="image-20201119164843257" style="zoom:80%;"><br><br><h4 id="2-union-연산-실습"><a class="markdownIt-Anchor" href="#2-union-연산-실습"></a> (2) UNION 연산 실습</h4><p><strong>&gt;&gt; 일반 UNION</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165223471.png" alt="image-20201119165223471" style="zoom:80%;"><ul><li>(‘Mary’, ‘100000’) 중복 제거됨</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NAME만 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165446423.png" alt="image-20201119165446423"><ul><li>‘Mike’, ‘Jon’, ‘Mary’ 중복 제거됨</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT만 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165653248.png" alt="image-20201119165653248" style="zoom:80%;"><ul><li>‘100000’ 중복 제거됨</li></ul><br><p><strong>&gt;&gt; UNION + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES2007_2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>             <span class="comment">-- ORDER BY는 맨 마지막 SELECT 문에 기재해야 한다.</span></span><br><span class="line">  AMOUNT <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170006052.png" alt="image-20201119170006052" style="zoom:80%;"><br><br><h2 id="2-union-all-연산"><a class="markdownIt-Anchor" href="#2-union-all-연산"></a> <strong>2. UNION ALL 연산</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>두 개 이상의 SELECT 문들의 결과 집합을 단일 결과 집합으로 결합하며 결합 시 <strong>중복된 데이터도 모두 출력</strong>한다.</p><img src="/images/S-SQL-Operation/image-20201120094352298.png" alt="image-20201120094352298" style="zoom:67%;"><br><h3 id="2-2-union-all-문법"><a class="markdownIt-Anchor" href="#2-2-union-all-문법"></a> 2-2. UNION ALL 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_1_1,</span><br><span class="line">    COLUMN_1_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_2_1,</span><br><span class="line">    COLUMN_2_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>두 개의 SELECT 문에서 중복되는 데이터 값이 있어도 모두 출력한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="2-3-union-all-실습"><a class="markdownIt-Anchor" href="#2-3-union-all-실습"></a> 2-3. UNION ALL 실습</h3><p><strong>&gt;&gt; 일반 UNION ALL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170843555.png" alt="image-20201119170843555" style="zoom:80%;"><ul><li>(‘Mary’, ‘100000’) 중복 데이터 출력함</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NAME만 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170949324.png" alt="image-20201119170949324" style="zoom:80%;"><ul><li>‘Mike’, ‘Jon’, ‘Mary’ 중복 데이터 출력함</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT만 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119171104105.png" alt="image-20201119171104105" style="zoom:80%;"><ul><li>‘100000’ 중복 데이터 출력함</li></ul><br><p><strong>&gt;&gt; UNION ALL + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>                 <span class="comment">-- ORDER BY는 맨 마지막 SELECT 문에 기재해야 한다.</span></span><br><span class="line">  AMOUNT <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119171511374.png" alt="image-20201119171511374" style="zoom:80%;"><br><br><h2 id="3-intersect-연산"><a class="markdownIt-Anchor" href="#3-intersect-연산"></a> <strong>3. INTERSECT 연산</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>INTERSECT 연산자는 두 개 이상의 SELECT 문들의 결과 집합의 교집합을 출력하는 연산자다.</p><img src="/images/S-SQL-Operation/image-20201120095222453.png" style="zoom:67%;"><br><h3 id="3-2-intersect-연산-문법"><a class="markdownIt-Anchor" href="#3-2-intersect-연산-문법"></a> 3-2. INTERSECT 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_1_1,</span><br><span class="line">   COLUMN_1_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_1</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_2_1,</span><br><span class="line">   COLUMN_2_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="3-3-intersect-연산-실습"><a class="markdownIt-Anchor" href="#3-3-intersect-연산-실습"></a> 3-3. INTERSECT 연산 실습</h3><h4 id="1-실습-준비-2"><a class="markdownIt-Anchor" href="#1-실습-준비-2"></a> (1) 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEES1</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EMPLOYEE_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">KEYS</span></span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EFFECTIVE_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (EMPLOYEE_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> EMPLOYEES1 (EMPLOYEE_ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> HIPOS</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EFFECTIVE_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (EMPLOYEE_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> EMPLOYEES1 (EMPLOYEE_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES1 (EMPLOYEE_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Joyce Edwards'</span>),</span><br><span class="line">(<span class="string">'Diane Collins'</span>),</span><br><span class="line">(<span class="string">'Alice Stewart'</span>),</span><br><span class="line">(<span class="string">'Julie Sanchez'</span>),</span><br><span class="line">(<span class="string">'Heather Morris'</span>),</span><br><span class="line">(<span class="string">'Teresa Rogers'</span>),</span><br><span class="line">(<span class="string">'Doris Reed'</span>),</span><br><span class="line">(<span class="string">'Gloria Cook'</span>),</span><br><span class="line">(<span class="string">'Evelyn Morgan'</span>),</span><br><span class="line">(<span class="string">'Jean Bell'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'2000-02-01'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'2001-06-01'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'2002-01-01'</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">'2005-06-01'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HIPOS</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">9</span>, <span class="string">'2000-01-01'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'2002-06-01'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'2006-06-01'</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">'2005-06-01'</span>);</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES1;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111618068.png" alt="image-20201120111618068" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">KEYS</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111732244.png" alt="image-20201120111732244" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> HIPOS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111807673.png" alt="image-20201120111807673" style="zoom:80%;"><br><br><h4 id="2-intersect-연산-실습"><a class="markdownIt-Anchor" href="#2-intersect-연산-실습"></a> (2) INTERSECT 연산 실습</h4><p><strong>&gt;&gt; 일반 INTERSECT</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- "KEYS" INTERSECT "HIPOS"</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span> </span><br><span class="line">   <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   HIPOS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120113731964.png" alt="image-20201120113731964"></p><br><ul><li>INNER 조인 연산과 결과가 동일함** (실무에서 INTERSECT 연산 보다 INNER 조인 더 많이 쓰인다)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN (1)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  <span class="keyword">KEYS</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  HIPOS B</span><br><span class="line"><span class="keyword">ON</span> A.EMPLOYEE_ID = B.EMPLOYEE_ID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INNER JOIN (2)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  <span class="keyword">KEYS</span> A, HIPOS B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.EMPLOYEE_ID = B.EMPLOYEE_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120113731964-1605855152002.png" alt="image-20201120113731964"></p><br><p><strong>&gt;&gt; INTERSECT + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   HIPOS</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPLOYEE_ID <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120130136496.png" alt="image-20201120130136496"></p><br><br><h2 id="4-except-연산"><a class="markdownIt-Anchor" href="#4-except-연산"></a> <strong>4. EXCEPT 연산</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>EXCEPT 연산자는 맨위에 SELECT 문의 결과 집합에서 그 아래에 있는 SELECT 문의 결과 집합을 제외한 결과를 리턴한다. (실무에서 많이 쓰임)</p><img src="/images/S-SQL-Operation/image-20201120132000229.png" alt="image-20201120132000229" style="zoom:67%;"><br><h3 id="4-2-except-연산-문법"><a class="markdownIt-Anchor" href="#4-2-except-연산-문법"></a> 4-2. EXCEPT 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_1_1,</span><br><span class="line">   COLUMN_1_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_1</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_2_1,</span><br><span class="line">   COLUMN_2_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="4-3-except-연산-실습"><a class="markdownIt-Anchor" href="#4-3-except-연산-실습"></a> 4-3. EXCEPT 연산 실습</h3><p><strong>&gt;&gt; 실습 데이터</strong></p><p>dvdrental 데이터셋의 “film” 테이블(영화dvd 정보) 과 “inventory” 테이블(dvd 제고 정보) 을 활용한다.</p><img src="/images/S-SQL-Operation/image-20201120133728012.png" alt="image-20201120133728012" style="zoom:70%;"><ul><li>한 편의 영화가 여러 개의 제고가 있을 수 있다</li></ul><br><p><strong>&gt;&gt; MISSION: 제고가 존재하지 않는 영화의 ID와 제목을 추출한다</strong></p><p>(1) 먼저 제고가 존재하는 영화의 ID와 제목을 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>            </span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  B.TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> B.TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120140138350.png" alt="image-20201120140138350" style="zoom:80%;"><br><p>(2) 이제 전체 영화에서 제고 있는 영화를 제거하면 제거 없는 영화의 정보를 추출할 수 있다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>            </span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  B.TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120140607930.png" alt="image-20201120140607930" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      UNION 연산, UNION ALL 연산, INTERSECT 연산, EXCEPT 연산
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 6. Aggregate Operations" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-6-Aggregate-Operations/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 조인과 집계 데이터</title>
    <link href="https://hyemin-kim.github.io/2020/11/19/E-SQL-join-and-aggregate/"/>
    <id>https://hyemin-kim.github.io/2020/11/19/E-SQL-join-and-aggregate/</id>
    <published>2020-11-19T06:44:46.000Z</published>
    <updated>2020-11-19T06:54:13.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-조인과-집계-데이터"><a class="markdownIt-Anchor" href="#실습-조인과-집계-데이터"></a> 【실습】 조인과 집계 데이터</h1><br><h4 id="1-rental-테이블을-이용하여-연-연월-연월일-전체-각각의-기준으로-rental_id-기준-렌탈이-일어난-횟수를-출력하라-전체-데이터-기준으로-모든-행을-출력"><a class="markdownIt-Anchor" href="#1-rental-테이블을-이용하여-연-연월-연월일-전체-각각의-기준으로-rental_id-기준-렌탈이-일어난-횟수를-출력하라-전체-데이터-기준으로-모든-행을-출력"></a> <strong>[1] RENTAL 테이블을 이용하여 연, 연월, 연월일, 전체 각각의 기준으로 RENTAL_ID 기준 렌탈이 일어난 횟수를 출력하라. (전체 데이터 기준으로 모든 행을 출력)</strong></h4><br><img src="/images/E-SQL-join-and-aggregate/image-20201119085019530.png" alt="image-20201119085019530" style="zoom: 67%;"><br><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> RENTAL;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119085317448.png" alt="image-20201119085317448" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'YYYY'</span>),</span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'MM'</span>),</span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'DD'</span>),</span><br><span class="line">  <span class="keyword">COUNT</span> (RENTAL_ID)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span> (TO_CHAR(RENTAL_DATE, <span class="string">'YYYY'</span>),</span><br><span class="line">          TO_CHAR(RENTAL_DATE, <span class="string">'MM'</span>),</span><br><span class="line">    TO_CHAR(RENTAL_DATE, <span class="string">'DD'</span>));</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119130425101.png" alt="image-20201119130425101" style="zoom:67%;"><img src="/images/E-SQL-join-and-aggregate/image-20201119130531222.png" alt="image-20201119130531222" style="zoom:67%;"><br><br><h3 id="2-rental과-customer-테이블을-이용하여-현재까지-가장-많이-rental을-한-고객의-고객id-렌탈순위-누적렌탈횟수-이름을-출력하라"><a class="markdownIt-Anchor" href="#2-rental과-customer-테이블을-이용하여-현재까지-가장-많이-rental을-한-고객의-고객id-렌탈순위-누적렌탈횟수-이름을-출력하라"></a> [2] RENTAL과 CUSTOMER 테이블을 이용하여 현재까지 가장 많이 RENTAL을 한 고객의 고객ID, 렌탈순위, 누적렌탈횟수, 이름을 출력하라.</h3><br><img src="/images/E-SQL-join-and-aggregate/image-20201119131041452.png" alt="image-20201119131041452" style="zoom:67%;"><br><br><p><strong>&gt;&gt; 문제 풀이</strong></p><p><strong>(1) 가장 먼저 RENTAL 순위를 구해야 한다.</strong></p><ul><li>고객 별로 렌탈 횟수 구함</li><li>ROW_NUMBER() 를 이용해 순위 번호 생성 (렌탈 횟수를 내림차순으로 정렬한 후 생성)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RANTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  CUSTOMER_ID;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- CUSTOMER_ID 기준으로 GROUP BY 했기 때문에 ROW_NUMBER()에서 PARTITION BY가 생략되었다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119143530660.png" alt="image-20201119143530660" style="zoom:80%;"><br><br><p><strong>(2) 이 상태에서 첫번째 순위인 데이처를 추출 (가장 많이 RENTAL 한 고객의 데이터)</strong></p><ul><li>ORDER BY + LIMIT 이용</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119144824759.png" alt="image-20201119144824759"><br><br><p><strong>(3) 마지막으로 CUSTOMER 테이블과 조인하여 해당 고객의 이름을 출력한다</strong></p><ol><li><p>직접 조인</p><ul><li>CUSTOMER_ID 기준으로 GROUP BY 되어 있으므로 FIRST_NAME, LAST_NAME에 MAX함수를 사용해서 출력한다.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"> A.CUSTOMER_ID,</span><br><span class="line"> ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line"> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT,</span><br><span class="line"> <span class="keyword">MAX</span>(B.FIRST_NAME) <span class="keyword">AS</span> FIRST_NAME,</span><br><span class="line"> <span class="keyword">MAX</span>(B.LAST_NAME) <span class="keyword">AS</span> LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> RENTAL A, CUSTOMER B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"> A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line"> A.CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line"> RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-join-and-aggregate/image-20201119144959120.png" alt="image-20201119144959120"></p></li></ol><br><ol start="2"><li><p>서브커리 활용</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  B.CUSTOMER_ID,</span><br><span class="line">  B.RENTAL_RANK,</span><br><span class="line">  B.RENTAL_COUNT,</span><br><span class="line">  C.FIRST_NAME,</span><br><span class="line">  C.LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span> RENTAL A</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">) B, CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> B.CUSTOMER_ID = C.CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-join-and-aggregate/image-20201119144959120.png" alt="image-20201119144959120"></p></li></ol><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-조인과-집계-데이터&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-조인과-집계-데이터&quot;&gt;&lt;/a&gt; 【실습】 조인과 집계 데이터&lt;/h1&gt;
&lt;br&gt;
&lt;h4 id=&quot;1-rental-테이블을-이용하여-연-연월-연월일
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 분석 함수 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-2/</id>
    <published>2020-11-17T23:57:17.000Z</published>
    <updated>2020-11-20T06:44:52.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="분석-함수-2"><a class="markdownIt-Anchor" href="#분석-함수-2"></a> 분석 함수 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-first_value-last_value-%ED%95%A8%EC%88%98"><strong>1. FIRST_VALUE, LAST_VALUE 함수</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-first_name-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-2. FIRST_NAME 함수 실습</a></li><li><a href="#1-3-last_value-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-3. LAST_VALUE 함수 실습</a></li></ul></li><li><a href="#2-lag-lead-%ED%95%A8%EC%88%98"><strong>2. LAG, LEAD 함수</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-lag-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EC%9D%B4%EC%A0%84-%ED%96%89%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%B0%BE%EB%8A%94%EB%8B%A4">2-2. LAG 함수 실습 – 이전 행의 값을 찾는다</a></li><li><a href="#2-3-lead-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EB%8B%A4%EC%9D%8C-%ED%96%89%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%B0%BE%EB%8A%94%EB%8B%A4">2-3. LEAD 함수 실습 – 다음 행의 값을 찾는다</a></li></ul></li></ul><p></p><br><h2 id="1-first_value-last_value-함수"><a class="markdownIt-Anchor" href="#1-first_value-last_value-함수"></a> <strong>1. FIRST_VALUE, LAST_VALUE 함수</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>FIRST_VALUE, LAST_VALUE 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 첫번째 값 혹은 마지막 값을 구하는 함수</strong>이다.</p><br><h3 id="1-2-first_name-함수-실습"><a class="markdownIt-Anchor" href="#1-2-first_name-함수-실습"></a> 1-2. FIRST_NAME 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><p><strong>&gt;&gt; MISSION:</strong> GROUP_NAME 기준 PRICE가 가장 작은 값을 출력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">FIRST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line">    <span class="keyword">AS</span> LOWEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117160221397.png" alt="image-20201117160221397" style="zoom:80%;"><br><h3 id="1-3-last_value-함수-실습"><a class="markdownIt-Anchor" href="#1-3-last_value-함수-실습"></a> 1-3. LAST_VALUE 함수 실습</h3><p>LAST_VALUE 함수 사용 시 추가적으로 LAST_VALUE를 선택하는 범위를 지정해줘야 함.</p><br><p><strong>&gt;&gt; MISSION:</strong> GROUP_NAME 기준 PRICE가 가장 큰 값을 출력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LAST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> </span><br><span class="line">    (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE</span><br><span class="line">     <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span>   <span class="comment">-- PARTITION의 첫번째 ROW부터</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">FOLLOWING</span>)            <span class="comment">-- PARTITION의 마지막 ROW까지</span></span><br><span class="line">     <span class="keyword">AS</span> HIGHEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117162007699.png" alt="image-20201117162007699" style="zoom:80%;"><br><ul><li>LAST_VALUE 함수에는 "RANGE BETWEEN ENBOUNDED PRECEDING AND <strong>UNBOUNDED FOLLOWING</strong>"를 추가함</li><li>DEFAULT가 "RANGE BETWEEN ENBOUNDED PRECEDING AND <strong>CURRENT ROW</strong>"이기 때문이다</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DEFAULT 경우:</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LAST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> </span><br><span class="line">    (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)            </span><br><span class="line">    <span class="keyword">AS</span> HIGHEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117162655768.png" alt="image-20201117162655768" style="zoom:80%;"><br><ul><li>범위 지정은 DEFAULT로 <strong>CURRENT ROW</strong> 까지여서 우리가 기대하는 바와 달리 PRICE 값 그대로 출력함.</li></ul><br><br><h2 id="2-lag-lead-함수"><a class="markdownIt-Anchor" href="#2-lag-lead-함수"></a> <strong>2. LAG, LEAD 함수</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>LAG 와 LEAD 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 이전 행의 값 혹은 다음 행의 값을 구하는 함수</strong>이다.</p><br><h3 id="2-2-lag-함수-실습-이전-행의-값을-찾는다"><a class="markdownIt-Anchor" href="#2-2-lag-함수-실습-이전-행의-값을-찾는다"></a> 2-2. LAG 함수 실습 – 이전 행의 값을 찾는다</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  LAG(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> PREV_PRICE,</span><br><span class="line">  PRICE - LAG(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> CUR_PREV_DIFF</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117170809941.png" alt="image-20201117170809941" style="zoom:80%;"><br><h3 id="2-3-lead-함수-실습-다음-행의-값을-찾는다"><a class="markdownIt-Anchor" href="#2-3-lead-함수-실습-다음-행의-값을-찾는다"></a> 2-3. LEAD 함수 실습 – 다음 행의 값을 찾는다</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LEAD</span>(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> NEXT_PRICE,</span><br><span class="line">  A.PRICE - <span class="keyword">LEAD</span>(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> CUR_NEXT_DIFF</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117170707029.png" alt="image-20201117170707029" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      분석 함수 -- FIRST_VALUE, LAST_VALUE 함수; LAG, LEAD 함수
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 5. Analytic Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-5-Analytic-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Analytic Function" scheme="https://hyemin-kim.github.io/tags/Analytic-Function/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 분석 함수 (1) -- 평균 함수, 순위 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-1/</id>
    <published>2020-11-17T23:47:11.000Z</published>
    <updated>2020-11-20T06:44:41.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="분석-함수-1-평균-함수-순위-함수"><a class="markdownIt-Anchor" href="#분석-함수-1-평균-함수-순위-함수"></a> 분석 함수 (1) – 평균 함수, 순위 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98%EB%9E%80"><strong>0. 분석 함수란?</strong></a><ul><li><a href="#0-1-%EA%B0%9C%EB%85%90">0-1. 개념</a></li><li><a href="#0-2-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">0-2. 분석 함수 실습 준비</a></li><li><a href="#0-3-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EB%AC%B8%EB%B2%95">0-3. 분석 함수 문법</a></li><li><a href="#0-4-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EA%B2%B0%EA%B3%BC-%EC%98%88%EC%8B%9C">0-4. 분석 함수 결과 예시</a></li></ul></li><li><a href="#1-avg-%ED%95%A8%EC%88%98"><strong>1. AVG 함수</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-avg-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-2. AVG 함수 실습</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(1) 전체  평균 가격(PRICE) 구하기</a></li><li><a href="#2-%EA%B7%B8%EB%A3%B9%EB%B3%84-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(2) 그룹별 평균 가격(PRICE) 구하기</a></li><li><a href="#3-%EA%B7%B8%EB%A3%B9%EB%B3%84-%EB%88%84%EC%A0%81-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(3) 그룹별 누적 평균 가격(PRICE) 구하기</a></li></ul></li></ul></li><li><a href="#2-row_number-rank-dense_rank-%ED%95%A8%EC%88%98"><strong>2. ROW_NUMBER, RANK, DENSE_RANK 함수</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1.  개념</a></li><li><a href="#2-2-%EC%88%9C%EC%9C%84-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2. 순위 함수 실습</a><ul><li><a href="#2-2-1-row_number-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-1. ROW_NUMBER 함수 실습</a></li><li><a href="#2-2-2-rank-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-2. RANK 함수 실습</a></li><li><a href="#2-2-3-dense_rank-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-3. DENSE_RANK 함수 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="0-분석-함수란"><a class="markdownIt-Anchor" href="#0-분석-함수란"></a> <strong>0. 분석 함수란?</strong></h2><h3 id="0-1-개념"><a class="markdownIt-Anchor" href="#0-1-개념"></a> 0-1. 개념</h3><p>분석 함수는 특정 집합 내에서 결과 건수의 변화없이 해당 집합안에서 합계 및 카운트 등을 계산할 수 있는 함수이다.</p><br><h3 id="0-2-분석-함수-실습-준비"><a class="markdownIt-Anchor" href="#0-2-분석-함수-실습-준비"></a> 0-2. 분석 함수 실습 준비</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT_GROUP (</span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  GROUP_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT (</span><br><span class="line">  PRODUCT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  PRODUCT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRICE <span class="built_in">DECIMAL</span> (<span class="number">11</span>, <span class="number">2</span>),   <span class="comment">-- DECIMAL (전체 자릿수, 소수점 자릿수)</span></span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>)</span><br><span class="line">  <span class="keyword">REFERENCES</span> PRODUCT_GROUP (<span class="keyword">GROUP_ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT_GROUP (GROUP_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Smartphone'</span>),</span><br><span class="line">  (<span class="string">'Laptop'</span>),</span><br><span class="line">  (<span class="string">'Tablet'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT (PRODUCT_NAME, <span class="keyword">GROUP_ID</span>, PRICE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Microsoft Lumia'</span>, <span class="number">1</span>, <span class="number">200</span>),</span><br><span class="line">  (<span class="string">'HTC One'</span>, <span class="number">1</span>, <span class="number">400</span>),</span><br><span class="line">  (<span class="string">'Nexus'</span>, <span class="number">1</span>, <span class="number">500</span>),</span><br><span class="line">  (<span class="string">'iPhone'</span>, <span class="number">1</span>, <span class="number">900</span>),</span><br><span class="line">  (<span class="string">'HP Elite'</span>, <span class="number">2</span>, <span class="number">1200</span>),</span><br><span class="line">  (<span class="string">'Lenovo Thinkpad'</span>, <span class="number">2</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Sony VAIO'</span>, <span class="number">2</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Dell Vostro'</span>, <span class="number">2</span>, <span class="number">800</span>),</span><br><span class="line">  (<span class="string">'iPad'</span>, <span class="number">3</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Kindle Fire'</span>, <span class="number">3</span>, <span class="number">150</span>),</span><br><span class="line">  (<span class="string">'Samsung Galaxy Tab'</span>, <span class="number">3</span>, <span class="number">200</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h3 id="0-3-분석-함수-문법"><a class="markdownIt-Anchor" href="#0-3-분석-함수-문법"></a> 0-3. 분석 함수 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1,</span><br><span class="line">  분석함수(C2, C3, ...) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> C4 <span class="keyword">ORDER</span> <span class="keyword">BY</span> C5)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>분석함수(C2, C3,…) :</strong> 사용하고자 하는 분석함수와 적용할 대상 컬럼을 지정</li><li><strong>PARTITION BY :</strong> 분석 함수를 적용 시 기준이 되는 컬럼을 지정 (즉, 그룹별로 값을 구할 때 그룹핑의 기준 컬럼)</li><li><strong>ORDER BY :</strong> 정렬 컬럼을 지정</li></ul><br><h3 id="0-4-분석-함수-결과-예시"><a class="markdownIt-Anchor" href="#0-4-분석-함수-결과-예시"></a> 0-4. 분석 함수 결과 예시</h3><p>집계 함수 vs 분석 함수:</p><ul><li><p>집계 함수는 집계의 결과만 출력한다</p></li><li><p>분석 함수는 집계의 결과 및 테이블의 내용을 함계 출력한다.</p><p>–&gt; 이게 바로 분석 함수의 역할이다.</p></li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> <span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Analytic-Function-1/image-20201117101439406.png" alt="image-20201117101439406"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">COUNT</span>(*) <span class="keyword">OVER</span>(),  <span class="comment">-- 집계 결과 </span></span><br><span class="line">  A.*               <span class="comment">-- 원래 집합</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117101622478.png" alt="image-20201117101622478" style="zoom:80%;"><br><br><h2 id="1-avg-함수"><a class="markdownIt-Anchor" href="#1-avg-함수"></a> <strong>1. AVG 함수</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>AVG 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 평균을 구하는 함수</strong>이다.</p><br><h3 id="1-2-avg-함수-실습"><a class="markdownIt-Anchor" href="#1-2-avg-함수-실습"></a> 1-2. AVG 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h4 id="1-전체-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#1-전체-평균-가격price-구하기"></a> (1) 전체  평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 집계함수 사용</strong></p><ul><li><p>AVG: 집계의 결과만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수(AVG): 집계의 결과만 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">AVG</span>(PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PRODUCT;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><img src="/images/S-SQL-Analytic-Function-1/image-20201117130450587.png" alt="image-20201117130450587"></p><br><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG ( )  OVER ( ) : 결과 집합을 그대로 출력하면서 집계 결과도 함계 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  PRODUCT_NAME,</span><br><span class="line">  PRICE,</span><br><span class="line">  <span class="keyword">AVG</span>(PRICE) <span class="keyword">OVER</span>()</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117133842813.png" alt="image-20201117133842813" style="zoom:80%;"><br></li></ul><h4 id="2-그룹별-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#2-그룹별-평균-가격price-구하기"></a> (2) 그룹별 평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 집계함수 사용</strong></p><ul><li><p>GROUP BY + AVG:  집계의 결과만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수: GROUP BY + AVG</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">B.GROUP_NAME,</span><br><span class="line"><span class="keyword">AVG</span>(A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> (A.GROUP_ID = B.GROUP_ID)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">B.GROUP_NAME;</span><br></pre></td></tr></tbody></table></figure></li></ul><img src="/images/S-SQL-Analytic-Function-1/image-20201117131044658.png" alt="image-20201117131044658" style="zoom:80%;"><br><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG (C1)  OVER ( PARTITION BY C2 ) : 결과 집합을 그대로 출력하면서 집계 결과도 함계 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">A.PRODUCT_NAME,</span><br><span class="line">A.PRICE, </span><br><span class="line">B.GROUP_NAME,</span><br><span class="line"><span class="keyword">AVG</span>(A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure></li></ul><img src="/images/S-SQL-Analytic-Function-1/image-20201117132959087.png" alt="image-20201117132959087" style="zoom:80%;"><br><h4 id="3-그룹별-누적-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#3-그룹별-누적-평균-가격price-구하기"></a> (3) 그룹별 누적 평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG (C1)  OVER ( PARTITION BY C2  ORDER BY C3 )</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  <span class="keyword">AVG</span>(A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117134939361.png" alt="image-20201117134939361" style="zoom:80%;"></li></ul><br><br><h2 id="2-row_number-rank-dense_rank-함수"><a class="markdownIt-Anchor" href="#2-row_number-rank-dense_rank-함수"></a> <strong>2. ROW_NUMBER, RANK, DENSE_RANK 함수</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1.  개념</h3><p>ROW_NUMBER, RANK, DENSE_RANK 함수는 모두 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 순위를 구하는 함수</strong>이다.</p><ul><li><p><strong>ROW_NUMBER:</strong> 같은 순위가 있어도 무조건 순차적으로 순으로 순위를 매긴다. (1, 2, 3, 4, 5 …)</p></li><li><p><strong>RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰다. (1, 1, 3, 4, 5 …)</p></li><li><p><strong>DENSE_RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰지 않는다. (1, 1, 2, 3, 4 …)</p><br></li></ul><h3 id="2-2-순위-함수-실습"><a class="markdownIt-Anchor" href="#2-2-순위-함수-실습"></a> 2-2. 순위 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h4 id="2-2-1-row_number-함수-실습"><a class="markdownIt-Anchor" href="#2-2-1-row_number-함수-실습"></a> 2-2-1. ROW_NUMBER 함수 실습</h4><p><strong>ROW_NUMBER:</strong> 같은 순위가 있어도 무조건 순차적으로 순으로 순위를 매긴다. (1, 2, 3, 4, 5…)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117142626970.png" alt="image-20201117142626970" style="zoom:80%;"><br><ul><li>Laptop 에서 가격순으로 정렬했을 때 "Sony VAIO"와 "Lenovo Thinkpad"의 가격이 동일해도 (즉, 가격 순위 같아도)  순차적으로 순번을 부여한다</li></ul><br><h4 id="2-2-2-rank-함수-실습"><a class="markdownIt-Anchor" href="#2-2-2-rank-함수-실습"></a> 2-2-2. RANK 함수 실습</h4><p><strong>RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위는 건너뛰다. (1, 1, 3, 4, 5 …)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117150134038.png" alt="image-20201117150134038" style="zoom:80%;"><br><h4 id="2-2-3-dense_rank-함수-실습"><a class="markdownIt-Anchor" href="#2-2-3-dense_rank-함수-실습"></a> 2-2-3. DENSE_RANK 함수 실습</h4><p><strong>DENSE_RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰지 않는다. (1, 1, 2, 3, 4 …)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  PRODUCT_NAME,</span><br><span class="line">  GROUP_NAME,</span><br><span class="line">  PRICE,</span><br><span class="line">  <span class="keyword">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117151955026.png" alt="image-20201117151955026" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      분석 함수 -- 평균 함수(AVG), 순위 함수 (ROW_NUMBER, RANK, DENSE_RANK)
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 5. Analytic Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-5-Analytic-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Analytic Function" scheme="https://hyemin-kim.github.io/tags/Analytic-Function/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집계 함수 (2) -- 고급 집계 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/17/S-SQL-Aggregate-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/17/S-SQL-Aggregate-2/</id>
    <published>2020-11-16T23:46:08.000Z</published>
    <updated>2020-11-20T06:44:10.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집계-함수-2-고급-집계-함수"><a class="markdownIt-Anchor" href="#집계-함수-2-고급-집계-함수"></a> 집계 함수 (2) – 고급 집계 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-grouping-set-%EC%A0%88"><strong>1. GROUPING SET 절</strong></a><ul><li><a href="#1-0-%ED%95%99%EC%8A%B5-%EC%A4%80%EB%B9%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1">1-0. 학습 준비 (데이터 생성)</a></li><li><a href="#1-1-group-by-%EC%A0%88-%ED%99%9C%EC%9A%A9">1-1. GROUP BY 절 활용</a><ul><li><a href="#1-2%EA%B0%9C-%EC%BB%AC%EB%9F%BC-group-by-%EC%A0%88">(1) 2개 컬럼 GROUP BY 절</a></li><li><a href="#2-1%EA%B0%9C-%EC%BB%AC%EB%9F%BC-group-by-%EC%A0%88">(2) 1개 컬럼 GROUP BY 절</a></li><li><a href="#3-group-by-%EC%95%88%ED%95%98%EA%B8%B0">(3) GROUP BY 안하기</a></li><li><a href="#4-%EC%B6%94%EC%B6%9C%EB%90%9C-%EC%A0%95%EB%B3%B4-%ED%95%A9%EC%B9%98%EA%B8%B0-union-all%EC%9D%98-%ED%99%9C%EC%9A%A9">(4) 추출된 정보 합치기 – UNION ALL의 활용</a></li></ul></li><li><a href="#1-2-grouping-set-%EC%A0%88-%ED%99%9C%EC%9A%A9">1-2. GROUPING SET 절 활용</a><ul><li><a href="#1-2-1-%EC%9A%A9%EB%8F%84">1-2-1. 용도</a></li><li><a href="#1-2-2-grouping-set-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2-2. GROUPING SET 절 문법</a></li><li><a href="#1-2-3-grouping-set-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-2-3. GROUPING SET 절 실습</a></li></ul></li></ul></li><li><a href="#2-roll-up-%EC%A0%88"><strong>2. ROLL UP 절</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-rollup-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. ROLLUP 절 문법</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-roll-up">(1) 전체 ROLL UP</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-roll-up">(2) 부분 ROLL UP</a></li></ul></li><li><a href="#2-3-rollup-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. ROLLUP 절 실습</a><ul><li><a href="#1-group-by%EB%A7%8C-%EC%82%AC%EC%9A%A9-roll-up-%EC%95%88%ED%95%A8">(1) GROUP BY만 사용 (ROLL UP 안함)</a></li><li><a href="#2-group-by-%EC%A0%84%EC%B2%B4-roll-up">(2) GROUP BY + 전체 ROLL UP</a></li><li><a href="#3-group-by-%EB%B6%80%EB%B6%84-roll-up">(3) GROUP BY + 부분 ROLL UP</a></li></ul></li></ul></li><li><a href="#3-cube-%EC%A0%88"><strong>3. CUBE 절</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-cube-%EC%A0%88-%EB%AC%B8%EB%B2%95">3-2. CUBE 절 문법</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95">(1) 전체 컬럼 CUBE 지정</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95">(2) 부분 컬럼 CUBE 지정</a></li></ul></li><li><a href="#3-3-cube-%EC%A0%88-%EC%8B%A4%EC%8A%B5">3-3. CUBE 절 실습</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95-2">(1) 전체 컬럼 CUBE 지정</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95-2">(2) 부분 컬럼 CUBE 지정</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-grouping-set-절"><a class="markdownIt-Anchor" href="#1-grouping-set-절"></a> <strong>1. GROUPING SET 절</strong></h2><h3 id="1-0-학습-준비-데이터-생성"><a class="markdownIt-Anchor" href="#1-0-학습-준비-데이터-생성"></a> 1-0. 학습 준비 (데이터 생성)</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES</span><br><span class="line">(</span><br><span class="line">  BRAND <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SEGMENT</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  QUANTITY <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES (BRAND, <span class="keyword">SEGMENT</span>, QUANTITY)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'ABC'</span>, <span class="string">'Premium'</span>, <span class="number">100</span>),</span><br><span class="line">  (<span class="string">'ABC'</span>, <span class="string">'Basic'</span>, <span class="number">200</span>),</span><br><span class="line">  (<span class="string">'XYZ'</span>, <span class="string">'Premium'</span>, <span class="number">100</span>),</span><br><span class="line">  (<span class="string">'XYZ'</span>, <span class="string">'Basic'</span>, <span class="number">300</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><br><h3 id="1-1-group-by-절-활용"><a class="markdownIt-Anchor" href="#1-1-group-by-절-활용"></a> 1-1. GROUP BY 절 활용</h3><h4 id="1-2개-컬럼-group-by-절"><a class="markdownIt-Anchor" href="#1-2개-컬럼-group-by-절"></a> (1) 2개 컬럼 GROUP BY 절</h4><p><strong>[MISSION 1]</strong>  BRAND별, SEGMENT별 총 판패량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, </span><br><span class="line">  <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113093816617-1605753863308.png" alt="image-20201113093816617" style="zoom:80%;"><br><h4 id="2-1개-컬럼-group-by-절"><a class="markdownIt-Anchor" href="#2-1개-컬럼-group-by-절"></a> (2) 1개 컬럼 GROUP BY 절</h4><p><strong>[MISSION 2]</strong>  BRAND별 총 판매량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  BRAND;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113094753809-1605753863308.png" alt="image-20201113094753809"></p><br><p><strong>[MISSION 3]</strong>  SEGMENT별 총 판매량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113095022421-1605753863308.png" alt="image-20201113095022421"></p><br><h4 id="3-group-by-안하기"><a class="markdownIt-Anchor" href="#3-group-by-안하기"></a> (3) GROUP BY 안하기</h4><p><strong>[MISSION 4]</strong>  판매량 전체 합계 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113095401699-1605753863308.png" alt="image-20201113095401699"></p><br><h4 id="4-추출된-정보-합치기-union-all의-활용"><a class="markdownIt-Anchor" href="#4-추출된-정보-합치기-union-all의-활용"></a> (4) 추출된 정보 합치기 – UNION ALL의 활용</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- BRAND별, SEGMENT별 총 판패량</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND, <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- BRAND별 총 판패량</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- SEGMENT별 총 판패량</span></span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- 전체 총 판패량</span></span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES;</span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong>  각각의 UNION query는 같은 수의 columns를 가져야 한다. 따라서 각 부분의 SELECT 절에서 컬럼수가 부족하면 NULL로 채워야 함.</p><img src="/images/S-SQL-Aggregate-2/image-20201113100352802-1605753863308.png" alt="image-20201113100352802" style="zoom:80%;"><br><p><strong>이 방법의 단점:</strong></p><ul><li>동일한 테이블을 4번씩이나 읽고 있다. --&gt; 성능 저하 가능성이 존재</li><li>SQL 문이 너무 길어진다. --&gt;  복잡하다 --&gt; 유지보수가 용이하지 않다</li></ul><br><p><strong>&gt;&gt;</strong> 이런 불편함을 줄이기 위해서 GROUPING SET 절을 활용한다.</p><br><h3 id="1-2-grouping-set-절-활용"><a class="markdownIt-Anchor" href="#1-2-grouping-set-절-활용"></a> 1-2. GROUPING SET 절 활용</h3><h4 id="1-2-1-용도"><a class="markdownIt-Anchor" href="#1-2-1-용도"></a> 1-2-1. 용도</h4><p>GROUPING SET 절을 사용하여 여러 개의 UNION ALL을 이용한 SQL과 같은 결과를 도출할 수 있다.</p><br><h4 id="1-2-2-grouping-set-절-문법"><a class="markdownIt-Anchor" href="#1-2-2-grouping-set-절-문법"></a> 1-2-2. GROUPING SET 절 문법</h4><p>GROUPING SET 절을 이용하면 한번에 다양한 기준의 컬럼 조합으로 집계를 구할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1,</span><br><span class="line">  C2,</span><br><span class="line">  집계함수(C3)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (C1, C2),</span><br><span class="line">  (C1),</span><br><span class="line">  (C2),</span><br><span class="line">  ()</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><br><h4 id="1-2-3-grouping-set-절-실습"><a class="markdownIt-Anchor" href="#1-2-3-grouping-set-절-실습"></a> 1-2-3. GROUPING SET 절 실습</h4><p><strong>&gt;&gt; GROUPING SET 절의 활용</strong></p><p>GROUPING SET 절을 이용하여 BRAND, SEGMENT 기준, BRAND 기준, SEGMENT 기준, 전체기준으로 QUANTITY 합계의 값을 구할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113104247913-1605753863308.png" alt="image-20201113104247913" style="zoom:80%;"><br><p><strong>&gt;&gt; GROUPING 함수의 활용</strong></p><p>GROUPING 함수를 이용하여 해당 컬럼이 GROUPING 시 사용되었으면 0, 그렇지 않으면 1을 리턴한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">GROUPING</span>(BRAND) <span class="keyword">AS</span> GROUPING_BRAND,</span><br><span class="line">  <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) <span class="keyword">AS</span> GROUPING_SEGMENT,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113111058889-1605753863309.png" alt="image-20201113111058889" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'브랜드별 + 등급별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'브랜드별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'등급별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'전체합계'</span></span><br><span class="line">       <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">"집계기준"</span>,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113112514952-1605753863309.png" alt="image-20201113112514952" style="zoom:80%;"><br><br><h2 id="2-roll-up-절"><a class="markdownIt-Anchor" href="#2-roll-up-절"></a> <strong>2. ROLL UP 절</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>지정된 GROUPING 컬럼의 소계를 생성하는데 사용된다. 간단한 문법으로 다양한 소계를 출력할 수 있다.</p><br><h3 id="2-2-rollup-절-문법"><a class="markdownIt-Anchor" href="#2-2-rollup-절-문법"></a> 2-2. ROLLUP 절 문법</h3><ul><li><p>ROLLUP 절은 GROUP BY 절과 함계 사용된다.</p></li><li><p>ROLLUP 할 컬럼은 무조건 SELECT 절에 포함되어 있어야 한다.</p></li><li><p>ROLLUP 절 컬럼의 <strong>지정 순서가 의미 있다</strong>.</p><br></li></ul><h4 id="1-전체-roll-up"><a class="markdownIt-Anchor" href="#1-전체-roll-up"></a> (1) 전체 ROLL UP</h4><ul><li>컬럼의 지정 순서가 <strong>의미 있음</strong></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 ROLL UP</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span>(C1, C2, C3);  <span class="comment">-- 소계를 생성할 컬럼을 지정한다.</span></span><br><span class="line">                       <span class="comment">-- 컬럼 지정 순서에 따라 결과값이 달라질 수 있다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119102055273.png" alt="image-20201119102055273" style="zoom: 80%;"><br><h4 id="2-부분-roll-up"><a class="markdownIt-Anchor" href="#2-부분-roll-up"></a> (2) 부분 ROLL UP</h4><ul><li><p>특정 컬럼만 분리하여 ROLL UP 할 수 있다</p></li><li><p>이런 경우에 분리된 특정 컬럼(C1)으로 시작하는 GROUPING SET 만 해당</p></li><li><p>즉, 전체 ROLL UP과 달리, GROUPING 하지 않는 전체 합계를 구하지 않는다.</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 부분 ROLL UP</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> C1</span><br><span class="line">  <span class="keyword">ROLLUP</span>(C2, C3)       <span class="comment">-- 특정 컬럼을 제외한 부분적인 ROLLUP도 가능하다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119102820691.png" alt="image-20201119102820691" style="zoom:80%;"><br><h3 id="2-3-rollup-절-실습"><a class="markdownIt-Anchor" href="#2-3-rollup-절-실습"></a> 2-3. ROLLUP 절 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><h4 id="1-group-by만-사용-roll-up-안함"><a class="markdownIt-Anchor" href="#1-group-by만-사용-roll-up-안함"></a> (1) GROUP BY만 사용 (ROLL UP 안함)</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 GROUP BY 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116101725139-1605753863309.png" alt="image-20201116101725139" style="zoom:80%;"><br><h4 id="2-group-by-전체-roll-up"><a class="markdownIt-Anchor" href="#2-group-by-전체-roll-up"></a> (2) GROUP BY + 전체 ROLL UP</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 ROLL UP 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116094755070-1605753863309.png" alt="image-20201116094755070" style="zoom:80%;"><br><ul><li>전체 컬럼 ROLLUP 결과:<ul><li>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></li><li>BRAND 별 합계 (소계)  --&gt; <em>GROUP BY + ROLL UP 절의 첫번째 컬럼</em></li><li>전체 합계 (총계)</li></ul></li></ul><br><h4 id="3-group-by-부분-roll-up"><a class="markdownIt-Anchor" href="#3-group-by-부분-roll-up"></a> (3) GROUP BY + 부분 ROLL UP</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SEGMENT 컬럼 기준으로 GROUP BY 한다 + BRAND 컬럼 기준으로 부분 ROLL UP 한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">ROLLUP</span> (BRAND)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>, BRAND</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116105618971-1605753863309.png" alt="image-20201116105618971" style="zoom:80%;"><br><ul><li>부분 컬럼 ROLLUP 결과:<ul><li>SEGMENT, BRAND 별 합계 --&gt; <em>GROUP BY (SEGMENT, BRAND) 결과</em></li><li>SEGMENT 별 합계 (소계)  --&gt; <em>ROLLUP 절에서 제외된 특정 컬럼</em></li></ul></li></ul><br><p>**&gt;&gt; **전체 합계 (총계)를 구하지 않는다</p><br><br><h2 id="3-cube-절"><a class="markdownIt-Anchor" href="#3-cube-절"></a> <strong>3. CUBE 절</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>지정된 GROUPING 컬럼의 다차원 소계를 생성하는데 사용된다. 간단한 문법으로 다차원 소계를 출력할 수 있다.</p><br><h3 id="3-2-cube-절-문법"><a class="markdownIt-Anchor" href="#3-2-cube-절-문법"></a> 3-2. CUBE 절 문법</h3><ul><li><p>CUBE절은 GROUP BY 절과 함계 사용된다.</p></li><li><p>CUBE 할 컬럼은 무조건 SELECT 절에 포함되어 있어야 한다.</p></li><li><p>CUBE절 컬럼의 <strong>지정 순서가 의미 없다</strong></p><br></li></ul><h4 id="1-전체-컬럼-cube-지정"><a class="markdownIt-Anchor" href="#1-전체-컬럼-cube-지정"></a> (1) 전체 컬럼 CUBE 지정</h4><ul><li>컬럼의 지정 순서가 <strong>의미 없음</strong></li><li>지정한 그룹의 <strong>모든 경우의 수</strong> 에 대한 소계와 총계를 구한다</li></ul> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">CUBE</span> (C1, C2, C3);</span><br></pre></td></tr></tbody></table></figure><br><p>CUBE 절 내 인자의 개수가 N개이면 2의 N승의 소계가 발생하게 된다.</p><p>CUBE (C1, C2, C3)를 GROUPING SETS으로 표현하면 총 9개의 소계가 발생한다.</p><img src="/images/S-SQL-Aggregate-2/image-20201116140935710-1605753863309.png" alt="image-20201116140935710" style="zoom: 67%;"><br><h4 id="2-부분-컬럼-cube-지정"><a class="markdownIt-Anchor" href="#2-부분-컬럼-cube-지정"></a> (2) 부분 컬럼 CUBE 지정</h4><ul><li><p>특정 컬럼만 분리하여 CUBE 를 지정할 수 있다</p></li><li><p>이런 경우에 분리된 특정 컬럼(C1)으로 시작하는 GROUPING SET 만 해당</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> C1,</span><br><span class="line">  <span class="keyword">CUBE</span> (C2, C3);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119105210943.png" alt="image-20201119105210943" style="zoom:80%;"><br><h3 id="3-3-cube-절-실습"><a class="markdownIt-Anchor" href="#3-3-cube-절-실습"></a> 3-3. CUBE 절 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><h4 id="1-전체-컬럼-cube-지정-2"><a class="markdownIt-Anchor" href="#1-전체-컬럼-cube-지정-2"></a> (1) 전체 컬럼 CUBE 지정</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 CUBE 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND, </span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">CUBE</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><br><img src="/images/S-SQL-Aggregate-2/image-20201116142724305-1605753863311.png" alt="image-20201116142724305" style="zoom:80%;"><br><ul><li>전체 컬럼 CUBE 결과:<ul><li>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></li><li>BRAND 별 합계 (소계)</li><li>SEGMENT 별 합계 (소계)</li><li>전체 합계 (총계)</li></ul></li></ul><br><p><strong>&gt;&gt;</strong> 인자가 2개 이므로 총 4개의 경우의 수가 합계로 출력된다</p><br><h4 id="2-부분-컬럼-cube-지정-2"><a class="markdownIt-Anchor" href="#2-부분-컬럼-cube-지정-2"></a> (2) 부분 컬럼 CUBE 지정</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND 컬럼 기준으로 GROUP BY 한다 + SEGMENT 컬럼 기준으로 부분 CUBE 한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND,</span><br><span class="line">  <span class="keyword">CUBE</span> (<span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116144806788-1605753863311.png" alt="image-20201116144806788" style="zoom:80%;"> <br><ul><li><p>부분 컬럼 CUBE 결과:</p><ul><li><p>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></p></li><li><p>BRAND 별 합계 (소계)  --&gt; <em>CUBE 절에서 제외된 특정 컬럼</em></p><br></li></ul><p><strong>&gt;&gt;</strong>  SEGMENT 별 합계 (소계)를 구하지 않는다.</p><p>**&gt;&gt; ** 전체 합계 (총계)를 구하지 않는다.</p></li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      고급 집계 함수 -- GROUPING SET 절, ROLL UP 절, CUBE 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 4. Aggregate Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-4-Aggregate-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집계 함수 (1) -- 기초 집계 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Aggregate-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Aggregate-1/</id>
    <published>2020-11-12T11:23:06.000Z</published>
    <updated>2020-11-20T06:44:02.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집계-함수-1-기초-집계-함수"><a class="markdownIt-Anchor" href="#집계-함수-1-기초-집계-함수"></a> 집계 함수 (1) – 기초 집계 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-group-by-%EC%A0%88"><strong>1. GROUP BY 절</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-group-by-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2. GROUP BY 절 문법</a></li><li><a href="#1-3-group-by-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-3. GROUP BY 절 실습</a><ul><li><a href="#1-3-0-%EC%8B%A4%EC%8A%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0">1-3-0. 실습 데이터</a></li><li><a href="#1-3-1-%EB%8B%A8%EC%88%9C-group-by">1-3-1. 단순 GROUP BY</a></li><li><a href="#1-3-2-grouping-group-%EB%B3%84-%EC%9A%94%EC%95%BD">1-3-2. GROUPING + GROUP 별 요약</a></li></ul></li></ul></li><li><a href="#2-having-%EC%A0%88"><strong>2. HAVING 절</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-having-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. HAVING 절 문법</a></li><li><a href="#2-3-having-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. HAVING 절 실습</a><ul><li><a href="#2-3-1-group-by-%ED%95%A9%EA%B3%84-having">2-3-1. GROUP BY  “합계” + HAVING</a></li><li><a href="#2-3-2-group-by-%EC%B9%B4%EC%9A%B4%ED%8A%B8-having">2-3-2. GROUP BY “카운트” + HAVING</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-group-by-절"><a class="markdownIt-Anchor" href="#1-group-by-절"></a> <strong>1. GROUP BY 절</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>GROUP BY 절은 SELECT 문에서 반환된 행을 그룹으로 나눈다. 각 그룹에 대한 합계, 평균, 카운트 등을 계산할 수 있다.</p><br><h3 id="1-2-group-by-절-문법"><a class="markdownIt-Anchor" href="#1-2-group-by-절-문법"></a> 1-2. GROUP BY 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,          <span class="comment">-- GROUPING 기준 컬럼 기재</span></span><br><span class="line">  집계함수(COLUMN2)   <span class="comment">-- 집계함수 사용하여 그룹별 요약값 도출</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> COLUMN_1;  <span class="comment">-- GROUP BY 절 기재, N개의 컬럼을 GROUP BY 하는 경우 ','구분</span></span><br><span class="line">                    <span class="comment">-- GROUP BY 절은 FROM 또는 WHERE절 바로 뒤에 나타나야 함</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-group-by-절-실습"><a class="markdownIt-Anchor" href="#1-3-group-by-절-실습"></a> 1-3. GROUP BY 절 실습</h3><h4 id="1-3-0-실습-데이터"><a class="markdownIt-Anchor" href="#1-3-0-실습-데이터"></a> 1-3-0. 실습 데이터</h4><p><strong>&gt;&gt; “dvdrental” 데이터 --&gt; “payment” 테이블</strong></p><img src="/images/S-SQL-Aggregate-1/image-20201112164755594.png" alt="image-20201112164755594" style="zoom:80%;"><br><h4 id="1-3-1-단순-group-by"><a class="markdownIt-Anchor" href="#1-3-1-단순-group-by"></a> 1-3-1. 단순 GROUP BY</h4><p><strong>&gt;&gt; 특정 컬럼의 UNIQUE VALUE를 추출할 때 쓰이다</strong> (SELECT DISTINCT과 유사)</p><p><strong>[MISSION]</strong> 중복 값이 제거된 CUSTOMER_ID를 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- GROUP BY 사용</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112170115424.png" alt="image-20201112170115424" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- [대체] SELECT DISTINCT 사용</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span>  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> PAYMENT;</span><br></pre></td></tr></tbody></table></figure><br><h4 id="1-3-2-grouping-group-별-요약"><a class="markdownIt-Anchor" href="#1-3-2-grouping-group-별-요약"></a> 1-3-2. GROUPING + GROUP 별 요약</h4><p><strong>1) 합계 구하기</strong></p><p><strong>[MISSION]</strong> 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112171724011.png" alt="image-20201112171724011" style="zoom:80%;"><br><p><strong>2) 카운트 구하기</strong></p><p><strong>[MISSION 1]</strong> 직원별 처리한 결제 건수 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 직원별 처리한 결제 건수 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STAFF_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(PAYMENT_ID) <span class="keyword">AS</span> N_PAYMENT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STAFF_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112173013752.png" alt="image-20201112173013752"></p><br><p><strong>[MISSION 2]</strong> STAFF 테이블에 있는 직원 이름 (FIRST_NAME, LAST_NAME)도 함께 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- STAFF 테이블에 있는 직원 이름 (FIRST_NAME, LAST_NAME)도 함께 추출</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.STAFF_ID, </span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,</span><br><span class="line">  <span class="keyword">COUNT</span>(B.PAYMENT_ID) <span class="keyword">AS</span> N_PAYMENT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  STAFF A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span> A.STAFF_ID = B.STAFF_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>            <span class="comment">-- [주의]: SELECT 문에서 집계함수를 제외한 모든 컬럼명을 GROUP BY에서 적어야 함 </span></span><br><span class="line">  A.STAFF_ID,</span><br><span class="line">  B.STAFF_ID,</span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112184417882.png" alt="image-20201112184417882" style="zoom:80%;"><br><img src="/images/S-SQL-Aggregate-1/image-20201112185119399.png" alt="image-20201112185119399"><br><br><h2 id="2-having-절"><a class="markdownIt-Anchor" href="#2-having-절"></a> <strong>2. HAVING 절</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>HAVING 절은 GROUP BY 절과 함께 사용하여 GROUP BY의 결과를 특정 조건으로 필터링하는 기능을 한다.</p><br><h3 id="2-2-having-절-문법"><a class="markdownIt-Anchor" href="#2-2-having-절-문법"></a> 2-2. HAVING 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,           <span class="comment">-- GROUPING 기준 컬럼 기재</span></span><br><span class="line">  집계함수(COLUMN_2)   <span class="comment">-- 집계함수 사용하여 그룹별 요약값 도출</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>             <span class="comment">-- GROUP BY 절 기재, N개의 컬럼을 GROUP BY 하는 경우 ','구분</span></span><br><span class="line">  COLUMN_1           <span class="comment">-- GROUP BY 절은 FROM 또는 WHERE절 바로 뒤에 나타나야 함</span></span><br><span class="line"><span class="keyword">HAVING</span> 조건식;</span><br></pre></td></tr></tbody></table></figure><ul><li>HAVING 절은 GROUP BY 절에 의해 생성된 그룹행의 조건을 설정한다</li><li>반면에 WHERE 절은 GROUP BY 절이 적용된기 전에 개별 행의 조건을 설정한다</li></ul><br><h3 id="2-3-having-절-실습"><a class="markdownIt-Anchor" href="#2-3-having-절-실습"></a> 2-3. HAVING 절 실습</h3><h4 id="2-3-1-group-by-합계-having"><a class="markdownIt-Anchor" href="#2-3-1-group-by-합계-having"></a> 2-3-1. GROUP BY  “합계” + HAVING</h4><p><strong>[GROUP BY 결과 출력]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112191152327.png" alt="image-20201112191152327" style="zoom:80%;"><br><br><p><strong>[MISSION 1]</strong>  GROUP BY의 결과 값 중에서 AMOUNT_SUM이 200을 초과하는 행 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT_SUM &gt; 200</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) &gt; <span class="number">200</span>;  <span class="comment">-- [주의]: 여기서 SUM(AMOUNT)의 ALIAS(별칭)을 쓰면 안됨.</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>주의:</strong> HAVING 절 뒤에 집계 데이터의 별칭(ALIAS)을 쓰면 안됨. (The HAVING clause is evaluated before the SELECT - so the server doesn’t yet know about that alias.)</li></ul><p><img src="/images/S-SQL-Aggregate-1/image-20201112192700072.png" alt="image-20201112192700072"></p><br><br><p><strong>[MISSION 2]</strong>  CUSTOMER 테이블에 있는 고객 이메일 주소 (EMAIL)도 함께 추출</p><img src="/images/S-SQL-Aggregate-1/image-20201112194907662.png" alt="image-20201112194907662" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  B.EMAIL,</span><br><span class="line">  <span class="keyword">SUM</span>(A.AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT A, </span><br><span class="line">  CUSTOMER B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  B.EMAIL</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">SUM</span>(A.AMOUNT) &gt; <span class="number">200</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112195342549.png" alt="image-20201112195342549"></p><br><br><h4 id="2-3-2-group-by-카운트-having"><a class="markdownIt-Anchor" href="#2-3-2-group-by-카운트-having"></a> 2-3-2. GROUP BY “카운트” + HAVING</h4><img src="/images/S-SQL-Aggregate-1/image-20201112200641600.png" alt="image-20201112200641600" style="zoom:80%;"><br><br><p><strong>[GROUP BY 결과 출력]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 매장(STORE)별 구매 고객 수 추출</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STORE_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) <span class="keyword">AS</span> N_CUSTOMER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STORE_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201143045.png" alt="image-20201112201143045"></p><br><p><strong>[MISSION]</strong>  구매 고객 수가 300 이상인 매장만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- N_CUSTOMER &gt; 300</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STORE_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) <span class="keyword">AS</span> N_CUSTOMER</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STORE_ID</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) &gt; <span class="number">300</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201350582.png" alt="image-20201112201350582"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 해당 매장 정보 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">STORE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  STORE_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201557040.png" alt="image-20201112201557040"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      기초 집계 함수 -- GROUP BY 절, 합계 SUM(), 카운트 COUNT(), HAVING 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 4. Aggregate Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-4-Aggregate-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 조인 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-2/</id>
    <published>2020-11-12T06:21:33.000Z</published>
    <updated>2020-11-12T07:03:13.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="조인-2"><a class="markdownIt-Anchor" href="#조인-2"></a> <strong>조인 (2)</strong></h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-self-%EC%A1%B0%EC%9D%B8"><strong>1. SELF 조인</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-self-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">1-2. SELF 조인 문법</a></li><li><a href="#1-3-self-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">1-3. SELF 조인 실습</a><ul><li><a href="#1-3-1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">1-3-1. 실습 준비</a></li><li><a href="#1-3-2-self-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">1-3-2. SELF 조인 실습</a></li></ul></li></ul></li><li><a href="#2-full-outer-%EC%A1%B0%EC%9D%B8"><strong>2. FULL OUTER 조인</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-full-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">2-2. FULL OUTER 조인 문법</a></li><li><a href="#2-3-full-outer-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">2-3. FULL OUTER 조인 실습</a><ul><li><a href="#2-3-1-basket-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%8B%A4%EC%8A%B5">2-3-1. BASKET 데이터를 활용한 간단한 실습</a></li><li><a href="#2-3-2-%EC%B6%94%EA%B0%80-%EC%8B%A4%EC%8A%B5">2-3-2. 추가 실습</a></li></ul></li></ul></li><li><a href="#3-cross-%EC%A1%B0%EC%9D%B8"><strong>3. CROSS 조인</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-cross-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">3-2. CROSS 조인 문법</a></li><li><a href="#3-3-cross-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3. CROSS 조인 실습</a><ul><li><a href="#3-3-0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">3-3-0. 실습 준비</a></li><li><a href="#3-3-1-cross-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3-1. CROSS 조인 실습</a></li></ul></li></ul></li><li><a href="#4-natural-%EC%A1%B0%EC%9D%B8"><strong>4. NATURAL 조인</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-natural-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">4-2. NATURAL 조인 문법</a></li><li><a href="#4-3-natural-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3. NATURAL 조인 실습</a><ul><li><a href="#4-3-0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">4-3-0. 실습 준비</a></li><li><a href="#4-3-1-natural-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3-1. NATURAL 조인 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-self-조인"><a class="markdownIt-Anchor" href="#1-self-조인"></a> <strong>1. SELF 조인</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>SELF 조인은 같은 테이블 끼리 특정 컬럼을 기준으로 매칭 되는 컬럼을 출력하는 조인이다.</p><p>즉, 같은 테이블의 데이터를 각각의 집합으로 분류한 후  조인한다.</p><br><h3 id="1-2-self-조인-문법"><a class="markdownIt-Anchor" href="#1-2-self-조인-문법"></a> 1-2. SELF 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_1, A.COL_2, ...,</span><br><span class="line">  B.COL_1, B.COL_3, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  TABLE_NAME <span class="keyword">AS</span> B    <span class="comment">-- THE SAME TABLE WITH THE FORMER</span></span><br><span class="line"><span class="keyword">ON</span> A.COL_T = B.COL_T</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-self-조인-실습"><a class="markdownIt-Anchor" href="#1-3-self-조인-실습"></a> 1-3. SELF 조인 실습</h3><h4 id="1-3-1-실습-준비"><a class="markdownIt-Anchor" href="#1-3-1-실습-준비"></a> 1-3-1. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEE</span><br><span class="line">(</span><br><span class="line">    EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    MANAGER_ID <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (MANAGER_ID)               <span class="comment">-- MANAGER_ID는 같은 테이블 (EMPLOYEE)의 EMPLOYEE_ID를 참조함</span></span><br><span class="line">    <span class="keyword">REFERENCES</span> EMPLOYEE (EMPLOYEE_ID)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEE (</span><br><span class="line">    EMPLOTEE_ID,</span><br><span class="line">    FIRST_NAME,</span><br><span class="line">    LAST_NAME,</span><br><span class="line">    MANAGER_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Windy'</span>, <span class="string">'Hays'</span>, <span class="literal">NULL</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Ava'</span>, <span class="string">'Christensen'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Hassan'</span>, <span class="string">'Conner'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Anna'</span>, <span class="string">'Reeves'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Sau'</span>, <span class="string">'Norman'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">'Kelsie'</span>, <span class="string">'Hays'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">'Tory'</span>, <span class="string">'Goff'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">'Salley'</span>, <span class="string">'Lester'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEE</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111155046250.png" alt="image-20201111155046250" style="zoom:80%;"><br><p><strong>&gt;&gt; 조직도</strong></p><img src="/images/S-SQL-Join-2/image-20201111155421168.png" alt="image-20201111155421168" style="zoom: 67%;"><br><h4 id="1-3-2-self-조인-실습"><a class="markdownIt-Anchor" href="#1-3-2-self-조인-실습"></a> 1-3-2. SELF 조인 실습</h4><p><strong>&gt;&gt; SELF INNER 조인 실습</strong></p><p><strong>MISSION:</strong></p><ul><li>각 직원의 상위 관리자를 출력</li><li>최고관리자인 'Windy Hays’는 결과 집합에 포함시키지 않음.</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  E.FIRST_NAME || <span class="string">' '</span> || E.LAST_NAME <span class="keyword">AS</span> EMPLOYEE,</span><br><span class="line">  M.FIRST_NAME || <span class="string">' '</span> || M.LAST_NAME <span class="keyword">AS</span> MANAGER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE E  <span class="comment">-- EMPLOYEE 중심</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  EMPLOYEE M  <span class="comment">-- MANAGER 중심</span></span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  E.MANAGER_ID = M.EMPLOYEE_ID   <span class="comment">-- 매칭 시 헷갈리지 않도록 주의</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  MANAGER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111162640186.png" alt="image-20201111162640186" style="zoom:80%;"><br><p><strong>&gt;&gt; SELF LEFT OUTER 조인 실습</strong></p><p><strong>MISSION:</strong></p><ul><li>각 직원의 상위 관리자를 출력하면서 모든 직원을 출력</li><li>최고관리자인 'Windy Hays’가 결과 집합에 포함시킴</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.FIRST_NAME || <span class="string">' '</span> || E.LAST_NAME <span class="keyword">AS</span> EMPLOYEE,</span><br><span class="line">  M.FIRST_NAME || <span class="string">' '</span> || M.LAST_NAME <span class="keyword">AS</span> MANAGER</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEE E</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  EMPLOYEE M</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  E.MANAGER_ID = M.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  MANAGER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111163954892.png" alt="image-20201111163954892" style="zoom:80%;"><br><p><strong>&gt;&gt; 부정형 조건 실습</strong></p><p><strong>MISSION:</strong> FILM 테이블에서 영화의 상영시간이 동일한 서로 다른 영화의 리스트를 출력</p><table><thead><tr><th style="text-align:center">film</th></tr></thead><tbody><tr><td style="text-align:center">*film_id <br>title <br>discription <br>release_year <br>language_id <br>rentall_duration <br>rental_rate <br>length <br>replacement_cost <br>rating <br>last_update <br>special_features <br>fulltext</td></tr></tbody></table><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.TITLE,</span><br><span class="line">  B.TITLE,</span><br><span class="line">  A.LENGTH</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID != B.FILM_ID <span class="keyword">AND</span></span><br><span class="line">   A.LENGTH = B.LENGTH</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111183444264.png" alt="image-20201111183444264" style="zoom:80%;"><br><br><h2 id="2-full-outer-조인"><a class="markdownIt-Anchor" href="#2-full-outer-조인"></a> <strong>2. FULL OUTER 조인</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>FULL OUTER 조인은 INNER, LEFT OUTER, RIGHT OUTER 조인 집합을 모두 출력하는 조인 방식이다.</p><p>즉, 두 테이블간 출력가능한 모든 데이터를 포함한 집합을 출력한다.</p><img src="/images/S-SQL-Join-2/image-20201111192014271.png" alt="image-20201111192014271" style="zoom:50%;"><br><h3 id="2-2-full-outer-조인-문법"><a class="markdownIt-Anchor" href="#2-2-full-outer-조인-문법"></a> 2-2. FULL OUTER 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  </span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-full-outer-조인-실습"><a class="markdownIt-Anchor" href="#2-3-full-outer-조인-실습"></a> 2-3. FULL OUTER 조인 실습</h3><h4 id="2-3-1-basket-데이터를-활용한-간단한-실습"><a class="markdownIt-Anchor" href="#2-3-1-basket-데이터를-활용한-간단한-실습"></a> 2-3-1. BASKET 데이터를 활용한 간단한 실습</h4><img src="/images/S-SQL-Join-2/image-20201111141327969.png" alt="image-20201111141327969" style="zoom: 67%;"><br><p><strong>&gt;&gt; FULL OUTER JOIN</strong></p><p><strong>(1) LEFT ONLY + LEFT&amp;RIGHT + RIGHT ONLY</strong></p><img src="/images/S-SQL-Join-2/image-20201111193914893.png" alt="image-20201111193914893" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111193119708.png" alt="image-20201111193119708" style="zoom:80%;"><br><p><strong>(2) ONLY OUTER (LEFT ONLY + RIGHT ONLY)</strong></p><img src="/images/S-SQL-Join-2/image-20201111194125768.png" alt="image-20201111194125768" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT </span><br><span class="line"><span class="keyword">WHERE</span> A.ID <span class="keyword">IS</span> <span class="literal">NULL</span>    <span class="comment">-- LEFT OUTER</span></span><br><span class="line">   <span class="keyword">OR</span> B.ID <span class="keyword">IS</span> <span class="literal">NULL</span>    <span class="comment">-- RIGHT OUTER</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111194613680.png" alt="image-20201111194613680" style="zoom:80%;"><br><h4 id="2-3-2-추가-실습"><a class="markdownIt-Anchor" href="#2-3-2-추가-실습"></a> 2-3-2. 추가 실습</h4><p><strong>&gt;&gt; 실습 준비</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> DEPARTMENTS    <span class="comment">-- 종재하지 않으면 생성</span></span><br><span class="line">(</span><br><span class="line">  DEPARTMENT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  DEPARTMENT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> EMPLOYEES</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EMPLOYEE_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</span><br><span class="line">  DEPARTMENT_ID <span class="built_in">INTEGER</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPARTMENTS(DEPARTMENT_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Sales'</span>),</span><br><span class="line">(<span class="string">'Marketing'</span>),</span><br><span class="line">(<span class="string">'HR'</span>),</span><br><span class="line">(<span class="string">'IT'</span>),</span><br><span class="line">(<span class="string">'Production'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES(</span><br><span class="line">  EMPLOYEE_NAME,</span><br><span class="line">  DEPARTMENT_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Bette Nicholson'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">'Christian Gable'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">'Joe Swank'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">'Fred Costner'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="string">'Sandra Kilmer'</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="string">'Julia Mcqueen'</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPARTMENTS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111200237831.png" alt="image-20201111200237831" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111200326518.png" alt="image-20201111200326518" style="zoom:80%;"><br><p><strong>&gt;&gt; FULL OUTER JOIN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111201327463.png" alt="image-20201111201327463" style="zoom:80%;"><br><p><strong>&gt;&gt; RIGHT OUTER ONLY 실습</strong></p><img src="/images/S-SQL-Join-2/image-20201111202627226.png" alt="image-20201111202627226" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 소속한 직원이 없는 부서만 출력</span></span><br><span class="line"><span class="comment">-- FULL OUTER + RIGHT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> E.EMPLOYEE_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111202501663.png" alt="image-20201111202501663"><br><p><strong>[P.S.]</strong> FULL OUTER JOIN+ RIGHT ONLY = RIGHT OUTER JOIN+ RIGHT ONLY</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RIGHT OUTER + RIGHT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> E.EMPLOYEE_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111202503508.png" alt="image-20201111202503508"></p><br><p><strong>&gt;&gt; LEFT OUTER ONLY 실습</strong></p><img src="/images/S-SQL-Join-2/image-20201111202802778.png" alt="image-20201111202802778" style="zoom: 50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 소속한 부서가 없는 직원만 출력</span></span><br><span class="line"><span class="comment">-- FULL OUTER + LEFT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> D.DEPARTMENT_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111203302334.png" alt="image-20201111203302334"></p><br><p><strong>[P.S.]</strong> FULL OUTER JOIN+ LEFT ONLY = LEFT OUTER JOIN+ LEFT ONLY</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT OUTER + LEFT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> D.DEPARTMENT_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111203302334.png" alt="image-20201111203302334"></p><br><br><h2 id="3-cross-조인"><a class="markdownIt-Anchor" href="#3-cross-조인"></a> <strong>3. CROSS 조인</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>두 개의 테이블의 CATESIAN PRODUCT 연산의 결과를 출력한다. 데이터 복제에 많이 쓰이는 기법이다.</p><ul><li><p>CATESIAN  PRODUCT:</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cartesian_Product_qtl1.svg/1200px-Cartesian_Product_qtl1.svg.png" alt="CARTESIAN PRODUCT" style="zoom: 25%;"></li></ul><br><h3 id="3-2-cross-조인-문법"><a class="markdownIt-Anchor" href="#3-2-cross-조인-문법"></a> 3-2. CROSS 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CROSS_TABLE_1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span></span><br><span class="line">  CROSS_TABLE_2</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-cross-조인-실습"><a class="markdownIt-Anchor" href="#3-3-cross-조인-실습"></a> 3-3. CROSS 조인 실습</h3><h4 id="3-3-0-실습-준비"><a class="markdownIt-Anchor" href="#3-3-0-실습-준비"></a> 3-3-0. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CROSS_T1</span><br><span class="line">(</span><br><span class="line">  LABEL <span class="built_in">CHAR</span>(<span class="number">1</span>) PRIMARY <span class="keyword">KEY</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CROSS_T2</span><br><span class="line">(</span><br><span class="line">  SCORE <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CROSS_T1 (LABEL)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'A'</span>),</span><br><span class="line">(<span class="string">'B'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CROSS_T2 (SCORE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CROSS_T1</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112090311812.png" alt="image-20201112090311812"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CROSS_T2</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112090405111.png" alt="image-20201112090405111"></p><br><h4 id="3-3-1-cross-조인-실습"><a class="markdownIt-Anchor" href="#3-3-1-cross-조인-실습"></a> 3-3-1. CROSS 조인 실습</h4><img src="/images/S-SQL-Join-2/image-20201112091802546.png" alt="image-20201112091802546" style="zoom: 67%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 방법 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CROSS_T1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span></span><br><span class="line">  CROSS_T2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  LABEL</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112091538328.png" alt="image-20201112091538328" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 방법 2</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CROSS_T1, CROSS_T2   <span class="comment">-- INNER JOIN을 표현하는 다른 방법 (조건 없는 INNER JOIN)</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  LABEL</span><br></pre></td></tr></tbody></table></figure><br><ul><li><p>위 두 개의 SQL 문 결과 집합이 동일하므로 같은 SQL문이라고 할 수 있다. SQL문의 목적은 집합을 출력하는 것이 때문이다.</p><p>즉, 추출한 정보가 같다면 SQL문 자체는 다르더라도 동일한 SQL 문이다.</p></li></ul><br><br><h2 id="4-natural-조인"><a class="markdownIt-Anchor" href="#4-natural-조인"></a> <strong>4. NATURAL 조인</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>두개의 테이블에서 같은 이름을 가진 컬럼 간의 INNER 조인 집합 결과를 출력한다. SQL문 자체가 간소해지는 방법이다.</p><br><h3 id="4-2-natural-조인-문법"><a class="markdownIt-Anchor" href="#4-2-natural-조인-문법"></a> 4-2. NATURAL 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span>    <span class="comment">-- 자동으로 두 테이블이 동일하게 가지고 있는 컬럼을 기준으로 INNER 조인한다</span></span><br><span class="line">  TABLE_B</span><br></pre></td></tr></tbody></table></figure><ul><li><p>NATURAL 조인은 INNER 조인의 또 다른 SQL 작성 방식이다.</p><p>즉, 조인 컬럼을 명시하지 않아도 된다.</p></li></ul><br><h3 id="4-3-natural-조인-실습"><a class="markdownIt-Anchor" href="#4-3-natural-조인-실습"></a> 4-3. NATURAL 조인 실습</h3><h4 id="4-3-0-실습-준비"><a class="markdownIt-Anchor" href="#4-3-0-실습-준비"></a> 4-3-0. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORIES</span><br><span class="line">(</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CATEGORY_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCTS</span><br><span class="line">(</span><br><span class="line">  PRODUCT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  PRODUCT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  CATEGORY_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (CATEGORY_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> CATEGORIES (CATEGORY_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CATEGORIES</span><br><span class="line">(CATEGORY_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Smart Phone'</span>),</span><br><span class="line">  (<span class="string">'Laptop'</span>),</span><br><span class="line">  (<span class="string">'Tablet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCTS</span><br><span class="line">(PRODUCT_NAME, CATEGORY_ID)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'iPhone'</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'Samsung Galaxy'</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'HP Elite'</span>, <span class="number">2</span>),</span><br><span class="line">  (<span class="string">'Lenovo Thinkpad'</span>, <span class="number">2</span>),</span><br><span class="line">  (<span class="string">'iPad'</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">'Kindle Fire'</span>, <span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORIES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112113447690.png" alt="image-20201112113447690" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCTS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112113548016.png" alt="image-20201112113548016" style="zoom:80%;"><br><h4 id="4-3-1-natural-조인-실습"><a class="markdownIt-Anchor" href="#4-3-1-natural-조인-실습"></a> 4-3-1. NATURAL 조인 실습</h4><p><strong>(1) 예제 데이터를 활용한 간단한 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCTS A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span></span><br><span class="line">  CATEGORIES B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112114726576.png" alt="image-20201112114726576" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 대체 방법 1</span></span><br><span class="line"><span class="comment">-- INNER JOIN으로 실현</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  P.CATEGORY_ID,  P.PRODUCT_ID,</span><br><span class="line">  P.PRODUCT_NAME, C.CATEGORY_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCTS P</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  CATEGORIES C</span><br><span class="line"><span class="keyword">ON</span> P.CATEGORY_ID = C.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 대체 방법 2  (INNER JOIN 대체 명령어)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  P.CATEGORY_ID,  P.PRODUCT_ID,</span><br><span class="line">  P.PRODUCT_NAME, C.CATEGORY_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCTS P,</span><br><span class="line">  CATEGORIES C</span><br><span class="line"><span class="keyword">WHERE</span> P.CATEGORY_ID = C.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><br><img src="/images/S-SQL-Join-2/image-20201112114726576.png" alt="image-20201112114726576" style="zoom:80%;"><br><p><strong>(2) “dvdrental” 데이터를 활용한 실습</strong></p><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-2/image-20201112135034156.png" alt="image-20201112135034156" style="zoom:80%;"><br><p><strong>&gt;&gt; 실습</strong></p><p>두 테이블이 모두 “country_id”  컬럼이 존재한다.</p><p>이 두 테이블에 대해서 NATURAL JOIN을 진행해보면:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span></span><br><span class="line">  COUNTRY B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112135747118.png" alt="image-20201112135747118" style="zoom:80%;"><br><p>기대와 다르게 출력 결과가 0건이다.</p><br><p>그 이유는:</p><p>두 테이블 간에 동일한 이름으로 존재하는 컬럼이 COUNTRY_ID 외에 LAST_UPDATE 도 존재한다.  이런 경우 NATURAL JOIN 시에는 <strong>LAST_UPDATE 컬럼까지 INNER조인에 성공해야만</strong> 결과값이 나온다.  하지만 두 테이블의 LAST_UPDATE 값이 서로 다르므로 위 SQL문을 실행 후 조건에 만족하는 결과가 없다.</p><br><p>따라서 NATURAL 조인이 아닌 INNER 조인을 이용해야한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  COUNTRY B</span><br><span class="line"><span class="keyword">ON</span> A.COUNTRY_ID = B.COUNTRY_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112142508575.png" alt="image-20201112142508575"></p><p>INNER 조인으로 ON절에 조인 컬럼을 명시하였고, 의도한 대로 데이터가 출력되었다.</p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN 대체 명령어</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A,</span><br><span class="line">  COUNTRY B</span><br><span class="line"><span class="keyword">WHERE</span> A.COUNTRY_ID = B.COUNTRY_ID;</span><br></pre></td></tr></tbody></table></figure><br><p>이러한 이유로 NATURAL 조인은 실무에 잘 사용되지 않는다.</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SELF 조인, FULL OUTER 조인, CROSS 조인, NATURAL 조인
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 3. Join" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-3-Join/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 조인 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-1/</id>
    <published>2020-11-12T05:34:10.000Z</published>
    <updated>2020-11-12T06:20:54.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="조인-1"><a class="markdownIt-Anchor" href="#조인-1"></a> 조인 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%A1%B0%EC%9D%B8%EC%9D%B4%EB%9E%80"><strong>1. 조인이란?</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%EC%A1%B0%EC%9D%B8%EC%9D%98-%EC%A2%85%EB%A5%98">1-2. 조인의 종류</a></li></ul></li><li><a href="#2-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84"><strong>2. 실습 준비</strong></a></li><li><a href="#3-inner-%EC%A1%B0%EC%9D%B8"><strong>3. INNER 조인</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-inner-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">3-2. INNER 조인 문법</a></li><li><a href="#3-3-inner-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3. INNER 조인 실습</a><ul><li><a href="#3-3-1-basket-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%8B%A4%EC%8A%B5">3-3-1. BASKET 데이터를 활용한 간단한 실습</a></li><li><a href="#3-3-2-dvdrental-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%8B%A4%EC%8A%B5">3-3-2. dvdrental 데이터를 활용한 실습</a><ul><li><a href="#1-2%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A1%B0%EC%9D%B8">(1) 2개의 테이블 조인</a></li><li><a href="#2-3%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A1%B0%EC%9D%B8">(2)  3개의 테이블 조인</a></li></ul></li></ul></li></ul></li><li><a href="#4-outer-%EC%A1%B0%EC%9D%B8"><strong>4. OUTER 조인</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">4-2. OUTER 조인 문법</a><ul><li><a href="#1-left-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">(1) LEFT OUTER 조인 문법</a></li><li><a href="#2-right-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">(2) RIGHT OUTER 조인 문법</a></li></ul></li><li><a href="#4-3-outer-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3. OUTER 조인 실습</a></li></ul></li></ul><p></p><br><h2 id="1-조인이란"><a class="markdownIt-Anchor" href="#1-조인이란"></a> <strong>1. 조인이란?</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>조인은 2개 이상의 테이블에 있는 정보 중 사용자가 필요한 집합에 맞게 가상의 테이블처럼 만들어서 결과를 보여주는 것이다.</p><br><h3 id="1-2-조인의-종류"><a class="markdownIt-Anchor" href="#1-2-조인의-종류"></a> 1-2. 조인의 종류</h3><table><thead><tr><th style="text-align:left">종류</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">INNER 조인</td><td style="text-align:left">특정 컬럼을 기준으로 정확히 매칭된 집합을 출력한다</td></tr><tr><td style="text-align:left">OUTER 조인</td><td style="text-align:left">특정 컬럼을 기준으로 매칭된 집합을 출력하지만 한쪽의 집합은 모두 출력하고 다른 한쪽의 집합은 매칭되는 컬럼의 값 만을 출력한다<br> (왼쪽 집합을 기준으로 하면 LEFT OUTER, 오른쪽 집합을 기준으로 하면 RIGHT OUTER)</td></tr><tr><td style="text-align:left">SELT 조인</td><td style="text-align:left">동일한 테이블 끼리의 특정 컬럼을 기준으로 매칭되는 집합을 출력한다</td></tr><tr><td style="text-align:left">FULL OUTER 조인</td><td style="text-align:left">INNER, LEFT OUTER, RIGHT OUTER 조인 집합을 모두 출력한다</td></tr><tr><td style="text-align:left">CROSS 조인</td><td style="text-align:left">Cartesian Product이라고도 하며 조인되는 두 테이블에서 곱집합을 반환한다</td></tr></tbody></table><br><br><h2 id="2-실습-준비"><a class="markdownIt-Anchor" href="#2-실습-준비"></a> <strong>2. 실습 준비</strong></h2><p><strong>실습을 위한 데이터 생성</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASKET_A</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FRUIT <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASKET_B</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FRUIT <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASKET_A</span><br><span class="line">  (<span class="keyword">ID</span>, FRUIT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'Apple'</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'Orange'</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'Banana'</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'Cucumber'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT, UPDATE, DELETE로 데이터의 삽입 혹은 갱신을 실시한 후에 꼭 COMMIT/ROLLBACK을 실현해야함.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASKET_B</span><br><span class="line">  (<span class="keyword">ID</span>, FRUIT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'Orange'</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'Apple'</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'Watermelon'</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'Pear'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BASKET_A;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111095120367.png" alt="image-20201111095120367" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BASKET_B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111095201056.png" alt="image-20201111095201056" style="zoom:80%;"><br><br><h2 id="3-inner-조인"><a class="markdownIt-Anchor" href="#3-inner-조인"></a> <strong>3. INNER 조인</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>INNER 조인은 대표적인 조인의 종유이다. 이는 특정 컬럼을 기준으로 정확히 매칭된 집합을 출력한다.</p><img src="/images/S-SQL-Join-1/image-20201111110318071.png" alt="image-20201111110318071" style="zoom:50%;"><br><h3 id="3-2-inner-조인-문법"><a class="markdownIt-Anchor" href="#3-2-inner-조인-문법"></a> 3-2. INNER 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B         <span class="comment">-- 조인의 기준이 되는 컬럼을 지정</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-inner-조인-실습"><a class="markdownIt-Anchor" href="#3-3-inner-조인-실습"></a> 3-3. INNER 조인 실습</h3><h4 id="3-3-1-basket-데이터를-활용한-간단한-실습"><a class="markdownIt-Anchor" href="#3-3-1-basket-데이터를-활용한-간단한-실습"></a> 3-3-1. BASKET 데이터를 활용한 간단한 실습</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>                  <span class="comment">-- 지정한 컬럼을 조회한다</span></span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span>                    <span class="comment">-- BASKET_A 테이블에과 BASKET_B 테이블을</span></span><br><span class="line">  BASKET_A A            <span class="comment">-- FRUIT 컬럼 기준으로 조인한다.</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111111333754.png" alt="image-20201111111333754"></p><br><h4 id="3-3-2-dvdrental-데이터를-활용한-실습"><a class="markdownIt-Anchor" href="#3-3-2-dvdrental-데이터를-활용한-실습"></a> 3-3-2. dvdrental 데이터를 활용한 실습</h4><h5 id="1-2개의-테이블-조인"><a class="markdownIt-Anchor" href="#1-2개의-테이블-조인"></a> (1) 2개의 테이블 조인</h5><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-1/image-20201111112825354.png" alt="image-20201111112825354" style="zoom:80%;"><ul><li><p>한 명의 고객은 여러 건의 결제내역을 가질 수 있다</p></li><li><p>하나의 결제는 반드시 고객을 가져야 한다</p><br></li></ul><p><strong>&gt;&gt; 실습</strong></p><p><strong>MISSION 1:</strong> CUSTOMER 테이블에 있는 고객 정보와 PAYMENT 테이블에 있는 결제정보를 종합하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111114614830.png" alt="image-20201111114614830"></p><br><p><strong>MISSION 2:</strong>  위에서 추출된 데이터에서 CUSTOMER_ID가 2인 행만 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.CUSTOMER_ID = <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111125419551.png" alt="image-20201111125419551"></p><br><h5 id="2-3개의-테이블-조인"><a class="markdownIt-Anchor" href="#2-3개의-테이블-조인"></a> (2)  3개의 테이블 조인</h5><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-1/image-20201111130320223.png" alt="image-20201111130320223" style="zoom:80%;"><ul><li>한 명의 직원은 여러 건의 결제내역을 처리한다</li><li>하나의 결제는 반드시 처리한 직원이 존재한다</li><li>한 명의 고객은 여러 건의 결제내역을 가질 수 있다</li><li>하나의 결제는 반드시 고객을 가져야 한다</li></ul><br><p><strong>&gt;&gt; 실습</strong></p><p><strong>MISSION:</strong> 결제를 진행한 고객 정보(CUSTOMER), 해당 고객의 결제내역(PAYMENT), 그리고 해당 결제를 처리하는 직원정보(STAFF)를 종합하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE,</span><br><span class="line">  C.FIRST_NAME <span class="keyword">AS</span> S_FIRST_NAME,</span><br><span class="line">  C.LAST_NAME <span class="keyword">AS</span> S_LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> PAYMENT B</span><br><span class="line">        <span class="keyword">ON</span> A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> STAFF C</span><br><span class="line">        <span class="keyword">ON</span> B.STAFF_ID = C.STAFF_ID</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111132315338.png" alt="image-20201111132315338"></p><br><br><h2 id="4-outer-조인"><a class="markdownIt-Anchor" href="#4-outer-조인"></a> <strong>4. OUTER 조인</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>특정 집합을 기준으로 매칭된 집합을 출력하지만, 한쪽의 집합은 모두 출력하고 다른 한쪽의 집합은 매칭되는 컬럼의 값 만을 출력한다.</p><img src="/images/S-SQL-Join-1/image-20201111133926396.png" alt="image-20201111133926396" style="zoom:50%;"><img src="/images/S-SQL-Join-1/image-20201111134145555.png" alt="image-20201111134145555" style="zoom:50%;"><br><h3 id="4-2-outer-조인-문법"><a class="markdownIt-Anchor" href="#4-2-outer-조인-문법"></a> 4-2. OUTER 조인 문법</h3><h4 id="1-left-outer-조인-문법"><a class="markdownIt-Anchor" href="#1-left-outer-조인-문법"></a> (1) LEFT OUTER 조인 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT OUTER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  <span class="comment">-- 'LEFT JOIN'만 사용해도 좋다</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-right-outer-조인-문법"><a class="markdownIt-Anchor" href="#2-right-outer-조인-문법"></a> (2) RIGHT OUTER 조인 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RIGHT OUTER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  <span class="comment">-- 'RIGHT JOIN'만 사용해도 좋다</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-3-outer-조인-실습"><a class="markdownIt-Anchor" href="#4-3-outer-조인-실습"></a> 4-3. OUTER 조인 실습</h3><img src="/images/S-SQL-Join-1/image-20201111141327969.png" alt="image-20201111141327969" style="zoom: 70%;"><br><p><strong>&gt;&gt; LEFT OUTER JOIN</strong></p><p><strong>(1) LEFT ONLY + LEFT&amp;RIGHT</strong></p><img src="/images/S-SQL-Join-1/image-20201111144634389.png" alt="image-20201111144634389" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID    ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID    ID_B, </span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111141611545.png" alt="image-20201111141611545" style="zoom:80%;"><br><p><strong>(2) LEFT ONLY</strong></p><img src="/images/S-SQL-Join-1/image-20201111144750586.png" alt="image-20201111144750586" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID    ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID    ID_B, </span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.FRUIT = B.FRUIT  </span><br><span class="line"><span class="keyword">WHERE</span> B.ID <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111145103252.png" alt="image-20201111145103252" style="zoom:80%;"><br><p><strong>&gt;&gt; RIGHT OUTER JOIN</strong></p><p><strong>(1) RIGHT ONLY + LEFT&amp;RIGHT</strong></p><img src="/images/S-SQL-Join-1/image-20201111151323862.png" alt="image-20201111151323862" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111151622024.png" alt="image-20201111151622024" style="zoom:80%;"><br><p><strong>(2) RIGHT ONLY</strong></p><img src="/images/S-SQL-Join-1/image-20201111151416027.png" alt="image-20201111151416027" style="zoom:50%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> A.FRUIT = B.FRUIT</span><br><span class="line"><span class="keyword">WHERE</span> A.ID <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111151747625.png" alt="image-20201111151747625" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      INNER 조인, OUTER 조인
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 3. Join" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-3-Join/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 데이터 조회 및 필터링</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/E-SQL-selecting-and-filtering/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/E-SQL-selecting-and-filtering/</id>
    <published>2020-11-10T12:01:42.000Z</published>
    <updated>2020-11-19T06:50:43.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-데이터-조회-및-필터링"><a class="markdownIt-Anchor" href="#실습-데이터-조회-및-필터링"></a> 【실습】 데이터 조회 및 필터링</h1><br><h3 id="1-payment-테이블에서-단일-거래의-amount의-액수가-가장-많은-고객들의-customer_id를-추출하라-단-customer_id의-값은-유일해야-한다"><a class="markdownIt-Anchor" href="#1-payment-테이블에서-단일-거래의-amount의-액수가-가장-많은-고객들의-customer_id를-추출하라-단-customer_id의-값은-유일해야-한다"></a> <strong>[1] PAYMENT 테이블에서 단일 거래의 AMOUNT의 액수가 가장 많은 고객들의 CUSTOMER_ID를 추출하라. 단, CUSTOMER_ID의 값은 유일해야 한다.</strong></h3><table><thead><tr><th style="text-align:center">payment</th></tr></thead><tbody><tr><td style="text-align:center">* payment_id <br>customer_id <br>staff_id <br>rental_id <br>amount <br>payment_date</td></tr></tbody></table><br><p><strong>&gt;&gt; 문제 풀이</strong></p><ol><li><p>우선 전체 거래 중 AMOUNT의 액수가 가장 큰 AMOUNT를 구한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AMOUNT</span><br><span class="line">  <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-selecting-and-filtering/image-20201110202739100.png" alt=""></p><br></li><li><p>그 다음 PAYMENT 테이블에서 가장 큰 AMOUNT를 가진 CUMSTOMER_ID를 구하고 중복을 제거한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> A.CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> PAYMENT A</span><br><span class="line"><span class="keyword">WHERE</span> A.AMOUNT = (</span><br><span class="line">         <span class="keyword">SELECT</span> B.AMOUNT</span><br><span class="line">           <span class="keyword">FROM</span> PAYMENT B</span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> B.AMOUNT <span class="keyword">DESC</span></span><br><span class="line">     <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-selecting-and-filtering/image-20201110203211887.png" alt="image-20201110203211887" style="zoom:80%;"></li></ol><br><br><h3 id="2-고객들에게-단체-이메일을-전송하고자-한다-customer-테이블에서-고객의-email-주소를-추출하고-이메일-형식에-맞지-않은-이메일-주소는-제외시켜라"><a class="markdownIt-Anchor" href="#2-고객들에게-단체-이메일을-전송하고자-한다-customer-테이블에서-고객의-email-주소를-추출하고-이메일-형식에-맞지-않은-이메일-주소는-제외시켜라"></a> <strong>[2]  고객들에게 단체 이메일을 전송하고자 한다.  CUSTOMER 테이블에서 고객의 EMAIL 주소를 추출하고, 이메일 형식에 맞지 않은 이메일 주소는 제외시켜라.</strong></h3><p><strong>(이메일 형식은: '@'가 존재해야 하고; '@'로 시작하지 말아야 하고; '@'로 끝나지 말아야 한다.)</strong></p><table><thead><tr><th style="text-align:center">customer</th></tr></thead><tbody><tr><td style="text-align:center">* customer_id <br>store_id <br>first_name <br>email <br>address_id <br>activebool <br>create_date <br>last_update <br>active</td></tr></tbody></table><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMAIL</span><br><span class="line">  <span class="keyword">FROM</span> CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span>  EMAIL <span class="keyword">LIKE</span> <span class="string">'%@%'</span></span><br><span class="line">   <span class="keyword">AND</span> EMAIL <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'@%'</span></span><br><span class="line">   <span class="keyword">AND</span> EMAIL <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'%@'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-selecting-and-filtering/image-20201110205604326.png" alt="image-20201110205604326" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-데이터-조회-및-필터링&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-데이터-조회-및-필터링&quot;&gt;&lt;/a&gt; 【실습】 데이터 조회 및 필터링&lt;/h1&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-payment-테이블에서-단일-거래
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Selecting" scheme="https://hyemin-kim.github.io/tags/Selecting/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 필터링 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-2/</id>
    <published>2020-11-10T05:25:03.000Z</published>
    <updated>2020-11-12T11:43:00.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-필터링-2"><a class="markdownIt-Anchor" href="#데이터-필터링-2"></a> 데이터 필터링 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-in-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>1. IN 연산자</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-in-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">1-2. IN 연산자 문법</a><ul><li><a href="#1-in-%EB%AC%B8%EB%B2%95">1) IN 문법</a></li><li><a href="#2-not-in-%EB%AC%B8%EB%B2%95">2) NOT IN 문법</a></li></ul></li><li><a href="#1-3-in-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">1-3. IN 연산자 실습</a></li></ul></li><li><a href="#2-between-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>2. BETWEEN 연산자</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-batween-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">2-2. BATWEEN 연산자 문법</a><ul><li><a href="#1-between-%EB%AC%B8%EB%B2%95">1) BETWEEN 문법</a></li><li><a href="#2-not-between-%EB%AC%B8%EB%B2%95">2) NOT BETWEEN 문법</a></li></ul></li><li><a href="#2-3-between-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">2-3. BETWEEN 연산자 실습</a></li></ul></li><li><a href="#3-like-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>3. LIKE 연산자</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-like-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">3-2. LIKE 연산자 문법</a><ul><li><a href="#1-like-%EB%AC%B8%EB%B2%95">1) LIKE 문법</a></li><li><a href="#2-not-like-%EB%AC%B8%EB%B2%95">2) NOT LIKE 문법</a></li><li><a href="#3-%ED%8A%B9%EC%A0%95-%ED%8C%A8%ED%84%B4">3) 특정 패턴</a></li></ul></li><li><a href="#3-3-like-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">3-3. LIKE 연산자 실습</a></li></ul></li><li><a href="#4-is-null-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>4. IS NULL 연산자</strong></a><ul><li><a href="#4-1-%EC%9A%A9%EB%8F%84">4-1. 용도</a></li><li><a href="#4-2-is-null-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">4-2. IS NULL 연산자 문법</a><ul><li><a href="#1-is-null-%EB%AC%B8%EB%B2%95">1) IS NULL 문법</a></li><li><a href="#2-is-not-null-%EB%AC%B8%EB%B2%95">2) IS NOT NULL 문법</a></li></ul></li><li><a href="#4-3-is-null-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">4-3. IS NULL 연산자 실습</a></li></ul></li></ul><p></p><br><h2 id="1-in-연산자"><a class="markdownIt-Anchor" href="#1-in-연산자"></a> <strong>1. IN 연산자</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>IN 연산자는 특정 집합(컬럼 혹은 리스트)에서 특정 집합 혹은 리스트가 존재하는지 판단하는 연산자이다.</p><br><h3 id="1-2-in-연산자-문법"><a class="markdownIt-Anchor" href="#1-2-in-연산자-문법"></a> 1-2. IN 연산자 문법</h3><h4 id="1-in-문법"><a class="markdownIt-Anchor" href="#1-in-문법"></a> 1) IN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 VALUE1, VALUE2등의 값이 존재하는지 확인 (조건에 만족한 행을 출력)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME <span class="keyword">IN</span> (VALUE1, VALUE2, ...)</span><br></pre></td></tr></tbody></table></figure> <br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 TABLE_NAME2 테이블의 COLUMMN_NAME2 집합이 존재하는지 확인</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABEL_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> COLUMN_NAME2 <span class="keyword">FROM</span> TABLE_NAME2)  <span class="comment">-- 서브 커리</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-in-문법"><a class="markdownIt-Anchor" href="#2-not-in-문법"></a> 2) NOT IN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NOT IN --</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 값이 VALUE1, VALUE2가 아닌 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">NOT</span> <span class="keyword">IN</span> (VALUE1, VALUE2)</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-in-연산자-실습"><a class="markdownIt-Anchor" href="#1-3-in-연산자-실습"></a> 1-3. IN 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">rental</th></tr></thead><tbody><tr><td style="text-align:center">* rental_id <br>rental_date <br>inventory_id <br>customer_id <br>return_date <br>staff_id <br>last_update</td></tr></tbody></table><br><p><strong>&gt;&gt; IN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2인 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109192003435.png" alt="image-20201109192003435" style="zoom:80%;"><br><ul><li>IN 연산자는 ‘OR’ &amp;&amp; ‘=’ 과 같다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- OR 사용 --</span></span><br><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2인 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID = <span class="number">1</span> <span class="keyword">OR</span></span><br><span class="line">  CUSTOMER_ID = <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109192003435-1604987159526.png" alt="image-20201109192003435" style="zoom:80%;"><br><p><strong>&gt;&gt; NOT IN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2가 아닌 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109194032659.png" alt="image-20201109194032659" style="zoom:80%;"><br><ul><li>NOT IN 연산자는 ‘AND’ &amp;&amp; ‘!=’ 과 같다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2가 아닌 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID != <span class="number">1</span> <span class="keyword">AND</span></span><br><span class="line">  CUSTOMER_ID != <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109194032659-1604987190631.png" alt="image-20201109194032659" style="zoom:80%;"><br><p><strong>&gt;&gt; 서브 커리</strong></p><p><strong>Mission:</strong> 2005년 5월 27일에 DVD 반납한 고객의  이름(FIRST_NAME &amp; LAST_NAME)을 출력</p><ol><li>먼저 RENTAL 테이블에서 2005년 5월 27일에 DVD 반납한 고객의 ID(CUSTOMER_ID)를 추출 (서브 커리 부분)</li><li>그다음 CUSTOMER 테이블에서 해당 ID인 고객의 이름(FIRST_NAME &amp; LAST_NAME)을 출력 (메인 커리 부분)</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 서브 커리 부분 --</span></span><br><span class="line"><span class="comment">-- RETURN_DATE가 2005년 5월 27일인 CUSTOMER_ID를 출력한다</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  <span class="keyword">CAST</span>(RETURN_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>) = <span class="string">'2005-05-27'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109213802126.png" alt="image-20201109213802126" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 메인 커리 부분 --</span></span><br><span class="line"><span class="comment">-- 해당 ID인 고객의 FIRST_NAME &amp; LAST_NAME 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME, LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      CUSTOMER_ID</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">      RENTAL</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      <span class="keyword">CAST</span>(RETURN_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>) = <span class="string">'2005-05-27'</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109214929978.png" alt="image-20201109214929978" style="zoom:80%;"><br><br><h2 id="2-between-연산자"><a class="markdownIt-Anchor" href="#2-between-연산자"></a> <strong>2. BETWEEN 연산자</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>BETWEEN 연산자는 특정 집합에서 어떠한 컬럼의 값이 특정 범위안에 들어가는 집합을 출력하는 연산자이다.</p><br><h3 id="2-2-batween-연산자-문법"><a class="markdownIt-Anchor" href="#2-2-batween-연산자-문법"></a> 2-2. BATWEEN 연산자 문법</h3><h4 id="1-between-문법"><a class="markdownIt-Anchor" href="#1-between-문법"></a> 1) BETWEEN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME의 값이 VALUE_A와 VALUE_B사이에 있는 집합을 출력한다</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME &gt;= VALUE_A AND COLUMN_NAME &lt;= B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME </span><br><span class="line">  <span class="keyword">BETWEEN</span> VALUE_A <span class="keyword">AND</span> VALUE_B</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-between-문법"><a class="markdownIt-Anchor" href="#2-not-between-문법"></a> 2) NOT BETWEEN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME의 값이 VALUE_A와 VALUE_B 사이에 있지 않은 집합을 출력한다</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME &lt; VALUE_A OR COLUMN_NAME &gt; VALUE_B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> VALUE_A <span class="keyword">AND</span> VALUE_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-between-연산자-실습"><a class="markdownIt-Anchor" href="#2-3-between-연산자-실습"></a> 2-3. BETWEEN 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">payment</th></tr></thead><tbody><tr><td style="text-align:center">* payment_id <br>customer_id <br>staff_id <br>rental_id <br>amount <br>payment_date</td></tr></tbody></table><br><p><strong>&gt;&gt; BETWEEN  실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 8과 9사이에 있는 행의 CUSTOMER_ID, PAYMENT_ID, AMOUNT를 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, </span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="keyword">BETWEEN</span> <span class="number">8</span> <span class="keyword">AND</span> <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110090038727.png" alt="image-20201110090038727" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 위 SQL은 이 SQL과 결과가 동일함</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT &gt;= <span class="number">8</span> <span class="keyword">AND</span></span><br><span class="line">      AMOUNT &lt;- <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; NOT BETWEEN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 8부터 9사이가 아닌 행의 CUSTOMER_ID, PAYMENT_ID, AMOUNT를 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">8</span> <span class="keyword">AND</span> <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110091032703.png" alt="image-20201110091032703" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 위 SQL은 이 SQL과 결과가 동일함</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT &lt; <span class="number">8</span> <span class="keyword">OR</span></span><br><span class="line">      AMOUNT &gt; <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; 일자 비교</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT_DATE가 2007년 2월 7일부터 2007년 2월 15일 데이터를 추출함</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- [방법 1]</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">CAST</span>(PAYMENT_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">-- [방법 2]</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110092522372.png" alt="image-20201110092522372" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CAST( # AS DATE)와 TO_CHAR( # , 'YYYY-MM-DD')의 결과 확인</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE,</span><br><span class="line">  <span class="keyword">CAST</span>(PAYMENT_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>),          </span><br><span class="line">  TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)  </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110093852708.png" alt="image-20201110093852708" style="zoom:80%;"><br><br><h2 id="3-like-연산자"><a class="markdownIt-Anchor" href="#3-like-연산자"></a> <strong>3. LIKE 연산자</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>LIKE연산자는 특정 집합에서 어떠한 컬럼의 값이 특정 값과 유사한 패턴을 갖는 집합을 출력하는 연산자이다.</p><br><h3 id="3-2-like-연산자-문법"><a class="markdownIt-Anchor" href="#3-2-like-연산자-문법"></a> 3-2. LIKE 연산자 문법</h3><h4 id="1-like-문법"><a class="markdownIt-Anchor" href="#1-like-문법"></a> 1) LIKE 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 특정 패턴과 유사한 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">LIKE</span> 특정패턴</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-like-문법"><a class="markdownIt-Anchor" href="#2-not-like-문법"></a> 2) NOT LIKE 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 특정 패턴과 유사하지 않은 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">LIKE</span> 특정패턴</span><br></pre></td></tr></tbody></table></figure><br><h4 id="3-특정-패턴"><a class="markdownIt-Anchor" href="#3-특정-패턴"></a> 3) 특정 패턴</h4><ul><li>특정 패턴에서 **%**는 어떠한 <strong>문자 혹은 문자열</strong>을 의미함 (길이가 상관없음)</li><li>특정 패턴에서 **_**는 <strong>한 개의 문자</strong>를 의미함</li></ul><br><h3 id="3-3-like-연산자-실습"><a class="markdownIt-Anchor" href="#3-3-like-연산자-실습"></a> 3-3. LIKE 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">customer</th></tr></thead><tbody><tr><td style="text-align:center">* customer_id <br>store_id <br>first_name <br>email <br>address_id <br>activebool <br>create_date <br>last_update <br>active</td></tr></tbody></table><br><p><strong>&gt;&gt; LIKE 실습</strong></p><p>[<code>## LIKE '&amp;&amp;'</code>] 절은 <code>TURE</code> / <code>FALSE</code>를 반환한다.</p><p>'<code>%</code>'와 '<code>_</code>'를 이해하기 위해 다음 예를 살펴본다:</p><div width="100%"><table><thead><tr><th style="text-align:left">SQL</th><th style="text-align:center">결과값</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">SELECT</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘FOO’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'FOO’는 'FOO’이므로 참이다</td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘F%’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'F%'는 'F’로 시작하면 모두 참이다</td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘_O_’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'_O_'는 3자리 문자열이고 가운든 문자가 'O’라면 모두 참이다</td></tr><tr><td style="text-align:left">‘BAR’ LIKE ‘B_’</td><td style="text-align:center">TRUE</td><td style="text-align:left">'_B_'는 B로 시작하는 2자리 문자열이면 모두 참. 하지만 'BAR’는 'B’로 시작하는 3자리 문자열이다</td></tr></tbody></table></div><br>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME이 'Jen'으로 시작하는 집합을 출력</span></span><br><span class="line"><span class="comment">-- 즉, 'Jen'뒤에 어떤 문자 혹은 문자열이든 OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME, </span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'Jen%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110105536650.png" alt="image-20201110105536650" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME에 'er'이 존재하는 모든 집합을 출력</span></span><br><span class="line"><span class="comment">-- 즉, 'er'앞과 뒤에 어떤 문자 혹은 문자열이든 OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'%er%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113041772.png" alt="image-20201110113041772" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME: 하나의 문자 + 'her' + 임의의 문자/문자열</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'_her%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113454144.png" alt="image-20201110113454144" style="zoom:80%;"><br><p><strong>&gt;&gt; NOT LIKE 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME이 'jen'으로 시작하지 않는 집합을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'Jen%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113847995.png" alt="image-20201110113847995" style="zoom:80%;"><br><br><h2 id="4-is-null-연산자"><a class="markdownIt-Anchor" href="#4-is-null-연산자"></a> <strong>4. IS NULL 연산자</strong></h2><h3 id="4-1-용도"><a class="markdownIt-Anchor" href="#4-1-용도"></a> 4-1. 용도</h3><p>IS NULL 연산자는 특정 컬럼 혹은 값이 NULL 값인지 아닌지를 판단하는 연산자이다.</p><p>IS NULL 혹은 IS NOT NULL로 NULL 유무를 판단한다.</p><br><h3 id="4-2-is-null-연산자-문법"><a class="markdownIt-Anchor" href="#4-2-is-null-연산자-문법"></a> 4-2. IS NULL 연산자 문법</h3><h4 id="1-is-null-문법"><a class="markdownIt-Anchor" href="#1-is-null-문법"></a> 1) IS NULL 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 NULL인 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-is-not-null-문법"><a class="markdownIt-Anchor" href="#2-is-not-null-문법"></a> 2) IS NOT NULL 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 NULL이 아닌 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-3-is-null-연산자-실습"><a class="markdownIt-Anchor" href="#4-3-is-null-연산자-실습"></a> 4-3. IS NULL 연산자 실습</h3><p><strong>&gt;&gt; 실습 준비</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CONTACTS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">GENERATED</span> <span class="keyword">BY</span> <span class="keyword">DEFAULT</span> <span class="keyword">AS</span> <span class="keyword">IDENTITY</span>,</span><br><span class="line">  FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PHONE <span class="built_in">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">  <span class="keyword">INTO</span> </span><br><span class="line">    CONTACTS(FIRST_NAME, LAST_NAME, EMIAL, PHONE)</span><br><span class="line">  <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'John'</span>, <span class="string">'Doe'</span>, <span class="string">'john.doe@example.com'</span>, <span class="literal">NULL</span>),</span><br><span class="line">    (<span class="string">'Lily'</span>, <span class="string">'Bush'</span>, <span class="string">'lily.bush@example.com'</span>, <span class="string">'(408-234-2764)'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110132419710.png" alt="image-20201110132419710" style="zoom:80%;"><br><p><strong>&gt;&gt; IS NULL 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PHONE 컬럼의 값이 NULL인 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  PHONE <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133053492.png" alt="image-20201110133053492" style="zoom:80%;"><br><ul><li><strong>[주의]</strong> NULL은 “=” 연산으로 비교할 수 없다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  PHONE = <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133321244.png" alt="image-20201110133321244" style="zoom:80%;"><br><p><strong>&gt;&gt; IS NOT NULL 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PHONE 컬럼의 값이 NULL이 아닌 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  PHONE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133559770.png" alt="image-20201110133559770" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 필터링 -- IN 연산자, BETWEEN 연산자, LIKE 연산자, IS NULL 연산자
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 2. Data Filtering" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-2-Data-Filtering/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 필터링 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-1/</id>
    <published>2020-11-10T05:17:37.000Z</published>
    <updated>2020-11-10T10:54:39.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-필터링-1"><a class="markdownIt-Anchor" href="#데이터-필터링-1"></a> 데이터 필터링 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-where-%EC%A0%88"><strong>1. WHERE 절</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-where-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2. WHERE 절 문법</a></li><li><a href="#1-3-where-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-3. WHERE 절 실습</a><ul><li><a href="#1-%EC%A1%B0%EA%B1%B4-%ED%95%9C%EA%B0%9C">1) 조건 한개</a></li><li><a href="#2-%EC%A1%B0%EA%B1%B4-%EB%91%90%EA%B0%9C">2) 조건 두개</a></li></ul></li></ul></li><li><a href="#2-limit-%EC%A0%88"><strong>2. LIMIT 절</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-limit-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. LIMIT 절 문법</a></li><li><a href="#2-3-limit-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. LIMIT 절 실습</a></li></ul></li><li><a href="#3-fetch-%EC%A0%88"><strong>3. FETCH 절</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-fetch-%EC%A0%88-%EB%AC%B8%EB%B2%95">3-2. FETCH 절 문법</a></li><li><a href="#3-3-fetch-%EC%A0%88-%EC%8B%A4%EC%8A%B5">3-3. FETCH 절 실습</a></li></ul></li></ul><p></p><br><h2 id="1-where-절"><a class="markdownIt-Anchor" href="#1-where-절"></a> <strong>1. WHERE 절</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>WHERE 절은 집합을 가져올 때 어떤 집합을 가져올 것인지에 대한 <strong>조건을 설정</strong>하는 절이다.</p><br><h3 id="1-2-where-절-문법"><a class="markdownIt-Anchor" href="#1-2-where-절-문법"></a> 1-2. WHERE 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt;조건&gt;     <span class="comment">-- 어떤 집합을 가져올지에 대한 조건을 준다</span></span><br></pre></td></tr></tbody></table></figure><br><p>WHERE 절에 사용할 수 있는 연산자:</p><div class="center"><table><thead><tr><th style="text-align:center">연산자</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:left">같음</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:left">~보다 큰 (초과)</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">~보다 작은 (미만)</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:left">~보다 크거나 같은 (이상)</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">~보다 작거나 같은 (이하)</td></tr><tr><td style="text-align:center">&lt;&gt; , !=</td><td style="text-align:left">~가 아닌</td></tr><tr><td style="text-align:center">AND</td><td style="text-align:left">그리고</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:left">혹은</td></tr></tbody></table></div><br><h3 id="1-3-where-절-실습"><a class="markdownIt-Anchor" href="#1-3-where-절-실습"></a> 1-3. WHERE 절 실습</h3><h4 id="1-조건-한개"><a class="markdownIt-Anchor" href="#1-조건-한개"></a> 1) 조건 한개</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER 테이블에서 FIRST_NAME이 'Jamie'인 행의 FIRST_NAME &amp; LAST_NAME 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME = <span class="string">'Jamie'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong> 문자열은 꼭 <strong>작은 따옴표( ’ ’ )로 묶어</strong>야 한다. 큰 따옴표( " " )는 안됨</p><p><img src="/images/S-SQL-Filtering-1/image-20201107151221142.png" alt="image-20201107151221142"></p><br><h4 id="2-조건-두개"><a class="markdownIt-Anchor" href="#2-조건-두개"></a> 2) 조건 두개</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER 테이블에서 FIRST-NAME이 'Jamie'이면서 LAST_NAME이 'Rice'인 행을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  LAST_NAME,</span><br><span class="line">  FIRST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">     FIRST_NAME = <span class="string">'Jamie'</span></span><br><span class="line"> <span class="keyword">AND</span> LAST_NAME = <span class="string">'Rice'</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Filtering-1/image-20201107151533774.png" alt="image-20201107151533774"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 1이하이거나 8이상인 행을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  AMOUNT,</span><br><span class="line">  PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">AMOUNT &lt;= <span class="number">1</span></span><br><span class="line"> <span class="keyword">OR</span> AMOUNT &gt;= <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201107152434964.png" alt="image-20201107152434964" style="zoom:80%;"><br><br><h2 id="2-limit-절"><a class="markdownIt-Anchor" href="#2-limit-절"></a> <strong>2. LIMIT 절</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>LIMIT 절은 특정 집합을 출력 시 출력하는 행의 수를 한정하는 역할을 한다. 부분 법위 처리시 사용된다.</p><p>PostgreSQL, MySQL 등에서 지원한다.</p><br><h3 id="2-2-limit-절-문법"><a class="markdownIt-Anchor" href="#2-2-limit-절-문법"></a> 2-2. LIMIT 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">LIMIT</span> N       <span class="comment">-- 상위 N 행만 출력</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정하면서 시작위치를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">LIMIT</span> N <span class="keyword">OFFSET</span> M  <span class="comment">-- M번째 뒤부터 출력</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-limit-절-실습"><a class="markdownIt-Anchor" href="#2-3-limit-절-실습"></a> 2-3. LIMIT 절 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">film</th></tr></thead><tbody><tr><td style="text-align:center">*film_id <br>title <br>discription <br>release_year <br>language_id <br>rentall_duration <br>rental_rate <br>length <br>replacement_cost <br>rating <br>last_update <br>special_features <br>fulltext</td></tr></tbody></table><br><p><strong>&gt;&gt; LIMIT</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FILM_NO [1]번 부터 5건 데이터 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RELEASE_YEAR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FILM_ID</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109113053651.png" alt="image-20201109113053651" style="zoom:80%;"><br><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RENTAL_RATE 내림차순으로 정렬 후 상위 10개 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RENTAL_RATE <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109124207207.png" alt="image-20201109124207207" style="zoom:80%;"><br><p><strong>&gt;&gt; LIMIT + OFFSET</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FILM_ID [4]번 부터 4건 데이터 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RELEASE_YEAR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FILM_ID</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109113620070.png" alt="image-20201109113620070" style="zoom:80%;"><br><br><h2 id="3-fetch-절"><a class="markdownIt-Anchor" href="#3-fetch-절"></a> <strong>3. FETCH 절</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>FETCH 절은 LIMIT 절과 동일하게, 특정 집합을 출력 시 출력하는 행의 수를 한정하는 역할을 한다. 부분 법위 처리시 사용된다.</p><br><h3 id="3-2-fetch-절-문법"><a class="markdownIt-Anchor" href="#3-2-fetch-절-문법"></a> 3-2. FETCH 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABEL_NAME</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> [N] <span class="keyword">ROW</span> <span class="keyword">ONLY</span>  <span class="comment">-- N을 입력하지 않고 ROW ONLY만 입력하면 단 한 건만 출력한다.</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정하면서 시작위치를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">OFFSET</span> M <span class="keyword">ROWS</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> [N] <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-fetch-절-실습"><a class="markdownIt-Anchor" href="#3-3-fetch-절-실습"></a> 3-3. FETCH 절 실습</h3><p><strong>&gt;&gt; FETCH</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 최초의 단 한 건의 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Filtering-1/image-20201109183743426-1604987080769.png" alt="image-20201109183743426"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 최초의 10 건의 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">10</span> <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109184236321.png" alt="image-20201109184236321" style="zoom:80%;"><br><p><strong>&gt;&gt; FETCH + OFFSET</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 6번째 행부터 5건 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">5</span> <span class="keyword">ROWS</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">5</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109184624570.png" alt="image-20201109184624570" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 필터링 -- WHERE 절, LIMIT 절, FETCH 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 2. Data Filtering" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-2-Data-Filtering/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조회</title>
    <link href="https://hyemin-kim.github.io/2020/11/06/S-SQL-Selecting/"/>
    <id>https://hyemin-kim.github.io/2020/11/06/S-SQL-Selecting/</id>
    <published>2020-11-06T05:56:21.000Z</published>
    <updated>2020-11-12T11:41:25.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조회"><a class="markdownIt-Anchor" href="#데이터-조회"></a> 데이터 조회</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-select-%EB%AC%B8"><strong>1. SELECT 문</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-select-%EB%AC%B8%EB%B2%95">1-2. SELECT 문법</a></li><li><a href="#1-3-select-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. SELECT 문 실습</a></li></ul></li><li><a href="#2-order-by-%EB%AC%B8"><strong>2. ORDER BY 문</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-order-by-%EB%AC%B8%EB%B2%95">2-2. ORDER BY 문법</a></li><li><a href="#2-3-order-by-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">2-3. ORDER BY 문 실습</a><ul><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EA%B8%B0%EC%A4%80-%EC%A0%95%EB%A0%AC">1) 단일 기준 정렬</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EA%B8%B0%EC%A4%80-n%EC%B0%A8-%EC%A0%95%EB%A0%AC">2) 다중 기준 N차 정렬</a></li></ul></li></ul></li><li><a href="#3-select-distinct-%EB%AC%B8"><strong>3. SELECT DISTINCT 문</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-select-distinct-%EB%AC%B8%EB%B2%95">3-2. SELECT DISTINCT 문법</a><ul><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EC%BB%AC%EB%9F%BC">1) 단일 컬럼</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EC%BB%AC%EB%9F%BC">2) 다중 컬럼</a></li></ul></li><li><a href="#3-3-select-distinct-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">3-3.  SELECT DISTINCT 문 실습</a><ul><li><a href="#0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1">0) 실습 준비 (데이터 생성)</a></li><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EC%BB%AC%EB%9F%BC-2">1) 단일 컬럼</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EC%BB%AC%EB%9F%BC-2">2) 다중 컬럼</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-select-문"><a class="markdownIt-Anchor" href="#1-select-문"></a> <strong>1. SELECT 문</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>SELECT 문은 일반적으로 테이플에 저장된 데이터를 가져오는 데 쓰인다.</p><p>SQL에서 가장 많이 쓰이는 문장이다.</p><br><h3 id="1-2-select-문법"><a class="markdownIt-Anchor" href="#1-2-select-문법"></a> 1-2. SELECT 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2,</span><br><span class="line">  중략...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-select-문-실습"><a class="markdownIt-Anchor" href="#1-3-select-문-실습"></a> 1-3. SELECT 문 실습</h3><p><strong>&gt; 전체 컬럼을 조회</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Selecting/image-20201106151704452.png" alt="image-20201106151704452"></p><br><p><strong>&gt; 지정한 컬럼을 조회</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME,</span><br><span class="line">  EMAIL</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Selecting/image-20201106151807348.png" alt="image-20201106151807348"></p><p><strong>[주의]</strong> 여러 컬럼을 조회할 때, SELECT 명령어 뒤 컬럼 이름을 입력 시:</p><ul><li>마지막 컬럼명을 제외한 모든 컬럼명 뒤에 따움표( , )를 붙여야 함</li><li>마지막 컬럼명 뒤에는 아무것도 입력하지 않는다</li></ul><br><p><strong>&gt; 테이블 Alias(별칭) 활용하기</strong></p><p>테이블에 별칭을 지정하면 코드의 가독성이 높아진다.  특히 테이블이 많아  지면, 선택한 컬럼이 어느 테이블에서 추출한 건지를 햇갈릴 수 있다. 테이블 별칭을 활용하면 보다 쉽게 구별할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,</span><br><span class="line">  A.EMAIL</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER A <span class="comment">-- OR "CUSTOMER AS A"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong> 테이블 Alias는 현재의 SELECT 문장에 대해서만 유효하다.</p><br><br><h2 id="2-order-by-문"><a class="markdownIt-Anchor" href="#2-order-by-문"></a> <strong>2. ORDER BY 문</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>ORDER BY 문은 SELECT 문에서 가져온 데이터를 정렬하는 데 사용한다.</p><p>업무 처리상 매우 중요한 기능이다.</p><br><h3 id="2-2-order-by-문법"><a class="markdownIt-Anchor" href="#2-2-order-by-문법"></a> 2-2. ORDER BY 문법</h3><p>ORDER BY를 활용하면 가져온 데이터를 특정 컬럼을 기준으로 오름차순(ASC) 혹은 내림차순(DESC)으로 정렬할 수 있다.</p><ul><li><p>컬럼명 뒤에 <code>ASC</code>를 불이면 – 오름차순으로 정렬</p></li><li><p>컬럼명 뒤에 <code>DESC</code>를 불이면 – 내림차순으로 정렬</p></li><li><p>컬럼명 뒤에 아무것도 안 불이면 – Default로 오름차순으로 정렬</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TAL_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   <span class="comment">-- Default: 오름차순(ASC)</span></span><br><span class="line">  COLUMN_1 <span class="keyword">ASC</span>,    <span class="comment">-- 오름차순 정렬</span></span><br><span class="line">  COLUMN_2 <span class="keyword">DESC</span>   <span class="comment">-- 내림차순 정렬</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-order-by-문-실습"><a class="markdownIt-Anchor" href="#2-3-order-by-문-실습"></a> 2-3. ORDER BY 문 실습</h3><h4 id="1-단일-기준-정렬"><a class="markdownIt-Anchor" href="#1-단일-기준-정렬"></a> 1) 단일 기준 정렬</h4><p>단일 컬럼을 기준으로 한 번의 정렬만 실시함.</p><br><p><strong>&gt; ASC(오름차순) 정렬</strong></p><ul><li><p>ORDER BY 미사용 시 (미정렬)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152037841.png" alt="image-20201106152037841" style="zoom:80%;"><br></li><li><p>“FIRST_NAME” 기준으로 오름차순 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ASC 명령어 명시</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">ASC</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Default로 정렬</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152244978.png" alt="image-20201106152244978" style="zoom:80%;"></li></ul><br><p>**&gt; DESC(내림차순) 정렬 **</p><ul><li><p>"FIRST_NAME"기준으로 내림차순 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152323551.png" alt="image-20201106152323551" style="zoom:80%;"></li></ul><br><br><h4 id="2-다중-기준-n차-정렬"><a class="markdownIt-Anchor" href="#2-다중-기준-n차-정렬"></a> 2) 다중 기준 N차 정렬</h4><p>여러 컬럼을 기준으로 N차 정렬을 실시함.</p><ul><li><p>COLUMN_1 기준으로 1차 정렬한 다음,</p></li><li><p>COLUMN_1의 값이 동일한 데이터에 대해서 COLUMN_2 기준으로 2차 정렬을 실시한다,</p></li><li><p>(위 규칙대로 계속 실행)…</p></li></ul><br><p><strong>&gt; ASC(오름차순) + DESC(내림차순) 정렬</strong></p><ul><li><p>먼저 FIRST_NAME 오름차순으로 정렬, FIRST_NAME이 동일한 데이터는 LAST_NAME 내림차순으로 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">DESC</span>,  <span class="comment">-- 1차 정렬 (FIRST_NAME 내림차순)</span></span><br><span class="line">  LAST_NAME <span class="keyword">ASC</span>  <span class="comment">-- 2차 정렬 (LAST_NAME 오름차순)</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152444007.png" alt="image-20201106152444007" style="zoom:80%;"></li></ul><br><ul><li><p>ORDER BY 기준을 정할 때, 컬럼명 내신에 SELECT 시 컬럼이 들어오는 순서로 대체해도 된다. (하지만 가독성을 위해 위 방법 더 추천)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">DESC</span>,  <span class="comment">-- 1: FIRST_NAME (내림차순)</span></span><br><span class="line">  <span class="number">2</span> <span class="keyword">ASC</span>    <span class="comment">-- 2: LAST_NAME (오름차순)</span></span><br></pre></td></tr></tbody></table></figure></li></ul><br><br><h2 id="3-select-distinct-문"><a class="markdownIt-Anchor" href="#3-select-distinct-문"></a> <strong>3. SELECT DISTINCT 문</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>SELECT 시 DISTINCT를 사용하면 중복 값을 제외한 결과값이 출력된다. 즉 같은 결과의 행이라면 중복을 제거할 수 있다.</p><br><h3 id="3-2-select-distinct-문법"><a class="markdownIt-Anchor" href="#3-2-select-distinct-문법"></a> 3-2. SELECT DISTINCT 문법</h3><h4 id="1-단일-컬럼"><a class="markdownIt-Anchor" href="#1-단일-컬럼"></a> 1) 단일 컬럼</h4><ul><li><p><strong>단일 컬럼</strong>을 추출할 때 <strong>해당 컬럼의 값이 중복된 행을 제거</strong>하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_1의 값이 중복 값 존재 시 중복 값을 제거</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br></pre></td></tr></tbody></table></figure></li></ul><br><h4 id="2-다중-컬럼"><a class="markdownIt-Anchor" href="#2-다중-컬럼"></a> 2) 다중 컬럼</h4><ul><li><p><strong>다중 컬럼</strong>을 추출할 때 <strong><font color="red">모든 컬럼의 값이 모두 중복 된 행</font>을 제거</strong>하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_1 + COLUMN_2의 값이 중복 값 존재 시 중복 값을 제거 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><p>&gt;&gt; 중복 값 제거 후 정렬하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 결과를 명확하게 하기 위해 ORDER BY 절 사용</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  COLUMN_1,   <span class="comment">-- default로 오름차순 정렬</span></span><br><span class="line">  COLUMN_2    <span class="comment">-- default로 오름차순 정렬</span></span><br></pre></td></tr></tbody></table></figure></li></ul><br><ul><li><p><strong>다중 컬럼</strong>을 추출할 때 <strong><font color="red">특정 컬럼의 값을 기준으로</font> 중복된 행을 제거</strong>하여 추출 (DISTINCT ON 절)</p><p><strong>[제거 규칙]</strong>  기준 컬럼의 값이 동일한 행 중에서 하나의 행만 보류</p><p>​                         - 기본적으로 중복된 행 중의 첫 번째를 보류</p><p>​                         - ORDER BY 문을 사용할 경우 정렬 후의 첫 번째 행을 보류</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (COLUMN_1)</span><br><span class="line">               COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (COLUMN_1)</span><br><span class="line">               COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  COLUMN_1 </span><br><span class="line">  COLUMN_2</span><br></pre></td></tr></tbody></table></figure></li></ul><br><br><h3 id="3-3-select-distinct-문-실습"><a class="markdownIt-Anchor" href="#3-3-select-distinct-문-실습"></a> 3-3.  SELECT DISTINCT 문 실습</h3><h4 id="0-실습-준비-데이터-생성"><a class="markdownIt-Anchor" href="#0-실습-준비-데이터-생성"></a> 0) 실습 준비 (데이터 생성)</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T1 (<span class="keyword">ID</span> <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, BCOLOR <span class="built_in">VARCHAR</span>, FCOLOR <span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">  <span class="keyword">INTO</span> T1(BCOLOR, FCOLOR)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="literal">NULL</span>),</span><br><span class="line">  (<span class="literal">NULL</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'blue'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'blue'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'blue'</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152615942.png" alt="image-20201106152615942" style="zoom:80%;"><br><h4 id="1-단일-컬럼-2"><a class="markdownIt-Anchor" href="#1-단일-컬럼-2"></a> 1) 단일 컬럼</h4><ul><li><p>BCOLOR 컬럼의 값이 중복된 행을 제거 + BCOLOR 기준으로 정렬하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> BCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  BCOLOR</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​                                                               <img src="/images/S-SQL-Selecting/image-20201106152737312.png" alt="image-20201106152737312"></p><br><h4 id="2-다중-컬럼-2"><a class="markdownIt-Anchor" href="#2-다중-컬럼-2"></a> 2) 다중 컬럼</h4><ul><li><p>BCOLOR &amp; FCOLOR 두 컬럼을 추출 시:</p><ol><li><p><strong>두 컬럼 의 값이 <font color="red">모두 중복된 행</font>을 제거</strong></p></li><li><p>BCOLOR &amp; FCOLOR 기준으로 <strong>정렬하여 추출</strong></p></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> BCOLOR, </span><br><span class="line">           FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR,</span><br><span class="line">  FCOLOR</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​                                            <img src="/images/S-SQL-Selecting/image-20201106160613919.png" alt="image-20201106160613919" style="zoom:80%;"></p><br><ul><li><p>BCOLOR &amp; FCOLOR 두 컬럼을 추출 시:</p><ol><li><p><strong><font color="red">BCOLOR의  값</font>을 기준으로 <font color="red">중복된 행</font>을 제거</strong></p></li><li><ul><li><p>미정렬 시 BCOLOR값이 동일한 행 중에 첫 번째 행만 보류</p></li><li><p>BCOLOR, FCOLOR 기준으로 정렬 시 FCOLOR의 첫 번째 값을 가진 행만 보류</p></li></ul></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 미정렬 시</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  T1</span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160706340.png" alt="image-20201106160706340" style="zoom:80%;"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BCOLOR, FCOLOR 기준으로 정렬  (FCOLOR 오름차순)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR, </span><br><span class="line">  FCOLOR</span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160800896.png" alt="image-20201106160800896" style="zoom:80%;"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BCOLOR, FCOLOR 기준으로 정렬  (FCOLOR 내림차순)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR, </span><br><span class="line">  FCOLOR <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160853425.png" alt="image-20201106160853425" style="zoom:80%;"></p></li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 조회 -- SELECT 문, ORDER BY 문, SELECT DISTINCT 문
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 1. Data Selecting" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-1-Data-Selecting/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Selecting" scheme="https://hyemin-kim.github.io/tags/Selecting/"/>
    
  </entry>
  
</feed>
