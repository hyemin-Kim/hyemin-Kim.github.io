<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hyemin Kim</title>
  
  <subtitle>김혜민 / 金慧敏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyemin-kim.github.io/"/>
  <updated>2020-12-21T09:19:56.054Z</updated>
  <id>https://hyemin-kim.github.io/</id>
  
  <author>
    <name>Hyemin Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (3)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-3/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-3/</id>
    <published>2020-12-21T09:13:02.000Z</published>
    <updated>2020-12-21T09:19:56.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-3"><a class="markdownIt-Anchor" href="#테이블-관리-3"></a> 테이블 관리 (3)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0"><strong>1. 테이블 제거</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EB%AC%B8%EB%B2%95">1-2. 테이블 제거 문법</a></li><li><a href="#1-3-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">1-3. 테이블 제거 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt;  실습 준비</a></li><li><a href="#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">&gt;&gt; 테이블 제거 실습</a></li></ul></li></ul></li><li><a href="#2-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94"><strong>2. 임시 테이블</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1-%EB%AC%B8%EB%B2%95">2-2. 임시 테이블 생성 문법</a></li><li><a href="#2-3-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%8B%A4%EC%8A%B5">2-3. 임시 테이블 실습</a></li></ul></li><li><a href="#3-truncate"><strong>3. TRUNCATE</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-truncate-%EB%AC%B8%EB%B2%95">3-2. TRUNCATE 문법</a></li><li><a href="#3-3-truncate-%EC%8B%A4%EC%8A%B5">3-3. TRUNCATE 실습</a></li></ul></li></ul><p></p><br><h2 id="1-테이블-제거"><a class="markdownIt-Anchor" href="#1-테이블-제거"></a> <strong>1. 테이블 제거</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>존재하는 테이블을 제거할 수 있다. 하지반 테이블 제거 시는 항상 주의해야하고 FK (Foreign Key) 관계도 유의해야 한다.</p><br><h3 id="1-2-테이블-제거-문법"><a class="markdownIt-Anchor" href="#1-2-테이블-제거-문법"></a> 1-2. 테이블 제거 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-테이블-제거-실습"><a class="markdownIt-Anchor" href="#1-3-테이블-제거-실습"></a> 1-3. 테이블 제거 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt;  실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DIRECTOR</span><br><span class="line">(</span><br><span class="line">  DIRECTOR_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FIRSTNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>),</span><br><span class="line">  LASTNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> FILMS</span><br><span class="line">(</span><br><span class="line">  FILM_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PREMIERE_DAY <span class="built_in">DATE</span>,</span><br><span class="line">  DIRECTOR_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (DIRECTOR_ID) <span class="keyword">REFERENCES</span> DIRECTOR (DIRECTOR_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DIRECTOR</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'준호'</span>, <span class="string">'봉'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> FILMS</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'기생충'</span>, <span class="string">'2019-05-30'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201218235703439.png" alt="image-20201218235703439"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILMS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201218235726706.png" alt="image-20201218235726706"></p><br><p><img src="/images/S-SQL-Table-3/image-20201219000405118.png" alt="image-20201219000405118"></p><br><br><h4 id="테이블-제거-실습"><a class="markdownIt-Anchor" href="#테이블-제거-실습"></a> &gt;&gt; 테이블 제거 실습</h4><p><strong>[MISSION 1]</strong>  부모 테이블 (DIRECTOR 테이블)을 제거하기</p><blockquote><p>부모 테이블은 바로 제거할 수 없다. 부모 테이블의 컬럼이 자식 테이블에서 첨조되고 있기 때문에 참조 누락성 제약조건으로 인해 제거할 수 없다. 굳이 제거하고 싶으면 CASCADE 옵션을 사용해야한다.</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219001645684.png" alt="image-20201219001645684" style="zoom:80%;"><br><p>지금 DIRECTOR 테이블의 DIRECTOR_ID 컬럼이 FILMS 테이블에서 FK로 참조되고 있기 때문에 FK 제약 조건으로 인해 테이블 제거할 수 없다.</p><p>이 경우에 <code>DROP TABLE ... CASCADE</code> 명령어를 이용하여 해당 테이블과 관계된 모든 개체를 함계 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> DIRECTOR <span class="keyword">CASCADE</span>;  <span class="comment">-- CASCADE 옵션으로 제거 성공</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 제거 성공 확인</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DIRECTOR;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219002930259.png" alt="image-20201219002930259" style="zoom:80%;"><br><p>부모 테이블이 제거된 경우 자식 테이블의 행은 존재하지반 FK 제약 조건은 삭제됨.</p><p><img src="/images/S-SQL-Table-3/image-20201219003312930.png" alt="image-20201219003312930"></p><br><img src="/images/S-SQL-Table-3/image-20201219003236123.png" alt="image-20201219003236123" style="zoom:80%;"><br><br><p><strong>[MISSION 2]</strong>  자식 테이블 (FILMS 테이블)을 제거하기</p><blockquote><p>자식 테이블은 바로 제거할 수 있다.</p></blockquote><p>두 테이블을 다시 생성한 후 자식 테이블 (FILMS 테이블)을 먼저 제거 한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> FILMS;  <span class="comment">-- 자식 테이블 제거 성공</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 제거 성공 확인</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILMS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219004411124.png" alt="image-20201219004411124" style="zoom:80%;"><br><br><h2 id="2-임시-테이블"><a class="markdownIt-Anchor" href="#2-임시-테이블"></a> <strong>2. 임시 테이블</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>임시 테이블은 DB 접속 세션의 활동 기간 동안 존재하는 테이블이다. 세션이 종료되면 임시 테이블은 자동으로 소멸된다.</p><br><h3 id="2-2-임시-테이블-생성-문법"><a class="markdownIt-Anchor" href="#2-2-임시-테이블-생성-문법"></a> 2-2. 임시 테이블 생성 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> </span><br><span class="line">  TABLE_NAME (<span class="keyword">COLUMN</span>);</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-임시-테이블-실습"><a class="markdownIt-Anchor" href="#2-3-임시-테이블-실습"></a> 2-3. 임시 테이블 실습</h3><p><strong>[실습 1]  임시 테이블 생성 후 세션 재접속</strong></p><blockquote><p>세션을 종료 후 재접속을 하면 임시 테이블이 소멸된다.</p></blockquote><br><ol><li><p>임시 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> </span><br><span class="line">  TB_CUST_TEMP_TEST (CUST_ID <span class="built_in">INT</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219145857043.png" alt="image-20201219145857043"></p></li></ol><br><ol start="2"><li><p>테이블에 값을 입력하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_CUST_TEMP_TEST</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219150041690.png" alt="image-20201219150041690"></p><br></li><li><p>세션 종료 후 재접속</p><img src="/images/S-SQL-Table-3/image-20201219152332829.png" alt="image-20201219152332829" style="zoom:67%;"></li></ol><br><ol start="4"><li><p>임시 테이블 불러오기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-3/image-20201219152608366.png" alt="image-20201219152608366" style="zoom:80%;"><br></li></ol><ul><li>세션을 종료 후 재접속을 하면 임시 테이블이 소멸된 것을 확인할 수 있다.</li></ul><br><br><p><strong>[실습 2]  기존에 존재하는 테이블과 같은 이름으로 임시 테이블 생성 후 제거</strong></p><blockquote><p>같은 이름의 일반 테이블과 임시 테이블이 동시에 존재할 경우:</p><ul><li><p>SELECT 문으로 테이블 조회할 때 <strong>임시 테이블</strong>을 볼러온다</p></li><li><p>DROP 문으로 테이블 제거할 때도 <strong>임시 테이블</strong>을 먼저 제거한다.</p></li></ul></blockquote><br><ol><li><p>일반 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST</span><br><span class="line">(</span><br><span class="line">  CUST_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CUST_NAME <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></li></ol><br><ol start="2"><li><p>같은 이름의 임시 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST</span><br><span class="line">( CUST_ID <span class="built_in">INT</span> );</span><br></pre></td></tr></tbody></table></figure></li></ol><br><ol start="3"><li><p>테이블 조회</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219164733538.png" alt="image-20201219164733538"></p><ul><li>임시 테이블을 불러오는 것을 확인할 수 있다</li></ul></li></ol><br><ol start="4"><li><p>테이블 제거</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TB_CUST_TEMP_TEST;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201219164935024.png" alt="image-20201219164935024"></p><ul><li>임시 테이블이 제거되고 일반 테이블이 그대로 남아있는 것을 확인할 수 있다.</li></ul></li></ol><br><br><h2 id="3-truncate"><a class="markdownIt-Anchor" href="#3-truncate"></a> <strong>3. TRUNCATE</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>대용량의 테이블을 빠르게 지우는 방법으로 TRUNCATE가 있다. 테이블의 세그먼트 자체를 바로 지우기 때문에 빠르게 데이터가 지워진다.</p><br><p><strong>&gt;&gt; DELETE  <font color="red">VS</font>  TRUNCATE</strong></p><img src="/images/S-SQL-Table-3/image-20201221144141568.png" alt="image-20201221144141568" style="zoom: 67%;"><br><table><thead><tr><th>DELETE</th><th>TRUNCATE</th></tr></thead><tbody><tr><td>데이터가 지워지지만 테이블 용량이 줄어 들지 않는다.</td><td>테이블을 삭제하지 않고 데이터만 삭제하지만, 테이블 용량이 줄어 든다.</td></tr><tr><td>원하는 데이터만 지울 수 있다.</td><td>한꺼번에 다 지워야 한다.</td></tr><tr><td>삭제 후 잘못 삭제한 것을 되돌릴 수 있다.</td><td>삭제 후 되돌릴 수 없다.</td></tr><tr><td>속도가 느리다.</td><td>속도가 빠르다.</td></tr></tbody></table><br><h3 id="3-2-truncate-문법"><a class="markdownIt-Anchor" href="#3-2-truncate-문법"></a> 3-2. TRUNCATE 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1개의 테이블 데이터를 빠라게 삭제</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- N개의 테이블 데이터를 빠르게 삭제</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE_1, BIG_TABLE_2;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-truncate-실습"><a class="markdownIt-Anchor" href="#3-3-truncate-실습"></a> 3-3. TRUNCATE 실습</h3><p>먼저 ACCOUNT 테이블과 동일한 새로운 테이블 BIG_TABLE를 만든다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BIG_TABLE <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FORM</span> <span class="keyword">ACCOUNT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221150858588.png" alt="image-20201221150858588"></p><br><p>이제 TRUNCATE 문을 이용하여 BIG_TABLE의 데이터를 모두 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> BIG_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221151023059.png" alt="image-20201221151023059"></p><br><p>* ROLLBACK을 통해 데이터를 다시 복원할 수 없다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FORM</span> BIG_TABLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-3/image-20201221151023059.png" alt="image-20201221151023059"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      테이블 제거, 임시 테이블, TRUNCATE
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-2/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-2/</id>
    <published>2020-12-21T09:03:29.000Z</published>
    <updated>2020-12-21T09:19:56.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-2"><a class="markdownIt-Anchor" href="#테이블-관리-2"></a> 테이블 관리 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80"><strong>1. 컬럼 추가</strong></a><ul><li><a href="#1-1-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80-%EB%AC%B8%EB%B2%95">1-1. 컬럼 추가 문법</a></li><li><a href="#1-2-%EC%BB%AC%EB%9F%BC-%EC%B6%94%EA%B0%80-%EC%8B%A4%EC%8A%B5">1-2. 컬럼 추가 실습</a></li></ul></li><li><a href="#2-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0"><strong>2. 컬럼 제거</strong></a><ul><li><a href="#2-1-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EB%AC%B8%EB%B2%95">2-1. 컬럼 제거 문법</a></li><li><a href="#2-2-%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">2-2. 컬럼 제거 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EC%A0%9C%EA%B1%B0-%EC%8B%A4%EC%8A%B5">&gt;&gt; 컬럼 제거 실습</a></li></ul></li></ul></li><li><a href="#3-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD"><strong>3. 컬럼 데이터 타입 변경</strong></a><ul><li><a href="#3-1-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">3-1. 컬럼 데이터 타입 변경 문법</a></li><li><a href="#3-2-%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">3-2. 컬럼 데이터 타입 변경 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">&gt;&gt; 컬럼 데이터 타입 변경 실습</a></li></ul></li></ul></li><li><a href="#4-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD"><strong>4. 컬럼 이름 변경</strong></a><ul><li><a href="#4-1-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">4-1. 컬럼 이름 변경 문법</a></li><li><a href="#4-2-%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">4-2. 컬럼 이름 변경 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-3">&gt;&gt;  실습 준비</a></li><li><a href="#%EC%BB%AC%EB%9F%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">&gt;&gt;  컬럼 이름 변경 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-컬럼-추가"><a class="markdownIt-Anchor" href="#1-컬럼-추가"></a> <strong>1. 컬럼 추가</strong></h2><h3 id="1-1-컬럼-추가-문법"><a class="markdownIt-Anchor" href="#1-1-컬럼-추가-문법"></a> 1-1. 컬럼 추가 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> COL_NAME_1 SETTING</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> COL_NAME_2 SETTING</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-2-컬럼-추가-실습"><a class="markdownIt-Anchor" href="#1-2-컬럼-추가-실습"></a> 1-2. 컬럼 추가 실습</h3><br><blockquote><p>ORACLE (오라클):</p><ul><li>create, drop, alter 명령어 (DDL)를 치는 순간 자동으로 commit이 됩니다. 즉, commit 할 필요가 없습니다.</li><li>하지만 delete, update, merge, insert 등 명령어는 commit 필요</li></ul><br><p>PostgreSQL:</p><ul><li>create, drop, alter, delete, update, merge, insert 명령어 모두 commit 을 필요합니다.</li></ul></blockquote><br><p><strong>(1) 아래와 같은 테이블을 생성한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TB_CUST(</span><br><span class="line">  CUST_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CUST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094138951.png" alt="image-20201210094138951"></p><br><br><p><strong>(2) 폰변호를 저장할 컬럼을 추가한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> PHONE_NUMBER <span class="built_in">VARCHAR</span>(<span class="number">13</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094238362.png" alt="image-20201210094238362"></p><br><br><p><strong>(3) 팩스번호 및 이메일 주소를 저장할 컬럼을 추가한다. (한 번에 2개 추가)</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> FAX_NUMBER <span class="built_in">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> EMAIL_ADDR <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210094317700.png" alt="image-20201210094317700"></p><br><br><p><strong>&gt;&gt; TB_CUST의 생성 과정(DDL) 확인</strong></p><img src="/images/S-SQL-Table-2/image-20201210095902038.png" alt="image-20201210095902038" style="zoom:80%;"><br><br><p><strong>(4) NOT NULL 제약 컬럼 추가</strong></p><p><strong>&gt;&gt; 문제</strong></p><p>테이블에 데이터가 있을 때는 NOT NULL 제약 컬럼을 바로 추가할 수 없다.</p><p>추가하는 순간 해당 컬럼에 값이 없어서 NOT NULL 제약을 위반하게 되기 때문이다.</p><br><p>[[ 실습 ]]</p><ul><li><p>먼저 테이블에 데이터를 입력한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_CUST</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'홍길동'</span>, <span class="string">'010-1234-5678'</span>, <span class="string">'02-123-1234'</span>, <span class="string">'dbmsexpert@naver.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210103454365.png" alt="image-20201210103454365"><br></li><li><p>데이터를 입력 후 아래와 같이 NOT NULL 컬럼을 추가하면 기존에 레코드가 있기 때문에 ERROR가 발생한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ADDRESS <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210105714436.png" alt="image-20201210105714436" style="zoom:80%;"></li></ul><br><p><strong>&gt;&gt; 해결</strong></p><p>이런 경우 해결책은 우선 NULL 조건으로 컬럼을 추가한 다음, 컬럼 값을 부여하는 UPDATE 작업을 진행하고 다시 NOT NULL 제약을 추가하는 것이다.</p><br><p>[[ 실습 ]]</p><ul><li><p>먼저 NULL 조건으로 컬럼을 추가한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ADDRESS <span class="built_in">VARCHAR</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><br><ul><li><p>그 다음 ADDRESS 컬럼을 UPDATE 한다. (컬럼 값 부여)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TB_CUST</span><br><span class="line">   <span class="keyword">SET</span> ADDRESS = <span class="string">'서울시 영등포구'</span></span><br><span class="line"> <span class="keyword">WHERE</span> CUST_ID = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201210142057665.png" alt=""></p>  <br><img src="/images/S-SQL-Table-2/image-20201210142716523.png" alt="image-20201210142716523" style="zoom:80%;"></li></ul><br><ul><li><p>마지막으로 ALTER COLUMN으로 NOT NULL로 제약 조건을 준다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TB_CUST</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ADDRESS <span class="keyword">SET</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201210142834604.png" alt="image-20201210142834604" style="zoom:80%;"></li></ul><br><br><h2 id="2-컬럼-제거"><a class="markdownIt-Anchor" href="#2-컬럼-제거"></a> <strong>2. 컬럼 제거</strong></h2><h3 id="2-1-컬럼-제거-문법"><a class="markdownIt-Anchor" href="#2-1-컬럼-제거-문법"></a> 2-1. 컬럼 제거 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME_1,</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME_2, </span><br><span class="line">  ... ;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CASCADE 옵션: 해당 컬럼과 관련 있는 모든 개체들이 함께 삭제(DROP)된다.</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> COL_NAME <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-2-컬럼-제거-실습"><a class="markdownIt-Anchor" href="#2-2-컬럼-제거-실습"></a> 2-2. 컬럼 제거 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PUBLISHERS (</span><br><span class="line">  PUBLISHER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORIES (</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BOOKS (</span><br><span class="line">  BOOK_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ISBN <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PUBLISHED_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">VARCHAR</span>,</span><br><span class="line">  CATEGORY_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PUBLISHER_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (CATEGORY_ID) <span class="keyword">REFERENCES</span> CATEGORIES (CATEGORY_ID),</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (PUBLISHER_ID) <span class="keyword">REFERENCES</span> PUBLISHERS (PUBLISHER_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217140819313.png" alt="image-20201217140819313" style="zoom:67%;"><br><br><p>3개의 TABLE을 하나의 뷰로 생성한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BOOK_INFO <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  B.BOOK_ID,</span><br><span class="line">  B.TITLE,</span><br><span class="line">  B.ISBN,</span><br><span class="line">  B.PUBLISHED_DATE,</span><br><span class="line">  P.NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BOOKS B,</span><br><span class="line">  PUBLISHERS P</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  P.PUBLISHER_ID = B.PUBLISHER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.TITLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217140850918.png" alt="image-20201217140850918"></p><br><br><h4 id="컬럼-제거-실습"><a class="markdownIt-Anchor" href="#컬럼-제거-실습"></a> &gt;&gt; 컬럼 제거 실습</h4><img src="/images/S-SQL-Table-2/image-20201217140819313.png" alt="image-20201217140819313" style="zoom:67%;"><p><strong>관계:</strong></p><ul><li>한 개의 카테고리가 여러 개의 책을 가진다. 한 개의 책은 반드시 카테고리를 가진다.</li><li>한 개의 출판사는 여러 개의 책을 출판한다. 한 개의 책은 반드시 출판사를 가진다.</li></ul><br><p><strong>[실습 1]  BOOKS 테이블에서 CATEGORY_ID 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217142424062.png" alt="image-20201217142424062"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> CATEGORY_ID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217142727702.png" alt="image-20201217142727702"></p><ul><li>BOOKS 테이블은 자식 테이블이므로 CATEGORY_ID 컬럼은 제거가 가능하다.</li><li>컬럼이 제거되면서 CATEGORY_ID의 FK (Foreign Key) 도 함께 삭제된다.</li></ul><br><p><strong>[실습 2]  BOOKS 테이블에서 PUBLISHER_ID 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PUBLISHER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217143419783.png" alt="image-20201217143419783" style="zoom:80%;"><ul><li>PUBLISHER_ID 컬럼을 제거하고자 하는 경우 위와 같은 에러가 발생한다.</li><li>해당 컬럼은 BOOK_INFO 뷰에서 참조하고 있기 때문이다.</li></ul><br><p>이런 경우에는 CASCADE 옵션을 줘서 삭제한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PUBLISHER_ID <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217144023588.png" alt="image-20201217144023588"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOOK_INFO;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201217144204332.png" alt="image-20201217144204332" style="zoom:80%;"><ul><li>컬럼 삭제에는 성공했지만 BOOK_INFO 뷰도 같이 DROP 되었다.</li></ul><br><p><strong>[실습 3]  동시에 N개의 컬럼을 제거한다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> BOOKS</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> ISBN,</span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> DESCRIPTION;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201217144804982.png" alt="image-20201217144804982"></p><br><br><h2 id="3-컬럼-데이터-타입-변경"><a class="markdownIt-Anchor" href="#3-컬럼-데이터-타입-변경"></a> <strong>3. 컬럼 데이터 타입 변경</strong></h2><h3 id="3-1-컬럼-데이터-타입-변경-문법"><a class="markdownIt-Anchor" href="#3-1-컬럼-데이터-타입-변경-문법"></a> 3-1. 컬럼 데이터 타입 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> COL_NAME_1 <span class="keyword">TYPE</span> NEW_TYPE,</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> COL_NAME_2 <span class="keyword">TYPE</span> NEW_TYPE,</span><br><span class="line">  ... ;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-2-컬럼-데이터-타입-변경-실습"><a class="markdownIt-Anchor" href="#3-2-컬럼-데이터-타입-변경-실습"></a> 3-2. 컬럼 데이터 타입 변경 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ASSETS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ASSET_NO <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">TEXT</span>,</span><br><span class="line">  LOCATION <span class="built_in">TEXT</span>,</span><br><span class="line">  DATE_ACQUIRED <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ASSETS (</span><br><span class="line">  <span class="keyword">NAME</span>,</span><br><span class="line">  ASSET_NO,</span><br><span class="line">  LOCATION,</span><br><span class="line">  DATE_ACQUIRED</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Server'</span>, <span class="string">'10001'</span>, <span class="string">'Server room'</span>, <span class="string">'2017-01-01'</span>),</span><br><span class="line">(<span class="string">'UPS'</span>, <span class="string">'10002'</span>, <span class="string">'Server room'</span>, <span class="string">'2017-01-02'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ASSETS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218185044584.png" alt="image-20201218185044584"></p><br><h4 id="컬럼-데이터-타입-변경-실습"><a class="markdownIt-Anchor" href="#컬럼-데이터-타입-변경-실습"></a> &gt;&gt; 컬럼 데이터 타입 변경 실습</h4><p><img src="/images/S-SQL-Table-2/image-20201218185255265.png" alt="image-20201218185255265"></p><p><strong>[MISSION 1]</strong>  NAME, DESCRIPTION, LOCATION 컬럼의 데이터 타입을 TEXT에서 VARCHAR로 바꾸기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1개 컬럼의 데이터 타입 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 한번에 N개 컬럼의 데이터 타입 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS </span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> DESCRIPTION <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> LOCATION <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">500</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190150074.png" alt="image-20201218190150074" style="zoom:80%;"><br><br><p><strong>[MISSION 2]</strong>  ASSET_NO 컬럼의 데이터 타입을 VARCHAR 에서 INT로 바꾸기</p><ul><li><p>그냥 <code>TYPE INT</code> 로 바꾸면 ERROR 가 발생한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ASSET_NO <span class="keyword">TYPE</span> <span class="built_in">INT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190725819.png" alt="image-20201218190725819" style="zoom:80%;"><br></li><li><p><strong>[주의]</strong> <code>USING col_name::integer</code> 구문을 추가해야 함</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ASSETS</span><br><span class="line">  <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ASSET_NO <span class="keyword">TYPE</span> <span class="built_in">INT</span> <span class="keyword">USING</span> ASSET_NO::<span class="built_in">INTEGER</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-2/image-20201218190942598.png" alt="image-20201218190942598" style="zoom:80%;"></li></ul><br><br><h2 id="4-컬럼-이름-변경"><a class="markdownIt-Anchor" href="#4-컬럼-이름-변경"></a> <strong>4. 컬럼 이름 변경</strong></h2><h3 id="4-1-컬럼-이름-변경-문법"><a class="markdownIt-Anchor" href="#4-1-컬럼-이름-변경-문법"></a> 4-1. 컬럼 이름 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> COL_NAME_OLD <span class="keyword">TO</span> COL_NAME_NEW;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-2-컬럼-이름-변경-실습"><a class="markdownIt-Anchor" href="#4-2-컬럼-이름-변경-실습"></a> 4-2. 컬럼 이름 변경 실습</h3><h4 id="실습-준비-3"><a class="markdownIt-Anchor" href="#실습-준비-3"></a> &gt;&gt;  실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CUSTOMERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMERS (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PHONE <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span>,</span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>) <span class="keyword">REFERENCES</span> CUSTOMER_GROUPS (<span class="keyword">ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_GROUPS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220746648.png" alt="image-20201218220746648"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220814142.png" alt="image-20201218220814142"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CUSTOMER_DATA</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">  C.ID,</span><br><span class="line">  C.NAME,</span><br><span class="line">  G.NAME CUSTOMER_GROUP</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMERS C,</span><br><span class="line">  CUSTOMER_GROUPS G</span><br><span class="line"><span class="keyword">WHERE</span> C.GROUP_ID = G.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218220315994.png" alt="image-20201218220315994"></p><br><h4 id="컬럼-이름-변경-실습"><a class="markdownIt-Anchor" href="#컬럼-이름-변경-실습"></a> &gt;&gt;  컬럼 이름 변경 실습</h4><p><strong>[MISSION 1]</strong>  CUSTOMERS 테이블 EMIAL 컬럼의 이름을 바꾸기:  EMAIL --&gt; CONTACT_EMAIL</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> CUSTOMERS</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> EMIAL <span class="keyword">TO</span> CONTACT_EMAIL;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221154310.png" alt="image-20201218221154310"></p><br><p><strong>[MISSION 2]</strong>  CUSTOMER_GROUPS 테이블의 NAME 컬럼의 이름을 바꾸기:  NAME --&gt; GROUP_NAME</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> CUSTOMER_GROUPS</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="keyword">TO</span> GROUP_NAME;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_GROUPS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221509265.png" alt="image-20201218221509265"></p><br><p>뷰 CUSTOMER_DATA 에서 참조중인 CUSTOMER_GROUP 테이블의 NAME 컬럼의 이름도 바뀌었는지 살펴본다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMER_DATA;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-2/image-20201218221834951.png" alt="image-20201218221834951"></p><ul><li>컬럼명이 바뀐 것이 뷰에 자동으로 적용된 것을 확인할 수 있다.</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      컬럼 추가, 컬럼 제거, 컬럼 데이터 타입 변경, 컬럼 이름 변겅
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 테이블 관리 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-1/"/>
    <id>https://hyemin-kim.github.io/2020/12/21/S-SQL-Table-1/</id>
    <published>2020-12-21T08:53:24.000Z</published>
    <updated>2020-12-21T09:47:49.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테이블-관리-1"><a class="markdownIt-Anchor" href="#테이블-관리-1"></a> 테이블 관리 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85"><strong>1. 데이터 타입</strong></a><ul><li><a href="#boolean-character-numeric">&gt;&gt; Boolean, Character, Numeric</a></li><li><a href="#time-arrays-json">&gt;&gt; Time, Arrays, JSON</a></li></ul></li><li><a href="#2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1"><strong>2. 테이블 생성</strong></a></li><li><a href="#3-ctas-create-table-as-select"><strong>3. CTAS (CREATE TABLE AS SELECT)</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-ctas-%EB%AC%B8%EB%B2%95">3-2. CTAS 문법</a></li><li><a href="#3-3-ctas-%EC%8B%A4%EC%8A%B5">3-3. CTAS 실습</a></li></ul></li><li><a href="#4-%ED%85%8C%EC%9D%B4%EB%B8%94-%EA%B5%AC%EC%A1%B0-%EB%B3%80%EA%B2%BD"><strong>4. 테이블 구조 변경</strong></a></li><li><a href="#5-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD"><strong>5. 테이블 이름 변경</strong></a><ul><li><a href="#5-1-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EB%AC%B8%EB%B2%95">5-1. 테이블 이름 변경 문법</a></li><li><a href="#5-2-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-%EC%8B%A4%EC%8A%B5">5-2. 테이블 이름 변경 실습</a></li><li><a href="#5-3-%EA%B1%B8%EB%A1%A0">5-3. 걸론</a></li></ul></li></ul><p></p><br><h2 id="1-데이터-타입"><a class="markdownIt-Anchor" href="#1-데이터-타입"></a> <strong>1. 데이터 타입</strong></h2><p>테이블은 컬럼으로 이루어져 있고 컬럼은 다양한 데이터 타입을 지원한다. 이는 RDBMS가 제 역할을 하는데 있어서 매우 중요하다.</p><br><p>다양한 데이터 타입 지원:</p><ul><li>Boolean</li><li>Character</li><li>Numeric</li><li>Time</li><li>Arrays</li><li>JSON</li></ul><br><h3 id="boolean-character-numeric"><a class="markdownIt-Anchor" href="#boolean-character-numeric"></a> &gt;&gt; Boolean, Character, Numeric</h3><table><thead><tr><th>데이터 타입</th><th>세부 타입</th><th>설명</th></tr></thead><tbody><tr><td>Boolean</td><td>Boolean</td><td>참과 거짓의 값을 저장한다.</td></tr><tr><td>Character</td><td>CHAR</td><td>고정형 길이의 문자열을 저장한다. <br>만약 CHAR(10)인데 'ABCDE’만 입력할 경우 실제로는 'ABCDE     '로 뒤에 공백을 붙여 저장한다.</td></tr><tr><td></td><td>VARCHAR</td><td>가변형 길이의 분자열을 저장한다. <br> 만약 VARCHAR(10) 인데 'ABCDE’만 입력할 경우 실제로 'ABCDE’만 저장한다. (뒤에 공백을 붙이지 않는다)</td></tr><tr><td></td><td>TEXT</td><td>대용량의 문자데이터를 저장한다.</td></tr><tr><td>Numeric</td><td>INT</td><td>정수형데이터를 저장한다. 크기는 4byte이다. (범위는 -2,147,483,648 to 2,147,483,647)</td></tr><tr><td></td><td>SMALLINT</td><td>정수형 데이터를 저장한다. 크기는 2byte이다. (범위는 -32,768 to 32,767)</td></tr><tr><td></td><td>float</td><td>부동 소수점의 데이터를 저장한다. 크기는 8byte이다.</td></tr><tr><td></td><td>numeric</td><td>NUMERIC(15, 2)와 같이 전체 크기와 소수점의 자리를 지정할 수 있다.</td></tr></tbody></table><br><p><strong>[실습]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">DATA_TYPE_TEST_1</span><br><span class="line">(</span><br><span class="line">  A_BOOLEAN <span class="built_in">BOOLEAN</span>,</span><br><span class="line">  B_CHAR <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">  C_VARCHAR <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  D_TEXT <span class="built_in">TEXT</span>,</span><br><span class="line">  E_INT <span class="built_in">INT</span>,</span><br><span class="line">  F_SMALLINT <span class="built_in">SMALLINT</span>,</span><br><span class="line">  G_FLOAT <span class="built_in">FLOAT</span>,</span><br><span class="line">  H_NUMERIC <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">DATA_TYPE_TEST_1</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  <span class="literal">TRUE</span>,        <span class="comment">-- A_BOOLEAN</span></span><br><span class="line">  <span class="string">'ABCDE'</span>,     <span class="comment">-- B_CHAR</span></span><br><span class="line">  <span class="string">'ABCDE'</span>,     <span class="comment">-- C_VARCHAR</span></span><br><span class="line">  <span class="string">'TEXT'</span>,      <span class="comment">-- D_TEXT</span></span><br><span class="line">  <span class="number">1000</span>,        <span class="comment">-- E_INT</span></span><br><span class="line">  <span class="number">10</span>,          <span class="comment">-- F_SMALLINT</span></span><br><span class="line">  <span class="number">10.12345</span>,    <span class="comment">-- G_FLOAT</span></span><br><span class="line">  <span class="number">10.25</span>        <span class="comment">-- H_NUMERIC</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATA_TYPE_TEST_1;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201207164552207.png" alt="image-20201207164552207"></p><br><br><h3 id="time-arrays-json"><a class="markdownIt-Anchor" href="#time-arrays-json"></a> &gt;&gt; Time, Arrays, JSON</h3><table><thead><tr><th>데이터 타입</th><th>세부 타입</th><th>설명</th></tr></thead><tbody><tr><td>Time</td><td>Date</td><td>일자 데이터를 저장한다.</td></tr><tr><td></td><td>TIME</td><td>시간 데이터를 저장한다.</td></tr><tr><td></td><td>TIMESTAMP</td><td>일자와 시간 데이터를 모두 저장한다.</td></tr><tr><td>Arrays</td><td>array</td><td>배열 형식의 데이터를 저장한다. <br> 한개의 컬럼에 여러개의 데이터를 동시에 저장할 수 있으며 저장한 데이터의 순서로 조회할 수 있다.</td></tr><tr><td>JSON</td><td>JSON</td><td>JSON형식의 데이터를 저장한다. <br> JSON형식의 데이터를 입력해서 JSON형식대로 각 LEVEL의 데이터를 저장할 수 있다.</td></tr></tbody></table><br><p><strong>[실습]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DATA_TYPE_TEST_2</span><br><span class="line">(</span><br><span class="line">  A_DATE <span class="built_in">DATE</span>,</span><br><span class="line">  B_TIME <span class="built_in">TIME</span>,</span><br><span class="line">  C_TIMESTAMP <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">  D_ARRAY <span class="built_in">TEXT</span>[],</span><br><span class="line">  E_JSON <span class="keyword">JSON</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DATA_TYPE_TEST_2</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line"> <span class="keyword">CURRENT_DATE</span>,        <span class="comment">-- A_DATE</span></span><br><span class="line"> <span class="keyword">LOCALTIME</span>,           <span class="comment">-- B_TIME</span></span><br><span class="line"> <span class="keyword">CURRENT_TIMESTAMP</span>,   <span class="comment">-- C_TIMESTAMP</span></span><br><span class="line"> <span class="built_in">ARRAY</span> [<span class="string">'010-1234-1234'</span>, <span class="string">'010-4321-4321'</span>],  <span class="comment">-- D_ARRAY</span></span><br><span class="line"> <span class="string">'{"customer": "John Doe", "items": {"product": "Beer", "qty": 6}}'</span>  <span class="comment">-- E_JSON</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATA_TYPE_TEST_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201207171138943.png" alt="image-20201207171138943"><br><br><h2 id="2-테이블-생성"><a class="markdownIt-Anchor" href="#2-테이블-생성"></a> <strong>2. 테이블 생성</strong></h2><p>테이블은 데이터를 담는 그릇으로써 반드시 생성해야만 데이터를 저장할 수 있다.</p><br><p><strong>&gt;&gt; 테이블 생성 시 컬럼의 제약 조건</strong></p><table><thead><tr><th>제약조건명</th><th>설명</th></tr></thead><tbody><tr><td>NOT NULL</td><td>해당 제약 조건이 있는 컬럼은 NULL이 저장될 수 없다.</td></tr><tr><td>UNIQUE</td><td>해당 제약 조건이 있는 컬럼의 값은 테이블 내에서 유일해야 한다.</td></tr><tr><td>PRIMARY KEY</td><td>해당 제약 조건이 있는 컬럼의 값은 테이블 내에서 유일해야 하고 반드시 NOT NULL이어야 한다.</td></tr><tr><td>CHECK</td><td>해당 제약 조건이 있는 컬럼은 지정하는 조건에 맞는 값이 들어가야 한다.</td></tr><tr><td>REFERENCES</td><td>해당 제약 조건이 있는 컬럼의 값은 참조하는 테이블의 특정 컬럼에 값이 존재해야 한다.</td></tr></tbody></table><br><p><strong>&gt;&gt; 테이블 생성 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">ACCOUNT</span></span><br><span class="line">(</span><br><span class="line">  USER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  USERNAME <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span> (<span class="number">355</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  CREATED_ON <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_LOGIN <span class="built_in">TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">ROLE</span></span><br><span class="line">(</span><br><span class="line">  ROLE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  ROLE_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ACCOUNT_ROLE</span><br><span class="line">(</span><br><span class="line">  USER_ID <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ROLE_ID <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  GRANT_DATE <span class="built_in">TIMESTAMP</span> <span class="keyword">WITHOUT</span> <span class="built_in">TIME</span> ZONE,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (USER_ID, ROLE_ID),   <span class="comment">-- 기본키는 USER_ID + ROLE_ID로 한다</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> ACCOUNT_ROLE_ROLE_ID_FKEY <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (ROLE_ID)  <span class="comment">-- ROLE_ID 컬럼은 ROLE 테이블의 ROLE_ID 컬럼을 참조한다</span></span><br><span class="line">  <span class="keyword">REFERENCES</span> <span class="keyword">ROLE</span> (ROLE_ID) <span class="keyword">MATCH</span> SIMPLE  <span class="comment">-- ROLE_ID 컬럼은 ROLE 테이블의 ROLE_ID컬럼에 대한 삭제 혹은 변경 시 아무것도 하지 않는다</span></span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> ACCOUNT_ROLE_USER_ID_FKEY <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (USER_ID)  <span class="comment">-- USER_ID 컬럼은 ACCOUNT 테이블의 USER_ID 컬럼을 참조한다</span></span><br><span class="line">  <span class="keyword">REFERENCES</span> <span class="keyword">ACCOUNT</span> (USER_ID) <span class="keyword">MATCH</span> SIMPLE  <span class="comment">-- USER_ID 컬럼은 ACCOUNT 테이블의  USER_ID 컬럼에 대한 삭제 혹은 변경 시 아무것도 하지 않는다</span></span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208111620532.png" alt="image-20201208111620532"><ul><li>ACCOUNT 테이블과 ROLE 테이블은 다대다의 매칭관계이다.</li><li>두 테이블의 내용이 매칭될 수 있도록 ACCOUNT_ROLE 테이블을 생성하여 1대다의 관계를 만들어 준다.</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'홍길동'</span>, <span class="string">'1234'</span>, <span class="string">'honggd@naver.com'</span>, <span class="keyword">CURRENT_TIMESTAMP</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">ACCOUNT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208113648219.png" alt="image-20201208113648219"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">ROLE</span></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'DBA'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">ROLE</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208113804601.png" alt="image-20201208113804601"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACCOUNT_ROLE;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208114018320.png" alt="image-20201208114018320"></p><br><p><strong>&gt;&gt; 에러</strong></p><p><strong>(1)  참조 누락성 제약 조건 위반</strong></p><ul><li>참조키(Foreign Key)에 해당 데이터가 존재하지 않는 경우</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131508151.png" alt="image-20201208131508151" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131440441.png" alt="image-20201208131440441" style="zoom:80%;"><br><p><strong>(2)  고유 제약 조건 위반</strong></p><ul><li>중복값이 없어야 하는 PRIMARY KEY에 중복이 발생한 경우</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACCOUNT_ROLE</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208131635637.png" alt="image-20201208131635637" style="zoom:80%;"><br><p><strong>(3)  참조 시 갱신/삭제 불가</strong></p><ul><li>데이터가 참조되어 있을 때 해당 데이터를 갱신/삭제 불가한다.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">SET</span> USER_ID = <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> USER_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208133014712.png" alt="image-20201208133014712" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">ACCOUNT</span></span><br><span class="line"><span class="keyword">WHERE</span> USER_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208133014712.png" alt="image-20201208133014712" style="zoom:80%;"><br><br><h2 id="3-ctas-create-table-as-select"><a class="markdownIt-Anchor" href="#3-ctas-create-table-as-select"></a> <strong>3. CTAS (CREATE TABLE AS SELECT)</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>CTAS는 CREATE TABLE AS SELECT의 약어로써 SELECT문을 기반으로 CREATE TABLE을 할 수 있는 CREATE문이다.</p><br><h3 id="3-2-ctas-문법"><a class="markdownIt-Anchor" href="#3-2-ctas-문법"></a> 3-2. CTAS 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> NEW_TABLE   <span class="comment">-- 새로운 테이블의 이름을 설정한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> NEW_TABLE (NEW_COLUMN_1, NEW_COLUMN_2)  <span class="comment">-- 새로운 테이블명의 이름과 컬럼명을 설정한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> NEW_TABLE   <span class="comment">-- 기존에 테이블이 존재하지 않는 경우만 생성한다</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>문                 <span class="comment">-- SELECT문을 작성한다</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-ctas-실습"><a class="markdownIt-Anchor" href="#3-3-ctas-실습"></a> 3-3. CTAS 실습</h3><p><strong>[MISSION]</strong>  액션영화의 정보만으로 신규 테이블을 생성</p><img src="/images/S-SQL-Table-1/image-20201208140314164.png" alt="image-20201208140314164" style="zoom:67%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">CATEGORY</span> <span class="keyword">WHERE</span> CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208140547218.png" alt="image-20201208140547218"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.FILM_ID, </span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RELEASE_YEAR,</span><br><span class="line">  A.LENGTH,</span><br><span class="line">  A.RATING</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">AND</span> B.CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208140813355.png" alt="image-20201208140813355" style="zoom:80%;"><br><br><p>&gt;&gt; 액션 영화 테이블 생성</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ACTION_FILM <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.FILM_ID, </span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RELEASE_YEAR,</span><br><span class="line">  A.LENGTH,</span><br><span class="line">  A.RATING</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">AND</span> B.CATEGORY_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACTION_FILM;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208140813355.png" alt="image-20201208140813355" style="zoom:80%;"><br><br><h2 id="4-테이블-구조-변경"><a class="markdownIt-Anchor" href="#4-테이블-구조-변경"></a> <strong>4. 테이블 구조 변경</strong></h2><p>한번 만들어진 테이블이라고 하더라도 데이블 구조를 변경할 수 있다. 이 기능으로 인해 업무변화에 유연하게 대처할 수 있다.</p><br><p><strong>&gt;&gt; 테이블 구조 변경 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> LINKS </span><br><span class="line">(</span><br><span class="line">  LINK_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  TITLE <span class="built_in">VARCHAR</span> (<span class="number">512</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">URL</span> <span class="built_in">VARCHAR</span> (<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143703988.png" alt="image-20201208143703988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1) ACTIVE 컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> ACTIVE <span class="built_in">BOOLEAN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143726988.png" alt="image-20201208143726988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2) ACTIVE 컬럼을 제거</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> ACTIVE;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208143703988.png" alt="image-20201208143703988"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 3) TITLE 컬럼을 LINK_TITLE 컬럼으로 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> TITLE <span class="keyword">TO</span> LINK_TITLE;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144037777.png" alt="image-20201208144037777"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 4) TARGET 컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> TARGET <span class="built_in">VARCHAR</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144143373.png" alt="image-20201208144143373"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 5) TARGET 컬럼의 DEFAULT값을 "_blank"로 설정</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> TARGET</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">'_blank'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208144308010.png" alt="image-20201208144308010"></p><br><ul><li><p>데이터 추가 해보기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'PostgreSQL Tutorial'</span>, <span class="string">'http://www.postgresqltutorial.com/'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINKS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208151743700.png" alt="image-20201208151743700"></p></li></ul><br><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 6) 체크 제약 조건 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> LINKS <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (TARGET <span class="keyword">IN</span> (<span class="string">'_self'</span>, <span class="string">'_blank'</span>, <span class="string">'_parent'</span>, <span class="string">'_top'</span>));</span><br></pre></td></tr></tbody></table></figure><br><ul><li><p>TARGET 컬럼의 체크 제약 조건에 없는 ‘whatever’ 값으로 INSERT 시도</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>, TARGET)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'PostgreSQL'</span>, <span class="string">'http://www.postgresql.org/'</span>, <span class="string">'whatever'</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208154416334.png" alt="image-20201208154416334" style="zoom:80%;"></li></ul><br><ul><li><p>TARGET 컬럼의 체크 제약 조건에 없는 ‘whatever’ 값으로 INSERT 시도</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> LINKS (LINK_TITLE, <span class="keyword">URL</span>, TARGET)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'PostgreSQL'</span>, <span class="string">'http://www.postgresql.org/'</span>, <span class="string">'_self'</span>);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208154617221.png" alt="image-20201208154617221" style="zoom:80%;"></li></ul><br><br><h2 id="5-테이블-이름-변경"><a class="markdownIt-Anchor" href="#5-테이블-이름-변경"></a> <strong>5. 테이블 이름 변경</strong></h2><p>한번 만들어진 테이블이라고 하더라도 테이블 이름을 변경할 수 있다. 이 기능으로 인해 업무변화에 유연하게 대처할 수 있다.</p><br><h3 id="5-1-테이블-이름-변경-문법"><a class="markdownIt-Anchor" href="#5-1-테이블-이름-변경-문법"></a> 5-1. 테이블 이름 변경 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> OLD_TABLE_NAME</span><br><span class="line">  <span class="keyword">RENAME</span> <span class="keyword">TO</span> NEW_TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="5-2-테이블-이름-변경-실습"><a class="markdownIt-Anchor" href="#5-2-테이블-이름-변경-실습"></a> 5-2. 테이블 이름 변경 실습</h3><p><strong>&gt;&gt; 테이블 이름 변경 실습 (1)</strong></p><p><strong>[MISSION]</strong> VENDORS 테이블을 SUPPLIERS 테이블로 변경</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- VENDORS 테이블 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> VENDORS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> VENDORS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208164854947.png" alt="image-20201208164854947"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- VENDORS 테이블의 이름을 SUPPLIERS 로 변경</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> VENDORS <span class="keyword">RENAME</span> <span class="keyword">TO</span> SUPPLIERS;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SUPPLIERS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208164854947.png" alt="image-20201208164854947"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> VENDORS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Table-1/image-20201208171311297.png" alt="image-20201208171311297" style="zoom:80%;"><br><p><strong>&gt;&gt; 테이블 이름 변경 실습 (2)</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SUPPLIER_GROUPS 테이블 생성</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SUPPLIER_GROUPS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SUPPLIERS 테이블에 컬럼 추가 후 FK 생성</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIERS <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;  <span class="comment">-- SUPPLIERS 테이블에 GROUP_ID 컬럼 추가</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIERS <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>)  </span><br><span class="line"><span class="keyword">REFERENCES</span> SUPPLIER_GROUPS (<span class="keyword">ID</span>);   <span class="comment">-- SUPPLIER_GROUPS 테이블의 ID 컬럼을 참조하여 SUPPLIERS 테이블의 GROUP_ID 컬러의 값을 지정</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208170321928.png" alt="image-20201208170321928"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 아래와 같은 뷰를 생성 (뷰는 실체하는 데이터가 아닌 보기용)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> SUPPLIER_DATA <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  S.ID,</span><br><span class="line">  S.NAME,</span><br><span class="line">  G.NAME <span class="string">"GROUP"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SUPPLIERS S, SUPPLIER_GROUPS G</span><br><span class="line"><span class="keyword">WHERE</span> G.ID = S.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Table-1/image-20201208171537315.png" alt="image-20201208171537315"></p><br><p><strong>1)  먼저 SUPPLIERS 테이블의 생성 과정 (DDL)를 살펴 본다</strong></p><p>[SUPPLIERS 테이블 --&gt; 우클릭 --&gt; SQL 생성 --&gt; DDL]</p><img src="/images/S-SQL-Table-1/image-20201208172445817.png" alt="image-20201208172445817" style="zoom:80%;"><ul><li>지금 SUPPLIERS 테이블의 GROUP_ID 컬럼은 SUPPLIER_GROUPS 테이블의 ID 컬럼을 참조하고 있다.</li><li>그렇다면 여기서 부모 테이블인 SUPPLIER_GROUPS 테이블의 테이블명을 바꾸면 자식 테이블인 SUPPLIERS 테이블은 어떻게 될까?</li></ul><br><p><strong>2) SUPPLIER_GROUPS 테이블의 이름을 “GROUPS” 로 바꾼다</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SUPPLIER_GROUPS <span class="keyword">RENAME</span> <span class="keyword">TO</span> <span class="keyword">GROUPS</span>;</span><br></pre></td></tr></tbody></table></figure><p>다시 SUPPLIERS 테이블의 DDL을 확인:</p><img src="/images/S-SQL-Table-1/image-20201209093846550.png" alt="image-20201209093846550" style="zoom:80%;"><ul><li>이제 SUPPLIERS 테이블의 GROUP_ID 컬럼은 GROUPS 테이블의 ID 컬럼을 참조하고 있다.</li><li>즉 테이블명의 변경이 자동으로 반영된다.</li></ul><br><p>그렇다면 우리가 만들었던 SUPPLIER_DATA 뷰는 어떻게 되었을까?</p><img src="/images/S-SQL-Table-1/image-20201209093635706.png" alt="image-20201209093635706" style="zoom:80%;"><ul><li>테이블명이 바뀌었음에도 불구하고 자동으로 GROUPS 테이블을 참조하고 있다.</li><li>즉 테이블명의 변경이 자동으로 반영된다.</li></ul><br><h3 id="5-3-걸론"><a class="markdownIt-Anchor" href="#5-3-걸론"></a> 5-3. 걸론</h3><ol><li>ALTER TALBE 문을 활용하여 테이블의 이름을 변경 가능.</li><li>테이블 이름 변경하면, 기존의 참조무걸성 제약조건이나 뷰 등이 자동으로 반영된다.</li></ol><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 타입, 테이블 생성, CTAS (CREATE TABLE AS SELECT), 테이블 구조 변경, 테이블 이름 변경
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 9. Table" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-9-Table/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조작 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-2/"/>
    <id>https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-2/</id>
    <published>2020-12-07T04:46:50.000Z</published>
    <updated>2020-12-07T06:43:36.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조작-2"><a class="markdownIt-Anchor" href="#데이터-조작-2"></a> 데이터 조작 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-delete-%EB%AC%B8"><strong>1. DELETE 문</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-delete-%EB%AC%B8%EB%B2%95">1-2. DELETE 문법</a><ul><li><a href="#1-delete">(1) DELETE</a></li><li><a href="#2-delete-join">(2) DELETE JOIN</a></li></ul></li><li><a href="#1-3-delete-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. DELETE 문 실습</a><ul><li><a href="#1-%ED%8A%B9%EC%A0%95-%EC%A1%B0%EA%B1%B4%EC%9D%98-%ED%96%89%EC%9D%84-%EC%82%AD%EC%A0%9C">(1) 특정 조건의 행을 삭제</a></li><li><a href="#2-delete-join%EC%9D%98-%EC%82%AC%EC%9A%A9">(2) DELETE JOIN의 사용</a></li><li><a href="#3-%EC%A0%84%EC%B2%B4-%ED%96%89-%EC%82%AD%EC%A0%9C">(3) 전체 행 삭제</a></li></ul></li></ul></li><li><a href="#2-upsert-%EB%AC%B8"><strong>2. UPSERT 문</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-upsert-%EB%AC%B8%EB%B2%95">2-2. UPSERT 문법</a></li><li><a href="#2-3-upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">2-3. UPSERT 문 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5-do-nothing">&gt;&gt; UPSERT 문 실습 – DO NOTHING</a></li><li><a href="#upsert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5-update">&gt;&gt; UPSERT 문 실습 – UPDATE</a></li></ul></li></ul></li><li><a href="#3-export-%EC%9E%91%EC%97%85"><strong>3. EXPORT 작업</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-export-%EC%9E%91%EC%97%85-%EC%8B%A4%EC%8A%B5">3-2. EXPORT 작업 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%97%91%EC%85%80csv-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 엑셀(.CSV) 형식으로 출력</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%ED%85%8D%EC%8A%A4%ED%8A%B8txt-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 텍스트(.TXT) 파일로 출력</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%BB%AC%EB%9F%BC%EB%AA%85-%EC%97%86%EC%9D%B4-%EC%B6%9C%EB%A0%A5">&gt;&gt; 실습 – 컬럼명 없이 출력</a></li></ul></li></ul></li><li><a href="#4-import-%EC%9E%91%EC%97%85"><strong>4. IMPORT 작업</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-import-%EC%9E%91%EC%97%85-%EC%8B%A4%EC%8A%B5">4-2. IMPORT 작업 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%97%91%EC%85%80%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 엑셀파일을 적재</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 텍스트 파일을 적재</a></li><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%BB%AC%EB%9F%BC%EB%AA%85%EC%9D%B4-%EC%97%86%EB%8A%94-%EC%97%91%EC%85%80-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9E%AC">&gt;&gt; 실습 – 컬럼명이 없는 엑셀 파일 적재</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-delete-문"><a class="markdownIt-Anchor" href="#1-delete-문"></a> <strong>1. DELETE 문</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>DELETE문은 테이블에서 특정 데이터를 삭제하거나 테이블 내에 존재하는 모든 데이터를 삭제할 수 있다.</p><br><h3 id="1-2-delete-문법"><a class="markdownIt-Anchor" href="#1-2-delete-문법"></a> 1-2. DELETE 문법</h3><h4 id="1-delete"><a class="markdownIt-Anchor" href="#1-delete"></a> (1) DELETE</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> TARGET_TABLE A</span><br><span class="line"> <span class="keyword">WHERE</span> 조건식;          <span class="comment">-- 삭제할 행에 대한 조건</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-delete-join"><a class="markdownIt-Anchor" href="#2-delete-join"></a> (2) DELETE JOIN</h4><p>DELETE 시 다른 테이블의 내용을 참조하고 싶을 때 DELETE JOIN 문을 사용한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> TARGET_TABLE A</span><br><span class="line"> <span class="keyword">USING</span> REF_TABLE B     <span class="comment">-- 참조 테이블 지정 </span></span><br><span class="line"> <span class="keyword">WHERE</span> 조건식;          <span class="comment">-- JOIN &amp; DELETE 조건</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><br><h3 id="1-3-delete-문-실습"><a class="markdownIt-Anchor" href="#1-3-delete-문-실습"></a> 1-3. DELETE 문 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135107666.png" alt="image-20201204135107666" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><h4 id="1-특정-조건의-행을-삭제"><a class="markdownIt-Anchor" href="#1-특정-조건의-행을-삭제"></a> (1) 특정 조건의 행을 삭제</h4><p><strong>[MISSION]</strong> LINK테이블에서 ID가 5인 행을 삭제</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135107666.png" alt="image-20201204135107666" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">LINK</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><br><h4 id="2-delete-join의-사용"><a class="markdownIt-Anchor" href="#2-delete-join의-사용"></a> (2) DELETE JOIN의 사용</h4><p><strong>[MISSION]</strong>  LINK_TMP 테이블에서 ID가 LINK 테이블의 ID 와 매칭된 행을 삭제</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> LINK_TMP A</span><br><span class="line"> <span class="keyword">USING</span> <span class="keyword">LINK</span> B</span><br><span class="line"> <span class="keyword">WHERE</span> A.ID = B.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-2/image-20201204144847961.png" alt="image-20201204144847961"></p><br><br><h4 id="3-전체-행-삭제"><a class="markdownIt-Anchor" href="#3-전체-행-삭제"></a> (3) 전체 행 삭제</h4><p><strong>&gt;&gt; LINK 테이블</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204135350865.png" alt="image-20201204135350865" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204150231132.png" alt="image-20201204150231132" style="zoom:80%;"><br><br><p><strong>&gt;&gt; LINK_TMP 테이블</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204144847961.png" alt="image-20201204144847961" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> LINK_TMP;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-2/image-20201204150440196.png" alt="image-20201204150440196"></p><br><br><h2 id="2-upsert-문"><a class="markdownIt-Anchor" href="#2-upsert-문"></a> <strong>2. UPSERT 문</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>UPSERT문은 INSERT를 시도할 때 조건(상황)에 따라 UPDATE를 할 수 있는 구문이다. 복잡한 업무 처리에 자주 사용된다.</p><br><h3 id="2-2-upsert-문법"><a class="markdownIt-Anchor" href="#2-2-upsert-문법"></a> 2-2. UPSERT 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLE_NAME (COLUMN_1) </span><br><span class="line">     <span class="keyword">VALUES</span> (VALUE_1)                 <span class="comment">-- INSERT 시도</span></span><br><span class="line"><span class="keyword">ON</span> CONFLICT TARGET <span class="keyword">ACTION</span>;            <span class="comment">-- 충돌 시 다른 액션</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-upsert-문-실습"><a class="markdownIt-Anchor" href="#2-3-upsert-문-실습"></a> 2-3. UPSERT 문 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CUSTOMERS</span><br><span class="line">(</span><br><span class="line">  CUSTOMER_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  ACTIVE <span class="built_in">BOOL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li><p>NAME 컬럼이 UNIQUE 제약 조건 컬럼임을 주의 한다.</p></li><li><p>즉 NAME 컬럼은 중복된 값이 존재할 수 없다</p><br></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'IBM'</span>, <span class="string">'contact@ibm.com'</span>),</span><br><span class="line">  (<span class="string">'Microsoft'</span>, <span class="string">'contact@microsoft.com'</span>),</span><br><span class="line">  (<span class="string">'Intel'</span>, <span class="string">'contact@intel.com'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204161107381.png" alt="image-20201204161107381" style="zoom:80%;"><br><h4 id="upsert-문-실습-do-nothing"><a class="markdownIt-Anchor" href="#upsert-문-실습-do-nothing"></a> &gt;&gt; UPSERT 문 실습 – DO NOTHING</h4><p><strong>DO NOTHING:</strong>  INSERT 액션이 충돌 시 (기존에 존재할 경우) 아무것도 안함</p><br><p><strong>[MISSION]</strong>  Microsoft(기존에 존재하는 NAME)에 EMAIL 주소 추가</p><ul><li>'Microsoft’라는 NAME이 이미 존재하므로 NAME의 UNIQUE 조건과 충돌</li><li>이런 경우에 아무 액션도 취하지 않음 (즉, 변화 없음)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)      <span class="comment">-- 충돌 시(기존에 존재할 경우)</span></span><br><span class="line"><span class="keyword">DO</span> <span class="keyword">NOTHING</span>;             <span class="comment">-- 아무 것도 안함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201204161107381.png" alt="image-20201204161107381" style="zoom:80%;"><br><ul><li>해당 DO NOTHING 명령어 없으면 SQL ERROR 발생</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207095200026.png" alt="image-20201207095200026" style="zoom: 80%;"><br><br><h4 id="upsert-문-실습-update"><a class="markdownIt-Anchor" href="#upsert-문-실습-update"></a> &gt;&gt; UPSERT 문 실습 – UPDATE</h4><p><strong>UPDATE:</strong>  INSERT 액션이 충돌 시 (기존에 존재할 경우) UPDATE 함</p><br><p><strong>[MISSION]</strong>  Microsoft(기존에 존재하는 NAME)에 EMAIL 주소 추가</p><ul><li><p>'Microsoft’라는 NAME이 이미 존재하므로 NAME의 UNIQUE 조건과 충돌</p></li><li><p>이런 경우에 데이터를 UPDATE함</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CUSTOMERS (<span class="keyword">NAME</span>, EMAIL)</span><br><span class="line">     <span class="keyword">VALUES</span> (<span class="string">'Microsoft'</span>,</span><br><span class="line">             <span class="string">'hotline@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">ON</span> CONFLICT (<span class="keyword">NAME</span>)       <span class="comment">-- 충돌 검증 컬럼</span></span><br><span class="line"><span class="keyword">DO</span> <span class="keyword">UPDATE</span></span><br><span class="line">        <span class="keyword">SET</span> EMAIL = EXCLUDED.EMAIL || <span class="string">'; '</span> || CUSTOMERS.EMAIL;</span><br><span class="line">            <span class="comment">-- EXCLUDED.EMAIL은 위에서 INSERT 시도한 EMAIL값을 가리킴</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207102128506.png" alt="image-20201207102128506" style="zoom:80%;"><br><br><h2 id="3-export-작업"><a class="markdownIt-Anchor" href="#3-export-작업"></a> <strong>3. EXPORT 작업</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>EXPORT는 테이블의 데이터를 다른 형태의 데이터로 추출하는 작업이다. 대표적으로 CSV 형식으로 가장 많이 추출한다.</p><br><h3 id="3-2-export-작업-실습"><a class="markdownIt-Anchor" href="#3-2-export-작업-실습"></a> 3-2. EXPORT 작업 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DATEGORY;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207110518434.png" alt="image-20201207110518434" style="zoom:80%;"><br><h4 id="실습-엑셀csv-형식으로-출력"><a class="markdownIt-Anchor" href="#실습-엑셀csv-형식으로-출력"></a> &gt;&gt; 실습 – 엑셀(.CSV) 형식으로 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY (CATEGORY_ID, NAME, LAST_UPDATE)  <span class="comment">-- 추출할 테이블과 컬럼을 지정</span></span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY.csv'               <span class="comment">-- 추출한 데이터를 저장할 파일을 지정</span></span><br><span class="line">DELIMITER ','       <span class="comment">-- 구분자를 지정</span></span><br><span class="line">CSV HEADER;         <span class="comment">-- 파일 형식을 지정</span></span><br></pre></td></tr></tbody></table></figure><ul><li>저장 디랙토리(폴더)는 반드시 미리 존재해야 한다 (여기서는 ‘E:\Study_SQL’)</li></ul><br><img src="/images/S-SQL-Manipulation-2/image-20201207111613206.png" alt="image-20201207111613206" style="zoom: 60%;"><br><img src="/images/S-SQL-Manipulation-2/image-20201207111745428.png" alt="image-20201207111745428" style="zoom:50%;"><br><h4 id="실습-텍스트txt-파일로-출력"><a class="markdownIt-Anchor" href="#실습-텍스트txt-파일로-출력"></a> &gt;&gt; 실습 – 텍스트(.TXT) 파일로 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY(CATEGORY_ID, NAME, LAST_UPDATE)</span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY.txt'</span><br><span class="line">DELIMITER '|'</span><br><span class="line">CSV HEADER;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207112258741.png" alt="image-20201207112258741" style="zoom:60%;"><br><img src="/images/S-SQL-Manipulation-2/image-20201207112337940.png" alt="image-20201207112337940" style="zoom:50%;"><br><h4 id="실습-컬럼명-없이-출력"><a class="markdownIt-Anchor" href="#실습-컬럼명-없이-출력"></a> &gt;&gt; 실습 – 컬럼명 없이 출력</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY(CATEGORY_ID, NAME, LAST_UPDATE)</span><br><span class="line">TO 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207112700637.png" alt="image-20201207112700637" style="zoom:50%;"><br><br><h2 id="4-import-작업"><a class="markdownIt-Anchor" href="#4-import-작업"></a> <strong>4. IMPORT 작업</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>IMPORT는 다른 형식의 데이터를 테이블에 넣는 작업을 말한다. 데이터 구축 시 자주 사용 된다.</p><br><h3 id="4-2-import-작업-실습"><a class="markdownIt-Anchor" href="#4-2-import-작업-실습"></a> 4-2. IMPORT 작업 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORY_IMPORT</span><br><span class="line">(</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">"NAME"</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_UPDATE <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOW</span>(),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> CATEGORY_IMPORT_PKEY PRIMARY <span class="keyword">KEY</span> (CATEGORY_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207113847655.png" alt="image-20201207113847655"><br><h4 id="실습-엑셀파일을-적재"><a class="markdownIt-Anchor" href="#실습-엑셀파일을-적재"></a> &gt;&gt; 실습 – 엑셀파일을 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)  <span class="comment">-- 적재할 테이블 및 컬럼을 지정</span></span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY.csv'                     <span class="comment">-- 적재할 파일을 지정</span></span><br><span class="line">DELIMITER ','        <span class="comment">-- 적재할 파일의 구분자를 알려준다</span></span><br><span class="line">CSV HEADER;          <span class="comment">-- 파일 형식을 지정한다</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207114306348.png" alt="image-20201207114306348" style="zoom:80%;"><br><h4 id="실습-텍스트-파일을-적재"><a class="markdownIt-Anchor" href="#실습-텍스트-파일을-적재"></a> &gt;&gt; 실습 – 텍스트 파일을 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 실습 전 먼저 데이터를 삭제해야 함</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY.txt'</span><br><span class="line">DELIMITER '|'</span><br><span class="line">CSV HEADER;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207130748150.png" alt="image-20201207130748150" style="zoom:80%;"><br><h4 id="실습-컬럼명이-없는-엑셀-파일-적재"><a class="markdownIt-Anchor" href="#실습-컬럼명이-없는-엑셀-파일-적재"></a> &gt;&gt; 실습 – 컬럼명이 없는 엑셀 파일 적재</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 실습 전 먼저 데이터를 삭제해야 함</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207131800879.png" alt="image-20201207131800879" style="zoom:80%;"><br><ul><li><p>DB_CATEGOROY_2.csv 파일은 컬럼명(header) 이 존재하지 않으므로 반드시 HEADER를 제거해야한다.</p></li><li><p>HEADER를 제거하지 않을 경우 가장 첫번째 데이터를 헤더로 인식하여 한건이 누락된다</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY CATEGORY_IMPORT(CATEGORY_ID, "NAME", LAST_UPDATE)</span><br><span class="line">FROM 'E:\Study_SQL\DB_CATEGORY_2.csv'</span><br><span class="line">DELIMITER ','</span><br><span class="line">CSV HEADER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORY_IMPORT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-2/image-20201207132305818.png" alt="image-20201207132305818" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      DELETE 문, UPSERT 문, EXPORT 작업, IMPORT 작업
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 8. Manipulation" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-8-Manipulation/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Manipulation" scheme="https://hyemin-kim.github.io/tags/Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조작 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-1/"/>
    <id>https://hyemin-kim.github.io/2020/12/07/S-SQL-Manipulation-1/</id>
    <published>2020-12-07T04:45:49.000Z</published>
    <updated>2020-12-07T06:12:13.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조작-1"><a class="markdownIt-Anchor" href="#데이터-조작-1"></a> 데이터 조작 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-insert-%EB%AC%B8"><strong>1. INSERT 문</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-insert-%EB%AC%B8%EB%B2%95">1-2. INSERT 문법</a></li><li><a href="#1-3-insert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. INSERT 문 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">&gt;&gt; 실습 준비</a></li><li><a href="#insert-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; INSERT 문 실습</a></li></ul></li></ul></li><li><a href="#2-update-%EB%AC%B8"><strong>2. UPDATE 문</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-update-%EB%AC%B8%EB%B2%95">2-2. UPDATE 문법</a></li><li><a href="#2-3-update-%EC%8B%A4%EC%8A%B5">2-3. UPDATE 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">&gt;&gt; 실습 준비</a></li><li><a href="#update-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; UPDATE 문 실습</a></li></ul></li></ul></li><li><a href="#3-update-join-%EB%AC%B8"><strong>3. UPDATE JOIN 문</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-update-join-%EB%AC%B8%EB%B2%95">3-2. UPDATE JOIN 문법</a></li><li><a href="#3-3-update-join-%EC%8B%A4%EC%8A%B5">3-3. UPDATE JOIN 실습</a><ul><li><a href="#%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-3">&gt;&gt; 실습 준비</a></li><li><a href="#update-join-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">&gt;&gt; UPDATE JOIN 문 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-insert-문"><a class="markdownIt-Anchor" href="#1-insert-문"></a> <strong>1. INSERT 문</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>INSERT는 테이블이 만들어지면 데이블 안에 데이터를 추가하는 명령어이다.</p><br><h3 id="1-2-insert-문법"><a class="markdownIt-Anchor" href="#1-2-insert-문법"></a> 1-2. INSERT 문법</h3><p><strong>&gt;&gt; 1) 테이블의 컬럼 순서대로 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">  TABLE_NAME      <span class="comment">-- INSERT할 테이블 지정</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  VALUE1,         <span class="comment">-- 각 컬럼 값을 입력한다</span></span><br><span class="line">  VALUE2,</span><br><span class="line">  VALUE3,</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; 2) 테이블 컬럼 지정</strong>  (더 많이 쓰임. 컬럼 명을 명시해주기 때문에 유지보수에 용이함)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">   TABLE_NAME</span><br><span class="line">   (</span><br><span class="line">    COLUMN_1,</span><br><span class="line">    COLUMN_2</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">  VALUE1,</span><br><span class="line">  VALUE2</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-insert-문-실습"><a class="markdownIt-Anchor" href="#1-3-insert-문-실습"></a> 1-3. INSERT 문 실습</h3><h4 id="실습-준비"><a class="markdownIt-Anchor" href="#실습-준비"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LINK라는 테이블을 생성함</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> (</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">URL</span> <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  DESCRIPTION <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</span><br><span class="line">  REL <span class="built_in">VARCHAR</span> (<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><br><h4 id="insert-문-실습"><a class="markdownIt-Anchor" href="#insert-문-실습"></a> &gt;&gt; INSERT 문 실습</h4><p><strong>(1) 1개 ROW 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'http://naver.com'</span>, <span class="string">'Naver'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203111802507.png" alt="image-20201203111802507"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 내용 안에 작은 따움표를 추가하고 싶으면 작은 따움표 두개(''##'')를 더 추가해주면 됨. </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'''http://naver.com'''</span>, <span class="string">'Naver'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> FILM;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-1/image-20201203113353940.png" alt="image-20201203113353940"></p><br><br><p><strong>(2) 동시에 N개 ROW 입력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">   <span class="keyword">LINK</span> (<span class="keyword">URL</span>, <span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'http://www.google.com'</span>, <span class="string">'Google'</span>),</span><br><span class="line"> (<span class="string">'http://www.bing.com'</span>, <span class="string">'Bing'</span>),</span><br><span class="line"> (<span class="string">'http://www.baidu.com'</span>, <span class="string">'BaiDu'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><p><strong>(3) 테이블 프레임에 테이블을 입력</strong></p><p>&gt;  LINK 테이블의 스키마(껍데기)만 가져와서 LINK_TMP 테이블을 생성한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> LINK_TMP <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span> = <span class="number">1</span>;      <span class="comment">-- LINK_TMP 테이블의 구조는 LINK와 같고 데이터는 0건이 된다.</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">       LINK_TMP</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> LINK_TMP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203135135326.png" alt="image-20201203135135326" style="zoom:80%;"><br><br><h2 id="2-update-문"><a class="markdownIt-Anchor" href="#2-update-문"></a> <strong>2. UPDATE 문</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>UPDATE 문은 테이블에 존재하는 데이터를 수정하는 작업이다. 업무를 처리하는데 필수적인 것이며 동시성에 유의해야 한다.</p><ul><li>UPDATE는 대상 행에 대해서 락(LOCK)을 잡는다.</li><li>락(LOCK)이란 다른 사용자는 해당 행에 대해서 작업을 하지 못한다는 것이다. (대기하게 됨)</li><li>즉 UPDATE를 한 후 재빨리 COMMIT을 하지 않는다면 RDBMS의 동시성이 낮아진다.</li></ul><br><h3 id="2-2-update-문법"><a class="markdownIt-Anchor" href="#2-2-update-문법"></a> 2-2. UPDATE 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  TABLE_NAME           <span class="comment">-- UPDATE할 테이블 지정</span></span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  COLUMN_1 = VALUE1,   <span class="comment">-- 수정할 컬럼 및 값 입력</span></span><br><span class="line">  COLUMN_2 = VALUE2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  조건;                 <span class="comment">-- 대상 조건</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-update-실습"><a class="markdownIt-Anchor" href="#2-3-update-실습"></a> 2-3. UPDATE 실습</h3><h4 id="실습-준비-2"><a class="markdownIt-Anchor" href="#실습-준비-2"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> LAST_UPDATE <span class="built_in">DATE</span>;    <span class="comment">-- LINK테이블에 LAST_UPDATE컬럼을 추가</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">LINK</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> LAST_UPDATE <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_DATE</span>;  <span class="comment">-- LAST_UPDATE 컬럼의 기본값을 현재시간으로 함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203160947571.png" alt="image-20201203160947571" style="zoom:80%;"><br><br><h4 id="update-문-실습"><a class="markdownIt-Anchor" href="#update-문-실습"></a> &gt;&gt; UPDATE 문 실습</h4><p><strong>(1) 지정 범위 수정</strong> (WHERE절)</p><p><strong>[MISSION]</strong>  LAST_UPDATE 컬럼의 값을 지정한 DEFAULT값으로 UPDATE하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> LAST_UPDATE = <span class="keyword">DEFAULT</span></span><br><span class="line"> <span class="keyword">WHERE</span> LAST_UPDATE <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">LINK</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203171411659.png" alt="image-20201203171411659" style="zoom:80%;"><br><br><p><strong>(2) 전체 테이블 수정</strong></p><p><strong>[MISSION]</strong>  REL컬럼의 값을 'NO DATA’로 수정하기</p><ul><li>이 기능은 조심해서 사용 필요.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> REL = <span class="string">'NO DATA'</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201203172450557.png" alt="image-20201203172450557" style="zoom:80%;"><br><br><p><strong>(3) 전체 테이블 수정 – 특정 컬럼을 이용</strong></p><p><strong>[MISSION]</strong>  DESCRIPTION 컬럼을 NAME 컬럼의 값으로 채우기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">LINK</span></span><br><span class="line">   <span class="keyword">SET</span> DESCRIPTION = <span class="keyword">NAME</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204092744650.png" alt="image-20201204092744650" style="zoom:80%;"><br><br><h2 id="3-update-join-문"><a class="markdownIt-Anchor" href="#3-update-join-문"></a> <strong>3. UPDATE JOIN 문</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>UPDATA 시 다른 테이블의 내용을 참조하고 싶을 때 UPDATE JOIN 문을 사용한다. 복잡한 업무를 처리하는데 매우 유용한 방법이다.</p><br><h3 id="3-2-update-join-문법"><a class="markdownIt-Anchor" href="#3-2-update-join-문법"></a> 3-2. UPDATE JOIN 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">       TARGET_TABLE A              <span class="comment">-- UPDATE할 테이블 지정</span></span><br><span class="line">   <span class="keyword">SET</span> A.COLUMN_1 = 표현식          <span class="comment">-- 특정 컬럼 UPDATE</span></span><br><span class="line">  <span class="keyword">FROM</span> REF_TABLE B                 <span class="comment">-- 참조 테이블 지정</span></span><br><span class="line"> <span class="keyword">WHERE</span> A.COLUMN_1 = B.COLUMN_1;    <span class="comment">-- 조인 조건</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-update-join-실습"><a class="markdownIt-Anchor" href="#3-3-update-join-실습"></a> 3-3. UPDATE JOIN 실습</h3><h4 id="실습-준비-3"><a class="markdownIt-Anchor" href="#실습-준비-3"></a> &gt;&gt; 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT_SEGMENT</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"> <span class="keyword">SEGMENT</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> DISCOUNT <span class="built_in">NUMERIC</span> (<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT_SEGMENT</span><br><span class="line">(<span class="keyword">SEGMENT</span>, DISCOUNT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">   (<span class="string">'Grand Luxury'</span>, <span class="number">0.05</span>),</span><br><span class="line">   (<span class="string">'Luxury'</span>, <span class="number">0.06</span>),</span><br><span class="line">   (<span class="string">'Mass'</span>, <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> PRICE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">2</span>),          <span class="comment">-- 정가</span></span><br><span class="line"> NET_PRICE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">2</span>),      <span class="comment">-- 할인가 (실 판매가)</span></span><br><span class="line"> SEGMENT_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(SEGMENT_ID)</span><br><span class="line"> <span class="keyword">REFERENCES</span> PRODUCT_SEGMENT(<span class="keyword">ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT (<span class="keyword">NAME</span>, PRICE, SEGMENT_ID)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'K5'</span>, <span class="number">804.89</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'K7'</span>, <span class="number">228.55</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">'K9'</span>, <span class="number">366.45</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SONATA'</span>, <span class="number">145.33</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'SPARK'</span>, <span class="number">551.77</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'AVANTE'</span>, <span class="number">261.58</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'LOZTE'</span>, <span class="number">519.62</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SANTAFE'</span>, <span class="number">843.31</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TUSON'</span>, <span class="number">254.18</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'TRAX'</span>, <span class="number">427.78</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'ORANDO'</span>, <span class="number">936.29</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'RAY'</span>, <span class="number">910.34</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'MORNING'</span>, <span class="number">208.33</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="string">'VERNA'</span>, <span class="number">985.45</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'K8'</span>, <span class="number">841.26</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TICO'</span>, <span class="number">896.38</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'MATIZ'</span>, <span class="number">575.74</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'SPORTAGE'</span>, <span class="number">530.64</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="string">'ACCENT'</span>, <span class="number">892.43</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="string">'TOSCA'</span>, <span class="number">161.71</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Manipulation-1/image-20201204103115223.png" alt="image-20201204103115223"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_SEGMENT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204103657029.png" alt="image-20201204103657029" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204103747274.png" alt="image-20201204103747274" style="zoom:80%;"><br><br><h4 id="update-join-문-실습"><a class="markdownIt-Anchor" href="#update-join-문-실습"></a> &gt;&gt; UPDATE JOIN 문 실습</h4><p><strong>[MISSION]</strong>  PRODUCT_SEGMENT 테이블에 있는 할인율(DISCOUNT) 정보를 이용해서 PRODUCT</p><p>테이블의 NET_PRICE (할인가 / 실 판매가)를 계산하여 채우기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> PRODUCT A</span><br><span class="line">   <span class="keyword">SET</span> NET_PRICE = A.PRICE * (<span class="number">1</span> - B.DISCOUNT)</span><br><span class="line">  <span class="keyword">FROM</span> PRODUCT_SEGMENT B</span><br><span class="line"> <span class="keyword">WHERE</span> A.SEGMENT_ID = B.ID;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Manipulation-1/image-20201204112104933.png" alt="image-20201204112104933" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      INSERT 문, UPDATE 문, UPDATE JOIN 문
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 8. Manipulation" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-8-Manipulation/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Manipulation" scheme="https://hyemin-kim.github.io/tags/Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 집합 연산자와 서브쿼리</title>
    <link href="https://hyemin-kim.github.io/2020/12/01/E-SQL-Aggregate-and-SubQuery/"/>
    <id>https://hyemin-kim.github.io/2020/12/01/E-SQL-Aggregate-and-SubQuery/</id>
    <published>2020-12-01T02:19:23.000Z</published>
    <updated>2020-12-01T03:48:24.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-집합-연산자와-서브쿼리"><a class="markdownIt-Anchor" href="#실습-집합-연산자와-서브쿼리"></a> 【실습】 집합 연산자와 서브쿼리</h1><br><h3 id="1-아래-sql문은-film-테이블을-2번-스캔하고-rental_rate가-평균-이상인-film의-id-제목과-rental_rate를-출력했다-film-테이블을-한번만-scan하여-동일한-결과-집합을-구하는-sql을-작성하라"><a class="markdownIt-Anchor" href="#1-아래-sql문은-film-테이블을-2번-스캔하고-rental_rate가-평균-이상인-film의-id-제목과-rental_rate를-출력했다-film-테이블을-한번만-scan하여-동일한-결과-집합을-구하는-sql을-작성하라"></a> <strong>[1] 아래 SQL문은 FILM 테이블을 2번 스캔하고 RENTAL_RATE가 평균 이상인 FILM의 ID, 제목과 RENTAL_RATE를 출력했다. FILM 테이블을 한번만 SCAN하여 동일한 결과 집합을 구하는 SQL을 작성하라.</strong></h3><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201093133569.png" alt="image-20201201093133569" style="zoom:80%;"><br><br><p><strong>&gt;&gt; 두 번 스캔</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  RENTAL_RATE &gt;</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line">  <span class="keyword">FROM</span> FILM</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201095113118.png" alt="image-20201201095113118" style="zoom:80%;"><br><br><p><strong>&gt;&gt; 한 번만 스캔</strong></p><p><strong>1) 우선 분석함수 AVG를 사용해서 평균을 구한다.</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE,</span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">OVER</span>() <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201101435553.png" alt="image-20201201101435553" style="zoom:80%;"><br><br><p><strong>2) 1번에서 구한 집합을 인라인뷰로 감싸서 평균보다 큰 값을 구한다.</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, TITLE, RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    FILM_ID,</span><br><span class="line">    TITLE,</span><br><span class="line">    RENTAL_RATE,</span><br><span class="line">    <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">OVER</span>() <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    FILM</span><br><span class="line">) A</span><br><span class="line"><span class="keyword">WHERE</span> A.RENTAL_RATE &gt; A.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201095113118.png" alt="image-20201201095113118" style="zoom:80%;"><br><ul><li>똑같은 결과가 나오는 것을 확인할 수 있다</li></ul><br><br><h3 id="2-아래-sql문은-except-연산을-사용하여-재고가-없는-영화를-구하고-있다-해당-sql문은-except연산을-사용하지-말고-같은-결과를-도출하라"><a class="markdownIt-Anchor" href="#2-아래-sql문은-except-연산을-사용하여-재고가-없는-영화를-구하고-있다-해당-sql문은-except연산을-사용하지-말고-같은-결과를-도출하라"></a> <strong>[2] 아래 SQL문은 EXCEPT 연산을 사용하여 재고가 없는 영화를 구하고 있다. 해당 SQL문은 EXCEPT연산을 사용하지 말고 같은 결과를 도출하라.</strong></h3><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201103003214.png" alt="image-20201201103003214" style="zoom:80%;"><br><br><p><strong>&gt;&gt; EXCEPT 연산 사용</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">  INVENTORY.FILM_ID, TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ON</span> FILM.FILM_ID = INVENTORY.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201105357613.png" alt="image-20201201105357613" style="zoom:80%;"><br><br><p><strong>&gt;&gt; NOT EXISTS 연산 사용</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM F</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">    <span class="keyword">FROM</span> INVENTORY I</span><br><span class="line">   <span class="keyword">WHERE</span> F.FILM_ID = I.FILM_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-Aggregate-and-SubQuery/image-20201201105357613.png" alt="image-20201201105357613" style="zoom:80%;"><br><ul><li>똑같은 결과가 나오는 것을 확인할 수 있다</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-집합-연산자와-서브쿼리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-집합-연산자와-서브쿼리&quot;&gt;&lt;/a&gt; 【실습】 집합 연산자와 서브쿼리&lt;/h1&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-아래-sql문은-film-테이블을-
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="SubQuery" scheme="https://hyemin-kim.github.io/tags/SubQuery/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 서브쿼리 (SubQuery)</title>
    <link href="https://hyemin-kim.github.io/2020/11/27/S-SQL-SubQuery/"/>
    <id>https://hyemin-kim.github.io/2020/11/27/S-SQL-SubQuery/</id>
    <published>2020-11-27T02:16:42.000Z</published>
    <updated>2020-11-27T04:07:01.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="서브쿼리"><a class="markdownIt-Anchor" href="#서브쿼리"></a> 서브쿼리</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EB%9E%80"><strong>1. 서브쿼리란?</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC-%EC%9D%B4%ED%95%B4">1-2. 서브쿼리 이해</a><ul><li><a href="#mission">[MISSION]</a></li><li><a href="#method-1-%EB%A9%94%EC%9D%B8%EC%BF%BC%EB%A6%AC-2%EA%B0%9C-%EC%82%AC%EC%9A%A9">&gt;&gt; Method 1: 메인쿼리 2개 사용</a></li><li><a href="#method-2-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC-%EC%82%AC%EC%9A%A9">&gt;&gt; Method 2: 서브쿼리 사용</a><ul><li><a href="#1-%EC%A4%91%EC%B2%A9-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EC%9D%98-%ED%99%9C%EC%9A%A9">(1) 중첩 서브쿼리의 활용</a></li><li><a href="#2-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EB%B7%B0%EC%9D%98-%ED%99%9C%EC%9A%A9">(2) 인라인 뷰의 활용</a></li><li><a href="#3-%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC%EC%9D%98-%ED%99%9C%EC%9A%A9">(3) 스칼라 서브쿼리의 활용</a></li></ul></li></ul></li></ul></li><li><a href="#2-any-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>2. ANY 연산자</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-any-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">2-2. ANY 연산자 실습</a><ul><li><a href="#%EC%A4%80%EB%B9%84">&gt;&gt; 준비</a></li><li><a href="#mission-1">&gt;&gt; MISSION 1</a></li><li><a href="#mission-2">&gt;&gt; MISSION 2</a></li></ul></li></ul></li><li><a href="#3-all-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>3. ALL 연산자</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-all-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">3-2. ALL 연산자 실습</a><ul><li><a href="#mission-1-2">&gt;&gt; MISSION 1</a></li><li><a href="#mission-2-2">&gt;&gt; MISSION 2</a></li></ul></li></ul></li><li><a href="#4-exists-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>4. EXISTS 연산자</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-exists-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">4-2. EXISTS 연산자 실습</a><ul><li><a href="#mission-2">&gt;&gt; MISSION</a></li></ul></li></ul></li><li><a href="#5-not-exists-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>5. NOT EXISTS 연산자</strong></a><ul><li><a href="#5-1-%EA%B0%9C%EB%85%90">5-1. 개념</a></li><li><a href="#5-2-not-exists-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">5-2. NOT EXISTS 연산자 실습</a><ul><li><a href="#mission-3">&gt;&gt; MISSION</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-서브쿼리란"><a class="markdownIt-Anchor" href="#1-서브쿼리란"></a> <strong>1. 서브쿼리란?</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>서브쿼리는 SQL문 내에서 메인 쿼리가 아닌 하위에 존재하는 쿼리를 말한다.</p><p>서브쿼리를 활용함으로써 다양한 결과를 도출할 수 있다.</p><br><h3 id="1-2-서브쿼리-이해"><a class="markdownIt-Anchor" href="#1-2-서브쿼리-이해"></a> 1-2. 서브쿼리 이해</h3><h4 id="mission"><a class="markdownIt-Anchor" href="#mission"></a> [MISSION]</h4><p><strong>FILM 테이블에서 RENTAL_RATE가 평균 보다 큰 집합 구하기</strong></p><img src="/images/S-SQL-SubQuery/image-20201123221816036.png" alt="image-20201123221816036" style="zoom:80%;"><br><br><h4 id="method-1-메인쿼리-2개-사용"><a class="markdownIt-Anchor" href="#method-1-메인쿼리-2개-사용"></a> &gt;&gt; Method 1: 메인쿼리 2개 사용</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-SubQuery/image-20201123222059927.png" alt="image-20201123222059927"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  RENTAL_RATE &gt; <span class="number">2.98</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><p><strong>Q:</strong>  위 2개의 SQL문을 결합하여 하나의 SQL문으로 결과를 도출할 수 없을까?</p><p><strong>A:</strong>  서브쿼리를 사용하면 된다! (<strong>중첩 서브쿼리</strong>, <strong>인라인 뷰</strong>, <strong>스칼라 서브쿼리</strong>가 존재한다.)</p><br><h4 id="method-2-서브쿼리-사용"><a class="markdownIt-Anchor" href="#method-2-서브쿼리-사용"></a> &gt;&gt; Method 2: 서브쿼리 사용</h4><h5 id="1-중첩-서브쿼리의-활용"><a class="markdownIt-Anchor" href="#1-중첩-서브쿼리의-활용"></a> (1) 중첩 서브쿼리의 활용</h5><p><em><strong>중첩 서브쿼리 (Nested Subquery):</strong></em>  메인쿼리의 WHERE절에 나타나는 서브쿼리</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  RENTAL_RATE &gt; </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">AVG</span>(RENTAL_RATE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h5 id="2-인라인-뷰의-활용"><a class="markdownIt-Anchor" href="#2-인라인-뷰의-활용"></a> (2) 인라인 뷰의 활용</h5><p><em><strong>인라인 뷰 (Inline View):</strong></em> 메인쿼리의 FROM 절에 나타나는 서브쿼리 (서브쿼리 SELECT 절의 결과를 메인쿼리의 FROM 절에서 하나의 테이블처럼 사용)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">      <span class="keyword">AVG</span>(RENTAL_RATE) <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line">   <span class="keyword">FROM</span></span><br><span class="line">      FILM</span><br><span class="line">  ) B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.RENTAL_RATE &gt; B.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h5 id="3-스칼라-서브쿼리의-활용"><a class="markdownIt-Anchor" href="#3-스칼라-서브쿼리의-활용"></a> (3) 스칼라 서브쿼리의 활용</h5><p><em><strong>스칼라 서브쿼리 (Scala Subquery):</strong></em>  SELECT의 리스트 안에 존재하는 서브쿼리</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  A.TITLE,</span><br><span class="line">  A.RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">    A.FILM_ID,</span><br><span class="line">    A.TITLE,</span><br><span class="line">    A.RENTAL_RATE,</span><br><span class="line">    (</span><br><span class="line">     <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(L.RENTAL_RATE)</span><br><span class="line">       <span class="keyword">FROM</span> FILM L</span><br><span class="line">    ) <span class="keyword">AS</span> AVG_RENTAL_RATE</span><br><span class="line"> <span class="keyword">FROM</span> </span><br><span class="line">    FILM A</span><br><span class="line">) A</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.RENTAL_RATE &gt; A.AVG_RENTAL_RATE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201123222217182.png" alt="image-20201123222217182" style="zoom:80%;"><br><br><h2 id="2-any-연산자"><a class="markdownIt-Anchor" href="#2-any-연산자"></a> <strong>2. ANY 연산자</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>ANY 연산자는 주로 메인쿼리 WHERE절의 비교 조건식에서 서브쿼리와 함께 사용된다. 서브쿼리에 의해 반환된 값 집합과 비교할 때 한번이라도 조건에 만족한다면 TURE를 반환한다. (즉, 서브쿼리 결과 집합중의 어떤 한 값 보다만 어떻다라면 TRUE를 반환)</p><br><h3 id="2-2-any-연산자-실습"><a class="markdownIt-Anchor" href="#2-2-any-연산자-실습"></a> 2-2. ANY 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201124090317401.png" alt="image-20201124090317401" style="zoom: 67%;"><br><br><h4 id="준비"><a class="markdownIt-Anchor" href="#준비"></a> &gt;&gt; 준비</h4><p><strong>먼저 영화 분류별 상영시간이 가장 긴 영화의 카테고리 ID 및 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  B.CATEGORY_ID,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124095000723.png" alt="image-20201124095000723" style="zoom:80%;"><br><br><h4 id="mission-1"><a class="markdownIt-Anchor" href="#mission-1"></a> &gt;&gt; MISSION 1</h4><p><strong>영화의 상영시간이 위 집합 중 어느 하나의(ANY) 값 보다만 크거나 같으면 추출 [즉, 위에서 추출된 값 들의 최소값 보다만 크거나 같으면 추출]</strong></p><blockquote><p>" &gt;= ANY " 활용</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ANY</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)        <span class="comment">-- SELECT한 변수는 하나여야 함</span></span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MIN(max) = 178 min 보다 긴거나 같은 영화를 모두 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124101911386.png" alt="image-20201124101911386" style="zoom:80%;"><br><ul><li><p>서브쿼리가 반환되는 결과가 하나의 값이 아닌 여러 값의 집합이기 때문에 ANY 연산자를 안 쓰면 ERROR가 난다.  (명확한 기준이 없기 때문)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;=</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124102530072.png" alt="image-20201124102530072"><br></li></ul><br><h4 id="mission-2"><a class="markdownIt-Anchor" href="#mission-2"></a> &gt;&gt; MISSION 2</h4><p><strong>영화의 상영시간이 위에서 추출된 값들과 동일한 영화만 추출  [즉, 위 집합 중 어느 하나의(ANY) 값과 같으면 추출]</strong></p><blockquote><p>" = ANY " 활용</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> = <span class="keyword">ANY</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124104225665.png" alt="image-20201124104225665" style="zoom:80%;"><br><br><ul><li><p>"=ANY"는 "IN"과 동일</p><p>의미: 추출된 결과 집합 리스트 안의 값들과 매칭되는 값들을 찾는다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> B.CATEGORY_ID</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124104225665.png" alt="image-20201124104225665" style="zoom:80%;"><br></li></ul><br><h2 id="3-all-연산자"><a class="markdownIt-Anchor" href="#3-all-연산자"></a> <strong>3. ALL 연산자</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>ALL 연산자는 주로 메인쿼리 WHERE절의 비교 조건식에서 서브쿼리와 함께 사용된다. 서브쿼리에 의해 반환된 값 집합과 비교할 때 모두 조건에 만족해야만 TURE를 반환한다. (즉, 서브쿼리 결과 집합중의 모든 값 보다 어떻다해야 TRUE를 반환)</p><br><h3 id="3-2-all-연산자-실습"><a class="markdownIt-Anchor" href="#3-2-all-연산자-실습"></a> 3-2. ALL 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201124090317401.png" alt="image-20201124090317401" style="zoom:67%;"><br><br><h4 id="mission-1-2"><a class="markdownIt-Anchor" href="#mission-1-2"></a> &gt;&gt; MISSION 1</h4><p><strong>[준비] : 먼저 영화 분류별 상영시간이 가장 긴 영화의 카테고리 ID 및 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  B.CATEGORY_ID,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM A,</span><br><span class="line">  FILM_CATEGORY B</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  B.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201124095000723.png" alt="image-20201124095000723" style="zoom:80%;"><br><p><strong>[MISSION] : 영화의 상영시간이 위 집합의 모든(ALL) 값 보다 크거나 같아야 추출 [즉, 위에서 추출된 값 들의 최대값 보다 크거나 같아야 추출]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TITLE, <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">LENGTH</span>)</span><br><span class="line">    <span class="keyword">FROM</span> FILM A,</span><br><span class="line">         FILM_CATEGORY B</span><br><span class="line">   <span class="keyword">WHERE</span> A.FILM_ID = B.FILM_ID</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span>  B.CATEGORY_ID</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MAX(max) = 185 min 보다 긴거나 같은 영화를 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125110610018.png" alt="image-20201125110610018" style="zoom:80%;"><br><br><h4 id="mission-2-2"><a class="markdownIt-Anchor" href="#mission-2-2"></a> &gt;&gt; MISSION 2</h4><p><strong>[준비] : 먼저 평가기준(RATING)별 영화의 평균 상영시간을 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  RATING,</span><br><span class="line">  <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(<span class="keyword">LENGTH</span>), <span class="number">2</span>) <span class="keyword">AS</span> AVG_LENGTH  <span class="comment">-- 소수점 2자리</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  RATING</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  AVG_LENGTH;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125115107688.png" alt="image-20201125115107688" style="zoom:80%;"><br><p><strong>[MISSION] : 위에서 출력된 평균 상영시간보다 긴 영화의 정보를 출력</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  <span class="keyword">LENGTH</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  <span class="keyword">LENGTH</span> &gt;= <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(LENHTH), <span class="number">2</span>)    <span class="comment">-- SELECT한 변수는 하나여야 함</span></span><br><span class="line">    <span class="keyword">FROM</span> FILM</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> RATING</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 결과적으로 상영시간이 MAX(avg_length) = 120.44 min 보다 긴거나 같은 영화를 추출</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201125115313350.png" alt="image-20201125115313350" style="zoom:80%;"><br><br><h2 id="4-exists-연산자"><a class="markdownIt-Anchor" href="#4-exists-연산자"></a> <strong>4. EXISTS 연산자</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>EXISTS 연산자는 주로 메인쿼리 WHERE절에서 서브쿼리와 함께 사용된다.</p><p>동작원리는 다음과 같습니다:</p><ol><li><p>먼저 메인쿼리의 TABLE에 접근하여 하나의 레코드를 가져온다.</p></li><li><p>이 레코드에 대해서 EXISTS 이하의 서브쿼리를 실행하고 서브쿼리에 의해 반환된 값 집합이 존재하는지를 판단한다.</p></li><li><p>서브쿼리에 의해 반환된 값 집합이 <strong>존재한다면</strong> <code>TRUE</code>를 반환하고 메인쿼리의 SELECT문을 그대로 실행한다.</p><p>반환된 값 집합이 <strong>존재하지 않다면</strong> <code>FALSE</code>를 반환하고 메인쿼리의 SELECT문을 실행하지 않고 바로 다음 레코드로 넘어간다.</p><br> </li></ol><p><strong>&gt;&gt; 장점:</strong> 서브쿼리에 의해 반환된 값 집합의 존재여부만을 판단하므로 연산 시 부하가 줄어든다 (성능상 유리함)</p><br><blockquote><p>EXISTS 연산자와 IN 연산자의 차이점은 <a href="https://doorbw.tistory.com/" target="_blank" rel="noopener">Tigercow.Dor</a>님의 <a href="https://doorbw.tistory.com/222" target="_blank" rel="noopener">IN / EXISTS / NOT IN / NOT EXISTS 비교</a> 에서 자세히 설명되어 있음. 참고 바람.</p></blockquote><br><h3 id="4-2-exists-연산자-실습"><a class="markdownIt-Anchor" href="#4-2-exists-연산자-실습"></a> 4-2. EXISTS 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201126110600155.png" alt="image-20201126110600155" style="zoom:67%;"><br><br><h4 id="mission-2"><a class="markdownIt-Anchor" href="#mission-2"></a> &gt;&gt; MISSION</h4><p><strong>지불내역(AMOUNT)이 11달러 초과한 고객의 이름을 출력하라</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">EXISTS</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span>         <span class="comment">-- 반환 값이 임의로 지정해도 좋다. 존재 여부만 판단하기 떄문에 무엇을 반환하든 상관없음.</span></span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT P</span><br><span class="line">   <span class="keyword">WHERE</span> P.CUSTOMER_ID = C.CUSTOMER_ID</span><br><span class="line">     <span class="keyword">AND</span> AMOUNT &gt; <span class="number">11</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME, LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201126113245331.png" alt="image-20201126113245331" style="zoom:80%;"><br><ul><li><p>동작 순서:</p><ol><li><p>먼저 메인쿼리의 CUSTOMER 테이블에서 N번째 레코드를 가져온다</p></li><li><p>그 다음 EXISTS 이하의 서브쿼리를 실행:</p><p>PAYMENT 테이블에서</p><ul><li>CUSTOMER_ID는 CUSTOMER 테이블의 CUSTOMER_ID과 동일하면서 (가져온 N번째 레코드의 CUSTOMER_ID랑만 비교)</li><li>지불내역(AMOUNT)이 11달러 초과한</li></ul><p>값의 존재 여부를 판단(하여 TURE이면 1를 반환)</p></li><li><p>STEP 2에서</p><ul><li><p>TURE로 판단되면 메인쿼리의 SELECT문을 그대로 실행 (즉 N번째 고객의 이름을 추출);</p></li><li><p>FALSE로 판단되면 메인쿼리의 SELECT 문을 실현하지 않고 그 다음 레코드 (N+1 번째 레코드)를 가져와 STEP 2 를 진행한다.</p></li></ul></li><li><p>위 과정을 반복하여 마지막 레코드까지 완료되면 해당 SQL문의 동작이 종료된다.</p></li></ol></li></ul><br><br><h2 id="5-not-exists-연산자"><a class="markdownIt-Anchor" href="#5-not-exists-연산자"></a> <strong>5. NOT EXISTS 연산자</strong></h2><h3 id="5-1-개념"><a class="markdownIt-Anchor" href="#5-1-개념"></a> 5-1. 개념</h3><p>NOT EXISTS 연산자는 주로 메인쿼리 WHERE절에서 서브쿼리와 함께 사용된다. 위에서 EXISTS에 대해서 이해했다면 크게 어려운 점이 없다.</p><p>동작원리는 다음과 같습니다:</p><ol><li><p>먼저 메인쿼리의 TABLE에 접근하여 하나의 레코드를 가져온다.</p></li><li><p>이 레코드에 대해서 EXISTS 이하의 서브쿼리를 실행하고 서브쿼리에 의해 반환된 값 집합이 존재하는지를 판단한다.</p></li><li><p>STEP 3는 EXISTS 연산자와 정 반대이다:</p><p>서브쿼리에 의해 반환된 값 집합이 <strong>존재하지 않다면</strong> <code>TRUE</code> 를 반환하고 메인쿼리의 SELECT문을 그대로 실행한다.</p><p>반환된 값 집합이 <strong>존재한다면</strong> <code>FALSE</code>를 반환하고 메인쿼리의 SELECT문을 실행하지 않고 바로 다음 레코드로 넘어간다.</p><br> </li></ol><p><strong>&gt;&gt; 장점:</strong> 서브쿼리에 의해 반환된 값 집합의 존재여부만을 판단하므로 연산 시 부하가 줄어든다 (성능상 유리함)</p><br><h3 id="5-2-not-exists-연산자-실습"><a class="markdownIt-Anchor" href="#5-2-not-exists-연산자-실습"></a> 5-2. NOT EXISTS 연산자 실습</h3><img src="/images/S-SQL-SubQuery/image-20201126110600155.png" alt="image-20201126110600155" style="zoom:67%;"><br><br><h4 id="mission-3"><a class="markdownIt-Anchor" href="#mission-3"></a> &gt;&gt; MISSION</h4><p><strong>지불내역(AMOUNT)이 11달러 초과한 적이 없는 고객의 이름을 출력하라</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> PAYMENT P</span><br><span class="line">   <span class="keyword">WHERE</span> P.CUSTOMER_ID = C.CUSTOMER_ID</span><br><span class="line">     <span class="keyword">AND</span> P.AMOUNT &gt; <span class="number">11</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME, LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-SubQuery/image-20201127111302306.png" alt="image-20201127111302306" style="zoom:80%;"><br><br><p>​</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      서브쿼리, ANY 연산다, ALL 연산자, EXISTS 연산다, NOT EXISTS 연산자
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 7. SubQuery" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-7-SubQuery/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집합 연산자</title>
    <link href="https://hyemin-kim.github.io/2020/11/20/S-SQL-Operation/"/>
    <id>https://hyemin-kim.github.io/2020/11/20/S-SQL-Operation/</id>
    <published>2020-11-20T05:13:20.000Z</published>
    <updated>2020-11-20T06:52:35.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집합-연산자"><a class="markdownIt-Anchor" href="#집합-연산자"></a> 집합 연산자</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-union-%EC%97%B0%EC%82%B0"><strong>1. UNION 연산</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-union-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">1-2. UNION 연산 문법</a></li><li><a href="#1-3-union-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">1-3. UNION 연산 실습</a><ul><li><a href="#1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">(1) 실습 준비</a></li><li><a href="#2-union-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">(2) UNION 연산 실습</a></li></ul></li></ul></li><li><a href="#2-union-all-%EC%97%B0%EC%82%B0"><strong>2. UNION ALL 연산</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-union-all-%EB%AC%B8%EB%B2%95">2-2. UNION ALL 문법</a></li><li><a href="#2-3-union-all-%EC%8B%A4%EC%8A%B5">2-3. UNION ALL 실습</a></li></ul></li><li><a href="#3-intersect-%EC%97%B0%EC%82%B0"><strong>3. INTERSECT 연산</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-intersect-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">3-2. INTERSECT 연산 문법</a></li><li><a href="#3-3-intersect-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">3-3. INTERSECT 연산 실습</a><ul><li><a href="#1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-2">(1) 실습 준비</a></li><li><a href="#2-intersect-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">(2) INTERSECT 연산 실습</a></li></ul></li></ul></li><li><a href="#4-except-%EC%97%B0%EC%82%B0"><strong>4. EXCEPT 연산</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-except-%EC%97%B0%EC%82%B0-%EB%AC%B8%EB%B2%95">4-2. EXCEPT 연산 문법</a></li><li><a href="#4-3-except-%EC%97%B0%EC%82%B0-%EC%8B%A4%EC%8A%B5">4-3. EXCEPT 연산 실습</a></li></ul></li></ul><p></p><br><h2 id="1-union-연산"><a class="markdownIt-Anchor" href="#1-union-연산"></a> <strong>1. UNION 연산</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>두 개 이상의 SELECT 문들의 결과 집합을 단일 결과 집합으로 결합하며 결합 시 <strong>중복된 데이터는 제거</strong> 된다.</p><img src="/images/S-SQL-Operation/image-20201120094109951.png" alt="image-20201120094109951" style="zoom: 67%;"><br><h3 id="1-2-union-연산-문법"><a class="markdownIt-Anchor" href="#1-2-union-연산-문법"></a> 1-2. UNION 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_1_1,</span><br><span class="line">    COLUMN_1_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_2_1,</span><br><span class="line">    COLUMN_2_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>두 개의 SELECT 문에서 중복되는 데이터 값이 있다면 중복을 제거 된다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="1-3-union-연산-실습"><a class="markdownIt-Anchor" href="#1-3-union-연산-실습"></a> 1-3. UNION 연산 실습</h3><h4 id="1-실습-준비"><a class="markdownIt-Anchor" href="#1-실습-준비"></a> (1) 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES2007_1</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  AMOUNT <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES2007_1</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Mike'</span>, <span class="number">150000.25</span>),</span><br><span class="line">  (<span class="string">'Jon'</span>, <span class="number">132000.75</span>),</span><br><span class="line">  (<span class="string">'Mary'</span>, <span class="number">100000</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES2007_2</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  AMOUNT <span class="built_in">NUMERIC</span>(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES2007_2</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Mike'</span>, <span class="number">120000.25</span>),</span><br><span class="line">  (<span class="string">'Jon'</span>, <span class="number">142000.75</span>),</span><br><span class="line">  (<span class="string">'Mary'</span>, <span class="number">100000</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES2007_1;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119164810289.png" alt="image-20201119164810289" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119164843257.png" alt="image-20201119164843257" style="zoom:80%;"><br><br><h4 id="2-union-연산-실습"><a class="markdownIt-Anchor" href="#2-union-연산-실습"></a> (2) UNION 연산 실습</h4><p><strong>&gt;&gt; 일반 UNION</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165223471.png" alt="image-20201119165223471" style="zoom:80%;"><ul><li>(‘Mary’, ‘100000’) 중복 제거됨</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NAME만 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165446423.png" alt="image-20201119165446423"><ul><li>‘Mike’, ‘Jon’, ‘Mary’ 중복 제거됨</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT만 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119165653248.png" alt="image-20201119165653248" style="zoom:80%;"><ul><li>‘100000’ 중복 제거됨</li></ul><br><p><strong>&gt;&gt; UNION + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES2007_2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>             <span class="comment">-- ORDER BY는 맨 마지막 SELECT 문에 기재해야 한다.</span></span><br><span class="line">  AMOUNT <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170006052.png" alt="image-20201119170006052" style="zoom:80%;"><br><br><h2 id="2-union-all-연산"><a class="markdownIt-Anchor" href="#2-union-all-연산"></a> <strong>2. UNION ALL 연산</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>두 개 이상의 SELECT 문들의 결과 집합을 단일 결과 집합으로 결합하며 결합 시 <strong>중복된 데이터도 모두 출력</strong>한다.</p><img src="/images/S-SQL-Operation/image-20201120094352298.png" alt="image-20201120094352298" style="zoom:67%;"><br><h3 id="2-2-union-all-문법"><a class="markdownIt-Anchor" href="#2-2-union-all-문법"></a> 2-2. UNION ALL 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_1_1,</span><br><span class="line">    COLUMN_1_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_2_1,</span><br><span class="line">    COLUMN_2_2</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>두 개의 SELECT 문에서 중복되는 데이터 값이 있어도 모두 출력한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="2-3-union-all-실습"><a class="markdownIt-Anchor" href="#2-3-union-all-실습"></a> 2-3. UNION ALL 실습</h3><p><strong>&gt;&gt; 일반 UNION ALL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170843555.png" alt="image-20201119170843555" style="zoom:80%;"><ul><li>(‘Mary’, ‘100000’) 중복 데이터 출력함</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NAME만 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119170949324.png" alt="image-20201119170949324" style="zoom:80%;"><ul><li>‘Mike’, ‘Jon’, ‘Mary’ 중복 데이터 출력함</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT만 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119171104105.png" alt="image-20201119171104105" style="zoom:80%;"><ul><li>‘100000’ 중복 데이터 출력함</li></ul><br><p><strong>&gt;&gt; UNION ALL + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES2007_2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>                 <span class="comment">-- ORDER BY는 맨 마지막 SELECT 문에 기재해야 한다.</span></span><br><span class="line">  AMOUNT <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201119171511374.png" alt="image-20201119171511374" style="zoom:80%;"><br><br><h2 id="3-intersect-연산"><a class="markdownIt-Anchor" href="#3-intersect-연산"></a> <strong>3. INTERSECT 연산</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>INTERSECT 연산자는 두 개 이상의 SELECT 문들의 결과 집합의 교집합을 출력하는 연산자다.</p><img src="/images/S-SQL-Operation/image-20201120095222453.png" style="zoom:67%;"><br><h3 id="3-2-intersect-연산-문법"><a class="markdownIt-Anchor" href="#3-2-intersect-연산-문법"></a> 3-2. INTERSECT 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_1_1,</span><br><span class="line">   COLUMN_1_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_1</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_2_1,</span><br><span class="line">   COLUMN_2_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="3-3-intersect-연산-실습"><a class="markdownIt-Anchor" href="#3-3-intersect-연산-실습"></a> 3-3. INTERSECT 연산 실습</h3><h4 id="1-실습-준비-2"><a class="markdownIt-Anchor" href="#1-실습-준비-2"></a> (1) 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEES1</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EMPLOYEE_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">KEYS</span></span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EFFECTIVE_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (EMPLOYEE_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> EMPLOYEES1 (EMPLOYEE_ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> HIPOS</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EFFECTIVE_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (EMPLOYEE_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> EMPLOYEES1 (EMPLOYEE_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES1 (EMPLOYEE_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Joyce Edwards'</span>),</span><br><span class="line">(<span class="string">'Diane Collins'</span>),</span><br><span class="line">(<span class="string">'Alice Stewart'</span>),</span><br><span class="line">(<span class="string">'Julie Sanchez'</span>),</span><br><span class="line">(<span class="string">'Heather Morris'</span>),</span><br><span class="line">(<span class="string">'Teresa Rogers'</span>),</span><br><span class="line">(<span class="string">'Doris Reed'</span>),</span><br><span class="line">(<span class="string">'Gloria Cook'</span>),</span><br><span class="line">(<span class="string">'Evelyn Morgan'</span>),</span><br><span class="line">(<span class="string">'Jean Bell'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'2000-02-01'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'2001-06-01'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'2002-01-01'</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">'2005-06-01'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HIPOS</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">9</span>, <span class="string">'2000-01-01'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'2002-06-01'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'2006-06-01'</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">'2005-06-01'</span>);</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES1;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111618068.png" alt="image-20201120111618068" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">KEYS</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111732244.png" alt="image-20201120111732244" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> HIPOS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120111807673.png" alt="image-20201120111807673" style="zoom:80%;"><br><br><h4 id="2-intersect-연산-실습"><a class="markdownIt-Anchor" href="#2-intersect-연산-실습"></a> (2) INTERSECT 연산 실습</h4><p><strong>&gt;&gt; 일반 INTERSECT</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- "KEYS" INTERSECT "HIPOS"</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span> </span><br><span class="line">   <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   HIPOS;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120113731964.png" alt="image-20201120113731964"></p><br><ul><li>INNER 조인 연산과 결과가 동일함** (실무에서 INTERSECT 연산 보다 INNER 조인 더 많이 쓰인다)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN (1)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  <span class="keyword">KEYS</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  HIPOS B</span><br><span class="line"><span class="keyword">ON</span> A.EMPLOYEE_ID = B.EMPLOYEE_ID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INNER JOIN (2)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  <span class="keyword">KEYS</span> A, HIPOS B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.EMPLOYEE_ID = B.EMPLOYEE_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120113731964-1605855152002.png" alt="image-20201120113731964"></p><br><p><strong>&gt;&gt; INTERSECT + ORDER BY</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   <span class="keyword">KEYS</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   EMPLOYEE_ID</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   HIPOS</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPLOYEE_ID <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Operation/image-20201120130136496.png" alt="image-20201120130136496"></p><br><br><h2 id="4-except-연산"><a class="markdownIt-Anchor" href="#4-except-연산"></a> <strong>4. EXCEPT 연산</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>EXCEPT 연산자는 맨위에 SELECT 문의 결과 집합에서 그 아래에 있는 SELECT 문의 결과 집합을 제외한 결과를 리턴한다. (실무에서 많이 쓰임)</p><img src="/images/S-SQL-Operation/image-20201120132000229.png" alt="image-20201120132000229" style="zoom:67%;"><br><h3 id="4-2-except-연산-문법"><a class="markdownIt-Anchor" href="#4-2-except-연산-문법"></a> 4-2. EXCEPT 연산 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_1_1,</span><br><span class="line">   COLUMN_1_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_1</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   COLUMN_2_1,</span><br><span class="line">   COLUMN_2_2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">   TABLE_NAME_2;</span><br></pre></td></tr></tbody></table></figure><ul><li>두 개의 SELECT 문 간 컬럼의 개수는 동일해야 하고 해당 순서의 열에는 서로 호환되는 데이터 유형이어야 한다.</li><li>ORDER BY 로 정렬하고자 할 경우 맨 마지막 SELECT문에 ORDER BY 절을 사용한다.</li></ul><br><h3 id="4-3-except-연산-실습"><a class="markdownIt-Anchor" href="#4-3-except-연산-실습"></a> 4-3. EXCEPT 연산 실습</h3><p><strong>&gt;&gt; 실습 데이터</strong></p><p>dvdrental 데이터셋의 “film” 테이블(영화dvd 정보) 과 “inventory” 테이블(dvd 제고 정보) 을 활용한다.</p><img src="/images/S-SQL-Operation/image-20201120133728012.png" alt="image-20201120133728012" style="zoom:70%;"><ul><li>한 편의 영화가 여러 개의 제고가 있을 수 있다</li></ul><br><p><strong>&gt;&gt; MISSION: 제고가 존재하지 않는 영화의 ID와 제목을 추출한다</strong></p><p>(1) 먼저 제고가 존재하는 영화의 ID와 제목을 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>            </span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  B.TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> B.TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120140138350.png" alt="image-20201120140138350" style="zoom:80%;"><br><p>(2) 이제 전체 영화에서 제고 있는 영화를 제거하면 제거 없는 영화의 정보를 추출할 수 있다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>            </span><br><span class="line">  A.FILM_ID,</span><br><span class="line">  B.TITLE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INVENTORY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID = B.FILM_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Operation/image-20201120140607930.png" alt="image-20201120140607930" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      UNION 연산, UNION ALL 연산, INTERSECT 연산, EXCEPT 연산
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 6. Aggregate Operations" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-6-Aggregate-Operations/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 조인과 집계 데이터</title>
    <link href="https://hyemin-kim.github.io/2020/11/19/E-SQL-join-and-aggregate/"/>
    <id>https://hyemin-kim.github.io/2020/11/19/E-SQL-join-and-aggregate/</id>
    <published>2020-11-19T06:44:46.000Z</published>
    <updated>2020-11-19T06:54:13.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-조인과-집계-데이터"><a class="markdownIt-Anchor" href="#실습-조인과-집계-데이터"></a> 【실습】 조인과 집계 데이터</h1><br><h4 id="1-rental-테이블을-이용하여-연-연월-연월일-전체-각각의-기준으로-rental_id-기준-렌탈이-일어난-횟수를-출력하라-전체-데이터-기준으로-모든-행을-출력"><a class="markdownIt-Anchor" href="#1-rental-테이블을-이용하여-연-연월-연월일-전체-각각의-기준으로-rental_id-기준-렌탈이-일어난-횟수를-출력하라-전체-데이터-기준으로-모든-행을-출력"></a> <strong>[1] RENTAL 테이블을 이용하여 연, 연월, 연월일, 전체 각각의 기준으로 RENTAL_ID 기준 렌탈이 일어난 횟수를 출력하라. (전체 데이터 기준으로 모든 행을 출력)</strong></h4><br><img src="/images/E-SQL-join-and-aggregate/image-20201119085019530.png" alt="image-20201119085019530" style="zoom: 67%;"><br><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> RENTAL;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119085317448.png" alt="image-20201119085317448" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'YYYY'</span>),</span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'MM'</span>),</span><br><span class="line">  TO_CHAR(RENTAL_DATE, <span class="string">'DD'</span>),</span><br><span class="line">  <span class="keyword">COUNT</span> (RENTAL_ID)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span> (TO_CHAR(RENTAL_DATE, <span class="string">'YYYY'</span>),</span><br><span class="line">          TO_CHAR(RENTAL_DATE, <span class="string">'MM'</span>),</span><br><span class="line">    TO_CHAR(RENTAL_DATE, <span class="string">'DD'</span>));</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119130425101.png" alt="image-20201119130425101" style="zoom:67%;"><img src="/images/E-SQL-join-and-aggregate/image-20201119130531222.png" alt="image-20201119130531222" style="zoom:67%;"><br><br><h3 id="2-rental과-customer-테이블을-이용하여-현재까지-가장-많이-rental을-한-고객의-고객id-렌탈순위-누적렌탈횟수-이름을-출력하라"><a class="markdownIt-Anchor" href="#2-rental과-customer-테이블을-이용하여-현재까지-가장-많이-rental을-한-고객의-고객id-렌탈순위-누적렌탈횟수-이름을-출력하라"></a> [2] RENTAL과 CUSTOMER 테이블을 이용하여 현재까지 가장 많이 RENTAL을 한 고객의 고객ID, 렌탈순위, 누적렌탈횟수, 이름을 출력하라.</h3><br><img src="/images/E-SQL-join-and-aggregate/image-20201119131041452.png" alt="image-20201119131041452" style="zoom:67%;"><br><br><p><strong>&gt;&gt; 문제 풀이</strong></p><p><strong>(1) 가장 먼저 RENTAL 순위를 구해야 한다.</strong></p><ul><li>고객 별로 렌탈 횟수 구함</li><li>ROW_NUMBER() 를 이용해 순위 번호 생성 (렌탈 횟수를 내림차순으로 정렬한 후 생성)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RANTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  CUSTOMER_ID;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- CUSTOMER_ID 기준으로 GROUP BY 했기 때문에 ROW_NUMBER()에서 PARTITION BY가 생략되었다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119143530660.png" alt="image-20201119143530660" style="zoom:80%;"><br><br><p><strong>(2) 이 상태에서 첫번째 순위인 데이처를 추출 (가장 많이 RENTAL 한 고객의 데이터)</strong></p><ul><li>ORDER BY + LIMIT 이용</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-join-and-aggregate/image-20201119144824759.png" alt="image-20201119144824759"><br><br><p><strong>(3) 마지막으로 CUSTOMER 테이블과 조인하여 해당 고객의 이름을 출력한다</strong></p><ol><li><p>직접 조인</p><ul><li>CUSTOMER_ID 기준으로 GROUP BY 되어 있으므로 FIRST_NAME, LAST_NAME에 MAX함수를 사용해서 출력한다.</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"> A.CUSTOMER_ID,</span><br><span class="line"> ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line"> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT,</span><br><span class="line"> <span class="keyword">MAX</span>(B.FIRST_NAME) <span class="keyword">AS</span> FIRST_NAME,</span><br><span class="line"> <span class="keyword">MAX</span>(B.LAST_NAME) <span class="keyword">AS</span> LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> RENTAL A, CUSTOMER B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"> A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line"> A.CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line"> RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-join-and-aggregate/image-20201119144959120.png" alt="image-20201119144959120"></p></li></ol><br><ol start="2"><li><p>서브커리 활용</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  B.CUSTOMER_ID,</span><br><span class="line">  B.RENTAL_RANK,</span><br><span class="line">  B.RENTAL_COUNT,</span><br><span class="line">  C.FIRST_NAME,</span><br><span class="line">  C.LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">DESC</span>) <span class="keyword">AS</span> RENTAL_RANK,</span><br><span class="line">  <span class="keyword">COUNT</span>(A.RENTAL_ID) <span class="keyword">AS</span> RENTAL_COUNT</span><br><span class="line"><span class="keyword">FROM</span> RENTAL A</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RENTAL_COUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">) B, CUSTOMER C</span><br><span class="line"><span class="keyword">WHERE</span> B.CUSTOMER_ID = C.CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-join-and-aggregate/image-20201119144959120.png" alt="image-20201119144959120"></p></li></ol><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-조인과-집계-데이터&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-조인과-집계-데이터&quot;&gt;&lt;/a&gt; 【실습】 조인과 집계 데이터&lt;/h1&gt;
&lt;br&gt;
&lt;h4 id=&quot;1-rental-테이블을-이용하여-연-연월-연월일
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 분석 함수 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-2/</id>
    <published>2020-11-17T23:57:17.000Z</published>
    <updated>2020-11-20T06:44:52.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="분석-함수-2"><a class="markdownIt-Anchor" href="#분석-함수-2"></a> 분석 함수 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-first_value-last_value-%ED%95%A8%EC%88%98"><strong>1. FIRST_VALUE, LAST_VALUE 함수</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-first_name-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-2. FIRST_NAME 함수 실습</a></li><li><a href="#1-3-last_value-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-3. LAST_VALUE 함수 실습</a></li></ul></li><li><a href="#2-lag-lead-%ED%95%A8%EC%88%98"><strong>2. LAG, LEAD 함수</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-lag-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EC%9D%B4%EC%A0%84-%ED%96%89%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%B0%BE%EB%8A%94%EB%8B%A4">2-2. LAG 함수 실습 – 이전 행의 값을 찾는다</a></li><li><a href="#2-3-lead-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EB%8B%A4%EC%9D%8C-%ED%96%89%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%B0%BE%EB%8A%94%EB%8B%A4">2-3. LEAD 함수 실습 – 다음 행의 값을 찾는다</a></li></ul></li></ul><p></p><br><h2 id="1-first_value-last_value-함수"><a class="markdownIt-Anchor" href="#1-first_value-last_value-함수"></a> <strong>1. FIRST_VALUE, LAST_VALUE 함수</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>FIRST_VALUE, LAST_VALUE 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 첫번째 값 혹은 마지막 값을 구하는 함수</strong>이다.</p><br><h3 id="1-2-first_name-함수-실습"><a class="markdownIt-Anchor" href="#1-2-first_name-함수-실습"></a> 1-2. FIRST_NAME 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><p><strong>&gt;&gt; MISSION:</strong> GROUP_NAME 기준 PRICE가 가장 작은 값을 출력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">FIRST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line">    <span class="keyword">AS</span> LOWEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117160221397.png" alt="image-20201117160221397" style="zoom:80%;"><br><h3 id="1-3-last_value-함수-실습"><a class="markdownIt-Anchor" href="#1-3-last_value-함수-실습"></a> 1-3. LAST_VALUE 함수 실습</h3><p>LAST_VALUE 함수 사용 시 추가적으로 LAST_VALUE를 선택하는 범위를 지정해줘야 함.</p><br><p><strong>&gt;&gt; MISSION:</strong> GROUP_NAME 기준 PRICE가 가장 큰 값을 출력한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LAST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> </span><br><span class="line">    (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE</span><br><span class="line">     <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span>   <span class="comment">-- PARTITION의 첫번째 ROW부터</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">FOLLOWING</span>)            <span class="comment">-- PARTITION의 마지막 ROW까지</span></span><br><span class="line">     <span class="keyword">AS</span> HIGHEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117162007699.png" alt="image-20201117162007699" style="zoom:80%;"><br><ul><li>LAST_VALUE 함수에는 "RANGE BETWEEN ENBOUNDED PRECEDING AND <strong>UNBOUNDED FOLLOWING</strong>"를 추가함</li><li>DEFAULT가 "RANGE BETWEEN ENBOUNDED PRECEDING AND <strong>CURRENT ROW</strong>"이기 때문이다</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DEFAULT 경우:</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LAST_VALUE</span> (A.PRICE) <span class="keyword">OVER</span> </span><br><span class="line">    (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)            </span><br><span class="line">    <span class="keyword">AS</span> HIGHEST_PRICE_PER_GROUP</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117162655768.png" alt="image-20201117162655768" style="zoom:80%;"><br><ul><li>범위 지정은 DEFAULT로 <strong>CURRENT ROW</strong> 까지여서 우리가 기대하는 바와 달리 PRICE 값 그대로 출력함.</li></ul><br><br><h2 id="2-lag-lead-함수"><a class="markdownIt-Anchor" href="#2-lag-lead-함수"></a> <strong>2. LAG, LEAD 함수</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>LAG 와 LEAD 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 이전 행의 값 혹은 다음 행의 값을 구하는 함수</strong>이다.</p><br><h3 id="2-2-lag-함수-실습-이전-행의-값을-찾는다"><a class="markdownIt-Anchor" href="#2-2-lag-함수-실습-이전-행의-값을-찾는다"></a> 2-2. LAG 함수 실습 – 이전 행의 값을 찾는다</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  LAG(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> PREV_PRICE,</span><br><span class="line">  PRICE - LAG(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> CUR_PREV_DIFF</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117170809941.png" alt="image-20201117170809941" style="zoom:80%;"><br><h3 id="2-3-lead-함수-실습-다음-행의-값을-찾는다"><a class="markdownIt-Anchor" href="#2-3-lead-함수-실습-다음-행의-값을-찾는다"></a> 2-3. LEAD 함수 실습 – 다음 행의 값을 찾는다</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">LEAD</span>(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> NEXT_PRICE,</span><br><span class="line">  A.PRICE - <span class="keyword">LEAD</span>(A.PRICE, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE) <span class="keyword">AS</span> CUR_NEXT_DIFF</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-2/image-20201117170707029.png" alt="image-20201117170707029" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      분석 함수 -- FIRST_VALUE, LAST_VALUE 함수; LAG, LEAD 함수
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 5. Analytic Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-5-Analytic-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Analytic Function" scheme="https://hyemin-kim.github.io/tags/Analytic-Function/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 분석 함수 (1) -- 평균 함수, 순위 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/18/S-SQL-Analytic-Function-1/</id>
    <published>2020-11-17T23:47:11.000Z</published>
    <updated>2020-11-20T06:44:41.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="분석-함수-1-평균-함수-순위-함수"><a class="markdownIt-Anchor" href="#분석-함수-1-평균-함수-순위-함수"></a> 분석 함수 (1) – 평균 함수, 순위 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98%EB%9E%80"><strong>0. 분석 함수란?</strong></a><ul><li><a href="#0-1-%EA%B0%9C%EB%85%90">0-1. 개념</a></li><li><a href="#0-2-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">0-2. 분석 함수 실습 준비</a></li><li><a href="#0-3-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EB%AC%B8%EB%B2%95">0-3. 분석 함수 문법</a></li><li><a href="#0-4-%EB%B6%84%EC%84%9D-%ED%95%A8%EC%88%98-%EA%B2%B0%EA%B3%BC-%EC%98%88%EC%8B%9C">0-4. 분석 함수 결과 예시</a></li></ul></li><li><a href="#1-avg-%ED%95%A8%EC%88%98"><strong>1. AVG 함수</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-avg-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">1-2. AVG 함수 실습</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(1) 전체  평균 가격(PRICE) 구하기</a></li><li><a href="#2-%EA%B7%B8%EB%A3%B9%EB%B3%84-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(2) 그룹별 평균 가격(PRICE) 구하기</a></li><li><a href="#3-%EA%B7%B8%EB%A3%B9%EB%B3%84-%EB%88%84%EC%A0%81-%ED%8F%89%EA%B7%A0-%EA%B0%80%EA%B2%A9price-%EA%B5%AC%ED%95%98%EA%B8%B0">(3) 그룹별 누적 평균 가격(PRICE) 구하기</a></li></ul></li></ul></li><li><a href="#2-row_number-rank-dense_rank-%ED%95%A8%EC%88%98"><strong>2. ROW_NUMBER, RANK, DENSE_RANK 함수</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1.  개념</a></li><li><a href="#2-2-%EC%88%9C%EC%9C%84-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2. 순위 함수 실습</a><ul><li><a href="#2-2-1-row_number-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-1. ROW_NUMBER 함수 실습</a></li><li><a href="#2-2-2-rank-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-2. RANK 함수 실습</a></li><li><a href="#2-2-3-dense_rank-%ED%95%A8%EC%88%98-%EC%8B%A4%EC%8A%B5">2-2-3. DENSE_RANK 함수 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="0-분석-함수란"><a class="markdownIt-Anchor" href="#0-분석-함수란"></a> <strong>0. 분석 함수란?</strong></h2><h3 id="0-1-개념"><a class="markdownIt-Anchor" href="#0-1-개념"></a> 0-1. 개념</h3><p>분석 함수는 특정 집합 내에서 결과 건수의 변화없이 해당 집합안에서 합계 및 카운트 등을 계산할 수 있는 함수이다.</p><br><h3 id="0-2-분석-함수-실습-준비"><a class="markdownIt-Anchor" href="#0-2-분석-함수-실습-준비"></a> 0-2. 분석 함수 실습 준비</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT_GROUP (</span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  GROUP_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCT (</span><br><span class="line">  PRODUCT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  PRODUCT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRICE <span class="built_in">DECIMAL</span> (<span class="number">11</span>, <span class="number">2</span>),   <span class="comment">-- DECIMAL (전체 자릿수, 소수점 자릿수)</span></span><br><span class="line">  <span class="keyword">GROUP_ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">GROUP_ID</span>)</span><br><span class="line">  <span class="keyword">REFERENCES</span> PRODUCT_GROUP (<span class="keyword">GROUP_ID</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT_GROUP (GROUP_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Smartphone'</span>),</span><br><span class="line">  (<span class="string">'Laptop'</span>),</span><br><span class="line">  (<span class="string">'Tablet'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCT (PRODUCT_NAME, <span class="keyword">GROUP_ID</span>, PRICE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Microsoft Lumia'</span>, <span class="number">1</span>, <span class="number">200</span>),</span><br><span class="line">  (<span class="string">'HTC One'</span>, <span class="number">1</span>, <span class="number">400</span>),</span><br><span class="line">  (<span class="string">'Nexus'</span>, <span class="number">1</span>, <span class="number">500</span>),</span><br><span class="line">  (<span class="string">'iPhone'</span>, <span class="number">1</span>, <span class="number">900</span>),</span><br><span class="line">  (<span class="string">'HP Elite'</span>, <span class="number">2</span>, <span class="number">1200</span>),</span><br><span class="line">  (<span class="string">'Lenovo Thinkpad'</span>, <span class="number">2</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Sony VAIO'</span>, <span class="number">2</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Dell Vostro'</span>, <span class="number">2</span>, <span class="number">800</span>),</span><br><span class="line">  (<span class="string">'iPad'</span>, <span class="number">3</span>, <span class="number">700</span>),</span><br><span class="line">  (<span class="string">'Kindle Fire'</span>, <span class="number">3</span>, <span class="number">150</span>),</span><br><span class="line">  (<span class="string">'Samsung Galaxy Tab'</span>, <span class="number">3</span>, <span class="number">200</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h3 id="0-3-분석-함수-문법"><a class="markdownIt-Anchor" href="#0-3-분석-함수-문법"></a> 0-3. 분석 함수 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1,</span><br><span class="line">  분석함수(C2, C3, ...) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> C4 <span class="keyword">ORDER</span> <span class="keyword">BY</span> C5)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>분석함수(C2, C3,…) :</strong> 사용하고자 하는 분석함수와 적용할 대상 컬럼을 지정</li><li><strong>PARTITION BY :</strong> 분석 함수를 적용 시 기준이 되는 컬럼을 지정 (즉, 그룹별로 값을 구할 때 그룹핑의 기준 컬럼)</li><li><strong>ORDER BY :</strong> 정렬 컬럼을 지정</li></ul><br><h3 id="0-4-분석-함수-결과-예시"><a class="markdownIt-Anchor" href="#0-4-분석-함수-결과-예시"></a> 0-4. 분석 함수 결과 예시</h3><p>집계 함수 vs 분석 함수:</p><ul><li><p>집계 함수는 집계의 결과만 출력한다</p></li><li><p>분석 함수는 집계의 결과 및 테이블의 내용을 함계 출력한다.</p><p>–&gt; 이게 바로 분석 함수의 역할이다.</p></li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> <span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Analytic-Function-1/image-20201117101439406.png" alt="image-20201117101439406"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">COUNT</span>(*) <span class="keyword">OVER</span>(),  <span class="comment">-- 집계 결과 </span></span><br><span class="line">  A.*               <span class="comment">-- 원래 집합</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117101622478.png" alt="image-20201117101622478" style="zoom:80%;"><br><br><h2 id="1-avg-함수"><a class="markdownIt-Anchor" href="#1-avg-함수"></a> <strong>1. AVG 함수</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>AVG 함수는 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 평균을 구하는 함수</strong>이다.</p><br><h3 id="1-2-avg-함수-실습"><a class="markdownIt-Anchor" href="#1-2-avg-함수-실습"></a> 1-2. AVG 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h4 id="1-전체-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#1-전체-평균-가격price-구하기"></a> (1) 전체  평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 집계함수 사용</strong></p><ul><li><p>AVG: 집계의 결과만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수(AVG): 집계의 결과만 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">AVG</span>(PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PRODUCT;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><img src="/images/S-SQL-Analytic-Function-1/image-20201117130450587.png" alt="image-20201117130450587"></p><br><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG ( )  OVER ( ) : 결과 집합을 그대로 출력하면서 집계 결과도 함계 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  PRODUCT_NAME,</span><br><span class="line">  PRICE,</span><br><span class="line">  <span class="keyword">AVG</span>(PRICE) <span class="keyword">OVER</span>()</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117133842813.png" alt="image-20201117133842813" style="zoom:80%;"><br></li></ul><h4 id="2-그룹별-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#2-그룹별-평균-가격price-구하기"></a> (2) 그룹별 평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 집계함수 사용</strong></p><ul><li><p>GROUP BY + AVG:  집계의 결과만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 집계 함수: GROUP BY + AVG</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">B.GROUP_NAME,</span><br><span class="line"><span class="keyword">AVG</span>(A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> (A.GROUP_ID = B.GROUP_ID)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">B.GROUP_NAME;</span><br></pre></td></tr></tbody></table></figure></li></ul><img src="/images/S-SQL-Analytic-Function-1/image-20201117131044658.png" alt="image-20201117131044658" style="zoom:80%;"><br><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG (C1)  OVER ( PARTITION BY C2 ) : 결과 집합을 그대로 출력하면서 집계 결과도 함계 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 분석 함수</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">A.PRODUCT_NAME,</span><br><span class="line">A.PRICE, </span><br><span class="line">B.GROUP_NAME,</span><br><span class="line"><span class="keyword">AVG</span>(A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure></li></ul><img src="/images/S-SQL-Analytic-Function-1/image-20201117132959087.png" alt="image-20201117132959087" style="zoom:80%;"><br><h4 id="3-그룹별-누적-평균-가격price-구하기"><a class="markdownIt-Anchor" href="#3-그룹별-누적-평균-가격price-구하기"></a> (3) 그룹별 누적 평균 가격(PRICE) 구하기</h4><p><strong>&gt;&gt; 분석함수 사용</strong></p><ul><li><p>AVG (C1)  OVER ( PARTITION BY C2  ORDER BY C3 )</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  <span class="keyword">AVG</span>(A.PRICE) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117134939361.png" alt="image-20201117134939361" style="zoom:80%;"></li></ul><br><br><h2 id="2-row_number-rank-dense_rank-함수"><a class="markdownIt-Anchor" href="#2-row_number-rank-dense_rank-함수"></a> <strong>2. ROW_NUMBER, RANK, DENSE_RANK 함수</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1.  개념</h3><p>ROW_NUMBER, RANK, DENSE_RANK 함수는 모두 특정 집합 내에서 결과 건수의 변화 없이 해당 집합안에서 <strong>특정 컬럼의 순위를 구하는 함수</strong>이다.</p><ul><li><p><strong>ROW_NUMBER:</strong> 같은 순위가 있어도 무조건 순차적으로 순으로 순위를 매긴다. (1, 2, 3, 4, 5 …)</p></li><li><p><strong>RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰다. (1, 1, 3, 4, 5 …)</p></li><li><p><strong>DENSE_RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰지 않는다. (1, 1, 2, 3, 4 …)</p><br></li></ul><h3 id="2-2-순위-함수-실습"><a class="markdownIt-Anchor" href="#2-2-순위-함수-실습"></a> 2-2. 순위 함수 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT_GROUP;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095413411.png" alt="image-20201117095413411" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCT;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117095502521.png" alt="image-20201117095502521" style="zoom:80%;"><br><h4 id="2-2-1-row_number-함수-실습"><a class="markdownIt-Anchor" href="#2-2-1-row_number-함수-실습"></a> 2-2-1. ROW_NUMBER 함수 실습</h4><p><strong>ROW_NUMBER:</strong> 같은 순위가 있어도 무조건 순차적으로 순으로 순위를 매긴다. (1, 2, 3, 4, 5…)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  ROW_NUMBER() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117142626970.png" alt="image-20201117142626970" style="zoom:80%;"><br><ul><li>Laptop 에서 가격순으로 정렬했을 때 "Sony VAIO"와 "Lenovo Thinkpad"의 가격이 동일해도 (즉, 가격 순위 같아도)  순차적으로 순번을 부여한다</li></ul><br><h4 id="2-2-2-rank-함수-실습"><a class="markdownIt-Anchor" href="#2-2-2-rank-함수-실습"></a> 2-2-2. RANK 함수 실습</h4><p><strong>RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위는 건너뛰다. (1, 1, 3, 4, 5 …)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.PRODUCT_NAME,</span><br><span class="line">  B.GROUP_NAME,</span><br><span class="line">  A.PRICE,</span><br><span class="line">  <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> B.GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.PRICE)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117150134038.png" alt="image-20201117150134038" style="zoom:80%;"><br><h4 id="2-2-3-dense_rank-함수-실습"><a class="markdownIt-Anchor" href="#2-2-3-dense_rank-함수-실습"></a> 2-2-3. DENSE_RANK 함수 실습</h4><p><strong>DENSE_RANK:</strong> 같은 순위가 있으면 동일 순위로 매기고 그 다음 순위를 건너뛰지 않는다. (1, 1, 2, 3, 4 …)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  PRODUCT_NAME,</span><br><span class="line">  GROUP_NAME,</span><br><span class="line">  PRICE,</span><br><span class="line">  <span class="keyword">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> GROUP_NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> PRICE)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCT A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PRODUCT_GROUP B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.GROUP_ID = B.GROUP_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Analytic-Function-1/image-20201117151955026.png" alt="image-20201117151955026" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      분석 함수 -- 평균 함수(AVG), 순위 함수 (ROW_NUMBER, RANK, DENSE_RANK)
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 5. Analytic Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-5-Analytic-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Analytic Function" scheme="https://hyemin-kim.github.io/tags/Analytic-Function/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집계 함수 (2) -- 고급 집계 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/17/S-SQL-Aggregate-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/17/S-SQL-Aggregate-2/</id>
    <published>2020-11-16T23:46:08.000Z</published>
    <updated>2020-11-20T06:44:10.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집계-함수-2-고급-집계-함수"><a class="markdownIt-Anchor" href="#집계-함수-2-고급-집계-함수"></a> 집계 함수 (2) – 고급 집계 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-grouping-set-%EC%A0%88"><strong>1. GROUPING SET 절</strong></a><ul><li><a href="#1-0-%ED%95%99%EC%8A%B5-%EC%A4%80%EB%B9%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1">1-0. 학습 준비 (데이터 생성)</a></li><li><a href="#1-1-group-by-%EC%A0%88-%ED%99%9C%EC%9A%A9">1-1. GROUP BY 절 활용</a><ul><li><a href="#1-2%EA%B0%9C-%EC%BB%AC%EB%9F%BC-group-by-%EC%A0%88">(1) 2개 컬럼 GROUP BY 절</a></li><li><a href="#2-1%EA%B0%9C-%EC%BB%AC%EB%9F%BC-group-by-%EC%A0%88">(2) 1개 컬럼 GROUP BY 절</a></li><li><a href="#3-group-by-%EC%95%88%ED%95%98%EA%B8%B0">(3) GROUP BY 안하기</a></li><li><a href="#4-%EC%B6%94%EC%B6%9C%EB%90%9C-%EC%A0%95%EB%B3%B4-%ED%95%A9%EC%B9%98%EA%B8%B0-union-all%EC%9D%98-%ED%99%9C%EC%9A%A9">(4) 추출된 정보 합치기 – UNION ALL의 활용</a></li></ul></li><li><a href="#1-2-grouping-set-%EC%A0%88-%ED%99%9C%EC%9A%A9">1-2. GROUPING SET 절 활용</a><ul><li><a href="#1-2-1-%EC%9A%A9%EB%8F%84">1-2-1. 용도</a></li><li><a href="#1-2-2-grouping-set-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2-2. GROUPING SET 절 문법</a></li><li><a href="#1-2-3-grouping-set-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-2-3. GROUPING SET 절 실습</a></li></ul></li></ul></li><li><a href="#2-roll-up-%EC%A0%88"><strong>2. ROLL UP 절</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-rollup-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. ROLLUP 절 문법</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-roll-up">(1) 전체 ROLL UP</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-roll-up">(2) 부분 ROLL UP</a></li></ul></li><li><a href="#2-3-rollup-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. ROLLUP 절 실습</a><ul><li><a href="#1-group-by%EB%A7%8C-%EC%82%AC%EC%9A%A9-roll-up-%EC%95%88%ED%95%A8">(1) GROUP BY만 사용 (ROLL UP 안함)</a></li><li><a href="#2-group-by-%EC%A0%84%EC%B2%B4-roll-up">(2) GROUP BY + 전체 ROLL UP</a></li><li><a href="#3-group-by-%EB%B6%80%EB%B6%84-roll-up">(3) GROUP BY + 부분 ROLL UP</a></li></ul></li></ul></li><li><a href="#3-cube-%EC%A0%88"><strong>3. CUBE 절</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-cube-%EC%A0%88-%EB%AC%B8%EB%B2%95">3-2. CUBE 절 문법</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95">(1) 전체 컬럼 CUBE 지정</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95">(2) 부분 컬럼 CUBE 지정</a></li></ul></li><li><a href="#3-3-cube-%EC%A0%88-%EC%8B%A4%EC%8A%B5">3-3. CUBE 절 실습</a><ul><li><a href="#1-%EC%A0%84%EC%B2%B4-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95-2">(1) 전체 컬럼 CUBE 지정</a></li><li><a href="#2-%EB%B6%80%EB%B6%84-%EC%BB%AC%EB%9F%BC-cube-%EC%A7%80%EC%A0%95-2">(2) 부분 컬럼 CUBE 지정</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-grouping-set-절"><a class="markdownIt-Anchor" href="#1-grouping-set-절"></a> <strong>1. GROUPING SET 절</strong></h2><h3 id="1-0-학습-준비-데이터-생성"><a class="markdownIt-Anchor" href="#1-0-학습-준비-데이터-생성"></a> 1-0. 학습 준비 (데이터 생성)</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALES</span><br><span class="line">(</span><br><span class="line">  BRAND <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SEGMENT</span> <span class="built_in">VARCHAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  QUANTITY <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALES (BRAND, <span class="keyword">SEGMENT</span>, QUANTITY)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'ABC'</span>, <span class="string">'Premium'</span>, <span class="number">100</span>),</span><br><span class="line">  (<span class="string">'ABC'</span>, <span class="string">'Basic'</span>, <span class="number">200</span>),</span><br><span class="line">  (<span class="string">'XYZ'</span>, <span class="string">'Premium'</span>, <span class="number">100</span>),</span><br><span class="line">  (<span class="string">'XYZ'</span>, <span class="string">'Basic'</span>, <span class="number">300</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><br><h3 id="1-1-group-by-절-활용"><a class="markdownIt-Anchor" href="#1-1-group-by-절-활용"></a> 1-1. GROUP BY 절 활용</h3><h4 id="1-2개-컬럼-group-by-절"><a class="markdownIt-Anchor" href="#1-2개-컬럼-group-by-절"></a> (1) 2개 컬럼 GROUP BY 절</h4><p><strong>[MISSION 1]</strong>  BRAND별, SEGMENT별 총 판패량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, </span><br><span class="line">  <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113093816617-1605753863308.png" alt="image-20201113093816617" style="zoom:80%;"><br><h4 id="2-1개-컬럼-group-by-절"><a class="markdownIt-Anchor" href="#2-1개-컬럼-group-by-절"></a> (2) 1개 컬럼 GROUP BY 절</h4><p><strong>[MISSION 2]</strong>  BRAND별 총 판매량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  BRAND;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113094753809-1605753863308.png" alt="image-20201113094753809"></p><br><p><strong>[MISSION 3]</strong>  SEGMENT별 총 판매량 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113095022421-1605753863308.png" alt="image-20201113095022421"></p><br><h4 id="3-group-by-안하기"><a class="markdownIt-Anchor" href="#3-group-by-안하기"></a> (3) GROUP BY 안하기</h4><p><strong>[MISSION 4]</strong>  판매량 전체 합계 구하기</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-2/image-20201113095401699-1605753863308.png" alt="image-20201113095401699"></p><br><h4 id="4-추출된-정보-합치기-union-all의-활용"><a class="markdownIt-Anchor" href="#4-추출된-정보-합치기-union-all의-활용"></a> (4) 추출된 정보 합치기 – UNION ALL의 활용</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- BRAND별, SEGMENT별 총 판패량</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND, <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- BRAND별 총 판패량</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- SEGMENT별 총 판패량</span></span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>             <span class="comment">-- 전체 총 판패량</span></span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  SALES;</span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong>  각각의 UNION query는 같은 수의 columns를 가져야 한다. 따라서 각 부분의 SELECT 절에서 컬럼수가 부족하면 NULL로 채워야 함.</p><img src="/images/S-SQL-Aggregate-2/image-20201113100352802-1605753863308.png" alt="image-20201113100352802" style="zoom:80%;"><br><p><strong>이 방법의 단점:</strong></p><ul><li>동일한 테이블을 4번씩이나 읽고 있다. --&gt; 성능 저하 가능성이 존재</li><li>SQL 문이 너무 길어진다. --&gt;  복잡하다 --&gt; 유지보수가 용이하지 않다</li></ul><br><p><strong>&gt;&gt;</strong> 이런 불편함을 줄이기 위해서 GROUPING SET 절을 활용한다.</p><br><h3 id="1-2-grouping-set-절-활용"><a class="markdownIt-Anchor" href="#1-2-grouping-set-절-활용"></a> 1-2. GROUPING SET 절 활용</h3><h4 id="1-2-1-용도"><a class="markdownIt-Anchor" href="#1-2-1-용도"></a> 1-2-1. 용도</h4><p>GROUPING SET 절을 사용하여 여러 개의 UNION ALL을 이용한 SQL과 같은 결과를 도출할 수 있다.</p><br><h4 id="1-2-2-grouping-set-절-문법"><a class="markdownIt-Anchor" href="#1-2-2-grouping-set-절-문법"></a> 1-2-2. GROUPING SET 절 문법</h4><p>GROUPING SET 절을 이용하면 한번에 다양한 기준의 컬럼 조합으로 집계를 구할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1,</span><br><span class="line">  C2,</span><br><span class="line">  집계함수(C3)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (C1, C2),</span><br><span class="line">  (C1),</span><br><span class="line">  (C2),</span><br><span class="line">  ()</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><br><h4 id="1-2-3-grouping-set-절-실습"><a class="markdownIt-Anchor" href="#1-2-3-grouping-set-절-실습"></a> 1-2-3. GROUPING SET 절 실습</h4><p><strong>&gt;&gt; GROUPING SET 절의 활용</strong></p><p>GROUPING SET 절을 이용하여 BRAND, SEGMENT 기준, BRAND 기준, SEGMENT 기준, 전체기준으로 QUANTITY 합계의 값을 구할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113104247913-1605753863308.png" alt="image-20201113104247913" style="zoom:80%;"><br><p><strong>&gt;&gt; GROUPING 함수의 활용</strong></p><p>GROUPING 함수를 이용하여 해당 컬럼이 GROUPING 시 사용되었으면 0, 그렇지 않으면 1을 리턴한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">GROUPING</span>(BRAND) <span class="keyword">AS</span> GROUPING_BRAND,</span><br><span class="line">  <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) <span class="keyword">AS</span> GROUPING_SEGMENT,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113111058889-1605753863309.png" alt="image-20201113111058889" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'브랜드별 + 등급별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'브랜드별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'등급별'</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="keyword">GROUPING</span>(BRAND) = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">GROUPING</span>(<span class="keyword">SEGMENT</span>) = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'전체합계'</span></span><br><span class="line">       <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">"집계기준"</span>,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">GROUPING</span> <span class="keyword">SETS</span></span><br><span class="line">(</span><br><span class="line">  (BRAND, <span class="keyword">SEGMENT</span>),</span><br><span class="line">  (BRAND),</span><br><span class="line">  (<span class="keyword">SEGMENT</span>),</span><br><span class="line">  ()</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113112514952-1605753863309.png" alt="image-20201113112514952" style="zoom:80%;"><br><br><h2 id="2-roll-up-절"><a class="markdownIt-Anchor" href="#2-roll-up-절"></a> <strong>2. ROLL UP 절</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>지정된 GROUPING 컬럼의 소계를 생성하는데 사용된다. 간단한 문법으로 다양한 소계를 출력할 수 있다.</p><br><h3 id="2-2-rollup-절-문법"><a class="markdownIt-Anchor" href="#2-2-rollup-절-문법"></a> 2-2. ROLLUP 절 문법</h3><ul><li><p>ROLLUP 절은 GROUP BY 절과 함계 사용된다.</p></li><li><p>ROLLUP 할 컬럼은 무조건 SELECT 절에 포함되어 있어야 한다.</p></li><li><p>ROLLUP 절 컬럼의 <strong>지정 순서가 의미 있다</strong>.</p><br></li></ul><h4 id="1-전체-roll-up"><a class="markdownIt-Anchor" href="#1-전체-roll-up"></a> (1) 전체 ROLL UP</h4><ul><li>컬럼의 지정 순서가 <strong>의미 있음</strong></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 전체 ROLL UP</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span>(C1, C2, C3);  <span class="comment">-- 소계를 생성할 컬럼을 지정한다.</span></span><br><span class="line">                       <span class="comment">-- 컬럼 지정 순서에 따라 결과값이 달라질 수 있다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119102055273.png" alt="image-20201119102055273" style="zoom: 80%;"><br><h4 id="2-부분-roll-up"><a class="markdownIt-Anchor" href="#2-부분-roll-up"></a> (2) 부분 ROLL UP</h4><ul><li><p>특정 컬럼만 분리하여 ROLL UP 할 수 있다</p></li><li><p>이런 경우에 분리된 특정 컬럼(C1)으로 시작하는 GROUPING SET 만 해당</p></li><li><p>즉, 전체 ROLL UP과 달리, GROUPING 하지 않는 전체 합계를 구하지 않는다.</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 부분 ROLL UP</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> C1</span><br><span class="line">  <span class="keyword">ROLLUP</span>(C2, C3)       <span class="comment">-- 특정 컬럼을 제외한 부분적인 ROLLUP도 가능하다.</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119102820691.png" alt="image-20201119102820691" style="zoom:80%;"><br><h3 id="2-3-rollup-절-실습"><a class="markdownIt-Anchor" href="#2-3-rollup-절-실습"></a> 2-3. ROLLUP 절 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><h4 id="1-group-by만-사용-roll-up-안함"><a class="markdownIt-Anchor" href="#1-group-by만-사용-roll-up-안함"></a> (1) GROUP BY만 사용 (ROLL UP 안함)</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 GROUP BY 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116101725139-1605753863309.png" alt="image-20201116101725139" style="zoom:80%;"><br><h4 id="2-group-by-전체-roll-up"><a class="markdownIt-Anchor" href="#2-group-by-전체-roll-up"></a> (2) GROUP BY + 전체 ROLL UP</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 ROLL UP 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">ROLLUP</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116094755070-1605753863309.png" alt="image-20201116094755070" style="zoom:80%;"><br><ul><li>전체 컬럼 ROLLUP 결과:<ul><li>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></li><li>BRAND 별 합계 (소계)  --&gt; <em>GROUP BY + ROLL UP 절의 첫번째 컬럼</em></li><li>전체 합계 (총계)</li></ul></li></ul><br><h4 id="3-group-by-부분-roll-up"><a class="markdownIt-Anchor" href="#3-group-by-부분-roll-up"></a> (3) GROUP BY + 부분 ROLL UP</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SEGMENT 컬럼 기준으로 GROUP BY 한다 + BRAND 컬럼 기준으로 부분 ROLL UP 한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">ROLLUP</span> (BRAND)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">SEGMENT</span>, BRAND</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116105618971-1605753863309.png" alt="image-20201116105618971" style="zoom:80%;"><br><ul><li>부분 컬럼 ROLLUP 결과:<ul><li>SEGMENT, BRAND 별 합계 --&gt; <em>GROUP BY (SEGMENT, BRAND) 결과</em></li><li>SEGMENT 별 합계 (소계)  --&gt; <em>ROLLUP 절에서 제외된 특정 컬럼</em></li></ul></li></ul><br><p>**&gt;&gt; **전체 합계 (총계)를 구하지 않는다</p><br><br><h2 id="3-cube-절"><a class="markdownIt-Anchor" href="#3-cube-절"></a> <strong>3. CUBE 절</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>지정된 GROUPING 컬럼의 다차원 소계를 생성하는데 사용된다. 간단한 문법으로 다차원 소계를 출력할 수 있다.</p><br><h3 id="3-2-cube-절-문법"><a class="markdownIt-Anchor" href="#3-2-cube-절-문법"></a> 3-2. CUBE 절 문법</h3><ul><li><p>CUBE절은 GROUP BY 절과 함계 사용된다.</p></li><li><p>CUBE 할 컬럼은 무조건 SELECT 절에 포함되어 있어야 한다.</p></li><li><p>CUBE절 컬럼의 <strong>지정 순서가 의미 없다</strong></p><br></li></ul><h4 id="1-전체-컬럼-cube-지정"><a class="markdownIt-Anchor" href="#1-전체-컬럼-cube-지정"></a> (1) 전체 컬럼 CUBE 지정</h4><ul><li>컬럼의 지정 순서가 <strong>의미 없음</strong></li><li>지정한 그룹의 <strong>모든 경우의 수</strong> 에 대한 소계와 총계를 구한다</li></ul> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">CUBE</span> (C1, C2, C3);</span><br></pre></td></tr></tbody></table></figure><br><p>CUBE 절 내 인자의 개수가 N개이면 2의 N승의 소계가 발생하게 된다.</p><p>CUBE (C1, C2, C3)를 GROUPING SETS으로 표현하면 총 9개의 소계가 발생한다.</p><img src="/images/S-SQL-Aggregate-2/image-20201116140935710-1605753863309.png" alt="image-20201116140935710" style="zoom: 67%;"><br><h4 id="2-부분-컬럼-cube-지정"><a class="markdownIt-Anchor" href="#2-부분-컬럼-cube-지정"></a> (2) 부분 컬럼 CUBE 지정</h4><ul><li><p>특정 컬럼만 분리하여 CUBE 를 지정할 수 있다</p></li><li><p>이런 경우에 분리된 특정 컬럼(C1)으로 시작하는 GROUPING SET 만 해당</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  C1, C2, C3,</span><br><span class="line">  집계함수(C4)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> C1,</span><br><span class="line">  <span class="keyword">CUBE</span> (C2, C3);</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201119105210943.png" alt="image-20201119105210943" style="zoom:80%;"><br><h3 id="3-3-cube-절-실습"><a class="markdownIt-Anchor" href="#3-3-cube-절-실습"></a> 3-3. CUBE 절 실습</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201113092929823-1605753863307.png" alt="image-20201113092929823" style="zoom:80%;"><br><h4 id="1-전체-컬럼-cube-지정-2"><a class="markdownIt-Anchor" href="#1-전체-컬럼-cube-지정-2"></a> (1) 전체 컬럼 CUBE 지정</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND, SEGMENT 컬럼 기준으로 CUBE 한다.</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND, </span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span> SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">CUBE</span> (BRAND, <span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span>;</span><br></pre></td></tr></tbody></table></figure><br><img src="/images/S-SQL-Aggregate-2/image-20201116142724305-1605753863311.png" alt="image-20201116142724305" style="zoom:80%;"><br><ul><li>전체 컬럼 CUBE 결과:<ul><li>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></li><li>BRAND 별 합계 (소계)</li><li>SEGMENT 별 합계 (소계)</li><li>전체 합계 (총계)</li></ul></li></ul><br><p><strong>&gt;&gt;</strong> 인자가 2개 이므로 총 4개의 경우의 수가 합계로 출력된다</p><br><h4 id="2-부분-컬럼-cube-지정-2"><a class="markdownIt-Anchor" href="#2-부분-컬럼-cube-지정-2"></a> (2) 부분 컬럼 CUBE 지정</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BRAND 컬럼 기준으로 GROUP BY 한다 + SEGMENT 컬럼 기준으로 부분 CUBE 한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  BRAND,</span><br><span class="line">  <span class="keyword">SEGMENT</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(QUANTITY)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  SALES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BRAND,</span><br><span class="line">  <span class="keyword">CUBE</span> (<span class="keyword">SEGMENT</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BRAND, <span class="keyword">SEGMENT</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-2/image-20201116144806788-1605753863311.png" alt="image-20201116144806788" style="zoom:80%;"> <br><ul><li><p>부분 컬럼 CUBE 결과:</p><ul><li><p>BRAND + SEGMENT 별 합계 --&gt; <em>GROUP BY (BRAND, SEGMENT) 결과</em></p></li><li><p>BRAND 별 합계 (소계)  --&gt; <em>CUBE 절에서 제외된 특정 컬럼</em></p><br></li></ul><p><strong>&gt;&gt;</strong>  SEGMENT 별 합계 (소계)를 구하지 않는다.</p><p>**&gt;&gt; ** 전체 합계 (총계)를 구하지 않는다.</p></li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      고급 집계 함수 -- GROUPING SET 절, ROLL UP 절, CUBE 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 4. Aggregate Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-4-Aggregate-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 집계 함수 (1) -- 기초 집계 함수</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Aggregate-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Aggregate-1/</id>
    <published>2020-11-12T11:23:06.000Z</published>
    <updated>2020-11-20T06:44:02.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="집계-함수-1-기초-집계-함수"><a class="markdownIt-Anchor" href="#집계-함수-1-기초-집계-함수"></a> 집계 함수 (1) – 기초 집계 함수</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-group-by-%EC%A0%88"><strong>1. GROUP BY 절</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-group-by-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2. GROUP BY 절 문법</a></li><li><a href="#1-3-group-by-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-3. GROUP BY 절 실습</a><ul><li><a href="#1-3-0-%EC%8B%A4%EC%8A%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0">1-3-0. 실습 데이터</a></li><li><a href="#1-3-1-%EB%8B%A8%EC%88%9C-group-by">1-3-1. 단순 GROUP BY</a></li><li><a href="#1-3-2-grouping-group-%EB%B3%84-%EC%9A%94%EC%95%BD">1-3-2. GROUPING + GROUP 별 요약</a></li></ul></li></ul></li><li><a href="#2-having-%EC%A0%88"><strong>2. HAVING 절</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-having-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. HAVING 절 문법</a></li><li><a href="#2-3-having-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. HAVING 절 실습</a><ul><li><a href="#2-3-1-group-by-%ED%95%A9%EA%B3%84-having">2-3-1. GROUP BY  “합계” + HAVING</a></li><li><a href="#2-3-2-group-by-%EC%B9%B4%EC%9A%B4%ED%8A%B8-having">2-3-2. GROUP BY “카운트” + HAVING</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-group-by-절"><a class="markdownIt-Anchor" href="#1-group-by-절"></a> <strong>1. GROUP BY 절</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>GROUP BY 절은 SELECT 문에서 반환된 행을 그룹으로 나눈다. 각 그룹에 대한 합계, 평균, 카운트 등을 계산할 수 있다.</p><br><h3 id="1-2-group-by-절-문법"><a class="markdownIt-Anchor" href="#1-2-group-by-절-문법"></a> 1-2. GROUP BY 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,          <span class="comment">-- GROUPING 기준 컬럼 기재</span></span><br><span class="line">  집계함수(COLUMN2)   <span class="comment">-- 집계함수 사용하여 그룹별 요약값 도출</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> COLUMN_1;  <span class="comment">-- GROUP BY 절 기재, N개의 컬럼을 GROUP BY 하는 경우 ','구분</span></span><br><span class="line">                    <span class="comment">-- GROUP BY 절은 FROM 또는 WHERE절 바로 뒤에 나타나야 함</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-group-by-절-실습"><a class="markdownIt-Anchor" href="#1-3-group-by-절-실습"></a> 1-3. GROUP BY 절 실습</h3><h4 id="1-3-0-실습-데이터"><a class="markdownIt-Anchor" href="#1-3-0-실습-데이터"></a> 1-3-0. 실습 데이터</h4><p><strong>&gt;&gt; “dvdrental” 데이터 --&gt; “payment” 테이블</strong></p><img src="/images/S-SQL-Aggregate-1/image-20201112164755594.png" alt="image-20201112164755594" style="zoom:80%;"><br><h4 id="1-3-1-단순-group-by"><a class="markdownIt-Anchor" href="#1-3-1-단순-group-by"></a> 1-3-1. 단순 GROUP BY</h4><p><strong>&gt;&gt; 특정 컬럼의 UNIQUE VALUE를 추출할 때 쓰이다</strong> (SELECT DISTINCT과 유사)</p><p><strong>[MISSION]</strong> 중복 값이 제거된 CUSTOMER_ID를 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- GROUP BY 사용</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112170115424.png" alt="image-20201112170115424" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- [대체] SELECT DISTINCT 사용</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span>  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> PAYMENT;</span><br></pre></td></tr></tbody></table></figure><br><h4 id="1-3-2-grouping-group-별-요약"><a class="markdownIt-Anchor" href="#1-3-2-grouping-group-별-요약"></a> 1-3-2. GROUPING + GROUP 별 요약</h4><p><strong>1) 합계 구하기</strong></p><p><strong>[MISSION]</strong> 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT_SUM <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112171724011.png" alt="image-20201112171724011" style="zoom:80%;"><br><p><strong>2) 카운트 구하기</strong></p><p><strong>[MISSION 1]</strong> 직원별 처리한 결제 건수 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 직원별 처리한 결제 건수 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STAFF_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(PAYMENT_ID) <span class="keyword">AS</span> N_PAYMENT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STAFF_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112173013752.png" alt="image-20201112173013752"></p><br><p><strong>[MISSION 2]</strong> STAFF 테이블에 있는 직원 이름 (FIRST_NAME, LAST_NAME)도 함께 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- STAFF 테이블에 있는 직원 이름 (FIRST_NAME, LAST_NAME)도 함께 추출</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.STAFF_ID, </span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,</span><br><span class="line">  <span class="keyword">COUNT</span>(B.PAYMENT_ID) <span class="keyword">AS</span> N_PAYMENT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  STAFF A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span> A.STAFF_ID = B.STAFF_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>            <span class="comment">-- [주의]: SELECT 문에서 집계함수를 제외한 모든 컬럼명을 GROUP BY에서 적어야 함 </span></span><br><span class="line">  A.STAFF_ID,</span><br><span class="line">  B.STAFF_ID,</span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112184417882.png" alt="image-20201112184417882" style="zoom:80%;"><br><img src="/images/S-SQL-Aggregate-1/image-20201112185119399.png" alt="image-20201112185119399"><br><br><h2 id="2-having-절"><a class="markdownIt-Anchor" href="#2-having-절"></a> <strong>2. HAVING 절</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>HAVING 절은 GROUP BY 절과 함께 사용하여 GROUP BY의 결과를 특정 조건으로 필터링하는 기능을 한다.</p><br><h3 id="2-2-having-절-문법"><a class="markdownIt-Anchor" href="#2-2-having-절-문법"></a> 2-2. HAVING 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,           <span class="comment">-- GROUPING 기준 컬럼 기재</span></span><br><span class="line">  집계함수(COLUMN_2)   <span class="comment">-- 집계함수 사용하여 그룹별 요약값 도출</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>             <span class="comment">-- GROUP BY 절 기재, N개의 컬럼을 GROUP BY 하는 경우 ','구분</span></span><br><span class="line">  COLUMN_1           <span class="comment">-- GROUP BY 절은 FROM 또는 WHERE절 바로 뒤에 나타나야 함</span></span><br><span class="line"><span class="keyword">HAVING</span> 조건식;</span><br></pre></td></tr></tbody></table></figure><ul><li>HAVING 절은 GROUP BY 절에 의해 생성된 그룹행의 조건을 설정한다</li><li>반면에 WHERE 절은 GROUP BY 절이 적용된기 전에 개별 행의 조건을 설정한다</li></ul><br><h3 id="2-3-having-절-실습"><a class="markdownIt-Anchor" href="#2-3-having-절-실습"></a> 2-3. HAVING 절 실습</h3><h4 id="2-3-1-group-by-합계-having"><a class="markdownIt-Anchor" href="#2-3-1-group-by-합계-having"></a> 2-3-1. GROUP BY  “합계” + HAVING</h4><p><strong>[GROUP BY 결과 출력]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 거래액이 (AMOUNT의 합계) 가장 많은 고객순으로 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Aggregate-1/image-20201112191152327.png" alt="image-20201112191152327" style="zoom:80%;"><br><br><p><strong>[MISSION 1]</strong>  GROUP BY의 결과 값 중에서 AMOUNT_SUM이 200을 초과하는 행 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AMOUNT_SUM &gt; 200</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">SUM</span>(AMOUNT) &gt; <span class="number">200</span>;  <span class="comment">-- [주의]: 여기서 SUM(AMOUNT)의 ALIAS(별칭)을 쓰면 안됨.</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>주의:</strong> HAVING 절 뒤에 집계 데이터의 별칭(ALIAS)을 쓰면 안됨. (The HAVING clause is evaluated before the SELECT - so the server doesn’t yet know about that alias.)</li></ul><p><img src="/images/S-SQL-Aggregate-1/image-20201112192700072.png" alt="image-20201112192700072"></p><br><br><p><strong>[MISSION 2]</strong>  CUSTOMER 테이블에 있는 고객 이메일 주소 (EMAIL)도 함께 추출</p><img src="/images/S-SQL-Aggregate-1/image-20201112194907662.png" alt="image-20201112194907662" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  B.EMAIL,</span><br><span class="line">  <span class="keyword">SUM</span>(A.AMOUNT) <span class="keyword">AS</span> AMOUNT_SUM</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT A, </span><br><span class="line">  CUSTOMER B</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  A.CUSTOMER_ID,</span><br><span class="line">  B.EMAIL</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">SUM</span>(A.AMOUNT) &gt; <span class="number">200</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112195342549.png" alt="image-20201112195342549"></p><br><br><h4 id="2-3-2-group-by-카운트-having"><a class="markdownIt-Anchor" href="#2-3-2-group-by-카운트-having"></a> 2-3-2. GROUP BY “카운트” + HAVING</h4><img src="/images/S-SQL-Aggregate-1/image-20201112200641600.png" alt="image-20201112200641600" style="zoom:80%;"><br><br><p><strong>[GROUP BY 결과 출력]</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 매장(STORE)별 구매 고객 수 추출</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STORE_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) <span class="keyword">AS</span> N_CUSTOMER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STORE_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201143045.png" alt="image-20201112201143045"></p><br><p><strong>[MISSION]</strong>  구매 고객 수가 300 이상인 매장만 출력</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- N_CUSTOMER &gt; 300</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  STORE_ID,</span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) <span class="keyword">AS</span> N_CUSTOMER</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  STORE_ID</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  <span class="keyword">COUNT</span>(CUSTOMER_ID) &gt; <span class="number">300</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201350582.png" alt="image-20201112201350582"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 해당 매장 정보 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">STORE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  STORE_ID = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Aggregate-1/image-20201112201557040.png" alt="image-20201112201557040"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      기초 집계 함수 -- GROUP BY 절, 합계 SUM(), 카운트 COUNT(), HAVING 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 4. Aggregate Function" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-4-Aggregate-Function/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Aggregate" scheme="https://hyemin-kim.github.io/tags/Aggregate/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 조인 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-2/</id>
    <published>2020-11-12T06:21:33.000Z</published>
    <updated>2020-11-12T07:03:13.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="조인-2"><a class="markdownIt-Anchor" href="#조인-2"></a> <strong>조인 (2)</strong></h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-self-%EC%A1%B0%EC%9D%B8"><strong>1. SELF 조인</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-self-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">1-2. SELF 조인 문법</a></li><li><a href="#1-3-self-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">1-3. SELF 조인 실습</a><ul><li><a href="#1-3-1-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">1-3-1. 실습 준비</a></li><li><a href="#1-3-2-self-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">1-3-2. SELF 조인 실습</a></li></ul></li></ul></li><li><a href="#2-full-outer-%EC%A1%B0%EC%9D%B8"><strong>2. FULL OUTER 조인</strong></a><ul><li><a href="#2-1-%EA%B0%9C%EB%85%90">2-1. 개념</a></li><li><a href="#2-2-full-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">2-2. FULL OUTER 조인 문법</a></li><li><a href="#2-3-full-outer-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">2-3. FULL OUTER 조인 실습</a><ul><li><a href="#2-3-1-basket-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%8B%A4%EC%8A%B5">2-3-1. BASKET 데이터를 활용한 간단한 실습</a></li><li><a href="#2-3-2-%EC%B6%94%EA%B0%80-%EC%8B%A4%EC%8A%B5">2-3-2. 추가 실습</a></li></ul></li></ul></li><li><a href="#3-cross-%EC%A1%B0%EC%9D%B8"><strong>3. CROSS 조인</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-cross-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">3-2. CROSS 조인 문법</a></li><li><a href="#3-3-cross-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3. CROSS 조인 실습</a><ul><li><a href="#3-3-0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">3-3-0. 실습 준비</a></li><li><a href="#3-3-1-cross-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3-1. CROSS 조인 실습</a></li></ul></li></ul></li><li><a href="#4-natural-%EC%A1%B0%EC%9D%B8"><strong>4. NATURAL 조인</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-natural-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">4-2. NATURAL 조인 문법</a></li><li><a href="#4-3-natural-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3. NATURAL 조인 실습</a><ul><li><a href="#4-3-0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84">4-3-0. 실습 준비</a></li><li><a href="#4-3-1-natural-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3-1. NATURAL 조인 실습</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-self-조인"><a class="markdownIt-Anchor" href="#1-self-조인"></a> <strong>1. SELF 조인</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>SELF 조인은 같은 테이블 끼리 특정 컬럼을 기준으로 매칭 되는 컬럼을 출력하는 조인이다.</p><p>즉, 같은 테이블의 데이터를 각각의 집합으로 분류한 후  조인한다.</p><br><h3 id="1-2-self-조인-문법"><a class="markdownIt-Anchor" href="#1-2-self-조인-문법"></a> 1-2. SELF 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_1, A.COL_2, ...,</span><br><span class="line">  B.COL_1, B.COL_3, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  TABLE_NAME <span class="keyword">AS</span> B    <span class="comment">-- THE SAME TABLE WITH THE FORMER</span></span><br><span class="line"><span class="keyword">ON</span> A.COL_T = B.COL_T</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-self-조인-실습"><a class="markdownIt-Anchor" href="#1-3-self-조인-실습"></a> 1-3. SELF 조인 실습</h3><h4 id="1-3-1-실습-준비"><a class="markdownIt-Anchor" href="#1-3-1-실습-준비"></a> 1-3-1. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEE</span><br><span class="line">(</span><br><span class="line">    EMPLOYEE_ID <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    MANAGER_ID <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (MANAGER_ID)               <span class="comment">-- MANAGER_ID는 같은 테이블 (EMPLOYEE)의 EMPLOYEE_ID를 참조함</span></span><br><span class="line">    <span class="keyword">REFERENCES</span> EMPLOYEE (EMPLOYEE_ID)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEE (</span><br><span class="line">    EMPLOTEE_ID,</span><br><span class="line">    FIRST_NAME,</span><br><span class="line">    LAST_NAME,</span><br><span class="line">    MANAGER_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Windy'</span>, <span class="string">'Hays'</span>, <span class="literal">NULL</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Ava'</span>, <span class="string">'Christensen'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Hassan'</span>, <span class="string">'Conner'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Anna'</span>, <span class="string">'Reeves'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Sau'</span>, <span class="string">'Norman'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">'Kelsie'</span>, <span class="string">'Hays'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">'Tory'</span>, <span class="string">'Goff'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">'Salley'</span>, <span class="string">'Lester'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEE</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111155046250.png" alt="image-20201111155046250" style="zoom:80%;"><br><p><strong>&gt;&gt; 조직도</strong></p><img src="/images/S-SQL-Join-2/image-20201111155421168.png" alt="image-20201111155421168" style="zoom: 67%;"><br><h4 id="1-3-2-self-조인-실습"><a class="markdownIt-Anchor" href="#1-3-2-self-조인-실습"></a> 1-3-2. SELF 조인 실습</h4><p><strong>&gt;&gt; SELF INNER 조인 실습</strong></p><p><strong>MISSION:</strong></p><ul><li>각 직원의 상위 관리자를 출력</li><li>최고관리자인 'Windy Hays’는 결과 집합에 포함시키지 않음.</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  E.FIRST_NAME || <span class="string">' '</span> || E.LAST_NAME <span class="keyword">AS</span> EMPLOYEE,</span><br><span class="line">  M.FIRST_NAME || <span class="string">' '</span> || M.LAST_NAME <span class="keyword">AS</span> MANAGER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE E  <span class="comment">-- EMPLOYEE 중심</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  EMPLOYEE M  <span class="comment">-- MANAGER 중심</span></span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  E.MANAGER_ID = M.EMPLOYEE_ID   <span class="comment">-- 매칭 시 헷갈리지 않도록 주의</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  MANAGER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111162640186.png" alt="image-20201111162640186" style="zoom:80%;"><br><p><strong>&gt;&gt; SELF LEFT OUTER 조인 실습</strong></p><p><strong>MISSION:</strong></p><ul><li>각 직원의 상위 관리자를 출력하면서 모든 직원을 출력</li><li>최고관리자인 'Windy Hays’가 결과 집합에 포함시킴</li></ul><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.FIRST_NAME || <span class="string">' '</span> || E.LAST_NAME <span class="keyword">AS</span> EMPLOYEE,</span><br><span class="line">  M.FIRST_NAME || <span class="string">' '</span> || M.LAST_NAME <span class="keyword">AS</span> MANAGER</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEE E</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  EMPLOYEE M</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  E.MANAGER_ID = M.EMPLOYEE_ID</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  MANAGER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111163954892.png" alt="image-20201111163954892" style="zoom:80%;"><br><p><strong>&gt;&gt; 부정형 조건 실습</strong></p><p><strong>MISSION:</strong> FILM 테이블에서 영화의 상영시간이 동일한 서로 다른 영화의 리스트를 출력</p><table><thead><tr><th style="text-align:center">film</th></tr></thead><tbody><tr><td style="text-align:center">*film_id <br>title <br>discription <br>release_year <br>language_id <br>rentall_duration <br>rental_rate <br>length <br>replacement_cost <br>rating <br>last_update <br>special_features <br>fulltext</td></tr></tbody></table><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.TITLE,</span><br><span class="line">  B.TITLE,</span><br><span class="line">  A.LENGTH</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  FILM B</span><br><span class="line"><span class="keyword">ON</span> A.FILM_ID != B.FILM_ID <span class="keyword">AND</span></span><br><span class="line">   A.LENGTH = B.LENGTH</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111183444264.png" alt="image-20201111183444264" style="zoom:80%;"><br><br><h2 id="2-full-outer-조인"><a class="markdownIt-Anchor" href="#2-full-outer-조인"></a> <strong>2. FULL OUTER 조인</strong></h2><h3 id="2-1-개념"><a class="markdownIt-Anchor" href="#2-1-개념"></a> 2-1. 개념</h3><p>FULL OUTER 조인은 INNER, LEFT OUTER, RIGHT OUTER 조인 집합을 모두 출력하는 조인 방식이다.</p><p>즉, 두 테이블간 출력가능한 모든 데이터를 포함한 집합을 출력한다.</p><img src="/images/S-SQL-Join-2/image-20201111192014271.png" alt="image-20201111192014271" style="zoom:50%;"><br><h3 id="2-2-full-outer-조인-문법"><a class="markdownIt-Anchor" href="#2-2-full-outer-조인-문법"></a> 2-2. FULL OUTER 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  </span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-full-outer-조인-실습"><a class="markdownIt-Anchor" href="#2-3-full-outer-조인-실습"></a> 2-3. FULL OUTER 조인 실습</h3><h4 id="2-3-1-basket-데이터를-활용한-간단한-실습"><a class="markdownIt-Anchor" href="#2-3-1-basket-데이터를-활용한-간단한-실습"></a> 2-3-1. BASKET 데이터를 활용한 간단한 실습</h4><img src="/images/S-SQL-Join-2/image-20201111141327969.png" alt="image-20201111141327969" style="zoom: 67%;"><br><p><strong>&gt;&gt; FULL OUTER JOIN</strong></p><p><strong>(1) LEFT ONLY + LEFT&amp;RIGHT + RIGHT ONLY</strong></p><img src="/images/S-SQL-Join-2/image-20201111193914893.png" alt="image-20201111193914893" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111193119708.png" alt="image-20201111193119708" style="zoom:80%;"><br><p><strong>(2) ONLY OUTER (LEFT ONLY + RIGHT ONLY)</strong></p><img src="/images/S-SQL-Join-2/image-20201111194125768.png" alt="image-20201111194125768" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT </span><br><span class="line"><span class="keyword">WHERE</span> A.ID <span class="keyword">IS</span> <span class="literal">NULL</span>    <span class="comment">-- LEFT OUTER</span></span><br><span class="line">   <span class="keyword">OR</span> B.ID <span class="keyword">IS</span> <span class="literal">NULL</span>    <span class="comment">-- RIGHT OUTER</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111194613680.png" alt="image-20201111194613680" style="zoom:80%;"><br><h4 id="2-3-2-추가-실습"><a class="markdownIt-Anchor" href="#2-3-2-추가-실습"></a> 2-3-2. 추가 실습</h4><p><strong>&gt;&gt; 실습 준비</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> DEPARTMENTS    <span class="comment">-- 종재하지 않으면 생성</span></span><br><span class="line">(</span><br><span class="line">  DEPARTMENT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  DEPARTMENT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> EMPLOYEES</span><br><span class="line">(</span><br><span class="line">  EMPLOYEE_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  EMPLOYEE_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</span><br><span class="line">  DEPARTMENT_ID <span class="built_in">INTEGER</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPARTMENTS(DEPARTMENT_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Sales'</span>),</span><br><span class="line">(<span class="string">'Marketing'</span>),</span><br><span class="line">(<span class="string">'HR'</span>),</span><br><span class="line">(<span class="string">'IT'</span>),</span><br><span class="line">(<span class="string">'Production'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES(</span><br><span class="line">  EMPLOYEE_NAME,</span><br><span class="line">  DEPARTMENT_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'Bette Nicholson'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">'Christian Gable'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">'Joe Swank'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">'Fred Costner'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="string">'Sandra Kilmer'</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="string">'Julia Mcqueen'</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPARTMENTS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111200237831.png" alt="image-20201111200237831" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111200326518.png" alt="image-20201111200326518" style="zoom:80%;"><br><p><strong>&gt;&gt; FULL OUTER JOIN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111201327463.png" alt="image-20201111201327463" style="zoom:80%;"><br><p><strong>&gt;&gt; RIGHT OUTER ONLY 실습</strong></p><img src="/images/S-SQL-Join-2/image-20201111202627226.png" alt="image-20201111202627226" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 소속한 직원이 없는 부서만 출력</span></span><br><span class="line"><span class="comment">-- FULL OUTER + RIGHT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> E.EMPLOYEE_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201111202501663.png" alt="image-20201111202501663"><br><p><strong>[P.S.]</strong> FULL OUTER JOIN+ RIGHT ONLY = RIGHT OUTER JOIN+ RIGHT ONLY</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RIGHT OUTER + RIGHT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> E.EMPLOYEE_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111202503508.png" alt="image-20201111202503508"></p><br><p><strong>&gt;&gt; LEFT OUTER ONLY 실습</strong></p><img src="/images/S-SQL-Join-2/image-20201111202802778.png" alt="image-20201111202802778" style="zoom: 50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 소속한 부서가 없는 직원만 출력</span></span><br><span class="line"><span class="comment">-- FULL OUTER + LEFT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> D.DEPARTMENT_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111203302334.png" alt="image-20201111203302334"></p><br><p><strong>[P.S.]</strong> FULL OUTER JOIN+ LEFT ONLY = LEFT OUTER JOIN+ LEFT ONLY</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT OUTER + LEFT ONLY</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  E.EMPLOYEE_NAME,</span><br><span class="line">  D.DEPARTMENT_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  EMPLOYEES E</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  DEPARTMENTS D</span><br><span class="line"><span class="keyword">ON</span> E.DEPARTMENT_ID = D.DEPARTMENT_ID</span><br><span class="line"><span class="keyword">WHERE</span> D.DEPARTMENT_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201111203302334.png" alt="image-20201111203302334"></p><br><br><h2 id="3-cross-조인"><a class="markdownIt-Anchor" href="#3-cross-조인"></a> <strong>3. CROSS 조인</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>두 개의 테이블의 CATESIAN PRODUCT 연산의 결과를 출력한다. 데이터 복제에 많이 쓰이는 기법이다.</p><ul><li><p>CATESIAN  PRODUCT:</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cartesian_Product_qtl1.svg/1200px-Cartesian_Product_qtl1.svg.png" alt="CARTESIAN PRODUCT" style="zoom: 25%;"></li></ul><br><h3 id="3-2-cross-조인-문법"><a class="markdownIt-Anchor" href="#3-2-cross-조인-문법"></a> 3-2. CROSS 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CROSS_TABLE_1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span></span><br><span class="line">  CROSS_TABLE_2</span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-cross-조인-실습"><a class="markdownIt-Anchor" href="#3-3-cross-조인-실습"></a> 3-3. CROSS 조인 실습</h3><h4 id="3-3-0-실습-준비"><a class="markdownIt-Anchor" href="#3-3-0-실습-준비"></a> 3-3-0. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CROSS_T1</span><br><span class="line">(</span><br><span class="line">  LABEL <span class="built_in">CHAR</span>(<span class="number">1</span>) PRIMARY <span class="keyword">KEY</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CROSS_T2</span><br><span class="line">(</span><br><span class="line">  SCORE <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CROSS_T1 (LABEL)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'A'</span>),</span><br><span class="line">(<span class="string">'B'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CROSS_T2 (SCORE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CROSS_T1</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112090311812.png" alt="image-20201112090311812"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CROSS_T2</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112090405111.png" alt="image-20201112090405111"></p><br><h4 id="3-3-1-cross-조인-실습"><a class="markdownIt-Anchor" href="#3-3-1-cross-조인-실습"></a> 3-3-1. CROSS 조인 실습</h4><img src="/images/S-SQL-Join-2/image-20201112091802546.png" alt="image-20201112091802546" style="zoom: 67%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 방법 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CROSS_T1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span></span><br><span class="line">  CROSS_T2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  LABEL</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112091538328.png" alt="image-20201112091538328" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 방법 2</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CROSS_T1, CROSS_T2   <span class="comment">-- INNER JOIN을 표현하는 다른 방법 (조건 없는 INNER JOIN)</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  LABEL</span><br></pre></td></tr></tbody></table></figure><br><ul><li><p>위 두 개의 SQL 문 결과 집합이 동일하므로 같은 SQL문이라고 할 수 있다. SQL문의 목적은 집합을 출력하는 것이 때문이다.</p><p>즉, 추출한 정보가 같다면 SQL문 자체는 다르더라도 동일한 SQL 문이다.</p></li></ul><br><br><h2 id="4-natural-조인"><a class="markdownIt-Anchor" href="#4-natural-조인"></a> <strong>4. NATURAL 조인</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>두개의 테이블에서 같은 이름을 가진 컬럼 간의 INNER 조인 집합 결과를 출력한다. SQL문 자체가 간소해지는 방법이다.</p><br><h3 id="4-2-natural-조인-문법"><a class="markdownIt-Anchor" href="#4-2-natural-조인-문법"></a> 4-2. NATURAL 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span>    <span class="comment">-- 자동으로 두 테이블이 동일하게 가지고 있는 컬럼을 기준으로 INNER 조인한다</span></span><br><span class="line">  TABLE_B</span><br></pre></td></tr></tbody></table></figure><ul><li><p>NATURAL 조인은 INNER 조인의 또 다른 SQL 작성 방식이다.</p><p>즉, 조인 컬럼을 명시하지 않아도 된다.</p></li></ul><br><h3 id="4-3-natural-조인-실습"><a class="markdownIt-Anchor" href="#4-3-natural-조인-실습"></a> 4-3. NATURAL 조인 실습</h3><h4 id="4-3-0-실습-준비"><a class="markdownIt-Anchor" href="#4-3-0-실습-준비"></a> 4-3-0. 실습 준비</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CATEGORIES</span><br><span class="line">(</span><br><span class="line">  CATEGORY_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  CATEGORY_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCTS</span><br><span class="line">(</span><br><span class="line">  PRODUCT_ID <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  PRODUCT_NAME <span class="built_in">VARCHAR</span> (<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  CATEGORY_ID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (CATEGORY_ID)</span><br><span class="line">  <span class="keyword">REFERENCES</span> CATEGORIES (CATEGORY_ID)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CATEGORIES</span><br><span class="line">(CATEGORY_NAME)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'Smart Phone'</span>),</span><br><span class="line">  (<span class="string">'Laptop'</span>),</span><br><span class="line">  (<span class="string">'Tablet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PRODUCTS</span><br><span class="line">(PRODUCT_NAME, CATEGORY_ID)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'iPhone'</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'Samsung Galaxy'</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="string">'HP Elite'</span>, <span class="number">2</span>),</span><br><span class="line">  (<span class="string">'Lenovo Thinkpad'</span>, <span class="number">2</span>),</span><br><span class="line">  (<span class="string">'iPad'</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">'Kindle Fire'</span>, <span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CATEGORIES;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112113447690.png" alt="image-20201112113447690" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCTS;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112113548016.png" alt="image-20201112113548016" style="zoom:80%;"><br><h4 id="4-3-1-natural-조인-실습"><a class="markdownIt-Anchor" href="#4-3-1-natural-조인-실습"></a> 4-3-1. NATURAL 조인 실습</h4><p><strong>(1) 예제 데이터를 활용한 간단한 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PRODUCTS A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span></span><br><span class="line">  CATEGORIES B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112114726576.png" alt="image-20201112114726576" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 대체 방법 1</span></span><br><span class="line"><span class="comment">-- INNER JOIN으로 실현</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  P.CATEGORY_ID,  P.PRODUCT_ID,</span><br><span class="line">  P.PRODUCT_NAME, C.CATEGORY_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCTS P</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  CATEGORIES C</span><br><span class="line"><span class="keyword">ON</span> P.CATEGORY_ID = C.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 대체 방법 2  (INNER JOIN 대체 명령어)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  P.CATEGORY_ID,  P.PRODUCT_ID,</span><br><span class="line">  P.PRODUCT_NAME, C.CATEGORY_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PRODUCTS P,</span><br><span class="line">  CATEGORIES C</span><br><span class="line"><span class="keyword">WHERE</span> P.CATEGORY_ID = C.CATEGORY_ID;</span><br></pre></td></tr></tbody></table></figure><br><img src="/images/S-SQL-Join-2/image-20201112114726576.png" alt="image-20201112114726576" style="zoom:80%;"><br><p><strong>(2) “dvdrental” 데이터를 활용한 실습</strong></p><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-2/image-20201112135034156.png" alt="image-20201112135034156" style="zoom:80%;"><br><p><strong>&gt;&gt; 실습</strong></p><p>두 테이블이 모두 “country_id”  컬럼이 존재한다.</p><p>이 두 테이블에 대해서 NATURAL JOIN을 진행해보면:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span></span><br><span class="line">  COUNTRY B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-2/image-20201112135747118.png" alt="image-20201112135747118" style="zoom:80%;"><br><p>기대와 다르게 출력 결과가 0건이다.</p><br><p>그 이유는:</p><p>두 테이블 간에 동일한 이름으로 존재하는 컬럼이 COUNTRY_ID 외에 LAST_UPDATE 도 존재한다.  이런 경우 NATURAL JOIN 시에는 <strong>LAST_UPDATE 컬럼까지 INNER조인에 성공해야만</strong> 결과값이 나온다.  하지만 두 테이블의 LAST_UPDATE 값이 서로 다르므로 위 SQL문을 실행 후 조건에 만족하는 결과가 없다.</p><br><p>따라서 NATURAL 조인이 아닌 INNER 조인을 이용해야한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  COUNTRY B</span><br><span class="line"><span class="keyword">ON</span> A.COUNTRY_ID = B.COUNTRY_ID;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-2/image-20201112142508575.png" alt="image-20201112142508575"></p><p>INNER 조인으로 ON절에 조인 컬럼을 명시하였고, 의도한 대로 데이터가 출력되었다.</p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN 대체 명령어</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CITY A,</span><br><span class="line">  COUNTRY B</span><br><span class="line"><span class="keyword">WHERE</span> A.COUNTRY_ID = B.COUNTRY_ID;</span><br></pre></td></tr></tbody></table></figure><br><p>이러한 이유로 NATURAL 조인은 실무에 잘 사용되지 않는다.</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SELF 조인, FULL OUTER 조인, CROSS 조인, NATURAL 조인
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 3. Join" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-3-Join/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 조인 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/12/S-SQL-Join-1/</id>
    <published>2020-11-12T05:34:10.000Z</published>
    <updated>2020-11-12T06:20:54.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="조인-1"><a class="markdownIt-Anchor" href="#조인-1"></a> 조인 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EC%A1%B0%EC%9D%B8%EC%9D%B4%EB%9E%80"><strong>1. 조인이란?</strong></a><ul><li><a href="#1-1-%EA%B0%9C%EB%85%90">1-1. 개념</a></li><li><a href="#1-2-%EC%A1%B0%EC%9D%B8%EC%9D%98-%EC%A2%85%EB%A5%98">1-2. 조인의 종류</a></li></ul></li><li><a href="#2-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84"><strong>2. 실습 준비</strong></a></li><li><a href="#3-inner-%EC%A1%B0%EC%9D%B8"><strong>3. INNER 조인</strong></a><ul><li><a href="#3-1-%EA%B0%9C%EB%85%90">3-1. 개념</a></li><li><a href="#3-2-inner-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">3-2. INNER 조인 문법</a></li><li><a href="#3-3-inner-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">3-3. INNER 조인 실습</a><ul><li><a href="#3-3-1-basket-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%8B%A4%EC%8A%B5">3-3-1. BASKET 데이터를 활용한 간단한 실습</a></li><li><a href="#3-3-2-dvdrental-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%8B%A4%EC%8A%B5">3-3-2. dvdrental 데이터를 활용한 실습</a><ul><li><a href="#1-2%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A1%B0%EC%9D%B8">(1) 2개의 테이블 조인</a></li><li><a href="#2-3%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A1%B0%EC%9D%B8">(2)  3개의 테이블 조인</a></li></ul></li></ul></li></ul></li><li><a href="#4-outer-%EC%A1%B0%EC%9D%B8"><strong>4. OUTER 조인</strong></a><ul><li><a href="#4-1-%EA%B0%9C%EB%85%90">4-1. 개념</a></li><li><a href="#4-2-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">4-2. OUTER 조인 문법</a><ul><li><a href="#1-left-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">(1) LEFT OUTER 조인 문법</a></li><li><a href="#2-right-outer-%EC%A1%B0%EC%9D%B8-%EB%AC%B8%EB%B2%95">(2) RIGHT OUTER 조인 문법</a></li></ul></li><li><a href="#4-3-outer-%EC%A1%B0%EC%9D%B8-%EC%8B%A4%EC%8A%B5">4-3. OUTER 조인 실습</a></li></ul></li></ul><p></p><br><h2 id="1-조인이란"><a class="markdownIt-Anchor" href="#1-조인이란"></a> <strong>1. 조인이란?</strong></h2><h3 id="1-1-개념"><a class="markdownIt-Anchor" href="#1-1-개념"></a> 1-1. 개념</h3><p>조인은 2개 이상의 테이블에 있는 정보 중 사용자가 필요한 집합에 맞게 가상의 테이블처럼 만들어서 결과를 보여주는 것이다.</p><br><h3 id="1-2-조인의-종류"><a class="markdownIt-Anchor" href="#1-2-조인의-종류"></a> 1-2. 조인의 종류</h3><table><thead><tr><th style="text-align:left">종류</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">INNER 조인</td><td style="text-align:left">특정 컬럼을 기준으로 정확히 매칭된 집합을 출력한다</td></tr><tr><td style="text-align:left">OUTER 조인</td><td style="text-align:left">특정 컬럼을 기준으로 매칭된 집합을 출력하지만 한쪽의 집합은 모두 출력하고 다른 한쪽의 집합은 매칭되는 컬럼의 값 만을 출력한다<br> (왼쪽 집합을 기준으로 하면 LEFT OUTER, 오른쪽 집합을 기준으로 하면 RIGHT OUTER)</td></tr><tr><td style="text-align:left">SELT 조인</td><td style="text-align:left">동일한 테이블 끼리의 특정 컬럼을 기준으로 매칭되는 집합을 출력한다</td></tr><tr><td style="text-align:left">FULL OUTER 조인</td><td style="text-align:left">INNER, LEFT OUTER, RIGHT OUTER 조인 집합을 모두 출력한다</td></tr><tr><td style="text-align:left">CROSS 조인</td><td style="text-align:left">Cartesian Product이라고도 하며 조인되는 두 테이블에서 곱집합을 반환한다</td></tr></tbody></table><br><br><h2 id="2-실습-준비"><a class="markdownIt-Anchor" href="#2-실습-준비"></a> <strong>2. 실습 준비</strong></h2><p><strong>실습을 위한 데이터 생성</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASKET_A</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FRUIT <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASKET_B</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  FRUIT <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASKET_A</span><br><span class="line">  (<span class="keyword">ID</span>, FRUIT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'Apple'</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'Orange'</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'Banana'</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'Cucumber'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT, UPDATE, DELETE로 데이터의 삽입 혹은 갱신을 실시한 후에 꼭 COMMIT/ROLLBACK을 실현해야함.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASKET_B</span><br><span class="line">  (<span class="keyword">ID</span>, FRUIT)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'Orange'</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'Apple'</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'Watermelon'</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'Pear'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BASKET_A;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111095120367.png" alt="image-20201111095120367" style="zoom:80%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BASKET_B;</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111095201056.png" alt="image-20201111095201056" style="zoom:80%;"><br><br><h2 id="3-inner-조인"><a class="markdownIt-Anchor" href="#3-inner-조인"></a> <strong>3. INNER 조인</strong></h2><h3 id="3-1-개념"><a class="markdownIt-Anchor" href="#3-1-개념"></a> 3-1. 개념</h3><p>INNER 조인은 대표적인 조인의 종유이다. 이는 특정 컬럼을 기준으로 정확히 매칭된 집합을 출력한다.</p><img src="/images/S-SQL-Join-1/image-20201111110318071.png" alt="image-20201111110318071" style="zoom:50%;"><br><h3 id="3-2-inner-조인-문법"><a class="markdownIt-Anchor" href="#3-2-inner-조인-문법"></a> 3-2. INNER 조인 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B         <span class="comment">-- 조인의 기준이 되는 컬럼을 지정</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-inner-조인-실습"><a class="markdownIt-Anchor" href="#3-3-inner-조인-실습"></a> 3-3. INNER 조인 실습</h3><h4 id="3-3-1-basket-데이터를-활용한-간단한-실습"><a class="markdownIt-Anchor" href="#3-3-1-basket-데이터를-활용한-간단한-실습"></a> 3-3-1. BASKET 데이터를 활용한 간단한 실습</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>                  <span class="comment">-- 지정한 컬럼을 조회한다</span></span><br><span class="line">  A.ID ID_A,</span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span>                    <span class="comment">-- BASKET_A 테이블에과 BASKET_B 테이블을</span></span><br><span class="line">  BASKET_A A            <span class="comment">-- FRUIT 컬럼 기준으로 조인한다.</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111111333754.png" alt="image-20201111111333754"></p><br><h4 id="3-3-2-dvdrental-데이터를-활용한-실습"><a class="markdownIt-Anchor" href="#3-3-2-dvdrental-데이터를-활용한-실습"></a> 3-3-2. dvdrental 데이터를 활용한 실습</h4><h5 id="1-2개의-테이블-조인"><a class="markdownIt-Anchor" href="#1-2개의-테이블-조인"></a> (1) 2개의 테이블 조인</h5><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-1/image-20201111112825354.png" alt="image-20201111112825354" style="zoom:80%;"><ul><li><p>한 명의 고객은 여러 건의 결제내역을 가질 수 있다</p></li><li><p>하나의 결제는 반드시 고객을 가져야 한다</p><br></li></ul><p><strong>&gt;&gt; 실습</strong></p><p><strong>MISSION 1:</strong> CUSTOMER 테이블에 있는 고객 정보와 PAYMENT 테이블에 있는 결제정보를 종합하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111114614830.png" alt="image-20201111114614830"></p><br><p><strong>MISSION 2:</strong>  위에서 추출된 데이터에서 CUSTOMER_ID가 2인 행만 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  PAYMENT B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  A.CUSTOMER_ID = <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111125419551.png" alt="image-20201111125419551"></p><br><h5 id="2-3개의-테이블-조인"><a class="markdownIt-Anchor" href="#2-3개의-테이블-조인"></a> (2)  3개의 테이블 조인</h5><p><strong>&gt;&gt; 테이블 구성</strong></p><img src="/images/S-SQL-Join-1/image-20201111130320223.png" alt="image-20201111130320223" style="zoom:80%;"><ul><li>한 명의 직원은 여러 건의 결제내역을 처리한다</li><li>하나의 결제는 반드시 처리한 직원이 존재한다</li><li>한 명의 고객은 여러 건의 결제내역을 가질 수 있다</li><li>하나의 결제는 반드시 고객을 가져야 한다</li></ul><br><p><strong>&gt;&gt; 실습</strong></p><p><strong>MISSION:</strong> 결제를 진행한 고객 정보(CUSTOMER), 해당 고객의 결제내역(PAYMENT), 그리고 해당 결제를 처리하는 직원정보(STAFF)를 종합하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.CUSTOMER_ID, A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,   A.EMAIL,</span><br><span class="line">  B.AMOUNT,      B.PAYMENT_DATE,</span><br><span class="line">  C.FIRST_NAME <span class="keyword">AS</span> S_FIRST_NAME,</span><br><span class="line">  C.LAST_NAME <span class="keyword">AS</span> S_LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> PAYMENT B</span><br><span class="line">        <span class="keyword">ON</span> A.CUSTOMER_ID = B.CUSTOMER_ID</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> STAFF C</span><br><span class="line">        <span class="keyword">ON</span> B.STAFF_ID = C.STAFF_ID</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Join-1/image-20201111132315338.png" alt="image-20201111132315338"></p><br><br><h2 id="4-outer-조인"><a class="markdownIt-Anchor" href="#4-outer-조인"></a> <strong>4. OUTER 조인</strong></h2><h3 id="4-1-개념"><a class="markdownIt-Anchor" href="#4-1-개념"></a> 4-1. 개념</h3><p>특정 집합을 기준으로 매칭된 집합을 출력하지만, 한쪽의 집합은 모두 출력하고 다른 한쪽의 집합은 매칭되는 컬럼의 값 만을 출력한다.</p><img src="/images/S-SQL-Join-1/image-20201111133926396.png" alt="image-20201111133926396" style="zoom:50%;"><img src="/images/S-SQL-Join-1/image-20201111134145555.png" alt="image-20201111134145555" style="zoom:50%;"><br><h3 id="4-2-outer-조인-문법"><a class="markdownIt-Anchor" href="#4-2-outer-조인-문법"></a> 4-2. OUTER 조인 문법</h3><h4 id="1-left-outer-조인-문법"><a class="markdownIt-Anchor" href="#1-left-outer-조인-문법"></a> (1) LEFT OUTER 조인 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT OUTER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  <span class="comment">-- 'LEFT JOIN'만 사용해도 좋다</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-right-outer-조인-문법"><a class="markdownIt-Anchor" href="#2-right-outer-조인-문법"></a> (2) RIGHT OUTER 조인 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RIGHT OUTER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.COL_A1, A.COL_A2, ...,</span><br><span class="line">  B.COL_B1, B.COL_B2, ...</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>  <span class="comment">-- 'RIGHT JOIN'만 사용해도 좋다</span></span><br><span class="line">  TABLE_B B</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">  A.COL_Z_A = B.COL_Z_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-3-outer-조인-실습"><a class="markdownIt-Anchor" href="#4-3-outer-조인-실습"></a> 4-3. OUTER 조인 실습</h3><img src="/images/S-SQL-Join-1/image-20201111141327969.png" alt="image-20201111141327969" style="zoom: 70%;"><br><p><strong>&gt;&gt; LEFT OUTER JOIN</strong></p><p><strong>(1) LEFT ONLY + LEFT&amp;RIGHT</strong></p><img src="/images/S-SQL-Join-1/image-20201111144634389.png" alt="image-20201111144634389" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID    ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID    ID_B, </span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111141611545.png" alt="image-20201111141611545" style="zoom:80%;"><br><p><strong>(2) LEFT ONLY</strong></p><img src="/images/S-SQL-Join-1/image-20201111144750586.png" alt="image-20201111144750586" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID    ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID    ID_B, </span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  A.FRUIT = B.FRUIT  </span><br><span class="line"><span class="keyword">WHERE</span> B.ID <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111145103252.png" alt="image-20201111145103252" style="zoom:80%;"><br><p><strong>&gt;&gt; RIGHT OUTER JOIN</strong></p><p><strong>(1) RIGHT ONLY + LEFT&amp;RIGHT</strong></p><img src="/images/S-SQL-Join-1/image-20201111151323862.png" alt="image-20201111151323862" style="zoom:50%;"><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> A.FRUIT = B.FRUIT</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111151622024.png" alt="image-20201111151622024" style="zoom:80%;"><br><p><strong>(2) RIGHT ONLY</strong></p><img src="/images/S-SQL-Join-1/image-20201111151416027.png" alt="image-20201111151416027" style="zoom:50%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.ID ID_A, </span><br><span class="line">  A.FRUIT FRUIT_A,</span><br><span class="line">  B.ID ID_B,</span><br><span class="line">  B.FRUIT FRUIT_B</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  BASKET_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">  BASKET_B B</span><br><span class="line"><span class="keyword">ON</span> A.FRUIT = B.FRUIT</span><br><span class="line"><span class="keyword">WHERE</span> A.ID <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Join-1/image-20201111151747625.png" alt="image-20201111151747625" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      INNER 조인, OUTER 조인
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 3. Join" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-3-Join/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Join" scheme="https://hyemin-kim.github.io/tags/Join/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 SQL &gt;&gt; 데이터 조회 및 필터링</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/E-SQL-selecting-and-filtering/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/E-SQL-selecting-and-filtering/</id>
    <published>2020-11-10T12:01:42.000Z</published>
    <updated>2020-11-19T06:50:43.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="실습-데이터-조회-및-필터링"><a class="markdownIt-Anchor" href="#실습-데이터-조회-및-필터링"></a> 【실습】 데이터 조회 및 필터링</h1><br><h3 id="1-payment-테이블에서-단일-거래의-amount의-액수가-가장-많은-고객들의-customer_id를-추출하라-단-customer_id의-값은-유일해야-한다"><a class="markdownIt-Anchor" href="#1-payment-테이블에서-단일-거래의-amount의-액수가-가장-많은-고객들의-customer_id를-추출하라-단-customer_id의-값은-유일해야-한다"></a> <strong>[1] PAYMENT 테이블에서 단일 거래의 AMOUNT의 액수가 가장 많은 고객들의 CUSTOMER_ID를 추출하라. 단, CUSTOMER_ID의 값은 유일해야 한다.</strong></h3><table><thead><tr><th style="text-align:center">payment</th></tr></thead><tbody><tr><td style="text-align:center">* payment_id <br>customer_id <br>staff_id <br>rental_id <br>amount <br>payment_date</td></tr></tbody></table><br><p><strong>&gt;&gt; 문제 풀이</strong></p><ol><li><p>우선 전체 거래 중 AMOUNT의 액수가 가장 큰 AMOUNT를 구한다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AMOUNT</span><br><span class="line">  <span class="keyword">FROM</span> PAYMENT</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AMOUNT <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-SQL-selecting-and-filtering/image-20201110202739100.png" alt=""></p><br></li><li><p>그 다음 PAYMENT 테이블에서 가장 큰 AMOUNT를 가진 CUMSTOMER_ID를 구하고 중복을 제거한다</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> A.CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> PAYMENT A</span><br><span class="line"><span class="keyword">WHERE</span> A.AMOUNT = (</span><br><span class="line">         <span class="keyword">SELECT</span> B.AMOUNT</span><br><span class="line">           <span class="keyword">FROM</span> PAYMENT B</span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> B.AMOUNT <span class="keyword">DESC</span></span><br><span class="line">     <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-selecting-and-filtering/image-20201110203211887.png" alt="image-20201110203211887" style="zoom:80%;"></li></ol><br><br><h3 id="2-고객들에게-단체-이메일을-전송하고자-한다-customer-테이블에서-고객의-email-주소를-추출하고-이메일-형식에-맞지-않은-이메일-주소는-제외시켜라"><a class="markdownIt-Anchor" href="#2-고객들에게-단체-이메일을-전송하고자-한다-customer-테이블에서-고객의-email-주소를-추출하고-이메일-형식에-맞지-않은-이메일-주소는-제외시켜라"></a> <strong>[2]  고객들에게 단체 이메일을 전송하고자 한다.  CUSTOMER 테이블에서 고객의 EMAIL 주소를 추출하고, 이메일 형식에 맞지 않은 이메일 주소는 제외시켜라.</strong></h3><p><strong>(이메일 형식은: '@'가 존재해야 하고; '@'로 시작하지 말아야 하고; '@'로 끝나지 말아야 한다.)</strong></p><table><thead><tr><th style="text-align:center">customer</th></tr></thead><tbody><tr><td style="text-align:center">* customer_id <br>store_id <br>first_name <br>email <br>address_id <br>activebool <br>create_date <br>last_update <br>active</td></tr></tbody></table><br><p><strong>&gt;&gt; 문제 풀이</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMAIL</span><br><span class="line">  <span class="keyword">FROM</span> CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span>  EMAIL <span class="keyword">LIKE</span> <span class="string">'%@%'</span></span><br><span class="line">   <span class="keyword">AND</span> EMAIL <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'@%'</span></span><br><span class="line">   <span class="keyword">AND</span> EMAIL <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'%@'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/E-SQL-selecting-and-filtering/image-20201110205604326.png" alt="image-20201110205604326" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;실습-데이터-조회-및-필터링&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#실습-데이터-조회-및-필터링&quot;&gt;&lt;/a&gt; 【실습】 데이터 조회 및 필터링&lt;/h1&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-payment-테이블에서-단일-거래
      
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/SQL/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Selecting" scheme="https://hyemin-kim.github.io/tags/Selecting/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 필터링 (2)</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-2/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-2/</id>
    <published>2020-11-10T05:25:03.000Z</published>
    <updated>2020-11-12T11:43:00.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-필터링-2"><a class="markdownIt-Anchor" href="#데이터-필터링-2"></a> 데이터 필터링 (2)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-in-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>1. IN 연산자</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-in-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">1-2. IN 연산자 문법</a><ul><li><a href="#1-in-%EB%AC%B8%EB%B2%95">1) IN 문법</a></li><li><a href="#2-not-in-%EB%AC%B8%EB%B2%95">2) NOT IN 문법</a></li></ul></li><li><a href="#1-3-in-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">1-3. IN 연산자 실습</a></li></ul></li><li><a href="#2-between-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>2. BETWEEN 연산자</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-batween-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">2-2. BATWEEN 연산자 문법</a><ul><li><a href="#1-between-%EB%AC%B8%EB%B2%95">1) BETWEEN 문법</a></li><li><a href="#2-not-between-%EB%AC%B8%EB%B2%95">2) NOT BETWEEN 문법</a></li></ul></li><li><a href="#2-3-between-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">2-3. BETWEEN 연산자 실습</a></li></ul></li><li><a href="#3-like-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>3. LIKE 연산자</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-like-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">3-2. LIKE 연산자 문법</a><ul><li><a href="#1-like-%EB%AC%B8%EB%B2%95">1) LIKE 문법</a></li><li><a href="#2-not-like-%EB%AC%B8%EB%B2%95">2) NOT LIKE 문법</a></li><li><a href="#3-%ED%8A%B9%EC%A0%95-%ED%8C%A8%ED%84%B4">3) 특정 패턴</a></li></ul></li><li><a href="#3-3-like-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">3-3. LIKE 연산자 실습</a></li></ul></li><li><a href="#4-is-null-%EC%97%B0%EC%82%B0%EC%9E%90"><strong>4. IS NULL 연산자</strong></a><ul><li><a href="#4-1-%EC%9A%A9%EB%8F%84">4-1. 용도</a></li><li><a href="#4-2-is-null-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%B8%EB%B2%95">4-2. IS NULL 연산자 문법</a><ul><li><a href="#1-is-null-%EB%AC%B8%EB%B2%95">1) IS NULL 문법</a></li><li><a href="#2-is-not-null-%EB%AC%B8%EB%B2%95">2) IS NOT NULL 문법</a></li></ul></li><li><a href="#4-3-is-null-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%8B%A4%EC%8A%B5">4-3. IS NULL 연산자 실습</a></li></ul></li></ul><p></p><br><h2 id="1-in-연산자"><a class="markdownIt-Anchor" href="#1-in-연산자"></a> <strong>1. IN 연산자</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>IN 연산자는 특정 집합(컬럼 혹은 리스트)에서 특정 집합 혹은 리스트가 존재하는지 판단하는 연산자이다.</p><br><h3 id="1-2-in-연산자-문법"><a class="markdownIt-Anchor" href="#1-2-in-연산자-문법"></a> 1-2. IN 연산자 문법</h3><h4 id="1-in-문법"><a class="markdownIt-Anchor" href="#1-in-문법"></a> 1) IN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 VALUE1, VALUE2등의 값이 존재하는지 확인 (조건에 만족한 행을 출력)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME <span class="keyword">IN</span> (VALUE1, VALUE2, ...)</span><br></pre></td></tr></tbody></table></figure> <br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 TABLE_NAME2 테이블의 COLUMMN_NAME2 집합이 존재하는지 확인</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABEL_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> COLUMN_NAME2 <span class="keyword">FROM</span> TABLE_NAME2)  <span class="comment">-- 서브 커리</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-in-문법"><a class="markdownIt-Anchor" href="#2-not-in-문법"></a> 2) NOT IN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NOT IN --</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME 집합에서 값이 VALUE1, VALUE2가 아닌 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">NOT</span> <span class="keyword">IN</span> (VALUE1, VALUE2)</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-in-연산자-실습"><a class="markdownIt-Anchor" href="#1-3-in-연산자-실습"></a> 1-3. IN 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">rental</th></tr></thead><tbody><tr><td style="text-align:center">* rental_id <br>rental_date <br>inventory_id <br>customer_id <br>return_date <br>staff_id <br>last_update</td></tr></tbody></table><br><p><strong>&gt;&gt; IN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2인 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109192003435.png" alt="image-20201109192003435" style="zoom:80%;"><br><ul><li>IN 연산자는 ‘OR’ &amp;&amp; ‘=’ 과 같다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- OR 사용 --</span></span><br><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2인 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID = <span class="number">1</span> <span class="keyword">OR</span></span><br><span class="line">  CUSTOMER_ID = <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109192003435-1604987159526.png" alt="image-20201109192003435" style="zoom:80%;"><br><p><strong>&gt;&gt; NOT IN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2가 아닌 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109194032659.png" alt="image-20201109194032659" style="zoom:80%;"><br><ul><li>NOT IN 연산자는 ‘AND’ &amp;&amp; ‘!=’ 과 같다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER_ID가 1 혹은 2가 아닌 행을 뽑아서 RETURN_DATE 내림차순으로 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  RENTAL_ID,</span><br><span class="line">  RETURN_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID != <span class="number">1</span> <span class="keyword">AND</span></span><br><span class="line">  CUSTOMER_ID != <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RETURN_DATE <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109194032659-1604987190631.png" alt="image-20201109194032659" style="zoom:80%;"><br><p><strong>&gt;&gt; 서브 커리</strong></p><p><strong>Mission:</strong> 2005년 5월 27일에 DVD 반납한 고객의  이름(FIRST_NAME &amp; LAST_NAME)을 출력</p><ol><li>먼저 RENTAL 테이블에서 2005년 5월 27일에 DVD 반납한 고객의 ID(CUSTOMER_ID)를 추출 (서브 커리 부분)</li><li>그다음 CUSTOMER 테이블에서 해당 ID인 고객의 이름(FIRST_NAME &amp; LAST_NAME)을 출력 (메인 커리 부분)</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 서브 커리 부분 --</span></span><br><span class="line"><span class="comment">-- RETURN_DATE가 2005년 5월 27일인 CUSTOMER_ID를 출력한다</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  CUSTOMER_ID</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  <span class="keyword">CAST</span>(RETURN_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>) = <span class="string">'2005-05-27'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109213802126.png" alt="image-20201109213802126" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 메인 커리 부분 --</span></span><br><span class="line"><span class="comment">-- 해당 ID인 고객의 FIRST_NAME &amp; LAST_NAME 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME, LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  CUSTOMER_ID <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      CUSTOMER_ID</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">      RENTAL</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      <span class="keyword">CAST</span>(RETURN_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>) = <span class="string">'2005-05-27'</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201109214929978.png" alt="image-20201109214929978" style="zoom:80%;"><br><br><h2 id="2-between-연산자"><a class="markdownIt-Anchor" href="#2-between-연산자"></a> <strong>2. BETWEEN 연산자</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>BETWEEN 연산자는 특정 집합에서 어떠한 컬럼의 값이 특정 범위안에 들어가는 집합을 출력하는 연산자이다.</p><br><h3 id="2-2-batween-연산자-문법"><a class="markdownIt-Anchor" href="#2-2-batween-연산자-문법"></a> 2-2. BATWEEN 연산자 문법</h3><h4 id="1-between-문법"><a class="markdownIt-Anchor" href="#1-between-문법"></a> 1) BETWEEN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME의 값이 VALUE_A와 VALUE_B사이에 있는 집합을 출력한다</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME &gt;= VALUE_A AND COLUMN_NAME &lt;= B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME </span><br><span class="line">  <span class="keyword">BETWEEN</span> VALUE_A <span class="keyword">AND</span> VALUE_B</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-between-문법"><a class="markdownIt-Anchor" href="#2-not-between-문법"></a> 2) NOT BETWEEN 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME의 값이 VALUE_A와 VALUE_B 사이에 있지 않은 집합을 출력한다</span></span><br><span class="line"><span class="comment">-- COLUMN_NAME &lt; VALUE_A OR COLUMN_NAME &gt; VALUE_B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> VALUE_A <span class="keyword">AND</span> VALUE_B</span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-between-연산자-실습"><a class="markdownIt-Anchor" href="#2-3-between-연산자-실습"></a> 2-3. BETWEEN 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">payment</th></tr></thead><tbody><tr><td style="text-align:center">* payment_id <br>customer_id <br>staff_id <br>rental_id <br>amount <br>payment_date</td></tr></tbody></table><br><p><strong>&gt;&gt; BETWEEN  실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 8과 9사이에 있는 행의 CUSTOMER_ID, PAYMENT_ID, AMOUNT를 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, </span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="keyword">BETWEEN</span> <span class="number">8</span> <span class="keyword">AND</span> <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110090038727.png" alt="image-20201110090038727" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 위 SQL은 이 SQL과 결과가 동일함</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT &gt;= <span class="number">8</span> <span class="keyword">AND</span></span><br><span class="line">      AMOUNT &lt;- <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; NOT BETWEEN 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 8부터 9사이가 아닌 행의 CUSTOMER_ID, PAYMENT_ID, AMOUNT를 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">8</span> <span class="keyword">AND</span> <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110091032703.png" alt="image-20201110091032703" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 위 SQL은 이 SQL과 결과가 동일함</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  PAYMENT_ID,</span><br><span class="line">  AMOUNT</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT &lt; <span class="number">8</span> <span class="keyword">OR</span></span><br><span class="line">      AMOUNT &gt; <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><br><p><strong>&gt;&gt; 일자 비교</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT_DATE가 2007년 2월 7일부터 2007년 2월 15일 데이터를 추출함</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- [방법 1]</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">CAST</span>(PAYMENT_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">-- [방법 2]</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110092522372.png" alt="image-20201110092522372" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CAST( # AS DATE)와 TO_CHAR( # , 'YYYY-MM-DD')의 결과 확인</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID, PAYMENT_ID,</span><br><span class="line">  AMOUNT,      PAYMENT_DATE,</span><br><span class="line">  <span class="keyword">CAST</span>(PAYMENT_DATE <span class="keyword">AS</span> <span class="built_in">DATE</span>),          </span><br><span class="line">  TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)  </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span> TO_CHAR(PAYMENT_DATE, <span class="string">'YYYY-MM-DD'</span>)</span><br><span class="line">  <span class="keyword">BETWEEN</span> <span class="string">'2007-02-07'</span> <span class="keyword">AND</span> <span class="string">'2007-02-15'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110093852708.png" alt="image-20201110093852708" style="zoom:80%;"><br><br><h2 id="3-like-연산자"><a class="markdownIt-Anchor" href="#3-like-연산자"></a> <strong>3. LIKE 연산자</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>LIKE연산자는 특정 집합에서 어떠한 컬럼의 값이 특정 값과 유사한 패턴을 갖는 집합을 출력하는 연산자이다.</p><br><h3 id="3-2-like-연산자-문법"><a class="markdownIt-Anchor" href="#3-2-like-연산자-문법"></a> 3-2. LIKE 연산자 문법</h3><h4 id="1-like-문법"><a class="markdownIt-Anchor" href="#1-like-문법"></a> 1) LIKE 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 특정 패턴과 유사한 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">LIKE</span> 특정패턴</span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-not-like-문법"><a class="markdownIt-Anchor" href="#2-not-like-문법"></a> 2) NOT LIKE 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 특정 패턴과 유사하지 않은 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> COLUMN_NAME</span><br><span class="line">  <span class="keyword">NOT</span> <span class="keyword">LIKE</span> 특정패턴</span><br></pre></td></tr></tbody></table></figure><br><h4 id="3-특정-패턴"><a class="markdownIt-Anchor" href="#3-특정-패턴"></a> 3) 특정 패턴</h4><ul><li>특정 패턴에서 **%**는 어떠한 <strong>문자 혹은 문자열</strong>을 의미함 (길이가 상관없음)</li><li>특정 패턴에서 **_**는 <strong>한 개의 문자</strong>를 의미함</li></ul><br><h3 id="3-3-like-연산자-실습"><a class="markdownIt-Anchor" href="#3-3-like-연산자-실습"></a> 3-3. LIKE 연산자 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">customer</th></tr></thead><tbody><tr><td style="text-align:center">* customer_id <br>store_id <br>first_name <br>email <br>address_id <br>activebool <br>create_date <br>last_update <br>active</td></tr></tbody></table><br><p><strong>&gt;&gt; LIKE 실습</strong></p><p>[<code>## LIKE '&amp;&amp;'</code>] 절은 <code>TURE</code> / <code>FALSE</code>를 반환한다.</p><p>'<code>%</code>'와 '<code>_</code>'를 이해하기 위해 다음 예를 살펴본다:</p><div width="100%"><table><thead><tr><th style="text-align:left">SQL</th><th style="text-align:center">결과값</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left">SELECT</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘FOO’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'FOO’는 'FOO’이므로 참이다</td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘F%’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'F%'는 'F’로 시작하면 모두 참이다</td></tr><tr><td style="text-align:left">‘FOO’ LIKE ‘_O_’,</td><td style="text-align:center">TRUE</td><td style="text-align:left">'_O_'는 3자리 문자열이고 가운든 문자가 'O’라면 모두 참이다</td></tr><tr><td style="text-align:left">‘BAR’ LIKE ‘B_’</td><td style="text-align:center">TRUE</td><td style="text-align:left">'_B_'는 B로 시작하는 2자리 문자열이면 모두 참. 하지만 'BAR’는 'B’로 시작하는 3자리 문자열이다</td></tr></tbody></table></div><br>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME이 'Jen'으로 시작하는 집합을 출력</span></span><br><span class="line"><span class="comment">-- 즉, 'Jen'뒤에 어떤 문자 혹은 문자열이든 OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME, </span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'Jen%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110105536650.png" alt="image-20201110105536650" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME에 'er'이 존재하는 모든 집합을 출력</span></span><br><span class="line"><span class="comment">-- 즉, 'er'앞과 뒤에 어떤 문자 혹은 문자열이든 OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'%er%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113041772.png" alt="image-20201110113041772" style="zoom:80%;"><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME: 하나의 문자 + 'her' + 임의의 문자/문자열</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME <span class="keyword">LIKE</span> <span class="string">'_her%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113454144.png" alt="image-20201110113454144" style="zoom:80%;"><br><p><strong>&gt;&gt; NOT LIKE 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FIRST_NAME이 'jen'으로 시작하지 않는 집합을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'Jen%'</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110113847995.png" alt="image-20201110113847995" style="zoom:80%;"><br><br><h2 id="4-is-null-연산자"><a class="markdownIt-Anchor" href="#4-is-null-연산자"></a> <strong>4. IS NULL 연산자</strong></h2><h3 id="4-1-용도"><a class="markdownIt-Anchor" href="#4-1-용도"></a> 4-1. 용도</h3><p>IS NULL 연산자는 특정 컬럼 혹은 값이 NULL 값인지 아닌지를 판단하는 연산자이다.</p><p>IS NULL 혹은 IS NOT NULL로 NULL 유무를 판단한다.</p><br><h3 id="4-2-is-null-연산자-문법"><a class="markdownIt-Anchor" href="#4-2-is-null-연산자-문법"></a> 4-2. IS NULL 연산자 문법</h3><h4 id="1-is-null-문법"><a class="markdownIt-Anchor" href="#1-is-null-문법"></a> 1) IS NULL 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 NULL인 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="2-is-not-null-문법"><a class="markdownIt-Anchor" href="#2-is-not-null-문법"></a> 2) IS NOT NULL 문법</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_NAME 컬럼의 값이 NULL이 아닌 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COLUMN_NAME <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="4-3-is-null-연산자-실습"><a class="markdownIt-Anchor" href="#4-3-is-null-연산자-실습"></a> 4-3. IS NULL 연산자 실습</h3><p><strong>&gt;&gt; 실습 준비</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CONTACTS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">GENERATED</span> <span class="keyword">BY</span> <span class="keyword">DEFAULT</span> <span class="keyword">AS</span> <span class="keyword">IDENTITY</span>,</span><br><span class="line">  FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  EMAIL <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PHONE <span class="built_in">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">  <span class="keyword">INTO</span> </span><br><span class="line">    CONTACTS(FIRST_NAME, LAST_NAME, EMIAL, PHONE)</span><br><span class="line">  <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'John'</span>, <span class="string">'Doe'</span>, <span class="string">'john.doe@example.com'</span>, <span class="literal">NULL</span>),</span><br><span class="line">    (<span class="string">'Lily'</span>, <span class="string">'Bush'</span>, <span class="string">'lily.bush@example.com'</span>, <span class="string">'(408-234-2764)'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110132419710.png" alt="image-20201110132419710" style="zoom:80%;"><br><p><strong>&gt;&gt; IS NULL 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PHONE 컬럼의 값이 NULL인 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  PHONE <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133053492.png" alt="image-20201110133053492" style="zoom:80%;"><br><ul><li><strong>[주의]</strong> NULL은 “=” 연산으로 비교할 수 없다</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  PHONE = <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133321244.png" alt="image-20201110133321244" style="zoom:80%;"><br><p><strong>&gt;&gt; IS NOT NULL 실습</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PHONE 컬럼의 값이 NULL이 아닌 집합을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CONTACTS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  PHONE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-2/image-20201110133559770.png" alt="image-20201110133559770" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 필터링 -- IN 연산자, BETWEEN 연산자, LIKE 연산자, IS NULL 연산자
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 2. Data Filtering" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-2-Data-Filtering/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 필터링 (1)</title>
    <link href="https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-1/"/>
    <id>https://hyemin-kim.github.io/2020/11/10/S-SQL-Filtering-1/</id>
    <published>2020-11-10T05:17:37.000Z</published>
    <updated>2020-11-10T10:54:39.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-필터링-1"><a class="markdownIt-Anchor" href="#데이터-필터링-1"></a> 데이터 필터링 (1)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-where-%EC%A0%88"><strong>1. WHERE 절</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-where-%EC%A0%88-%EB%AC%B8%EB%B2%95">1-2. WHERE 절 문법</a></li><li><a href="#1-3-where-%EC%A0%88-%EC%8B%A4%EC%8A%B5">1-3. WHERE 절 실습</a><ul><li><a href="#1-%EC%A1%B0%EA%B1%B4-%ED%95%9C%EA%B0%9C">1) 조건 한개</a></li><li><a href="#2-%EC%A1%B0%EA%B1%B4-%EB%91%90%EA%B0%9C">2) 조건 두개</a></li></ul></li></ul></li><li><a href="#2-limit-%EC%A0%88"><strong>2. LIMIT 절</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-limit-%EC%A0%88-%EB%AC%B8%EB%B2%95">2-2. LIMIT 절 문법</a></li><li><a href="#2-3-limit-%EC%A0%88-%EC%8B%A4%EC%8A%B5">2-3. LIMIT 절 실습</a></li></ul></li><li><a href="#3-fetch-%EC%A0%88"><strong>3. FETCH 절</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-fetch-%EC%A0%88-%EB%AC%B8%EB%B2%95">3-2. FETCH 절 문법</a></li><li><a href="#3-3-fetch-%EC%A0%88-%EC%8B%A4%EC%8A%B5">3-3. FETCH 절 실습</a></li></ul></li></ul><p></p><br><h2 id="1-where-절"><a class="markdownIt-Anchor" href="#1-where-절"></a> <strong>1. WHERE 절</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>WHERE 절은 집합을 가져올 때 어떤 집합을 가져올 것인지에 대한 <strong>조건을 설정</strong>하는 절이다.</p><br><h3 id="1-2-where-절-문법"><a class="markdownIt-Anchor" href="#1-2-where-절-문법"></a> 1-2. WHERE 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt;조건&gt;     <span class="comment">-- 어떤 집합을 가져올지에 대한 조건을 준다</span></span><br></pre></td></tr></tbody></table></figure><br><p>WHERE 절에 사용할 수 있는 연산자:</p><div class="center"><table><thead><tr><th style="text-align:center">연산자</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:left">같음</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:left">~보다 큰 (초과)</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">~보다 작은 (미만)</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:left">~보다 크거나 같은 (이상)</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">~보다 작거나 같은 (이하)</td></tr><tr><td style="text-align:center">&lt;&gt; , !=</td><td style="text-align:left">~가 아닌</td></tr><tr><td style="text-align:center">AND</td><td style="text-align:left">그리고</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:left">혹은</td></tr></tbody></table></div><br><h3 id="1-3-where-절-실습"><a class="markdownIt-Anchor" href="#1-3-where-절-실습"></a> 1-3. WHERE 절 실습</h3><h4 id="1-조건-한개"><a class="markdownIt-Anchor" href="#1-조건-한개"></a> 1) 조건 한개</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER 테이블에서 FIRST_NAME이 'Jamie'인 행의 FIRST_NAME &amp; LAST_NAME 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIRST_NAME = <span class="string">'Jamie'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong> 문자열은 꼭 <strong>작은 따옴표( ’ ’ )로 묶어</strong>야 한다. 큰 따옴표( " " )는 안됨</p><p><img src="/images/S-SQL-Filtering-1/image-20201107151221142.png" alt="image-20201107151221142"></p><br><h4 id="2-조건-두개"><a class="markdownIt-Anchor" href="#2-조건-두개"></a> 2) 조건 두개</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CUSTOMER 테이블에서 FIRST-NAME이 'Jamie'이면서 LAST_NAME이 'Rice'인 행을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  LAST_NAME,</span><br><span class="line">  FIRST_NAME</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">     FIRST_NAME = <span class="string">'Jamie'</span></span><br><span class="line"> <span class="keyword">AND</span> LAST_NAME = <span class="string">'Rice'</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Filtering-1/image-20201107151533774.png" alt="image-20201107151533774"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PAYMENT 테이블에서 AMOUNT가 1이하이거나 8이상인 행을 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  CUSTOMER_ID,</span><br><span class="line">  AMOUNT,</span><br><span class="line">  PAYMENT_DATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  PAYMENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">AMOUNT &lt;= <span class="number">1</span></span><br><span class="line"> <span class="keyword">OR</span> AMOUNT &gt;= <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201107152434964.png" alt="image-20201107152434964" style="zoom:80%;"><br><br><h2 id="2-limit-절"><a class="markdownIt-Anchor" href="#2-limit-절"></a> <strong>2. LIMIT 절</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>LIMIT 절은 특정 집합을 출력 시 출력하는 행의 수를 한정하는 역할을 한다. 부분 법위 처리시 사용된다.</p><p>PostgreSQL, MySQL 등에서 지원한다.</p><br><h3 id="2-2-limit-절-문법"><a class="markdownIt-Anchor" href="#2-2-limit-절-문법"></a> 2-2. LIMIT 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">LIMIT</span> N       <span class="comment">-- 상위 N 행만 출력</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정하면서 시작위치를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">LIMIT</span> N <span class="keyword">OFFSET</span> M  <span class="comment">-- M번째 뒤부터 출력</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-limit-절-실습"><a class="markdownIt-Anchor" href="#2-3-limit-절-실습"></a> 2-3. LIMIT 절 실습</h3><p><strong>&gt;&gt; TABLE</strong></p><table><thead><tr><th style="text-align:center">film</th></tr></thead><tbody><tr><td style="text-align:center">*film_id <br>title <br>discription <br>release_year <br>language_id <br>rentall_duration <br>rental_rate <br>length <br>replacement_cost <br>rating <br>last_update <br>special_features <br>fulltext</td></tr></tbody></table><br><p><strong>&gt;&gt; LIMIT</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FILM_NO [1]번 부터 5건 데이터 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RELEASE_YEAR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FILM_ID</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109113053651.png" alt="image-20201109113053651" style="zoom:80%;"><br><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- RENTAL_RATE 내림차순으로 정렬 후 상위 10개 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RENTAL_RATE</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  RENTAL_RATE <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109124207207.png" alt="image-20201109124207207" style="zoom:80%;"><br><p><strong>&gt;&gt; LIMIT + OFFSET</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FILM_ID [4]번 부터 4건 데이터 출력</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE,</span><br><span class="line">  RELEASE_YEAR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FILM_ID</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109113620070.png" alt="image-20201109113620070" style="zoom:80%;"><br><br><h2 id="3-fetch-절"><a class="markdownIt-Anchor" href="#3-fetch-절"></a> <strong>3. FETCH 절</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>FETCH 절은 LIMIT 절과 동일하게, 특정 집합을 출력 시 출력하는 행의 수를 한정하는 역할을 한다. 부분 법위 처리시 사용된다.</p><br><h3 id="3-2-fetch-절-문법"><a class="markdownIt-Anchor" href="#3-2-fetch-절-문법"></a> 3-2. FETCH 절 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABEL_NAME</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> [N] <span class="keyword">ROW</span> <span class="keyword">ONLY</span>  <span class="comment">-- N을 입력하지 않고 ROW ONLY만 입력하면 단 한 건만 출력한다.</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 출력하는 행의 수를 지정하면서 시작위치를 지정한다</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">OFFSET</span> M <span class="keyword">ROWS</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> [N] <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="3-3-fetch-절-실습"><a class="markdownIt-Anchor" href="#3-3-fetch-절-실습"></a> 3-3. FETCH 절 실습</h3><p><strong>&gt;&gt; FETCH</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 최초의 단 한 건의 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Filtering-1/image-20201109183743426-1604987080769.png" alt="image-20201109183743426"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 최초의 10 건의 행을 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID, </span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">10</span> <span class="keyword">ROW</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109184236321.png" alt="image-20201109184236321" style="zoom:80%;"><br><p><strong>&gt;&gt; FETCH + OFFSET</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TITLE로 정렬한 집합 중에서 6번째 행부터 5건 출력</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FILM_ID,</span><br><span class="line">  TITLE</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  FILM</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TITLE</span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">5</span> <span class="keyword">ROWS</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">5</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Filtering-1/image-20201109184624570.png" alt="image-20201109184624570" style="zoom:80%;"><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 필터링 -- WHERE 절, LIMIT 절, FETCH 절
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 2. Data Filtering" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-2-Data-Filtering/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Filtering" scheme="https://hyemin-kim.github.io/tags/Filtering/"/>
    
  </entry>
  
  <entry>
    <title>SQL &gt;&gt; 데이터 조회</title>
    <link href="https://hyemin-kim.github.io/2020/11/06/S-SQL-Selecting/"/>
    <id>https://hyemin-kim.github.io/2020/11/06/S-SQL-Selecting/</id>
    <published>2020-11-06T05:56:21.000Z</published>
    <updated>2020-11-12T11:41:25.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-조회"><a class="markdownIt-Anchor" href="#데이터-조회"></a> 데이터 조회</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-select-%EB%AC%B8"><strong>1. SELECT 문</strong></a><ul><li><a href="#1-1-%EC%9A%A9%EB%8F%84">1-1. 용도</a></li><li><a href="#1-2-select-%EB%AC%B8%EB%B2%95">1-2. SELECT 문법</a></li><li><a href="#1-3-select-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">1-3. SELECT 문 실습</a></li></ul></li><li><a href="#2-order-by-%EB%AC%B8"><strong>2. ORDER BY 문</strong></a><ul><li><a href="#2-1-%EC%9A%A9%EB%8F%84">2-1. 용도</a></li><li><a href="#2-2-order-by-%EB%AC%B8%EB%B2%95">2-2. ORDER BY 문법</a></li><li><a href="#2-3-order-by-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">2-3. ORDER BY 문 실습</a><ul><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EA%B8%B0%EC%A4%80-%EC%A0%95%EB%A0%AC">1) 단일 기준 정렬</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EA%B8%B0%EC%A4%80-n%EC%B0%A8-%EC%A0%95%EB%A0%AC">2) 다중 기준 N차 정렬</a></li></ul></li></ul></li><li><a href="#3-select-distinct-%EB%AC%B8"><strong>3. SELECT DISTINCT 문</strong></a><ul><li><a href="#3-1-%EC%9A%A9%EB%8F%84">3-1. 용도</a></li><li><a href="#3-2-select-distinct-%EB%AC%B8%EB%B2%95">3-2. SELECT DISTINCT 문법</a><ul><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EC%BB%AC%EB%9F%BC">1) 단일 컬럼</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EC%BB%AC%EB%9F%BC">2) 다중 컬럼</a></li></ul></li><li><a href="#3-3-select-distinct-%EB%AC%B8-%EC%8B%A4%EC%8A%B5">3-3.  SELECT DISTINCT 문 실습</a><ul><li><a href="#0-%EC%8B%A4%EC%8A%B5-%EC%A4%80%EB%B9%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1">0) 실습 준비 (데이터 생성)</a></li><li><a href="#1-%EB%8B%A8%EC%9D%BC-%EC%BB%AC%EB%9F%BC-2">1) 단일 컬럼</a></li><li><a href="#2-%EB%8B%A4%EC%A4%91-%EC%BB%AC%EB%9F%BC-2">2) 다중 컬럼</a></li></ul></li></ul></li></ul><p></p><br><h2 id="1-select-문"><a class="markdownIt-Anchor" href="#1-select-문"></a> <strong>1. SELECT 문</strong></h2><h3 id="1-1-용도"><a class="markdownIt-Anchor" href="#1-1-용도"></a> 1-1. 용도</h3><p>SELECT 문은 일반적으로 테이플에 저장된 데이터를 가져오는 데 쓰인다.</p><p>SQL에서 가장 많이 쓰이는 문장이다.</p><br><h3 id="1-2-select-문법"><a class="markdownIt-Anchor" href="#1-2-select-문법"></a> 1-2. SELECT 문법</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2,</span><br><span class="line">  중략...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><h3 id="1-3-select-문-실습"><a class="markdownIt-Anchor" href="#1-3-select-문-실습"></a> 1-3. SELECT 문 실습</h3><p><strong>&gt; 전체 컬럼을 조회</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Selecting/image-20201106151704452.png" alt="image-20201106151704452"></p><br><p><strong>&gt; 지정한 컬럼을 조회</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME,</span><br><span class="line">  EMAIL</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-SQL-Selecting/image-20201106151807348.png" alt="image-20201106151807348"></p><p><strong>[주의]</strong> 여러 컬럼을 조회할 때, SELECT 명령어 뒤 컬럼 이름을 입력 시:</p><ul><li>마지막 컬럼명을 제외한 모든 컬럼명 뒤에 따움표( , )를 붙여야 함</li><li>마지막 컬럼명 뒤에는 아무것도 입력하지 않는다</li></ul><br><p><strong>&gt; 테이블 Alias(별칭) 활용하기</strong></p><p>테이블에 별칭을 지정하면 코드의 가독성이 높아진다.  특히 테이블이 많아  지면, 선택한 컬럼이 어느 테이블에서 추출한 건지를 햇갈릴 수 있다. 테이블 별칭을 활용하면 보다 쉽게 구별할 수 있다.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.FIRST_NAME,</span><br><span class="line">  A.LAST_NAME,</span><br><span class="line">  A.EMAIL</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  CUSTOMER A <span class="comment">-- OR "CUSTOMER AS A"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>[주의]</strong> 테이블 Alias는 현재의 SELECT 문장에 대해서만 유효하다.</p><br><br><h2 id="2-order-by-문"><a class="markdownIt-Anchor" href="#2-order-by-문"></a> <strong>2. ORDER BY 문</strong></h2><h3 id="2-1-용도"><a class="markdownIt-Anchor" href="#2-1-용도"></a> 2-1. 용도</h3><p>ORDER BY 문은 SELECT 문에서 가져온 데이터를 정렬하는 데 사용한다.</p><p>업무 처리상 매우 중요한 기능이다.</p><br><h3 id="2-2-order-by-문법"><a class="markdownIt-Anchor" href="#2-2-order-by-문법"></a> 2-2. ORDER BY 문법</h3><p>ORDER BY를 활용하면 가져온 데이터를 특정 컬럼을 기준으로 오름차순(ASC) 혹은 내림차순(DESC)으로 정렬할 수 있다.</p><ul><li><p>컬럼명 뒤에 <code>ASC</code>를 불이면 – 오름차순으로 정렬</p></li><li><p>컬럼명 뒤에 <code>DESC</code>를 불이면 – 내림차순으로 정렬</p></li><li><p>컬럼명 뒤에 아무것도 안 불이면 – Default로 오름차순으로 정렬</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COLUMN_1,</span><br><span class="line">  COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TAL_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   <span class="comment">-- Default: 오름차순(ASC)</span></span><br><span class="line">  COLUMN_1 <span class="keyword">ASC</span>,    <span class="comment">-- 오름차순 정렬</span></span><br><span class="line">  COLUMN_2 <span class="keyword">DESC</span>   <span class="comment">-- 내림차순 정렬</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="2-3-order-by-문-실습"><a class="markdownIt-Anchor" href="#2-3-order-by-문-실습"></a> 2-3. ORDER BY 문 실습</h3><h4 id="1-단일-기준-정렬"><a class="markdownIt-Anchor" href="#1-단일-기준-정렬"></a> 1) 단일 기준 정렬</h4><p>단일 컬럼을 기준으로 한 번의 정렬만 실시함.</p><br><p><strong>&gt; ASC(오름차순) 정렬</strong></p><ul><li><p>ORDER BY 미사용 시 (미정렬)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152037841.png" alt="image-20201106152037841" style="zoom:80%;"><br></li><li><p>“FIRST_NAME” 기준으로 오름차순 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ASC 명령어 명시</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">ASC</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Default로 정렬</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152244978.png" alt="image-20201106152244978" style="zoom:80%;"></li></ul><br><p>**&gt; DESC(내림차순) 정렬 **</p><ul><li><p>"FIRST_NAME"기준으로 내림차순 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152323551.png" alt="image-20201106152323551" style="zoom:80%;"></li></ul><br><br><h4 id="2-다중-기준-n차-정렬"><a class="markdownIt-Anchor" href="#2-다중-기준-n차-정렬"></a> 2) 다중 기준 N차 정렬</h4><p>여러 컬럼을 기준으로 N차 정렬을 실시함.</p><ul><li><p>COLUMN_1 기준으로 1차 정렬한 다음,</p></li><li><p>COLUMN_1의 값이 동일한 데이터에 대해서 COLUMN_2 기준으로 2차 정렬을 실시한다,</p></li><li><p>(위 규칙대로 계속 실행)…</p></li></ul><br><p><strong>&gt; ASC(오름차순) + DESC(내림차순) 정렬</strong></p><ul><li><p>먼저 FIRST_NAME 오름차순으로 정렬, FIRST_NAME이 동일한 데이터는 LAST_NAME 내림차순으로 정렬</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  FIRST_NAME <span class="keyword">DESC</span>,  <span class="comment">-- 1차 정렬 (FIRST_NAME 내림차순)</span></span><br><span class="line">  LAST_NAME <span class="keyword">ASC</span>  <span class="comment">-- 2차 정렬 (LAST_NAME 오름차순)</span></span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152444007.png" alt="image-20201106152444007" style="zoom:80%;"></li></ul><br><ul><li><p>ORDER BY 기준을 정할 때, 컬럼명 내신에 SELECT 시 컬럼이 들어오는 순서로 대체해도 된다. (하지만 가독성을 위해 위 방법 더 추천)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME,</span><br><span class="line">  LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  CUSTOMER</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">DESC</span>,  <span class="comment">-- 1: FIRST_NAME (내림차순)</span></span><br><span class="line">  <span class="number">2</span> <span class="keyword">ASC</span>    <span class="comment">-- 2: LAST_NAME (오름차순)</span></span><br></pre></td></tr></tbody></table></figure></li></ul><br><br><h2 id="3-select-distinct-문"><a class="markdownIt-Anchor" href="#3-select-distinct-문"></a> <strong>3. SELECT DISTINCT 문</strong></h2><h3 id="3-1-용도"><a class="markdownIt-Anchor" href="#3-1-용도"></a> 3-1. 용도</h3><p>SELECT 시 DISTINCT를 사용하면 중복 값을 제외한 결과값이 출력된다. 즉 같은 결과의 행이라면 중복을 제거할 수 있다.</p><br><h3 id="3-2-select-distinct-문법"><a class="markdownIt-Anchor" href="#3-2-select-distinct-문법"></a> 3-2. SELECT DISTINCT 문법</h3><h4 id="1-단일-컬럼"><a class="markdownIt-Anchor" href="#1-단일-컬럼"></a> 1) 단일 컬럼</h4><ul><li><p><strong>단일 컬럼</strong>을 추출할 때 <strong>해당 컬럼의 값이 중복된 행을 제거</strong>하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_1의 값이 중복 값 존재 시 중복 값을 제거</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br></pre></td></tr></tbody></table></figure></li></ul><br><h4 id="2-다중-컬럼"><a class="markdownIt-Anchor" href="#2-다중-컬럼"></a> 2) 다중 컬럼</h4><ul><li><p><strong>다중 컬럼</strong>을 추출할 때 <strong><font color="red">모든 컬럼의 값이 모두 중복 된 행</font>을 제거</strong>하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- COLUMN_1 + COLUMN_2의 값이 중복 값 존재 시 중복 값을 제거 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><br><p>&gt;&gt; 중복 값 제거 후 정렬하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 결과를 명확하게 하기 위해 ORDER BY 절 사용</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  COLUMN_1,   <span class="comment">-- default로 오름차순 정렬</span></span><br><span class="line">  COLUMN_2    <span class="comment">-- default로 오름차순 정렬</span></span><br></pre></td></tr></tbody></table></figure></li></ul><br><ul><li><p><strong>다중 컬럼</strong>을 추출할 때 <strong><font color="red">특정 컬럼의 값을 기준으로</font> 중복된 행을 제거</strong>하여 추출 (DISTINCT ON 절)</p><p><strong>[제거 규칙]</strong>  기준 컬럼의 값이 동일한 행 중에서 하나의 행만 보류</p><p>​                         - 기본적으로 중복된 행 중의 첫 번째를 보류</p><p>​                         - ORDER BY 문을 사용할 경우 정렬 후의 첫 번째 행을 보류</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (COLUMN_1)</span><br><span class="line">               COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (COLUMN_1)</span><br><span class="line">               COLUMN_1, COLUMN_2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  TABLE_NAME</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  COLUMN_1 </span><br><span class="line">  COLUMN_2</span><br></pre></td></tr></tbody></table></figure></li></ul><br><br><h3 id="3-3-select-distinct-문-실습"><a class="markdownIt-Anchor" href="#3-3-select-distinct-문-실습"></a> 3-3.  SELECT DISTINCT 문 실습</h3><h4 id="0-실습-준비-데이터-생성"><a class="markdownIt-Anchor" href="#0-실습-준비-데이터-생성"></a> 0) 실습 준비 (데이터 생성)</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T1 (<span class="keyword">ID</span> <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, BCOLOR <span class="built_in">VARCHAR</span>, FCOLOR <span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">  <span class="keyword">INTO</span> T1(BCOLOR, FCOLOR)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="literal">NULL</span>),</span><br><span class="line">  (<span class="literal">NULL</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'red'</span>, <span class="string">'blue'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'blue'</span>),</span><br><span class="line">  (<span class="string">'green'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'red'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'green'</span>),</span><br><span class="line">  (<span class="string">'blue'</span>, <span class="string">'blue'</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-SQL-Selecting/image-20201106152615942.png" alt="image-20201106152615942" style="zoom:80%;"><br><h4 id="1-단일-컬럼-2"><a class="markdownIt-Anchor" href="#1-단일-컬럼-2"></a> 1) 단일 컬럼</h4><ul><li><p>BCOLOR 컬럼의 값이 중복된 행을 제거 + BCOLOR 기준으로 정렬하여 추출</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> BCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  BCOLOR</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​                                                               <img src="/images/S-SQL-Selecting/image-20201106152737312.png" alt="image-20201106152737312"></p><br><h4 id="2-다중-컬럼-2"><a class="markdownIt-Anchor" href="#2-다중-컬럼-2"></a> 2) 다중 컬럼</h4><ul><li><p>BCOLOR &amp; FCOLOR 두 컬럼을 추출 시:</p><ol><li><p><strong>두 컬럼 의 값이 <font color="red">모두 중복된 행</font>을 제거</strong></p></li><li><p>BCOLOR &amp; FCOLOR 기준으로 <strong>정렬하여 추출</strong></p></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> BCOLOR, </span><br><span class="line">           FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR,</span><br><span class="line">  FCOLOR</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​                                            <img src="/images/S-SQL-Selecting/image-20201106160613919.png" alt="image-20201106160613919" style="zoom:80%;"></p><br><ul><li><p>BCOLOR &amp; FCOLOR 두 컬럼을 추출 시:</p><ol><li><p><strong><font color="red">BCOLOR의  값</font>을 기준으로 <font color="red">중복된 행</font>을 제거</strong></p></li><li><ul><li><p>미정렬 시 BCOLOR값이 동일한 행 중에 첫 번째 행만 보류</p></li><li><p>BCOLOR, FCOLOR 기준으로 정렬 시 FCOLOR의 첫 번째 값을 가진 행만 보류</p></li></ul></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 미정렬 시</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  T1</span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160706340.png" alt="image-20201106160706340" style="zoom:80%;"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BCOLOR, FCOLOR 기준으로 정렬  (FCOLOR 오름차순)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR, </span><br><span class="line">  FCOLOR</span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160800896.png" alt="image-20201106160800896" style="zoom:80%;"></p><br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- BCOLOR, FCOLOR 기준으로 정렬  (FCOLOR 내림차순)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> <span class="keyword">ON</span> (BCOLOR)</span><br><span class="line">               BCOLOR, FCOLOR</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  T1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BCOLOR, </span><br><span class="line">  FCOLOR <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><p>​                                     <img src="/images/S-SQL-Selecting/image-20201106160853425.png" alt="image-20201106160853425" style="zoom:80%;"></p></li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 조회 -- SELECT 문, ORDER BY 문, SELECT DISTINCT 문
    
    </summary>
    
    
      <category term="【STUDY - SQL】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/"/>
    
      <category term="SQL - 1. Data Selecting" scheme="https://hyemin-kim.github.io/categories/%E3%80%90STUDY-SQL%E3%80%91/SQL-1-Data-Selecting/"/>
    
    
      <category term="SQL" scheme="https://hyemin-kim.github.io/tags/SQL/"/>
    
      <category term="Selecting" scheme="https://hyemin-kim.github.io/tags/Selecting/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 Python &gt;&gt; Text Mining -- 감성 분류 분석 (호텔 리뷰 데이터)</title>
    <link href="https://hyemin-kim.github.io/2020/08/29/E-Python-TextMining-2/"/>
    <id>https://hyemin-kim.github.io/2020/08/29/E-Python-TextMining-2/</id>
    <published>2020-08-29T14:01:54.000Z</published>
    <updated>2020-10-28T06:50:20.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="text-mining-실습-호텔-리뷰-데이터-감성-분류-긍정부정-키워드-분석"><a class="markdownIt-Anchor" href="#text-mining-실습-호텔-리뷰-데이터-감성-분류-긍정부정-키워드-분석"></a> 【Text Mining 실습】 – 호텔 리뷰 데이터: 감성 분류 &amp;  긍정/부정 키워드 분석</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EA%B0%9C%EC%9A%94"><strong>0. 개요</strong></a></li><li><a href="#1-library-data-import"><strong>1. Library &amp; Data Import</strong></a></li><li><a href="#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0"><strong>2. 데이터셋 살펴보기</strong></a></li><li><a href="#3-%ED%95%9C%EA%B5%AD%EC%96%B4-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC"><strong>3. 한국어 텍스트 데이터 전처리</strong></a><ul><li><a href="#3-0-konlpy-%EC%84%A4%EC%B9%98">3-0. konlpy 설치</a></li><li><a href="#3-1-%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D-%EC%A0%81%EC%9A%A9">3-1. 정규 표현식 적용</a></li><li><a href="#3-2-%ED%95%9C%EA%B5%AD%EC%96%B4-%ED%98%95%ED%83%9C%EC%86%8C-%EB%B6%84%EC%84%9D-%EB%AA%85%EC%82%AC-%EB%8B%A8%EC%9C%84">3-2. 한국어 형태소 분석 - 명사 단위</a></li><li><a href="#3-3-%EB%B6%88%EC%9A%A9%EC%96%B4-%EC%82%AC%EC%A0%84">3-3. 불용어 사전</a></li><li><a href="#3-4-word-count">3-4. Word Count</a></li><li><a href="#3-5-tf-idf-%EC%A0%81%EC%9A%A9">3-5. TF-IDF 적용</a></li></ul></li><li><a href="#4-%EA%B0%90%EC%84%B1-%EB%B6%84%EB%A5%98-logistic-regression"><strong>4. 감성 분류 – Logistic Regression</strong></a><ul><li><a href="#4-1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%EC%83%9D%EC%84%B1">4-1. 데이터셋 생성</a></li><li><a href="#4-2-training-set-test-set-%EB%82%98%EB%88%84%EA%B8%B0">4-2. Training set / Test set 나누기</a></li><li><a href="#4-3-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5">4-3. 모델 학습</a></li><li><a href="#4-4-%EC%83%98%ED%94%8C%EB%A7%81-%EC%9E%AC%EC%A1%B0%EC%A0%95">4-4. 샘플링 재조정</a></li><li><a href="#4-5-%EB%AA%A8%EB%8D%B8-%EC%9E%AC%ED%95%99%EC%8A%B5">4-5. 모델 재학습</a></li></ul></li><li><a href="#5-%EA%B8%8D%EC%A0%95-%EB%B6%80%EC%A0%95-%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%B6%84%EC%84%9D"><strong>5. 긍정 / 부정 키워드 분석</strong></a></li></ul><p></p><br><h2 id="0-개요"><a class="markdownIt-Anchor" href="#0-개요"></a> <strong>0. 개요</strong></h2><p>제주 호텔의 리뷰 데이터(평가 점수 + 평가 내용)을 활용해 다음 2가지 분석을 진행합니다:</p><ol><li><p>리뷰속에 담긴 사람의 긍정 / 부정 감성을 파악하여 분류할 수 있는 감성 분류 예측 모델을 만든다</p></li><li><p>만든 모델을 활용해 긍정 / 부정 키워드를 출력해, 이용객들이 느낀 제주 호텔의 장,단점을 파악한다</p></li></ol>  <br> <h2 id="1-library-data-import"><a class="markdownIt-Anchor" href="#1-library-data-import"></a> <strong>1. Library &amp; Data Import</strong></h2><p><strong>&gt;&gt; 사용할 Library</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>&gt;&gt; 사용할 데이터셋</strong></p><p><a href="https://www.tripadvisor.co.kr/" target="_blank" rel="noopener">Tripadvisor</a> 여행사이트에서 "제주 호텔"로 검색해서 나온 리뷰들을 활용합니다. (평점 &amp; 평가 내용 포함)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/yoonkt200/FastCampusDataset/master/tripadviser_review.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>rating</th>      <th>text</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4</td>      <td>여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다. 위치선정 또한 적당한 ...</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>2일 이상 연박시 침대, 이불, 베게등 침구류 교체 및 어메니티 보강이 필요해 보입...</td>    </tr>    <tr>      <th>2</th>      <td>4</td>      <td>지인에소개로온 호텔  깨끗하고 좋은거같아요 처음에는 없는게 많아 많이  당황했는데 ...</td>    </tr>    <tr>      <th>3</th>      <td>5</td>      <td>방에 딱 들어서자마자 눈이 휘둥그레질정도로 이렇게 넓은 호텔 처음 와본 것 같아요!...</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>저녁에 맥주한잔 하는게 좋아서 렌트 안하고 뚜벅이 하기로 했는데 호텔 바로 앞에 버...</td>    </tr>  </tbody></table></div><br>  <p><strong>&gt;&gt; Feature Description</strong></p><ul><li><p>rating: 이용자 리뷰의 평가 점수 (1~5)</p></li><li><p>text: 이용자 리뷰 평가 내용</p><br></li></ul><h2 id="2-데이터셋-살펴보기"><a class="markdownIt-Anchor" href="#2-데이터셋-살펴보기"></a> <strong>2. 데이터셋 살펴보기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dimension</span></span><br><span class="line">df.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(1001, 2)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결측치</span></span><br><span class="line">df.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>rating    0text      0dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># information</span></span><br><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 1001 entries, 0 to 1000Data columns (total 2 columns): #   Column  Non-Null Count  Dtype ---  ------  --------------  -----  0   rating  1001 non-null   int64  1   text    1001 non-null   objectdtypes: int64(1), object(1)memory usage: 15.8+ KB</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># text 변수 확인</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'text'</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>'여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다. 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다.'</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'text'</span>][<span class="number">100</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>'올 봄에 벚꽃기간에 방문, 협재를 바라보는 바다뷰가 좋고 대로변이라 렌트해서 가기도 좋음. 조식은 이용안했는데 근처 옹포밥집까지 아침 산책겸 걸어가서 하고옴. 루프탑 수영장과 바가 있었는데 내가 갔을때는 밤에 비바람이 너무 불어서 이용못하고옴 ㅠㅠ  단점으로는 모 유명 여행블로거 리뷰처럼 화장실 물떄가... 그거빼곤 다 만족'</code></pre>  <br><p>“text” 내용을 확인해보면, 소량의 "특수 문자"와 "모음"이 존재하는 경우가 있습니다. 이들은 Text Mining을 적용할 의미가 없기 때문에 정규표현식을 이용해서 제거해보도록 할게요.</p><p><br>  <br></p><h2 id="3-한국어-텍스트-데이터-전처리"><a class="markdownIt-Anchor" href="#3-한국어-텍스트-데이터-전처리"></a> <strong>3. 한국어 텍스트 데이터 전처리</strong></h2><p>기계가 텍스트 형식으로 되어 있는 리뷰 데이터를 이해하려면, 텍스트 데이터를 단어 단위로 분리하는 전처리 괴정이 필요합니다. 여기서 분리된 단어들은 Bag of Words로 Count 기반으로 나타날 수도 있고, TF-IDF를 통해서 점수로 나타날 수도 있습니다.</p><p>먼저 리뷰의 평가 내용을 단어화해서 형태소를 추출하고, 그 다음 Bag of Words를 생성하여 TF-IDF 변환을 진행하겠습니다.</p><br><h3 id="3-0-konlpy-설치"><a class="markdownIt-Anchor" href="#3-0-konlpy-설치"></a> 3-0. konlpy 설치</h3><p>영문이 아닌 한글을 처리해야 하기 때문에 "konlpy"이라는 library를 사용합니다.</p><blockquote><p>참고 자료:</p><ol><li><a href="https://ellun.tistory.com/46" target="_blank" rel="noopener">파이썬 한글 형태소 분석기 KoNLPy 설치방법 및 에러해결</a></li><li><a href="https://konlpy-ko.readthedocs.io/ko/v0.4.3/install/#id2" target="_blank" rel="noopener">KoNLPy 홈메이지 – 설치하기</a></li><li><a href="https://data-scientist-brian-kim.tistory.com/54" target="_blank" rel="noopener">[Anaconda에서 KoNLPy 설치하기] 삽질은 이제 그만~</a></li></ol></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install konlpy==<span class="number">0.5</span><span class="number">.2</span> jpype1 Jpype1-py3</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    Requirement already satisfied: konlpy==0.5.2 in d:\anaconda\lib\site-packages (0.5.2)    Requirement already satisfied: jpype1 in d:\anaconda\lib\site-packages (1.0.2)    Requirement already satisfied: Jpype1-py3 in d:\anaconda\lib\site-packages (0.5.5.4)    Requirement already satisfied: tweepy&gt;=3.7.0 in d:\anaconda\lib\site-packages (from konlpy==0.5.2) (3.9.0)    Requirement already satisfied: lxml&gt;=4.1.0 in d:\anaconda\lib\site-packages (from konlpy==0.5.2) (4.5.0)    Requirement already satisfied: colorama in d:\anaconda\lib\site-packages (from konlpy==0.5.2) (0.4.3)    Requirement already satisfied: numpy&gt;=1.6 in d:\anaconda\lib\site-packages (from konlpy==0.5.2) (1.18.1)    Requirement already satisfied: beautifulsoup4==4.6.0 in d:\anaconda\lib\site-packages (from konlpy==0.5.2) (4.6.0)    Requirement already satisfied: typing-extensions; python_version &lt; "3.8" in d:\anaconda\lib\site-packages (from jpype1) (3.7.4.1)    Requirement already satisfied: requests[socks]&gt;=2.11.1 in d:\anaconda\lib\site-packages (from tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (2.23.0)    Requirement already satisfied: requests-oauthlib&gt;=0.7.0 in d:\anaconda\lib\site-packages (from tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (1.3.0)    Requirement already satisfied: six&gt;=1.10.0 in d:\anaconda\lib\site-packages (from tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (1.14.0)    Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in d:\anaconda\lib\site-packages (from requests[socks]&gt;=2.11.1-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (3.0.4)    Requirement already satisfied: certifi&gt;=2017.4.17 in d:\anaconda\lib\site-packages (from requests[socks]&gt;=2.11.1-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (2020.6.20)    Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in d:\anaconda\lib\site-packages (from requests[socks]&gt;=2.11.1-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (1.25.8)    Requirement already satisfied: idna&lt;3,&gt;=2.5 in d:\anaconda\lib\site-packages (from requests[socks]&gt;=2.11.1-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (2.9)    Requirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6; extra == "socks" in d:\anaconda\lib\site-packages (from requests[socks]&gt;=2.11.1-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (1.7.1)    Requirement already satisfied: oauthlib&gt;=3.0.0 in d:\anaconda\lib\site-packages (from requests-oauthlib&gt;=0.7.0-&gt;tweepy&gt;=3.7.0-&gt;konlpy==0.5.2) (3.1.0)</pre></div><br><h3 id="3-1-정규-표현식-적용"><a class="markdownIt-Anchor" href="#3-1-정규-표현식-적용"></a> 3-1. 정규 표현식 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규 표현식 함수 정의</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_regular_expression</span><span class="params">(text)</span>:</span></span><br><span class="line">    hangul = re.compile(<span class="string">'[^ ㄱ-ㅣ 가-힣]'</span>)  <span class="comment"># 한글 추출 규칙: 띄어 쓰기(1 개)를 포함한 한글</span></span><br><span class="line">    result = hangul.sub(<span class="string">''</span>, text)  <span class="comment"># 위에 설정한 "hangul"규칙을 "text"에 적용(.sub)시킴</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure> <br> <p>만들어 놓은 정규 표현식을 "text"의 첫 행에 적용해서 결과 한번 확인해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'text'</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>'여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다. 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다.'</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply_regular_expression(df[<span class="string">'text'</span>][<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>'여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다'</code></pre><br><p>정규 표현식을 적용한 후 특수 문자가 잘 제거된 것을 확인할 수 있습니다.</p>  <br><h3 id="3-2-한국어-형태소-분석-명사-단위"><a class="markdownIt-Anchor" href="#3-2-한국어-형태소-분석-명사-단위"></a> 3-2. 한국어 형태소 분석 - 명사 단위</h3><p><strong>&gt;&gt; 명사 형태소 추출</strong></p><blockquote><p>참고 자료: <a href="https://konlpy.org/ko/v0.5.2/api/konlpy.tag/" target="_blank" rel="noopener">konlpy.tag 패키지 Documentation</a></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> konlpy.tag <span class="keyword">import</span> Okt</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></tbody></table></figure><br>  <p>명사 형태소 추출 함수 <code>Okt()</code> 를 이용하여 정규표현식을 적용한 “text” 첫 행 내용의 형태소를 추출해 보겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply_regular_expression(df[<span class="string">'text'</span>][<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>'여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다'</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">okt = Okt()  <span class="comment"># 명사 형태소 추출 함수</span></span><br><span class="line">nouns = okt.nouns(apply_regular_expression(df[<span class="string">'text'</span>][<span class="number">0</span>]))</span><br><span class="line">nouns</span><br></pre></td></tr></tbody></table></figure><pre><code>['여행', '집중', '휴식', '제공', '호텔', '위치', '선정', '또한', '청소', '청결', '상태']</code></pre><br><p>이제 이를 전체 말뭉치(corpus)에 적용해서 명사 형태소를 추출해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 말뭉치 생성</span></span><br><span class="line">corpus = <span class="string">""</span>.join(df[<span class="string">'text'</span>].tolist())</span><br><span class="line">corpus</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow: auto">    '여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다. 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다.2일 이상 연박시 침대, 이불, 베게등 침구류 교체 및 어메니티 보강이 필요해 보입니다. 베스트 웨스턴 회원의 경우 객실 뷰와 층수 요청에 적극적으로 반영해 주시길 바랍니다.지인에소개로온 호텔  깨끗하고 좋은거같아요 처음에는 없는게 많아 많이  당황했는데 알고오시면 좋을거같아요 (세면도구와  잠옷은필수로챙기셔야해용) 그것만챙겨오시면 잘쉬었다가실수있답니당방에 딱 들어서자마자 눈이 휘둥그레질정도로 이렇게 넓은 호텔 처음 와본 것 같아요!! 다음에도 제주도 오면 꼭 여기서 지낼겁니다ㅎㅎ 1박만 머문다는게 너무 아쉽네요ㅠㅠ저녁에 맥주한잔 하는게 좋아서 렌트 안하고 뚜벅이 하기로 했는데 호텔 바로 앞에 버스정류이 있어서 너무 좋았습니다. 12시에 도착해서 가방 맡기려 했는데 일찍 정비된방이 있다며 바로 입실하고 룸도 업그레이드 해주셔서 직원분이 친절해 정말 좋았어요^^바다전망이라해서 기대했는데 영아니네요.. 전일 함덕대명콘도에서 1박했는데 그곳이 실내 분위기랑 바다전망이 훨 좋아요..손님이 없는 날이라고 가장 바다가 이쁘게 보이는 방으로 배치해 주셨다. 불편함에 대해 바로 대응 써비스 해주었고 조식도 사소한 부분까지 신경써서 아주 맛있었다. 특급 호텔은 아니지만 트랜디하고 즐거운 다양함에 대해 고민한 흔적이 였보인다. 여름에 꼭와서 수영장을 사용해 보고 싶다 ~ !엄마와 둘이 여행왔다가 가격대비 좋다고 하여 다녀왔어요 ㅎㅎ 듣던대로 깔끔했고 위치도 너무 좋았어요 주위 마트 식당들 동문시장도 가까워서 좋았고 앞에 바다가 있어서 더 좋았습니다 ㅎㅎ 또 방문의사 있어요 ~딸 둘과의 4일동안의 제주여행줌 2박 숙소로 정해진 제주 휘슬락 호텔~ 처음엔 공항과 가까운 곳으로만 생각했으나 시설도 넘 깨끗하고 직원분들도 모두 친절모드로 제주여행의 마지막을 넘넘 좋게 마무리하고 돌아가네요~~^^ 테라스에서 보이는 전경도 넘 멋지네요♡ 인근 동문재래시장도 가까워 야시장 이용도하고 너무너무 잘다녀왔어요. 다음에 또 이용할께요.제주여행 2일차!!! 호텔 휘슬락에 체크인 ㄱㄱㄱ. 뷰 기가막힙니다... 깨끗하고요~~ 주변에 갈데 많습니다. 여친과 잊지못할 추억 만들어봅니다^^ 좋은 가성비에 분위기 나쁘지않네요 추천 드립니다. 후회없으실듯!!!예전에 그랜드 호텔일 때 저희 아이 돌잔치를 여기 삼다정에서 했었더랬죠. 제주도에서는 아주 전통있는 호텔입니다. 그 후로 메종 글래드로 업그레이드 되었는데, 위치, 시설, 서비스에 비해 매우 합리적인 가격대의 만족스러운 호텔입니다. 그래서 저희는 명절에 제주도 내려오면 늘 글래드에 숙박해요. 특히 1층에 아티제와 백미당이 있어서, 여기 커피와 베이커리를 좋아하는 저희 가족에게는 플러스예요.지금까지 제주여행을 다니면서 여러호텔을 이용해보았지만, 메종 글래드에서 가장 만족스러웠습니다. 우선 공항의 접근성과 쇼핑의 편리함 그리고 조식의만족도가 최고이며 무엇보다 직원분들의 친절함이 기억에 남습니다. 앞으로 우리가족은 제주에 갈땐 메종을 찾기로했답니다.엄마랑 첫 제주도 여행인데 침구가 너무 좋았고, 직원분들도 친절하셔서 편안하게 쉬고 왔습니다. 교통도 편해서 짧은 여행이었지만 알차게 볼 수 있었도요. 3층에서 이틀 묵었었는데 정원 같은 곳이 바로 보여서 이뻤어요. 거기 돌아다니니까 수영장도 2개 있었는데 겨울이라 못써서 아쉬웠습니다 ㅠㅠ 여름에 꼭 여기 오려구요!! ㅎㅎㅎ 추천합니다~~친구가 제주도에 놀러와서 투숙을 하였는데 객실이 깔끔하고 뷰도 좋았어요. 야외 수영장이 보이는 방향이었는데 야간에는 조명을 켜서 너무 예쁘더라구요. 체크인하러 가는 그 순간조차도 벨맨에게 대접을 받았습니다. 왠만하면 실명을 거론하지 않는데 프론트에 문J.. 이름이 기억이 안나지만 체크인이 너무 친절해서 기분이 좋았습니다. 웃는 모습이 너무 선하고 밝아서 여행 첫날부터 스타트가 좋았네요. 다음에 투숙을 할 경우가 생긴다면 또 다시 이용할거에요~!!차를 좋아하는 아이들에게는 최고의 선물~~ 카운터에서 친절하게 안내해주셔서 편하게 이용하고 왔어요~~ 삼다정 디너 최고입니다. 기회가 되면 여름에 또 오고 싶네요~~직원분들은 눈만 마주쳐도 도와주려고 할 정도로 엄청 친절. 미니바 무료도 굿. 시설은 최근 지어진거라 당연 청결. 주변에 관광지도 가까운곳이 많음. 제주여행숙고소 강추~~ 내가 숙은 위치에서 찍은 야경뷰조식조타하여 일부러 저녁 많이 안 먹고 일찍 일어나서 동네 한바퀴 돌아주고 씻고 나서 2층가서 먹방 했네요. 신라호텔보다 퀄리티 좋음신제주에 위치한 매우 깨끗한 호텔입니다. 특히 조식을 추천 드립니다.   구제주에 오래된 호텔에 비할 수 없는 기분 좋은 호텔이였습니다.모녀 여행 중 제주시 1박을 위해 선택한 호텔입니다. 우선 공항에서 가깝고 오픈한 지 얼만 안 된 것 같아 예약했습니다.  호텔은 대로변에 있어 접근성이 좋고 (호텔은 5~10분거리), 더군다나 공항까지 셔틀버스 운행합니다. 데스크 직원분들 매우 친절하시고 주차안내분도 친절하셔서 첫 인상이 좋았습니다. 룸은 트윈으로 했는데 생각보다 큰 방에 퀸 사이즈가 2개여서  ㅋㅋㅋㅋ 대만족이었습니다. 스타일러가 있어서 여행 중 입었던 옷 다 돌렸습니다. 조식은 가짓수가 많지는 않으나 있어야 될 것은 다 있는 느낌?   근데 화장실이 조명이 너무 어둡고 내부인테리어도 어두워서 ㅋㅋㅋ 그 외의 호텔 분위기와 매우 이질적입니다. (이건 개인적인 취향인 것 같네요) 어메니티도 구비되어 있는데 향이 독특합니다. ㅋㅋㅋ 실망한 부분은 여행 시 산 과일을 먹으려고 나이프와 포크 부탁했는데 서비스가 안되더라고요..그리고 차와 커피 준비된 부분이 빈약합니다. (어느 부분은 특급호텔 표방인 것 같고 어떤 부분은 모텔인 것 같은 )  하지만 결론적으로 가성비  훌륭, 접근성 훌륭, 청결도 훌륭해서 엄마와 함께 쾌적한 시간을 보냈습니다. 감사합니다.슈페리어킹룸에 하루 숙박한 후기입니다.  제주여행의 마지막날 숙박했는데요 지은지 얼마 안 된 느낌의 새 건물 이었습니다. 건물 안 인테리어는 약간 유럽 스타일이었구요 그림이나 조각들이 생각보다 많아서 놀랐어요 복도랑 객실도 그림이 전시되어 있고 전부 카펫으로 되어 있었습니다. 객실은 비슷한 등급의 다른 호텔들보다 큰 편이었고 침대는 두 명이서 자기에 충분할 정도로 정말 컸습니다. 비가 오는 날이라 비를 조금 맞았는데 객실 내에 LG 스타일러가 있어서 외투를 돌렸더니 뽀송뽀송해져서 완전 만족 합니다!! 진짜 스타일러 강추!!!! 그리고 무료셔틀 이용했는데 공항까지 한 7분 정도 걸렸습니당! 셔틀은 운행하는 시간이 정해져 있는데 미리 예약 하셔야 이용 하실 수 있어요~~  다음에 제주도 온다면 또 이용하고 싶은 호텔이네요~^^시티뷰이지만 오름도 볼 수 있고 무엇보다도 교통이 훌륭하였다 다만 바로 도로가인 관계로 밤에 차량 소리가 다소 신경쓰였다급하게 방문했는데 방도 깔끔하고 직원분들 모두 친절하셔서 좋았습니다~  1층 편의점도 있어서 좋았어요~ 칫솔은 챙겨야합니다 ㅎㅎ 재방문 의사 있습니다동계훈련을 신제주로 오게 되었는데̄̈,  훈련 하는동안 라마다호텔에서 편하게 잘 쉬었다̆̎ 갑니다̆̎!  가족과 연인과 함께 와도 좋을 것 같아요̆̈!  조식도 괜찮고 전체적으로 깔끔하고 편리하게 되어있네요̆̈ ◡̈⋆  사진이 너무 많아 첨부하진 못했지만, 엘리베이터 가는̆̈ 곳 쪽에 빔으로 실시간 비행기 시간을 알려줘서 너무 편하고 신기했어요̆̈! </div><br><p><font color="blue"><em>[P.S.  브라우저 메모리 부족으로 부분만  출력]</em></font></p><br>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규 표현식 적용</span></span><br><span class="line">apply_regular_expression(corpus)</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow: auto">    '여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다 위치선정 또한 적당한 편이었고 청소나 청결상태도 좋았습니다일 이상 연박시 침대 이불 베게등 침구류 교체 및 어메니티 보강이 필요해 보입니다 베스트 웨스턴 회원의 경우 객실 뷰와 층수 요청에 적극적으로 반영해 주시길 바랍니다지인에소개로온 호텔  깨끗하고 좋은거같아요 처음에는 없는게 많아 많이  당황했는데 알고오시면 좋을거같아요 세면도구와  잠옷은필수로챙기셔야해용 그것만챙겨오시면 잘쉬었다가실수있답니당방에 딱 들어서자마자 눈이 휘둥그레질정도로 이렇게 넓은 호텔 처음 와본 것 같아요 다음에도 제주도 오면 꼭 여기서 지낼겁니다ㅎㅎ 박만 머문다는게 너무 아쉽네요ㅠㅠ저녁에 맥주한잔 하는게 좋아서 렌트 안하고 뚜벅이 하기로 했는데 호텔 바로 앞에 버스정류이 있어서 너무 좋았습니다 시에 도착해서 가방 맡기려 했는데 일찍 정비된방이 있다며 바로 입실하고 룸도 업그레이드 해주셔서 직원분이 친절해 정말 좋았어요바다전망이라해서 기대했는데 영아니네요 전일 함덕대명콘도에서 박했는데 그곳이 실내 분위기랑 바다전망이 훨 좋아요손님이 없는 날이라고 가장 바다가 이쁘게 보이는 방으로 배치해 주셨다 불편함에 대해 바로 대응 써비스 해주었고 조식도 사소한 부분까지 신경써서 아주 맛있었다 특급 호텔은 아니지만 트랜디하고 즐거운 다양함에 대해 고민한 흔적이 였보인다 여름에 꼭와서 수영장을 사용해 보고 싶다  엄마와 둘이 여행왔다가 가격대비 좋다고 하여 다녀왔어요 ㅎㅎ 듣던대로 깔끔했고 위치도 너무 좋았어요 주위 마트 식당들 동문시장도 가까워서 좋았고 앞에 바다가 있어서 더 좋았습니다 ㅎㅎ 또 방문의사 있어요 딸 둘과의 일동안의 제주여행줌 박 숙소로 정해진 제주 휘슬락 호텔 처음엔 공항과 가까운 곳으로만 생각했으나 시설도 넘 깨끗하고 직원분들도 모두 친절모드로 제주여행의 마지막을 넘넘 좋게 마무리하고 돌아가네요 테라스에서 보이는 전경도 넘 멋지네요 인근 동문재래시장도 가까워 야시장 이용도하고 너무너무 잘다녀왔어요 다음에 또 이용할께요제주여행 일차 호텔 휘슬락에 체크인 ㄱㄱㄱ 뷰 기가막힙니다 깨끗하고요 주변에 갈데 많습니다 여친과 잊지못할 추억 만들어봅니다 좋은 가성비에 분위기 나쁘지않네요 추천 드립니다 후회없으실듯예전에 그랜드 호텔일 때 저희 아이 돌잔치를 여기 삼다정에서 했었더랬죠 제주도에서는 아주 전통있는 호텔입니다 그 후로 메종 글래드로 업그레이드 되었는데 위치 시설 서비스에 비해 매우 합리적인 가격대의 만족스러운 호텔입니다 그래서 저희는 명절에 제주도 내려오면 늘 글래드에 숙박해요 특히 층에 아티제와 백미당이 있어서 여기 커피와 베이커리를 좋아하는 저희 가족에게는 플러스예요지금까지 제주여행을 다니면서 여러호텔을 이용해보았지만 메종 글래드에서 가장 만족스러웠습니다 우선 공항의 접근성과 쇼핑의 편리함 그리고 조식의만족도가 최고이며 무엇보다 직원분들의 친절함이 기억에 남습니다 앞으로 우리가족은 제주에 갈땐 메종을 찾기로했답니다엄마랑 첫 제주도 여행인데 침구가 너무 좋았고 직원분들도 친절하셔서 편안하게 쉬고 왔습니다 교통도 편해서 짧은 여행이었지만 알차게 볼 수 있었도요 층에서 이틀 묵었었는데 정원 같은 곳이 바로 보여서 이뻤어요 거기 돌아다니니까 수영장도 개 있었는데 겨울이라 못써서 아쉬웠습니다 ㅠㅠ 여름에 꼭 여기 오려구요 ㅎㅎㅎ 추천합니다친구가 제주도에 놀러와서 투숙을 하였는데 객실이 깔끔하고 뷰도 좋았어요 야외 수영장이 보이는 방향이었는데 야간에는 조명을 켜서 너무 예쁘더라구요 체크인하러 가는 그 순간조차도 벨맨에게 대접을 받았습니다 왠만하면 실명을 거론하지 않는데 프론트에 문 이름이 기억이 안나지만 체크인이 너무 친절해서 기분이 좋았습니다 웃는 모습이 너무 선하고 밝아서 여행 첫날부터 스타트가 좋았네요 다음에 투숙을 할 경우가 생긴다면 또 다시 이용할거에요차를 좋아하는 아이들에게는 최고의 선물 카운터에서 친절하게 안내해주셔서 편하게 이용하고 왔어요 삼다정 디너 최고입니다 기회가 되면 여름에 또 오고 싶네요직원분들은 눈만 마주쳐도 도와주려고 할 정도로 엄청 친절 미니바 무료도 굿 시설은 최근 지어진거라 당연 청결 주변에 관광지도 가까운곳이 많음 제주여행숙고소 강추 내가 숙은 위치에서 찍은 야경뷰조식조타하여 일부러 저녁 많이 안 먹고 일찍 일어나서 동네 한바퀴 돌아주고 씻고 나서 층가서 먹방 했네요 신라호텔보다 퀄리티 좋음신제주에 위치한 매우 깨끗한 호텔입니다 특히 조식을 추천 드립니다   구제주에 오래된 호텔에 비할 수 없는 기분 좋은 호텔이였습니다모녀 여행 중 제주시 박을 위해 선택한 호텔입니다 우선 공항에서 가깝고 오픈한 지 얼만 안 된 것 같아 예약했습니다  호텔은 대로변에 있어 접근성이 좋고 호텔은 분거리 더군다나 공항까지 셔틀버스 운행합니다 데스크 직원분들 매우 친절하시고 주차안내분도 친절하셔서 첫 인상이 좋았습니다 룸은 트윈으로 했는데 생각보다 큰 방에 퀸 사이즈가 개여서  ㅋㅋㅋㅋ 대만족이었습니다 스타일러가 있어서 여행 중 입었던 옷 다 돌렸습니다 조식은 가짓수가 많지는 않으나 있어야 될 것은 다 있는 느낌   근데 화장실이 조명이 너무 어둡고 내부인테리어도 어두워서 ㅋㅋㅋ 그 외의 호텔 분위기와 매우 이질적입니다 이건 개인적인 취향인 것 같네요 어메니티도 구비되어 있는데 향이 독특합니다 ㅋㅋㅋ 실망한 부분은 여행 시 산 과일을 먹으려고 나이프와 포크 부탁했는데 서비스가 안되더라고요그리고 차와 커피 준비된 부분이 빈약합니다 어느 부분은 특급호텔 표방인 것 같고 어떤 부분은 모텔인 것 같은   하지만 결론적으로 가성비  훌륭 접근성 훌륭 청결도 훌륭해서 엄마와 함께 쾌적한 시간을 보냈습니다 감사합니다슈페리어킹룸에 하루 숙박한 후기입니다  제주여행의 마지막날 숙박했는데요 지은지 얼마 안 된 느낌의 새 건물 이었습니다 건물 안 인테리어는 약간 유럽 스타일이었구요 그림이나 조각들이 생각보다 많아서 놀랐어요 복도랑 객실도 그림이 전시되어 있고 전부 카펫으로 되어 있었습니다 객실은 비슷한 등급의 다른 호텔들보다 큰 편이었고 침대는 두 명이서 자기에 충분할 정도로 정말 컸습니다 비가 오는 날이라 비를 조금 맞았는데 객실 내에  스타일러가 있어서 외투를 돌렸더니 뽀송뽀송해져서 완전 만족 합니다 진짜 스타일러 강추 그리고 무료셔틀 이용했는데 공항까지 한 분 정도 걸렸습니당 셔틀은 운행하는 시간이 정해져 있는데 미리 예약 하셔야 이용 하실 수 있어요  다음에 제주도 온다면 또 이용하고 싶은 호텔이네요시티뷰이지만 오름도 볼 수 있고 무엇보다도 교통이 훌륭하였다 다만 바로 도로가인 관계로 밤에 차량 소리가 다소 신경쓰였다급하게 방문했는데 방도 깔끔하고 직원분들 모두 친절하셔서 좋았습니다  층 편의점도 있어서 좋았어요 칫솔은 챙겨야합니다 ㅎㅎ 재방문 의사 있습니다동계훈련을 신제주로 오게 되었는데  훈련 하는동안 라마다호텔에서 편하게 잘 쉬었다 갑니다  가족과 연인과 함께 와도 좋을 것 같아요  조식도 괜찮고 전체적으로 깔끔하고 편리하게 되어있네요   사진이 너무 많아 첨부하진 못했지만 엘리베이터 가는 곳 쪽에 빔으로 실시간 비행기 시간을 알려줘서 너무 편하고 신기했어요</div><br><p><font color="blue"><em>[P.S. 브라우저 메모리 부족으로 부분만  출력]</em></font></p><br>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 말뭉치(corpus)에서 명사 형태소 추출</span></span><br><span class="line">nouns = okt.nouns(apply_regular_expression(corpus))</span><br><span class="line">print(nouns)</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow: scroll">    ['여행', '집중', '휴식', '제공', '호텔', '위치', '선정', '또한', '청소', '청결', '상태', '일', '이상', '연', '침대', '이불', '등', '침구', '류', '교체', '및', '어메니티', '보강', '베스트', '웨스턴', '회원', '경우', '객실', '뷰', '층수', '요청', '적극', '반영', '지인', '소개', '온', '호텔', '거', '처음', '당황', '세면', '도구', '잠옷', '필수', '그것', '방', '눈', '정도', '호텔', '처음', '것', '다음', '제주도', '꼭', '여기', '박만', '저녁', '맥주', '한잔', '렌트', '안', '뚜벅', '호텔', '바로', '앞', '버스', '정류', '시', '도착', '가방', '일찍', '정비', '방이', '바로', '입실', '룸', '업그레이드', '직원', '정말', '바다', '전망', '영', '전일', '함덕', '대명', '콘도', '곳', '실내', '분위기', '바다', '전망', '훨', '손님', '날', '가장', '바다', '방', '배치', '대해', '바로', '대응', '써비스', '조식', '부분', '신경', '아주', '특급', '호텔', '트랜디', '대해', '고민', '흔적', '여름', '꼭', '수영장', '사용', '보고', '엄마', '둘', '여행', '가격', '대비', '위치', '주위', '마트', '식당', '시장', '앞', '바다', '더', '또', '방문', '의사', '딸', '둘', '동안', '제주', '여행', '줌', '박', '숙소', '정해진', '제주', '휘슬', '락', '호텔', '처음', '공항', '곳', '생각', '시설', '직원', '모두', '친절', '모드', '여행', '마지막', '마무리', '테라스', '전경', '인근', '재래시장', '야시장', '이용도', '다음', '또', '이용', '제주', '여행', '일차', '호텔', '휘슬락', '체크', '뷰', '기', '주변', '여친', '추억', '가성', '비', '분위기', '추천', '후회', '예전', '그랜드', '호텔', '일', '때', '저희', '아이', '돌잔치', '여기', '다정', '했었더랬', '제주도', '아주', '전통', '호텔', '그', '후', '메종', '글래드', '업그레이드', '위치', '시설', '서비스', '매우', '합리', '가격', '대의', '호텔', '저희', '명절', '제주도', '늘', '글래드', '숙박', '층', '아티', '제', '백미', '여기', '커피', '베이커리', '저희', '가족', '플러스', '지금', '여행', '호텔', '이용', '메종', '글래드', '가장', '우선', '공항', '접근성', '쇼핑', '조식', '만족도', '최고', '무엇', '직원', '기억', '앞', '우리', '가족', '제주', '땐', '메종', '찾기', '엄마', '첫', '제주도', '여행', '침구', '직원', '쉬', '교통', '여행', '볼', '수', '도', '층', '이틀', '정원', '곳', '바로', '보', '거기', '수영장', '개', '겨울', '여름', '꼭', '여기', '추천', '친구', '제주도', '놀러와', '투숙', '객실', '뷰', '야외', '수영장', '방향', '야간', '조명', '체크', '그', '순간', '맨', '대접', '실명', '거론', '프론트', '문', '이름', '기억', '안나', '체크', '기분', '모습', '여행', '첫날', '스타트', '다음', '투숙', '경우', '또', '다시', '이용', '차', '아이', '최고', '선물', '카운터', '안내', '이용', '다정', '디너', '최고', '기회', '여름', '또', '직원', '눈', '정도', '친절', '미니바', '무료', '굿', '시설', '최근', '연', '청결', '주변', '관광지', '곳', '제주', '여행', '숙고', '소', '강추', '내', '숙', '위치', '야경', '뷰', '조식', '일부러', '저녁', '안', '일찍', '일어나서', '동네', '바퀴', '층', '먹방', '신라', '호텔', '퀄리티', '제주', '위치', '매우', '호텔', '조식', '추천', '제주', '호텔', '비', '수', '기분', '호텔', '모녀', '여행', '중', '제주시', '박', '위해', '선택', '호텔', '우선', '공항', '오픈', '얼', '안', '것', '예약', '호텔', '대로', '변', '접근성', '호텔', '분', '거리', '더군다나', '공항', '셔틀버스', '운행', '데스크', '직원', '매우', '차안', '분도', '첫', '인상', '룸', '트윈', '생각', '방', '퀸', '사이즈', '개', '만족', '스타', '여행', '중', '옷', '조식', '가짓수', '것', '느낌', '화장실', '조명', '내부', '인테리어', '그', '외', '호텔', '분위기', '매우', '질적', '이건', '개인', '취향', '것', '어메니티', '구비', '향', '부분', '여행', '시', '산', '과일', '나이프', '포크', '부탁', '서비스', '차', '커피', '준비', '부분', '부분', '특급', '호텔', '표방', '것', '부분', '모텔', '것', '결론', '가성', '비', '훌륭', '접근성', '훌륭', '청결', '엄마', '시간', '슈', '페리', '킹룸', '하루', '숙박', '후기', '여행', '마지막', '날', '숙박', '지은지', '얼마', '안', '느낌', '새', '건물', '건물', '안', '인테리어', '약간', '유럽', '스타일', '그림', '조각', '생각', '복도', '객실', '그림', '전시', '전부', '카펫', '객실', '등급', '다른', '호텔', '침대', '두', '명', '이서', '자기', '정도', '정말', '비', '날', '비', '조금', '객실', '내', '스타', '외투', '완전', '만족', '진짜', '스타', '강추', '무료', '셔틀', '이용', '공항', '분', '정도', '습', '셔틀', '운행', '시간', '미리', '예약', '이용', '수', '다음', '제주도', '또', '이용', '호텔', '시티', '뷰', '오름', '볼', '수', '무엇', '교통', '다만', '바로', '도로', '가인', '관계', '밤', '차량', '소리', '다소', '신경', '방문', '방도', '직원', '모두', '층', '편의점', '칫솔', '재', '방문', '의사', '동계', '훈련', '제주', '훈련', '동안', '라마', '호텔', '가족', '연인', '것', '조식', '전체', '사진', '첨부', '엘리베이터', '곳', '쪽', '빔', '실시간', '비행기', '시간', '공항', '택시', '미만', '택시', '비', '이동', '가능', '침구', '및', '룸', '상태', '최상', '욕실', '슬리퍼', '위생', '상태', '염려', '카펫', '염려', '설날', '조식', '떡국', '당황', '함', '떡국', '공항', '려고', '현장', '결재', '황스', '려운', '중국', '만두', '종류', '별로', '구만', '현장', '결재', '조식', '일', '메뉴', '답변', '첫', '도착', '제일', '첫', '주차', '걱정', '요', '할아버지', '안심', '객실', '컨디션', '최고', '조식', '문어', '처리', '최고', '닺', '회사', '출장', '차', '시설', '직원', '서울', '때', '이용', '다음', '또', '프론트', '방도', '간혹', '이벤트', '업그레이드', '해주시', '수영장', '및', '부대', '시설', '최고', '항상', '제주도', '때', '롯데', '롯데', '시티', '호텔', '제주', '비지니스', '호텔', '가족', '여행객', '손색', '객실', '욕조', '겸비', '사계절', '수풀', '무료', '이용', '층', '야외', '수영장', '중문', '표선등', '원거리', '여행지', '복귀', '후', '밤', '시', '수영장', '이용', '또한', '시내', '유명', '식당', '등', '방문', '아주', '일단', '공항', '분', '정도', '위치', '주차장', '지하', '층', '공간', '주차', '수', '체크', '때', '직원', '응대', '기분', '체크', '수', '다른', '문의사항', '신지', '감동', '습', '객실', '역시', '롯데', '생각', '정도', '풀', '장도', '이용', '수', '더', '옆', '락타', '룸', '샤워', '마련', '코인', '세탁실', '정말', '이용', '오션', '뷰', '멀리', '바다', '야경', '남자친구', '첫', '여행', '덕분', '여행', '습', '다음', '제주', '꼭', '방문', '이번', '제주도', '여행', '때', '롯데', '시티', '제주', '박', '숙박', '체크', '때', '프런트', '직원', '객실', '배정', '공항', '비행기', '이착륙', '객실', '객실']</div><br><p><font color="blue"><em>[P.S. 브라우저 메모리 부족으로 부분만  출력]</em></font></p><br><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 빈도 탐색</span></span><br><span class="line">counter = Counter(nouns)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter.most_common(<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>[('호텔', 803), ('수', 498), ('것', 436), ('방', 330), ('위치', 328), ('우리', 327), ('곳', 320), ('공항', 307), ('직원', 267), ('매우', 264)]</code></pre><br><p><strong>&gt;&gt; 한글자 명사 제거</strong></p><p>위 결과에서 보이듯이, 두 글자 키워드가 대부분 의미 있는 단어지만, ‘수’, ‘것’, '곳’과 같은 한 글자 키워드는 분석에 딱히 좋은 영향을 미치지 않은 것으로 보입니다. 그래서 우리는 한글자 명사를 제거해보도록 하겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">available_counter = Counter({x: counter[x] <span class="keyword">for</span> x <span class="keyword">in</span> counter <span class="keyword">if</span> len(x) &gt; <span class="number">1</span>})</span><br><span class="line">available_counter.most_common(<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>[('호텔', 803), ('위치', 328), ('우리', 327), ('공항', 307), ('직원', 267), ('매우', 264), ('가격', 245), ('객실', 244), ('시설', 215), ('제주', 192)]</code></pre><br>  <p>이제 한글자 키워드 모두 제거됐습니다. 하지만 “우리”, “매우” 와 같은 실질적인 의미가 없고 꾸민 역할을 하는 불용어들 아직 존재합니다. 한국어 불용어 사전을 정의하여 불용어도 제거해줄게요.</p><br>  <h3 id="3-3-불용어-사전"><a class="markdownIt-Anchor" href="#3-3-불용어-사전"></a> 3-3. 불용어 사전</h3><p><a href="https://www.ranks.nl/" target="_blank" rel="noopener">RANKS NL</a>에 제공해주는 <a href="https://www.ranks.nl/stopwords/korean" target="_blank" rel="noopener">한국어 불용어 사전</a>을 활용하겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stopwords = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/yoonkt200/FastCampusDataset/master/korean_stopwords.txt"</span>).values.tolist()</span><br><span class="line">stopwords[:<span class="number">10</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>[['휴'], ['아이구'], ['아이쿠'], ['아이고'], ['어'], ['나'], ['우리'], ['저희'], ['따라'], ['의해']]</code></pre><br><p>이 외에도 우리가 분석하고자 하는 데이터셋에 특화된 불용어들이 있습니다. 예를 들면: “제주”, “호텔”, “숙소” 등. 이런 단어들도 불용어 사전에 추가해보도록 할게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jeju_hotel_stopwords = [<span class="string">'제주'</span>, <span class="string">'제주도'</span>, <span class="string">'호텔'</span>, <span class="string">'리뷰'</span>, <span class="string">'숙소'</span>, <span class="string">'여행'</span>, <span class="string">'트립'</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> jeju_hotel_stopwords:</span><br><span class="line">    stopwords.append(word)</span><br></pre></td></tr></tbody></table></figure><br>  <h3 id="3-4-word-count"><a class="markdownIt-Anchor" href="#3-4-word-count"></a> 3-4. Word Count</h3><p><strong>&gt;&gt; BoW 벡터 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_cleaning</span><span class="params">(text)</span>:</span></span><br><span class="line">    hangul = re.compile(<span class="string">'[^ ㄱ-ㅣ 가-힣]'</span>)  <span class="comment"># 정규 표현식 처리</span></span><br><span class="line">    result = hangul.sub(<span class="string">''</span>, text)</span><br><span class="line">    okt = Okt()  <span class="comment"># 형태소 추출</span></span><br><span class="line">    nouns = okt.nouns(result)</span><br><span class="line">    nouns = [x <span class="keyword">for</span> x <span class="keyword">in</span> nouns <span class="keyword">if</span> len(x) &gt; <span class="number">1</span>]  <span class="comment"># 한글자 키워드 제거</span></span><br><span class="line">    nouns = [x <span class="keyword">for</span> x <span class="keyword">in</span> nouns <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> stopwords]  <span class="comment"># 불용어 제거</span></span><br><span class="line">    <span class="keyword">return</span> nouns</span><br><span class="line"></span><br><span class="line">vect = CountVectorizer(tokenizer = <span class="keyword">lambda</span> x: text_cleaning(x))</span><br><span class="line">bow_vect = vect.fit_transform(df[<span class="string">'text'</span>].tolist())</span><br><span class="line">word_list = vect.get_feature_names()</span><br><span class="line">count_list = bow_vect.toarray().sum(axis=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure> <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 단어 리스트</span></span><br><span class="line">word_list</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    ['가가',     '가게',     '가격',     '가격표',     '가구',     '가급',     '가기',     '가까이',     '가끔',     '가능',     '가도',     '가동',     '가두',     '가득',     '가든',     '가라',     '가량',     '가려움',     '가로',     '가면',     '가몬',     '가무',     '가물',     '가미',     '가방',     '가버',     '가성',     '가세',     '가스레인지',     '가스렌지',     '가슴',     '가시',     '가신',     '가야',     '가옥',     '가요',     '가용',     '가운데',     '가을',     '가인',     '가장',     '가정',     '가정식',     '가족',     '가지',     '가짓수',     '가차',     '가치',     '가품',     '각각',     '각오',     '각자',     '각종',     '각층',     '간격',     '간곳',     '간다',     '간단',     '간만',     '간식',     '간이',     '간주',     '간직',     '간판',     '간혹',     '갈껄',     '갈비',     '갈비탕',     '갈수',     '갈수록',     '감각',     '감동',     '감명',     '감사',     '감상',     '감소',     '감안',     '감자',     '감히',     '갑인',     '갑자기',     '갑작스레',     '강남',     '강력',     '강아지',     '강압',     '강제',     '강조',     '강추',     '개념',     '개략',     '개미',     '개발',     '개방',     '개별',     '개보',     '개뿔',     '개선',     '개수대',     '개월',     '개인',     '개인실',     '개인정보',     '개조',     '개층',     '객수',     '객실',     '갤러리',     '갱스터',     '거기',     '거나',     '거두',     '거론',     '거르세',     '거름',     '거리',     '거린데',     '거림',     '거문도',     '거미',     '거부',     '거실',     '거여',     '거울',     '거위',     '거의',     '거절',     '거주',     '거지',     '거참',     '거품',     '걱정',     '건가',     '건강',     '건너',     '건너편',     '건물',     '건의',     '건조',     '건조기',     '건조대',     '건축',     '걷기',     '걸음',     '걸이',     '걸즈',     '검사',     '검색',     '검정색',     '검토',     '것임',     '겉보기',     '게다가',     '게스트',     '게스트하우스',     '게임',     '게재',     '겐찮은듯',     '겔상',     '겨우',     '겨울',     '겨울철',     '격인',     '격하',     '결과',     '결론',     '결석',     '결재',     '결정',     '결제',     '결코',     '결함',     '결항',     '결혼',     '결혼식',     '겸비',     '겸용',     '겹겹',     '경고',     '경관',     '경내',     '경로',     '경매',     '경영',     '경영학',     '경우',     '경쟁',     '경쟁력',     '경찰',     '경치',     '경험',     '계단',     '계란',     '계란후라이',     '계산',     '계속',     '계정',     '계획',     '고가',     '고간',     '고객',     '고급',     '고기',     '고기국수',     '고깃배',     '고내포구',     '고려',     '고루',     '고무줄',     '고문',     '고민',     '고봉',     '고분',     '고생',     '고속',     '고속도로',     '고아',     '고양이',     '고여',     '고오',     '고요',     '고유',     '고작',     '고장',     '고정',     '고층',     '고통',     '고트',     '고함',     '고해',     '곡부',     '곧바로',     '곧장',     '골드스타',     '골목',     '골목길',     '골퍼',     '골프',     '골프장',     '골프텔',     '곰팡이',     '곱슬',     '곳곳',     '곳곳이',     '곳도',     '곳임',     '공간',     '공감',     '공개',     '공공',     '공공장소',     '공급',     '공기',     '공덕',     '공률',     '공물',     '공사',     '공시',     '공실이',     '공연',     '공연장',     '공영',     '공용',     '공원',     '공유',     '공짜',     '공차',     '공터',     '공포',     '공항',     '과거',     '과물',     '과언',     '과일',     '과장',     '관경',     '관계',     '관계자',     '관광',     '관광객',     '관광명소',     '관광지',     '관덕정',     '관련',     '관리',     '관리인',     '관리자',     '관리직',     '관음사',     '관해',     '광경',     '광고',     '광천수',     '괴체',     '교대',     '교수',     '교외',     '교욱받',     '교육',     '교체',     '교통',     '교환',     '교회',     '구가',     '구경',     '구경만',     '구관',     '구글',     '구나',     '구내',     '구덩이',     '구도',     '구두',     '구둣주걱',     '구들장',     '구류',     '구만',     '구매',     '구멍',     '구별',     '구분',     '구비',     '구사',     '구색',     '구석',     '구석구석',     '구성',     '구식',     '구암',     '구역',     '구역질',     '구이',     '구입',     '구조',     '구축',     '국가',     '국내',     '국도',     '국립',     '국수',     '국적',     '국제',     '국제공항',     '군더더기',     '군데',     '군데군데',     '굳럭',     '굳이',     '굿굿',     '굿굿굿',     '굿앤굿',     '굿임',     '권내',     '권장',     '권한',     '귀중',     '규모',     '규율',     '규칙',     '균형',     '그거',     '그것',     '그게',     '그냥',     '그네',     '그녀',     '그다음',     '그다지',     '그닥',     '그대로',     '그동안',     '그때',     '그랜드',     '그레이스',     '그로',     '그룹',     '그릇',     '그린',     '그림',     '극복',     '극악',     '근래',     '근무',     '근본',     '근육통',     '근처',     '근해',     '글래드',     '글쎄',     '금고',     '금늘',     '금능',     '금릉',     '금방',     '금속',     '금액',     '금연',     '금요일',     '금은',     '금지',     '금토일',     '급상승',     '급속',     '기간',     '기계',     '기구',     '기기',     '기념일',     '기능',     '기대',     '기도',     '기류',     '기리',     '기반',     '기본',     '기부',     '기분',     '기사',     '기상',     '기소',     '기숙사',     '기술',     '기술자',     '기억',     '기업',     '기여',     '기용',     '기우',     '기입',     '기적',     '기전',     '기점',     '기존',     '기준',     '기지',     '기타',     '기프트샵',     '기호',     '기회',     '기후',     '긴장',     '길가',     '길림',     '길목',     '길이',     '김녕',     '김녕해변',     '김밥',     '김씨',     '김치',     '김포공항',     '까페',     '깜빡',     '깜짝',     '깨끗',     '깨끗깔끔',     '께빵',     '꼭대기',     '꽃꺽으러',     '꽃사슴',     '꾸러미',     '꾸밈',     '꿀잠',     '끝내기',     '끼리',     '나기',     '나누기',     '나니',     '나라',     '나름',     '나머지',     '나머진',     '나무',     '나물',     '나보',     '나오니',     '나우',     '나은',     '나이',     '나이트',     '나이프',     '나중',     '나탈리',     '낙후',     '낚시',     '난로',     '난리',     '난방',     '난입',     '난타',     '날수',     '날씨',     '날짜',     '남녀',     '남성',     '남아',     '남자',     '남자친구',     '남짓',     '남쪽',     '남편',     '낭만',     '내겐',     '내내',     '내년',     '내부',     '내부시',     '내시',     '내야',     '내외',     '내용',     '내의',     '내인',     '내일',     '냄비',     '냄새',     '냉동',     '냉장고',     '너븐팡',     '넓이',     '네스프레소',     '네이버',     '년대',     '년전',     '녔던',     '노곤',     '노래',     '노래방',     '노력',     '노리',     '노블레스',     '노선',     '노을',     '노크',     '노트북',     '노화',     '노후',     '녹물',     '녹음',     '녹지',     '논평',     '놀러와',     '놀수',     '놀이',     '놀이기구',     '놀이터',     '농부가',     '농장',     '높이',     '놨더군',     '누가',     '누구',     '누군가',     '누락',     '누리',     '누울',     '눈앞',     '뉴타운',     '느낌',     '는걸',     '늘송',     '능리',     '다가',     '다그',     '다다미',     '다라',     '다락방',     '다른',     '다른사람',     '다리미',     '다만',     '다미',     '다발',     '다섯',     '다소',     '다수',     '다시',     '다운',     '다음',     '다이지',     '다인',     '다정',     '다행',     '단계',     '단기',     '단면',     '단어',     '단위',     '단점',     '단정',     '단지',     '단체',     '달걀',     '달걀프라이',     '달라',     '달러',     '달리',     '달성',     '닭머르',     '담당',     '담배',     '담소',     '담요',     '답변',     '당구',     '당근',     '당나귀',     '당분간',     '당시',     '당신',     '당일',     '당황',     '대가',     '대가족',     '대고',     '대관령',     '대답',     '대당',     '대도',     '대도시',     '대뜸',     '대략',     '대로',     '대리',     '대명',     '대박',     '대부분',     '대비',     '대상',     '대신',     '대안',     '대여',     '대요',     '대욕',     '대응',     '대의',     '대입',     '대적',     '대접',     '대정',     '대중',     '대중교통',     '대처',     '대체',     '대충',     '대포',     '대표',     '대하',     '대한',     '대한민국',     '대한항공',     '대해',     '대행',     '대형',     '대화',     '대환영',     '댐핑할',     '더군다나',     '더더',     '더러',     '더블',     '더블베드',     '더욱',     '더원',     '덕림사',     '덕분',     '덕택',     '던데',     '덮어놓고',     '데리',     '데스크',     '데스크톱',     '데이',     '데이즈',     '델문',     '도구',     '도달',     '도대체',     '도도',     '도둑',     '도로',     '도록',     '도리어',     '도미',     '도보',     '도서관',     '도시',     '도시락',     '도심',     '도심지',     '도어',     '도어락',     '도움',     '도움말',     '도일',     '도정',     '도중',     '도착',     '도처',     '도청',     '도쿄',     '도크',     '독립',     '독서',     '독점',     '독채',     '돈까스',     '돌담',     '돌잔치',     '동계',     '동광양',     '동굴',     '동남',     '동남아',     '동네',     '동도',     '동료',     '동문',     '동물',     '동물원',     '동반',     '동부',     '동북',     '동생',     '동선',     '동시',     '동안',     '동영상',     '동의',     '동이',     '동인',     '동작',     '동전',     '동정',     '동쪽',     '돼지',     '돼지고기',     '됏다',     '될껀',     '될껄',     '두루',     '두번째',     '두봉',     '두부',     '두엄',     '두운',     '두툼',     '둘러보기',     '둘이서',     '둘째',     '둥근지붕',     '뒤쪽',     '뒤척',     '뒷골목',     '뒷마당',     '뒷문',     '뒷쪽',     '드네',     '드라이기',     '드라이버',     '드라이브',     '드라이어',     '드롭',     '드릴',     '드타',     '드하',     '득시',     '듭니',     '듯이',     '듯해',     '등급',     '등대',     '등등',     '등반',     '등산',     '등정후',     '디귿',     '디너',     '디럭스',     '디봇',     '디셈버',     '디자이너',     '디자인',     '디저트',     '디제이',     '따라서',     '때로는',     '때문',     '떡국',     '또오',     '또한',     '뚜벅',     '뜨근뜨근',     '뜨내기',     '라그',     '라마',     '라며',     '라면',     '라서',     '라스베가스',     '라우터',     '라운지',     '라이센스',     '라커룸',     '락스',     '락심이',     '락커',     '락타',     '란딩',     '랍니',     '랜드',     '랜트',     '랜트카',     '랜트하',     '램프',     '러닝',     '러브',     '럭셔리',     '런가',     '렀는데',     '렀습니',     '렀으',     '레노',     '레드',     '레벨',     '레비',     '레스토랑',     '레시',     '레오',     '레이',     '레이크',     '레인지',     '레저',     '레프트',     '렌즈',     '렌탈업체',     '렌터',     '렌터카',     '렌트',     '렌트카',     '려고',     '려운',     '로고',     '로그',     '로만',     '로맨틱',     '로부터',     '로비',     '로서',     '로션',     '로얄',     '로움',     '로컬',     '로터리',     '로프트',     '롯데',     '롯데리아',     '롱보드',     '루온토',     '루트',     '루프',     '룸메이트',     '룸바닥',     '룸상태',     '룸서비스',     '룸안',     '룸키',     '룸타입',     '를위',     '리가',     '리기',     '리넨',     '리뉴',     '리뉴얼',     '리더',     '리도',     '리모콘',     '리베라',     '리베로',     '리빙룸',     '리셉션',     '리움',     '리젠시',     '리조트',     '리지',     '리치',     '리트',     '리플렛',     '린스',     '링잉',     '마누카꿀',     '마늘',     '마다',     '마담',     '마당',     '마레',     '마련',     '마루',     '마리',     '마모',     '마무리',     '마사지',     '마술',     '마스코트',     '마스크',     '마스터',     '마시기',     '마안',     '마운트',     '마을',     '마음',     '마이너스',     '마인드',     '마일리지',     '마자',     '마저',     '마주',     '마지막',     '마지막여행',     '마차',     '마찬가지',     '마치',     '마침내',     '마켓',     '마트',     '마틸다',     '막걸리',     '만끽',     '만난',     '만날',     '만남',     '만다린',     '만두',     '만들기',     '만료',     '만약',     '만요',     '만원',     '만점',     '만족',     '만족도',     '만천원',     '만큼',     '만하',     '만해',     '만화책',     '말레이시아',     '말레이시아인',     '말로',     '말리',     '말씀',     '말투',     '말함',     '맘스',     '맛사지',     '맛잇엇어',     '맛집',     '망각',     '망신',     '망치',     '맞은편',     '맞이',     '매년',     '매니',     '매니저',     '매달',     '매듭',     '매력',     '매번',     '매우',     '매운탕',     '매일',     '매장',     '매점',     '매칭',     '매트',     '매트리스',     '매트릭스',     '매하',     '맥도날드',     '맥도널드',     '맥주',     '맥주잔',     '맨발',     '머리',     '머리카락',     '머신',     '머싱',     '먹거리',     '먹기',     '먹방',     '먹이',     '먼저',     '먼지',     '멀리',     '메가박스',     '메뉴',     '메리',     '메리어트',     '메시지',     ...]</pre></div>  <br><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각 단어가 전체 리뷰중에 등장한 총 횟수</span></span><br><span class="line">count_list</span><br></pre></td></tr></tbody></table></figure><pre><code>array([  4,   8, 245, ...,   1,   7,  14], dtype=int64)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각 단어의 리뷰별 등장 횟수</span></span><br><span class="line">bow_vect.toarray()</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0],       ...,       [0, 0, 0, ..., 0, 0, 0],       [0, 0, 2, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0]], dtype=int64)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bow_vect.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(1001, 3599)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "단어" - "총 등장 횟수" Matching</span></span><br><span class="line"></span><br><span class="line">word_count_dict = dict(zip(word_list, count_list))</span><br><span class="line">word_count_dict</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    {'가가': 4,     '가게': 8,     '가격': 245,     '가격표': 1,     '가구': 8,     '가급': 1,     '가기': 20,     '가까이': 20,     '가끔': 5,     '가능': 10,     '가도': 7,     '가동': 2,     '가두': 1,     '가득': 2,     '가든': 1,     '가라': 3,     '가량': 1,     '가려움': 1,     '가로': 2,     '가면': 14,     '가몬': 1,     '가무': 1,     '가물': 1,     '가미': 1,     '가방': 4,     '가버': 1,     '가성': 49,     '가세': 3,     '가스레인지': 1,     '가스렌지': 1,     '가슴': 1,     '가시': 4,     '가신': 3,     '가야': 10,     '가옥': 1,     '가요': 5,     '가용': 1,     '가운데': 3,     '가을': 4,     '가인': 1,     '가장': 42,     '가정': 4,     '가정식': 2,     '가족': 94,     '가지': 55,     '가짓수': 3,     '가차': 1,     '가치': 15,     '가품': 1,     '각각': 7,     '각오': 1,     '각자': 2,     '각종': 3,     '각층': 1,     '간격': 2,     '간곳': 1,     '간다': 4,     '간단': 1,     '간만': 1,     '간식': 5,     '간이': 3,     '간주': 1,     '간직': 1,     '간판': 2,     '간혹': 1,     '갈껄': 1,     '갈비': 1,     '갈비탕': 1,     '갈수': 7,     '갈수록': 1,     '감각': 1,     '감동': 12,     '감명': 1,     '감사': 6,     '감상': 3,     '감소': 1,     '감안': 5,     '감자': 1,     '감히': 1,     '갑인': 1,     '갑자기': 4,     '갑작스레': 1,     '강남': 1,     '강력': 9,     '강아지': 7,     '강압': 2,     '강제': 1,     '강조': 1,     '강추': 8,     '개념': 1,     '개략': 1,     '개미': 1,     '개발': 3,     '개방': 2,     '개별': 3,     '개보': 1,     '개뿔': 1,     '개선': 4,     '개수대': 1,     '개월': 1,     '개인': 23,     '개인실': 1,     '개인정보': 2,     '개조': 5,     '개층': 1,     '객수': 1,     '객실': 244,     '갤러리': 2,     '갱스터': 1,     '거기': 24,     '거나': 6,     '거두': 1,     '거론': 1,     '거르세': 1,     '거름': 2,     '거리': 156,     '거린데': 1,     '거림': 1,     '거문도': 1,     '거미': 1,     '거부': 4,     '거실': 29,     '거여': 1,     '거울': 5,     '거위': 1,     '거의': 27,     '거절': 3,     '거주': 1,     '거지': 1,     '거참': 1,     '거품': 2,     '걱정': 27,     '건가': 1,     '건강': 2,     '건너': 8,     '건너편': 11,     '건물': 55,     '건의': 1,     '건조': 2,     '건조기': 3,     '건조대': 2,     '건축': 2,     '걷기': 2,     '걸음': 3,     '걸이': 2,     '걸즈': 1,     '검사': 1,     '검색': 13,     '검정색': 1,     '검토': 3,     '것임': 3,     '겉보기': 2,     '게다가': 5,     '게스트': 25,     '게스트하우스': 30,     '게임': 2,     '게재': 1,     '겐찮은듯': 1,     '겔상': 1,     '겨우': 3,     '겨울': 15,     '겨울철': 2,     '격인': 1,     '격하': 1,     '결과': 2,     '결론': 3,     '결석': 1,     '결재': 2,     '결정': 12,     '결제': 1,     '결코': 2,     '결함': 1,     '결항': 2,     '결혼': 1,     '결혼식': 2,     '겸비': 1,     '겸용': 1,     '겹겹': 2,     '경고': 1,     '경관': 3,     '경내': 1,     '경로': 1,     '경매': 1,     '경영': 2,     '경영학': 1,     '경우': 41,     '경쟁': 1,     '경쟁력': 2,     '경찰': 2,     '경치': 17,     '경험': 26,     '계단': 4,     '계란': 11,     '계란후라이': 1,     '계산': 2,     '계속': 23,     '계정': 1,     '계획': 13,     '고가': 1,     '고간': 1,     '고객': 14,     '고급': 8,     '고기': 8,     '고기국수': 1,     '고깃배': 1,     '고내포구': 1,     '고려': 9,     '고루': 1,     '고무줄': 1,     '고문': 2,     '고민': 9,     '고봉': 1,     '고분': 2,     '고생': 1,     '고속': 2,     '고속도로': 2,     '고아': 1,     '고양이': 3,     '고여': 1,     '고오': 1,     '고요': 3,     '고유': 2,     '고작': 1,     '고장': 3,     '고정': 3,     '고층': 2,     '고통': 1,     '고트': 1,     '고함': 2,     '고해': 1,     '곡부': 1,     '곧바로': 2,     '곧장': 2,     '골드스타': 1,     '골목': 6,     '골목길': 2,     '골퍼': 2,     '골프': 9,     '골프장': 5,     '골프텔': 2,     '곰팡이': 14,     '곱슬': 1,     '곳곳': 4,     '곳곳이': 1,     '곳도': 8,     '곳임': 2,     '공간': 73,     '공감': 1,     '공개': 1,     '공공': 2,     '공공장소': 1,     '공급': 2,     '공기': 8,     '공덕': 1,     '공률': 1,     '공물': 1,     '공사': 12,     '공시': 1,     '공실이': 1,     '공연': 8,     '공연장': 2,     '공영': 1,     '공용': 8,     '공원': 17,     '공유': 5,     '공짜': 1,     '공차': 1,     '공터': 1,     '공포': 1,     '공항': 307,     '과거': 1,     '과물': 2,     '과언': 1,     '과일': 9,     '과장': 2,     '관경': 1,     '관계': 3,     '관계자': 2,     '관광': 38,     '관광객': 15,     '관광명소': 4,     '관광지': 12,     '관덕정': 4,     '관련': 6,     '관리': 39,     '관리인': 1,     '관리자': 3,     '관리직': 2,     '관음사': 1,     '관해': 5,     '광경': 2,     '광고': 4,     '광천수': 1,     '괴체': 1,     '교대': 1,     '교수': 1,     '교외': 1,     '교욱받': 1,     '교육': 5,     '교체': 7,     '교통': 30,     '교환': 2,     '교회': 2,     '구가': 3,     '구경': 7,     '구경만': 1,     '구관': 4,     '구글': 2,     '구나': 2,     '구내': 1,     '구덩이': 1,     '구도': 1,     '구두': 2,     '구둣주걱': 1,     '구들장': 1,     '구류': 1,     '구만': 2,     '구매': 14,     '구멍': 7,     '구별': 1,     '구분': 3,     '구비': 11,     '구사': 6,     '구색': 2,     '구석': 2,     '구석구석': 5,     '구성': 7,     '구식': 1,     '구암': 1,     '구역': 3,     '구역질': 2,     '구이': 1,     '구입': 5,     '구조': 12,     '구축': 1,     '국가': 3,     '국내': 1,     '국도': 1,     '국립': 1,     '국수': 3,     '국적': 3,     '국제': 11,     '국제공항': 1,     '군더더기': 1,     '군데': 8,     '군데군데': 2,     '굳럭': 1,     '굳이': 7,     '굿굿': 1,     '굿굿굿': 1,     '굿앤굿': 1,     '굿임': 1,     '권내': 1,     '권장': 5,     '권한': 2,     '귀중': 1,     '규모': 12,     '규율': 2,     '규칙': 1,     '균형': 1,     '그거': 3,     '그것': 70,     '그게': 1,     '그냥': 42,     '그네': 1,     '그녀': 20,     '그다음': 1,     '그다지': 4,     '그닥': 4,     '그대로': 11,     '그동안': 4,     '그때': 3,     '그랜드': 6,     '그레이스': 3,     '그로': 3,     '그룹': 9,     '그릇': 3,     '그린': 1,     '그림': 4,     '극복': 1,     '극악': 1,     '근래': 1,     '근무': 4,     '근본': 1,     '근육통': 1,     '근처': 164,     '근해': 1,     '글래드': 3,     '글쎄': 2,     '금고': 2,     '금늘': 1,     '금능': 2,     '금릉': 1,     '금방': 3,     '금속': 1,     '금액': 8,     '금연': 6,     '금요일': 1,     '금은': 1,     '금지': 1,     '금토일': 1,     '급상승': 1,     '급속': 1,     '기간': 3,     '기계': 4,     '기구': 2,     '기기': 4,     '기념일': 1,     '기능': 4,     '기대': 15,     '기도': 7,     '기류': 3,     '기리': 1,     '기반': 4,     '기본': 45,     '기부': 1,     '기분': 29,     '기사': 8,     '기상': 1,     '기소': 1,     '기숙사': 7,     '기술': 3,     '기술자': 1,     '기억': 11,     '기업': 2,     '기여': 1,     '기용': 1,     '기우': 1,     '기입': 1,     '기적': 1,     '기전': 1,     '기점': 1,     '기존': 1,     '기준': 4,     '기지': 1,     '기타': 5,     '기프트샵': 2,     '기호': 1,     '기회': 11,     '기후': 1,     '긴장': 1,     '길가': 4,     '길림': 1,     '길목': 2,     '길이': 2,     '김녕': 1,     '김녕해변': 1,     '김밥': 1,     '김씨': 1,     '김치': 4,     '김포공항': 1,     '까페': 5,     '깜빡': 1,     '깜짝': 3,     '깨끗': 5,     '깨끗깔끔': 1,     '께빵': 1,     '꼭대기': 2,     '꽃꺽으러': 1,     '꽃사슴': 1,     '꾸러미': 1,     '꾸밈': 1,     '꿀잠': 2,     '끝내기': 1,     '끼리': 18,     '나기': 2,     '나누기': 6,     '나니': 1,     '나라': 2,     '나름': 13,     '나머지': 6,     '나머진': 1,     '나무': 13,     '나물': 1,     '나보': 1,     '나오니': 2,     '나우': 1,     '나은': 5,     '나이': 3,     '나이트': 2,     '나이프': 2,     '나중': 8,     '나탈리': 2,     '낙후': 3,     '낚시': 3,     '난로': 3,     '난리': 3,     '난방': 30,     '난입': 2,     '난타': 9,     '날수': 1,     '날씨': 12,     '날짜': 1,     '남녀': 1,     '남성': 2,     '남아': 5,     '남자': 6,     '남자친구': 2,     '남짓': 1,     '남쪽': 1,     '남편': 10,     '낭만': 2,     '내겐': 1,     '내내': 8,     '내년': 1,     '내부': 40,     '내부시': 1,     '내시': 1,     '내야': 1,     '내외': 2,     '내용': 2,     '내의': 2,     '내인': 1,     '내일': 2,     '냄비': 1,     '냄새': 58,     '냉동': 1,     '냉장고': 35,     '너븐팡': 2,     '넓이': 1,     '네스프레소': 1,     '네이버': 3,     '년대': 2,     '년전': 1,     '녔던': 1,     '노곤': 2,     '노래': 1,     '노래방': 3,     '노력': 8,     '노리': 1,     '노블레스': 1,     '노선': 2,     '노을': 1,     '노크': 1,     '노트북': 2,     '노화': 1,     '노후': 6,     '녹물': 1,     '녹음': 4,     '녹지': 1,     '논평': 1,     '놀러와': 2,     '놀수': 1,     '놀이': 3,     '놀이기구': 2,     '놀이터': 2,     '농부가': 1,     '농장': 3,     '높이': 2,     '놨더군': 1,     '누가': 5,     '누구': 5,     '누군가': 4,     '누락': 1,     '누리': 1,     '누울': 2,     '눈앞': 3,     '뉴타운': 1,     '느낌': 49,     '는걸': 2,     '늘송': 3,     '능리': 1,     '다가': 1,     '다그': 1,     '다다미': 1,     '다라': 1,     '다락방': 1,     '다른': 88,     '다른사람': 1,     '다리미': 2,     '다만': 54,     '다미': 1,     '다발': 1,     '다섯': 1,     '다소': 21,     '다수': 2,     '다시': 93,     '다운': 4,     '다음': 102,     '다이지': 1,     '다인': 1,     '다정': 2,     '다행': 3,     '단계': 4,     '단기': 1,     '단면': 1,     '단어': 2,     '단위': 2,     '단점': 40,     '단정': 1,     '단지': 16,     '단체': 19,     '달걀': 3,     '달걀프라이': 1,     '달라': 13,     '달러': 7,     '달리': 6,     '달성': 1,     '닭머르': 1,     '담당': 2,     '담배': 19,     '담소': 2,     '담요': 1,     '답변': 3,     '당구': 2,     '당근': 2,     '당나귀': 2,     '당분간': 1,     '당시': 1,     '당신': 21,     '당일': 3,     '당황': 7,     '대가': 3,     '대가족': 2,     '대고': 1,     '대관령': 1,     '대답': 3,     '대당': 1,     '대도': 3,     '대도시': 2,     '대뜸': 1,     '대략': 6,     '대로': 8,     '대리': 3,     '대명': 1,     '대박': 3,     '대부분': 23,     '대비': 64,     '대상': 1,     '대신': 8,     '대안': 2,     '대여': 3,     '대요': 2,     '대욕': 1,     '대응': 2,     '대의': 4,     '대입': 1,     '대적': 1,     '대접': 1,     '대정': 1,     '대중': 9,     '대중교통': 6,     '대처': 2,     '대체': 2,     '대충': 3,     '대포': 1,     '대표': 4,     '대하': 1,     '대한': 19,     '대한민국': 2,     '대한항공': 1,     '대해': 21,     '대행': 1,     '대형': 10,     '대화': 11,     '대환영': 1,     '댐핑할': 1,     '더군다나': 1,     '더더': 2,     '더러': 1,     '더블': 29,     '더블베드': 4,     '더욱': 5,     '더원': 1,     '덕림사': 1,     '덕분': 6,     '덕택': 3,     '던데': 1,     '덮어놓고': 1,     '데리': 5,     '데스크': 30,     '데스크톱': 1,     '데이': 1,     '데이즈': 1,     '델문': 2,     '도구': 18,     '도달': 3,     '도대체': 1,     '도도': 1,     '도둑': 1,     '도로': 41,     '도록': 1,     '도리어': 1,     '도미': 9,     '도보': 35,     '도서관': 1,     '도시': 18,     '도시락': 4,     '도심': 14,     '도심지': 1,     '도어': 3,     '도어락': 1,     '도움': 51,     '도움말': 1,     '도일': 1,     '도정': 1,     '도중': 2,     '도착': 69,     '도처': 1,     '도청': 2,     '도쿄': 1,     '도크': 1,     '독립': 6,     '독서': 1,     '독점': 1,     '독채': 5,     '돈까스': 1,     '돌담': 1,     '돌잔치': 1,     '동계': 1,     '동광양': 1,     '동굴': 1,     '동남': 1,     '동남아': 2,     '동네': 7,     '동도': 1,     '동료': 2,     '동문': 14,     '동물': 9,     '동물원': 2,     '동반': 3,     '동부': 2,     '동북': 1,     '동생': 3,     '동선': 3,     '동시': 7,     '동안': 48,     '동영상': 1,     '동의': 3,     '동이': 1,     '동인': 2,     '동작': 1,     '동전': 1,     '동정': 1,     '동쪽': 5,     '돼지': 16,     '돼지고기': 4,     '됏다': 1,     '될껀': 1,     '될껄': 1,     '두루': 2,     '두번째': 2,     '두봉': 2,     '두부': 1,     '두엄': 1,     '두운': 2,     '두툼': 1,     '둘러보기': 1,     '둘이서': 3,     '둘째': 5,     '둥근지붕': 1,     '뒤쪽': 4,     '뒤척': 1,     '뒷골목': 1,     '뒷마당': 1,     '뒷문': 1,     '뒷쪽': 2,     '드네': 1,     '드라이기': 7,     '드라이버': 1,     '드라이브': 11,     '드라이어': 11,     '드롭': 1,     '드릴': 1,     '드타': 1,     '드하': 2,     '득시': 1,     '듭니': 5,     '듯이': 1,     '듯해': 1,     '등급': 3,     '등대': 3,     '등등': 8,     '등반': 3,     '등산': 6,     '등정후': 1,     '디귿': 1,     '디너': 4,     '디럭스': 6,     '디봇': 1,     '디셈버': 2,     '디자이너': 1,     '디자인': 11,     '디저트': 1,     '디제이': 2,     '따라서': 4,     '때로는': 1,     '때문': 112,     '떡국': 2,     '또오': 1,     '또한': 76,     '뚜벅': 3,     '뜨근뜨근': 1,     '뜨내기': 1,     '라그': 1,     '라마': 4,     '라며': 3,     '라면': 15,     '라서': 1,     '라스베가스': 1,     '라우터': 1,     '라운지': 9,     '라이센스': 1,     '라커룸': 1,     '락스': 2,     '락심이': 1,     '락커': 2,     '락타': 1,     '란딩': 1,     '랍니': 1,     '랜드': 1,     '랜트': 1,     '랜트카': 1,     '랜트하': 1,     '램프': 2,     '러닝': 1,     '러브': 3,     '럭셔리': 5,     '런가': 2,     '렀는데': 1,     '렀습니': 2,     '렀으': 1,     '레노': 1,     '레드': 1,     '레벨': 1,     '레비': 1,     '레스토랑': 64,     '레시': 1,     '레오': 2,     '레이': 1,     '레이크': 1,     '레인지': 3,     '레저': 1,     '레프트': 1,     '렌즈': 1,     '렌탈업체': 1,     '렌터': 1,     '렌터카': 4,     '렌트': 17,     '렌트카': 8,     '려고': 4,     '려운': 1,     '로고': 1,     '로그': 3,     '로만': 1,     '로맨틱': 2,     '로부터': 2,     '로비': 49,     '로서': 2,     '로션': 1,     '로얄': 1,     '로움': 1,     '로컬': 3,     '로터리': 1,     '로프트': 1,     '롯데': 6,     '롯데리아': 2,     '롱보드': 1,     '루온토': 1,     '루트': 1,     '루프': 17,     '룸메이트': 1,     '룸바닥': 1,     '룸상태': 2,     '룸서비스': 9,     '룸안': 1,     '룸키': 2,     '룸타입': 1,     '를위': 1,     '리가': 2,     '리기': 1,     '리넨': 1,     '리뉴': 1,     '리뉴얼': 1,     '리더': 1,     '리도': 1,     '리모콘': 3,     '리베라': 2,     '리베로': 1,     '리빙룸': 2,     '리셉션': 29,     '리움': 2,     '리젠시': 1,     '리조트': 53,     '리지': 1,     '리치': 1,     '리트': 1,     '리플렛': 1,     '린스': 2,     '링잉': 1,     '마누카꿀': 1,     '마늘': 1,     '마다': 1,     '마담': 2,     '마당': 2,     '마레': 2,     '마련': 7,     '마루': 5,     '마리': 11,     '마모': 1,     '마무리': 3,     '마사지': 4,     '마술': 1,     '마스코트': 2,     '마스크': 1,     '마스터': 2,     '마시기': 2,     '마안': 1,     '마운트': 1,     '마을': 9,     '마음': 31,     '마이너스': 1,     '마인드': 4,     '마일리지': 2,     '마자': 2,     '마저': 1,     '마주': 4,     '마지막': 21,     '마지막여행': 1,     '마차': 1,     '마찬가지': 4,     '마치': 12,     '마침내': 3,     '마켓': 9,     '마트': 14,     '마틸다': 2,     '막걸리': 1,     '만끽': 1,     '만난': 1,     '만날': 1,     '만남': 1,     '만다린': 2,     '만두': 1,     '만들기': 1,     '만료': 1,     '만약': 6,     '만요': 1,     '만원': 20,     '만점': 1,     '만족': 12,     '만족도': 1,     '만천원': 1,     '만큼': 2,     '만하': 2,     '만해': 2,     '만화책': 1,     '말레이시아': 1,     '말레이시아인': 1,     '말로': 2,     '말리': 1,     '말씀': 7,     '말투': 3,     '말함': 2,     '맘스': 1,     '맛사지': 1,     '맛잇엇어': 1,     '맛집': 25,     '망각': 1,     '망신': 2,     '망치': 2,     '맞은편': 7,     '맞이': 5,     '매년': 2,     '매니': 1,     '매니저': 3,     '매달': 1,     '매듭': 1,     '매력': 5,     '매번': 1,     '매우': 265,     '매운탕': 1,     '매일': 36,     '매장': 3,     '매점': 3,     '매칭': 1,     '매트': 5,     '매트리스': 13,     '매트릭스': 1,     '매하': 1,     '맥도날드': 5,     '맥도널드': 1,     '맥주': 22,     '맥주잔': 1,     '맨발': 3,     '머리': 7,     '머리카락': 4,     '머신': 3,     '머싱': 1,     '먹거리': 7,     '먹기': 2,     '먹방': 1,     '먹이': 3,     '먼저': 3,     '먼지': 3,     '멀리': 14,     '메가박스': 1,     '메뉴': 15,     '메리': 1,     '메리어트': 1,     '메시지': 1,     ...}</pre></div><br><br>  <h3 id="3-5-tf-idf-적용"><a class="markdownIt-Anchor" href="#3-5-tf-idf-적용"></a> 3-5. TF-IDF 적용</h3><p><strong>&gt;&gt; TF-IDF 변환</strong></p><p>Bag of Words 벡터에 대해서 TF-IDF변환 진행합니다.</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"></span><br><span class="line">tfidf_vectorizer = TfidfTransformer()</span><br><span class="line">tf_idf_vect = tfidf_vectorizer.fit_transform(bow_vect)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tf_idf_vect.shape)</span><br></pre></td></tr></tbody></table></figure><pre><code>(1001, 3599)</code></pre><br><p>변환 후 1001*3599 matrix가 출력됩니다. 여기서</p><ul><li><p>한 행(row)은 한 리뷰를 의미하고</p></li><li><p>한 열(column)은 한 단어를 의미합니다.</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 첫 번째 리뷰에서의 단어 중요도(TF-IDF 값) -- 0이 아닌 것만 출력</span></span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>  (0, 3588)0.35673213299026796  (0, 2927)0.2582351368959594  (0, 2925)0.320251680858207  (0, 2866)0.48843555212083145  (0, 2696)0.23004450213863206  (0, 2311)0.15421663035331626  (0, 1584)0.48843555212083145  (0, 1527)0.2928089229786031  (0, 790)0.2528176728459411</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 첫 번째 리뷰에서 모든 단어의 중요도 -- 0인 값까지 포함</span></span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>].toarray().shape)</span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>].toarray())</span><br></pre></td></tr></tbody></table></figure><pre><code>(1, 3599)[[0. 0. 0. ... 0. 0. 0.]]</code></pre><br><p><strong>&gt;&gt; “벡터” - “단어” mapping</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vect.vocabulary_</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    {'집중': 2866,     '휴식': 3588,     '제공': 2696,     '위치': 2311,     '선정': 1584,     '또한': 790,     '청소': 2927,     '청결': 2925,     '상태': 1527,     '이상': 2392,     '침대': 3022,     '이불': 2388,     '침구': 3021,     '교체': 299,     '어메니티': 2013,     '보강': 1296,     '베스트': 1277,     '웨스턴': 2299,     '회원': 3564,     '경우': 185,     '객실': 106,     '층수': 3009,     '요청': 2234,     '적극': 2606,     '반영': 1188,     '지인': 2837,     '소개': 1629,     '처음': 2910,     '당황': 611,     '세면': 1607,     '도구': 675,     '잠옷': 2555,     '필수': 3358,     '그것': 361,     '정도': 2673,     '다음': 578,     '여기': 2074,     '박만': 1171,     '저녁': 2595,     '맥주': 981,     '한잔': 3414,     '렌트': 838,     '뚜벅': 791,     '바로': 1159,     '버스': 1247,     '정류': 2676,     '도착': 697,     '가방': 24,     '일찍': 2487,     '정비': 2685,     '방이': 1225,     '입실': 2500,     '업그레이드': 2038,     '직원': 2849,     '정말': 2680,     '바다': 1148,     '전망': 2623,     '전일': 2636,     '함덕': 3425,     '대명': 624,     '콘도': 3091,     '실내': 1861,     '분위기': 1384,     '손님': 1659,     '가장': 40,     '배치': 1241,     '대해': 651,     '대응': 634,     '써비스': 1889,     '조식': 2730,     '부분': 1351,     '신경': 1838,     '아주': 1922,     '특급': 3208,     '트랜디': 3191,     '고민': 210,     '흔적': 3593,     '여름': 2082,     '수영장': 1700,     '사용': 1483,     '보고': 1297,     '엄마': 2035,     '가격': 2,     '대비': 627,     '주위': 2769,     '마트': 924,     '식당': 1826,     '시장': 1816,     '방문': 1217,     '의사': 2361,     '동안': 726,     '정해진': 2695,     '휘슬': 3580,     '공항': 269,     '생각': 1539,     '시설': 1809,     '모두': 1028,     '친절': 3017,     '모드': 1029,     '마지막': 917,     '마무리': 900,     '테라스': 3156,     '전경': 2612,     '인근': 2427,     '재래시장': 2583,     '야시장': 1979,     '이용도': 2402,     '이용': 2400,     '일차': 2488,     '휘슬락': 3581,     '체크': 2940,     '주변': 2761,     '여친': 2094,     '추억': 2975,     '가성': 26,     '추천': 2977,     '후회': 3575,     '예전': 2145,     '그랜드': 372,     '저희': 2605,     '아이': 1918,     '돌잔치': 708,     '다정': 581,     '했었더랬': 3470,     '전통': 2642,     '메종': 1004,     '글래드': 387,     '서비스': 1563,     '매우': 969,     '합리': 3428,     '대의': 635,     '명절': 1018,     '숙박': 1721,     '아티': 1928,     '백미': 1243,     '커피': 3061,     '베이커리': 1280,     '가족': 43,     '플러스': 3342,     '지금': 2816,     '우선': 2257,     '접근성': 2664,     '쇼핑': 1671,     '만족도': 940,     '최고': 2957,     '무엇': 1078,     '기억': 423,     '우리': 2251,     '찾기': 2902,     '교통': 300,     '이틀': 2418,     '정원': 2691,     '거기': 109,     '겨울': 160,     '친구': 3016,     '놀러와': 541,     '투숙': 3185,     '야외': 1981,     '방향': 1235,     '야간': 1976,     '조명': 2726,     '순간': 1723,     '대접': 638,     '실명': 1868,     '거론': 112,     '프론트': 3337,     '이름': 2378,     '안나': 1938,     '기분': 416,     '모습': 1037,     '첫날': 2921,     '스타트': 1761,     '다시': 576,     '선물': 1578,     '카운터': 3032,     '안내': 1939,     '디너': 777,     '기회': 438,     '미니바': 1121,     '무료': 1067,     '최근': 2959,     '관광지': 281,     '숙고': 1719,     '강추': 88,     '야경': 1977,     '일부러': 2475,     '일어나서': 2476,     '동네': 714,     '바퀴': 1168,     '먹방': 990,     '신라': 1843,     '퀄리티': 3105,     '모녀': 1024,     '제주시': 2711,     '위해': 2313,     '선택': 1586,     '오픈': 2180,     '예약': 2143,     '대로': 622,     '거리': 115,     '더군다나': 657,     '셔틀버스': 1627,     '운행': 2271,     '데스크': 670,     '차안': 2880,     '분도': 1374,     '인상': 2438,     '트윈': 3201,     '사이즈': 1489,     '만족': 939,     '스타': 1758,     '가짓수': 45,     '느낌': 558,     '화장실': 3538,     '내부': 505,     '인테리어': 2455,     '질적': 2859,     '이건': 2368,     '개인': 100,     '취향': 3005,     '구비': 321,     '과일': 273,     '나이프': 480,     '포크': 3295,     '부탁': 1364,     '준비': 2786,     '표방': 3305,     '모텔': 1046,     '결론': 165,     '훌륭': 3577,     '시간': 1799,     '슈페리어킹룸': 1737,     '하루': 3376,     '후기': 3570,     '지은지': 2836,     '얼마': 2033,     '건물': 136,     '약간': 1985,     '유럽': 2318,     '스타일': 1760,     '그림': 378,     '조각': 2715,     '복도': 1323,     '전시': 2633,     '전부': 2630,     '카펫': 3039,     '등급': 770,     '다른': 567,     '이서': 2394,     '자기': 2512,     '조금': 2722,     '외투': 2218,     '완전': 2206,     '진짜': 2856,     '셔틀': 1626,     '미리': 1127,     '시티': 1821,     '오름': 2162,     '다만': 570,     '도로': 680,     '가인': 39,     '관계': 276,     '차량': 2876,     '소리': 1638,     '다소': 574,     '방도': 1215,     '편의점': 3273,     '칫솔': 3027,     '동계': 709,     '훈련': 3576,     '라마': 795,     '연인': 2116,     '전체': 2641,     '사진': 1493,     '첨부': 2920,     '엘리베이터': 2064,     '실시간': 1873,     '비행기': 1440,     '택시': 3151,     '미만': 1128,     '이동': 2374,     '가능': 9,     '최상': 2961,     '욕실': 2235,     '슬리퍼': 1791,     '위생': 2304,     '염려': 2123,     '설날': 1590,     '떡국': 788,     '려고': 840,     '현장': 3495,     '결재': 167,     '황스': 3559,     '려운': 841,     '중국': 2789,     '만두': 932,     '종류': 2744,     '별로': 1293,     '구만': 316,     '메뉴': 996,     '답변': 603,     '제일': 2709,     '주차': 2779,     '걱정': 131,     '할아버지': 3423,     '안심': 1945,     '컨디션': 3067,     '문어': 1095,     '처리': 2909,     '회사': 3561,     '출장': 2988,     '서울': 1567,     '간혹': 64,     '이벤트': 2386,     '해주시': 3460,     '부대': 1344,     '항상': 3435,     '롯데': 855,     '비지니스': 1434,     '여행객': 2097,     '손색': 1664,     '욕조': 2236,     '겸비': 175,     '사계절': 1459,     '수풀': 1715,     '중문': 2794,     '표선등': 3306,     '원거리': 2281,     '여행지': 2101,     '복귀': 1322,     '시내': 1805,     '유명': 2323,     '일단': 2462,     '주차장': 2781,     '지하': 2844,     '공간': 246,     '응대': 2356,     '문의사항': 1097,     '신지': 1850,     '감동': 71,     '역시': 2106,     '장도': 2566,     '락타': 807,     '샤워': 1550,     '마련': 896,     '코인': 3089,     '세탁실': 1620,     '오션': 2167,     '멀리': 994,     '남자친구': 497,     '덕분': 665,     '이번': 2385,     '프런트': 3331,     '배정': 1239,     '이착륙': 2415,     '클리닝': 3120,     '근무': 382,     '아주머니': 1923,     '인사': 2436,     '코로나': 3085,     '사태': 1496,     '노화': 535,     '벽지': 1286,     '주름': 2756,     '지고': 2814,     '타일': 3133,     '가구': 4,     '코너': 3082,     '곳곳이': 243,     '관광객': 279,     '인지': 2449,     '사람': 1463,     '북적': 1369,     '전반': 2627,     '관리': 284,     '편이': 3274,     '피드백': 3346,     '편입': 3276,     '도시': 686,     '관광': 278,     '특화': 3214,     '지역': 2834,     '근처': 385,     '카페': 3034,     '가기': 6,     '고유': 221,     '특색': 3210,     '스테이': 1768,     '가도': 10,     '스타벅스': 1759,     '번화가': 1263,     '아침': 1924,     '커서': 3057,     '방음': 1224,     '먹거리': 988,     '단점': 588,     '라면': 797,     '오심': 2170,     '이중': 2411,     '혼자': 3523,     '겐찮은듯': 157,     '다그': 563,     '도일': 694,     '께빵': 456,     '중국인': 2793,     '타고': 3127,     '눈앞': 556,     '가지': 44,     '힐링': 3598,     '피트니스': 3354,     '패키지': 3254,     '미닫이': 1122,     '로비': 847,     '비롯': 1421,     '모든': 1030,     '각종': 52,     '물건': 1103,     '아침식사': 1926,     '밥맛': 1207,     '피아노': 3349,     '연주': 2118,     '룸타입': 867,     '패밀리': 3250,     '거실': 121,     '한실': 3412,     '서부': 1562,     '수산시장': 1690,     '새벽': 1534,     '경매': 182,     '구경': 304,     '추가': 2972,     '어차피': 2022,     '현재': 3496,     '묵고': 1090,     '인터넷': 2453,     '지정': 2840,     '안해': 1952,     '프런터': 3330,     '문의': 1096,     '영화': 2135,     '시스템': 1810,     '티브이': 3219,     '채널': 2903,     '몇개': 1020,     '콘센트': 3092,     '플러그': 3341,     '와이프': 2201,     '충전': 2995,     '결정': 168,     '달라': 594,     '경험': 190,     '장점': 2579,     '인생': 2439,     '최악': 2966,     '중심': 2797,     '바닷가': 1153,     '비교': 1413,     '편임': 3275,     '한번': 3408,     '예정': 2146,     '휴가': 3585,     '스위트룸': 1750,     '유리창': 2322,     '위트': 2312,     '캠핑': 3050,     '테이블': 3160,     '세트': 1621,     '텐트': 3161,     '에어컨': 2054,     '작은방': 2543,     '매트': 975,     '자리': 2520,     '탑동': 3142,     '공원': 263,     '프리': 3338,     '마켓': 923,     '공연': 259,     '매일': 971,     '식사': 1833,     '관덕정': 282,     '정문': 2682,     '도보': 684,     '소요': 1645,     '해장국': 3458,     '동문': 717,     '서문시장': 1560,     '목관': 1047,     '맞은편': 960,     '슬슬': 1792,     '별관': 1291,     '본관': 1330,     '갈수': 68,     '최신': 2965,     '그린': 377,     '환경': 3545,     '때문': 787,     '별도': 1292,     '대중교통': 641,     '구매': 317,     '심플': 1882,     '비품': 1438,     '트윈침대': 3205,     '스탠다드': 1763,     '높이': 548,     '한라산': 3404,     '노곤': 525,     '터미널': 3152,     '온돌룸': 2189,     '세면대': 1608,     '물이': 1114,     '치약': 3013,     '것임': 150,     '생수': 1545,     '환승': 3550,     '곧바로': 231,     '동광양': 710,     '정류장': 2677,     '시청': 1818,     '스텝': 1771,     '협소하': 3502,     '거품': 130,     '타월': 3131,     '화장': 3537,     '대가': 612,     '거울': 123,     '쇼파': 1670,     '조합': 2739,     '금액': 395,     '주차공간': 2780,     '공터': 267,     '태풍': 3150,     '개층': 104,     '오후': 2184,     '한시': 3409,     '사우나': 1485,     '부모님': 1349,     '할머니': 3422,     '모시': 1038,     '계획': 197,     '일로': 2464,     '빠듯해': 1445,     '어디': 2004,     '길가': 441,     '골목길': 235,     '이륙': 2377,     '착륙': 2887,     '보이': 1310,     '그냥': 363,     '일반': 2469,     '대욕': 633,     '헬스장': 3489,     '가면': 19,     '고려': 206,     '렌터카': 837,     '입구': 2496,     '반대쪽': 1182,     '한정': 3416,     '단체': 591,     '더블': 660,     '제외': 2708,     '여유': 2088,     '반대편': 1183,     '도심': 688,     '불구': 1387,     '소음': 1648,     '거의': 125,     '세명': 1609,     '트리플': 3199,     '전날': 2618,     '남아': 495,     '자체': 2534,     '당일': 610,     '정보': 2683,     '햇반': 3468,     '장조림': 2580,     '전자': 2637,     '레인지': 831,     '가야': 33,     '세미나': 1610,     '한국인': 3400,     '그대로': 369,     '나름': 469,     '제과점': 2697,     '정거장': 2670,     '모기': 1022,     '만해': 944,     '마리': 898,     '가량': 16,     '방안': 1222,     '에프킬라': 2058,     '비치': 1435,     '계속': 195,     '뿌리': 1456,     '잡고': 2557,     '찬장': 2891,     '천장': 2915,     '곳곳': 242,     '측은': 3008,     '벌레': 1265,     '기본': 414,     '요금': 2223,     '건너편': 135,     '번호': 1262,     '샐러드': 1538,     '음식': 2349,     '구성': 326,     '전복죽': 2629,     '저번': 2601,     '핸드폰': 3464,     '충전기': 2996,     '불편': 1400,     '센터': 1622,     '공사': 256,     '숙면': 1720,     '무난': 1061,     '노력': 528,     '지불': 2826,     '비용': 1430,     '로맨틱': 845,     '독립': 702,     '북유럽': 1368,     '유리': 2321,     '커튼': 3059,     '바깥': 1145,     '설치': 1595,     '모던': 1025,     '비데': 1418,     '효율': 3569,     '인치': 2451,     '삼성': 1512,     '만끽': 927,     '편안함': 3270,     '여정': 2091,     '바닥': 1151,     '목적': 1052,     '커플': 3060,     '끼리': 464,     '직진': 2852,     '운전': 2268,     '공영': 261,     '애기': 1962,     '무선인터넷': 1074,     '갑자기': 80,     '서전': 1568,     '항공': 3432,     '다가': 562,     '가급': 5,     '결제': 169,     '은방': 2342,     '상황': 1533,     '아시': 1914,     '고트': 227,     '지도': 2822,     '세심': 1614,     '공시': 257,     '시작': 1815,     '맥주잔': 982,     '쿠폰': 3102,     '일도': 2463,     '크기': 3108,     '룸서비스': 864,     '정신': 2690,     '평가': 3277,     '편의': 3272,     '요즘': 2233,     '여러': 2078,     '직언': 2848,     '블룸': 1412,     '변기': 1288,     '물질': 1115,     '얘기': 1997,     '수건': 1675,     '환불': 3548,     '월일': 2293,     '푸른': 3313,     '파도': 3223,     '철썩': 2918,     '풍경': 3320,     '생선회': 1544,     '장소': 2573,     '놀이': 543,     '양도': 1989,     '돼지': 735,     '전골': 2613,     '매운탕': 970,     '형편': 3512,     '브런치': 1406,     '뒤쪽': 751,     '맛집': 956,     '쭈욱': 2869,     '갑인': 79,     '드타': 764,     '방파제': 1233,     '횟집': 3567,     '타운': 3129,     '해산물': 3448,     '규모': 356,     '가까이': 7,     '어르신': 2008,     '깨끗': 454,     '대신': 629,     '작고': 2538,     '수영': 1697,     '아쉬움': 1912,     '인도': 2430,     '소독약': 1634,     '스비': 1745,     '홀로': 3525,     '등정후': 775,     '부터': 1365,     '혹시': 3520,     '확인': 3543,     '전화': 2645,     '통해': 3180,     '휘트니': 3582,     '운동복': 2266,     '수영모': 1698,     '고오': 219,     '바람': 1157,     '대여': 631,     '여직원': 2093,     '무시': 1077,     '말투': 951,     '원래': 2284,     '제로': 2700,     '운영': 2267,     '일반인': 2470,     '입장': 2503,     '선심': 1583,     '필요': 3360,     '기전': 430,     '대뜸': 620,     '화가': 3528,     '고객': 200,     '플레인': 3343,     '시경': 1800,     '아웃': 1917,     '하야': 3382,     '메리어트': 998,     '여럿': 2081,     '이어도': 2397,     '수준': 1707,     '이군': 2370,     '실망': 1867,     '종일': 2747,     '리셉션': 880,     '컨시어': 3070,     '태도': 3147,     '유료': 2319,     '사고': 1460,     '학생': 3393,     '선생님': 1580,     '어딘': 2005,     '사항': 1498,     '무슨': 1075,     '거지': 128,     '리빙룸': 879,     '하나요': 3368,     '트윈룸': 3202,     '무려': 1065,     '게재': 156,     '실물': 1869,     '차이': 2881,     '실화': 1879,     '파우더': 3231,     '곰팡이': 240,     '자국': 2511,     '작동': 2539,     '골드스타': 233,     '냉장고': 517,     '절대': 2649,     '레스토랑': 826,     '자꾸': 2513,     '정색': 2687,     '살짝': 1510,     '서버': 1561,     '데리': 669,     '가신': 32,     '나머지': 470,     '물기': 1105,     '직접': 2851,     '체계': 2931,     '엉망': 2048,     '소규모': 1630,     '시기': 1803,     '마음': 910,     '리트': 886,     '라그': 794,     '기대': 409,     '실내수영장': 1862,     '수온': 1701,     '스위트': 1749,     '비수': 1427,     '상대': 1515,     '노후': 536,     '정가': 2669,     '무리': 1072,     '할인': 3424,     '행사': 3473,     '참고': 2893,     '포함': 3298,     '마일리지': 913,     '대한항공': 650,     '하룻밤': 3377,     '확실': 3542,     '연식': 2115,     '고급': 201,     '원가': 2280,     '서우': 1566,     '해수욕장': 3453,     '한눈': 3402,     '창문': 2900,     '겨울철': 161,     '온도': 2187,     '리기': 870,     '방기': 1214,     '동시': 725,     '방식': 1221,     '대략': 621,     '도정': 695,     '부스': 1352,     '옆방': 2137,     '티비': 3220,     '취침': 3001,     '초등학생': 2946,     '양호': 1996,     '한식당': 3411,     '차라리': 2875,     '반드시': 1184,     '크게': 3107,     '씨유': 1896,     '델문': 674,     '카페나': 3035,     '해수욕': 3452,     '최적': 2969,     '디럭스': 778,     '발코니': 1203,     '모로': 1034,     '트윈룸입니': 3203,     '선착순': 1585,     '예술': 2142,     '물놀이': 1106,     '모래': 1031,     '피크': 3352,     '시즌': 1817,     '날씨': 491,     '선선': 1581,     '근래': 381,     '편리': 3269,     '코르': 3086,     '기지': 434,     '사양': 1481,     '주체': 2782,     '교회': 302,     '절반': 2653,     '인수': 2440,     '보임': 1314,     '아트': 1927,     '추정': 2976,     '프로': 3333,     '페셔': 3264,     '인력': 2432,     '매트리스': 976,     '나무': 472,     '허리': 3482,     '안감': 1934,     '해변': 3447,     '워낙': 2275,     '가시': 31,     '주말': 2757,     '한국': 3397,     '벚꽃': 1270,     '기간': 403,     '협재': 3503,     '옹포': 2197,     '밥집': 1209,     '산책': 1505,     '루프': 860,     '비바람': 1425,     '불어': 1396,     '블로거': 1410,     '물떄': 1108,     '그거': 360,     '위주': 2308,     '풀이': 3317,     '온수': 2192,     '미온수': 1133,     '미온': 1132,     '자쿠지': 2536,     '잠깐': 2551,     '인피니트': 2458,     '환상': 3549,     '하나': 3365,     '스페': 1782,     '치킨': 3015,     '빠에야': 1446,     '스파': 1779,     '구조': 333,     '스파룸': 1780,     '자쿠': 2535,     '이용권': 2401,     '하니': 3371,     '사이': 1487,     '시트': 1820,     '정리': 2678,     '삼다수': 1511,     '병과': 1294,     '네스프레소': 520,     '캡슐': 3051,     '여자': 2089,     '피로': 3347,     '스페인': 1784,     '영업': 2132,     '종료': 2743,     '버거': 1245,     '오른쪽': 2161,     '마담': 893,     '나탈리': 482,     '음악': 2351,     '필터': 3362,     '실외수영장': 1875,     '검색': 147,     '옥상': 2186,     '결과': 164,     '대형': 653,     '만큼': 942,     '번잡': 1260,     '개수대': 98,     '이전': 2407,     '아무': 1909,     '리지': 884,     '제한': 2714,     '경치': 189,     '이웃': 2403,     '일몰': 2467,     '실제': 1877,     '리조트': 883,     '홍보': 3527,     '상통': 1529,     '화산': 3532,     '바위': 1166,     '정상': 2686,     '기점': 431,     '스템': 1770,     '잠자리': 2556,     '기타': 435,     '부족함': 1359,     '길이': 444,     '다행': 582,     '중국어': 2792,     '영어': 2131,     '도움': 692,     '해결': 3438,     '목적지': 1053,     '해피': 3461,     '음료': 2346,     '사이다': 1488,     '주스': 2764,     '달걀': 592,     '치즈': 3014,     '히터': 3597,     '투어': 3187,     '호스텔': 3515,     '질문': 2858,     '상품': 1530,     '과거': 270,     '게스트하우스': 154,     '자고': 2510,     '오기': 2150,     '일이': 2479,     '발전': 1201,     '예상': 2141,     '토스터': 3165,     '이후': 2424,     '소등': 1635,     '불키': 1399,     '조용조': 2733,     '방키': 1232,     '고여': 218,     '남자': 496,     '안전': 1946,     '차로': 2878,     '이내': 2373,     '뷔페': 1403,     '여느': 2076,     '롯데리아': 856,     '방만': 1216,     '고정': 224,     '무궁화': 1060,     '수기': 1676,     '사이트': 1490,     '홈페이지': 3526,     '마치': 921,     '무척': 1088,     '전기차': 2617,     '건너': 134,     '급속': 402,     '소가': 1628,     '유치원': 2333,     '주택가': 2784,     ...}</pre></div><br><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invert_index_vectorizer = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> vect.vocabulary_.items()}</span><br><span class="line">print(str(invert_index_vectorizer)[:<span class="number">100</span>]+<span class="string">'...'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>{2866: '집중', 3588: '휴식', 2696: '제공', 2311: '위치', 1584: '선정', 790: '또한', 2927: '청소', 2925: '청결', 1527...</code></pre><br><br><h2 id="4-감성-분류-logistic-regression"><a class="markdownIt-Anchor" href="#4-감성-분류-logistic-regression"></a> <strong>4. 감성 분류 – Logistic Regression</strong></h2><p>이제 전처리된 리뷰 데이터를 활용하여 <strong>감성 분류 예측 모델</strong>을 만들겠습니다.</p><p>감성 분류 예측 모델이란, 이용자 리뷰의 평가 내용을 통해 이 리뷰가 긍정적인지, 부정적인지를 예측하여, 이용자의 감성을 파악하는 겁니다.</p><p>따라서, 모델의 <strong>X 값(즉, feature 값)은 이용자 리뷰의 평가 내용</strong>이 되겠고, 모델의 <strong>Y 값(즉, label 값)은 이용자의 긍/부정 감성</strong>이 되겠습니다.</p><br><h3 id="4-1-데이터셋-생성"><a class="markdownIt-Anchor" href="#4-1-데이터셋-생성"></a> 4-1. 데이터셋 생성</h3><p><strong>&gt;&gt; Label</strong></p><p>우리는 이용자의 리뷰를 “긍정” / “부정” 두가지 부류로 나누고자 합니다. 하지만 이러한 이용자의 감성을 대표할 수 있는 “평가 점수” 변수는 1 ~ 5의 value를 가지고 있습니다. 따라서 <strong>"평가 점수"변수</strong> (rating: 1 ~ 5)를 <strong>이진 변수</strong> (긍정: 1, 부정:0)으<strong>로 변환</strong>해야 합니다.</p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sample(<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>rating</th>      <th>text</th>    </tr>  </thead>  <tbody>    <tr>      <th>951</th>      <td>3</td>      <td>나는 그것이 수영장을 가지고 있기 때문에 여기에서 예약했다. 그러나 수영장에 물이 ...</td>    </tr>    <tr>      <th>47</th>      <td>4</td>      <td>시설은 좀 오래 되었지만 동문시장, 서문시장 도보 10분거리이고 공항에서도 가깝습니...</td>    </tr>    <tr>      <th>574</th>      <td>4</td>      <td>호스트는 아주 친절하고 도움이 되었습니다. 그는 우리를 픽업해서 근처에 있는 동안 ...</td>    </tr>    <tr>      <th>637</th>      <td>4</td>      <td>제주시에 있는 호텔로 깔끔한 편이었고 나름 전망도 괜찮았습니다. 주차장은 주차타워에...</td>    </tr>    <tr>      <th>113</th>      <td>4</td>      <td>루프탑 바와 수영장이 있어서 사용가능하고 깨끗하고 친절하셔서 좋은곳이었습니다. 다만...</td>    </tr>    <tr>      <th>416</th>      <td>3</td>      <td>다양한 음식과 음료를 걸어갈 수 있는 곳. 저녁 식사는 늦은 밤에 음식을 찾는 문제...</td>    </tr>    <tr>      <th>671</th>      <td>2</td>      <td>리뷰보고 기대했는데 호텔이라기 보단 모텔이나 펜션 느낌이네요 생긴지 얼마 안된걸로 ...</td>    </tr>    <tr>      <th>235</th>      <td>5</td>      <td>위치가 바로 해변 근처라, 룸에서 보이는 뷰가 너무 좋습니다. 세화해변 자체가 조용...</td>    </tr>    <tr>      <th>875</th>      <td>3</td>      <td>Jeju 섬에서 4 일째되는 주제와 같이 Jeju 공항에서 터치 다운 이후로 이동 ...</td>    </tr>    <tr>      <th>254</th>      <td>4</td>      <td>출장 때문에 제주도에 오게 됐습니다. 가성비가 좋고 전체적으로 깨끗했습니다. 난방이...</td>    </tr>  </tbody></table></div><br>  <p>리뷰 내용와 평점을 살펴보면, 4 ~ 5점 리뷰는 대부분 긍정적이었지만, 1 ~ 3점 리뷰에서는 부정적인 평가가 좀 많이 보였습니다.<br>그래서 4점, 5점인 리뷰는 "긍정적인 리뷰"로 분류하여 1를 부여하고, 1 ~ 3점 리뷰는 "부정적인 리뷰"로 분류하여 0을 부여하도록 할게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'rating'</span>].hist()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x154887d0b08&gt;</code></pre><p><img src="/images/E-Python-TextMining-2/output_113_1.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rating_to_label</span><span class="params">(rating)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> rating &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">df[<span class="string">'y'</span>] = df[<span class="string">'rating'</span>].apply(<span class="keyword">lambda</span> x: rating_to_label(x))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>rating</th>      <th>text</th>      <th>y</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4</td>      <td>여행에 집중할수 있게 편안한 휴식을 제공하는 호텔이었습니다. 위치선정 또한 적당한 ...</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>2일 이상 연박시 침대, 이불, 베게등 침구류 교체 및 어메니티 보강이 필요해 보입...</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>4</td>      <td>지인에소개로온 호텔  깨끗하고 좋은거같아요 처음에는 없는게 많아 많이  당황했는데 ...</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>5</td>      <td>방에 딱 들어서자마자 눈이 휘둥그레질정도로 이렇게 넓은 호텔 처음 와본 것 같아요!...</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>저녁에 맥주한잔 하는게 좋아서 렌트 안하고 뚜벅이 하기로 했는데 호텔 바로 앞에 버...</td>      <td>1</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"y"</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>1    7260    275Name: y, dtype: int64</code></pre><br><p><strong>&gt;&gt; Feature</strong></p><p>모델의 <strong>Feature 변수는</strong> 리뷰에서 추출된 형태소와 그들의 중요도를 나타나는 <strong>tf_idf_vect</strong>로 대체하겠습니다.</p> <br> <h3 id="4-2-training-set-test-set-나누기"><a class="markdownIt-Anchor" href="#4-2-training-set-test-set-나누기"></a> 4-2. Training set / Test set 나누기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">x = tf_idf_vect</span><br><span class="line">y = df[<span class="string">'y'</span>]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.3</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((700, 3599), (700,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((301, 3599), (301,))</code></pre><br>  <h3 id="4-3-모델-학습"><a class="markdownIt-Anchor" href="#4-3-모델-학습"></a> 4-3. 모델 학습</h3><p><strong>&gt;&gt; Logistic Regression 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit in training set</span></span><br><span class="line">lr = LogisticRegression(random_state = <span class="number">0</span>)</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict in test set</span></span><br><span class="line">y_pred = lr.predict(x_test)</span><br></pre></td></tr></tbody></table></figure> <br> <p><strong>&gt;&gt; 분류 결과 평가</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># classification result for test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'accuracy: %.2f'</span> % accuracy_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'precision: %.2f'</span> % precision_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'recall: %.2f'</span> % recall_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'F1: %.2f'</span> % f1_score(y_test, y_pred))</span><br></pre></td></tr></tbody></table></figure><pre><code>accuracy: 0.72precision: 0.72recall: 1.00F1: 0.84</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># confusion matrix</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line">confu = confusion_matrix(y_true = y_test, y_pred = y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">sns.heatmap(confu, annot=<span class="literal">True</span>, annot_kws={<span class="string">'size'</span>:<span class="number">15</span>}, cmap=<span class="string">'OrRd'</span>, fmt=<span class="string">'.10g'</span>)</span><br><span class="line">plt.title(<span class="string">'Confusion Matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-TextMining-2/output_132_0.png" alt="png"></p><p>모델 평가결과를 살펴보면, 모델이 지나치게 긍정(“1”)으로만 예측하는 경향이 있습니다. 따라서 긍정 리뷰를 잘 예측하지만, 부정 리뷰에 대한 예측 정확도가 매우 낮습니다. 이는 샘플데이터의 클래스 불균형으로 인한 문제로 보입니다.<br>따라서, <strong>클래스 불균형 조정</strong>을 진행하겠습니다.</p> <br> <h3 id="4-4-샘플링-재조정"><a class="markdownIt-Anchor" href="#4-4-샘플링-재조정"></a> 4-4. 샘플링 재조정</h3><p><strong>&gt;&gt; 1:1 Sampling</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'y'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>1    7260    275Name: y, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positive_random_idx = df[df[<span class="string">'y'</span>]==<span class="number">1</span>].sample(<span class="number">275</span>, random_state=<span class="number">12</span>).index.tolist()</span><br><span class="line">negative_random_idx = df[df[<span class="string">'y'</span>]==<span class="number">0</span>].sample(<span class="number">275</span>, random_state=<span class="number">12</span>).index.tolist()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random_idx = positive_random_idx + negative_random_idx</span><br><span class="line">x = tf_idf_vect[random_idx]</span><br><span class="line">y = df[<span class="string">'y'</span>][random_idx]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((412, 3599), (412,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((138, 3599), (138,))</code></pre>  <br><h3 id="4-5-모델-재학습"><a class="markdownIt-Anchor" href="#4-5-모델-재학습"></a> 4-5. 모델 재학습</h3><p><strong>&gt;&gt; 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lr2 = LogisticRegression(random_state = <span class="number">0</span>)</span><br><span class="line">lr2.fit(x_train, y_train)</span><br><span class="line">y_pred = lr2.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>&gt;&gt; 분류 결과 평가</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># classification result for test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'accuracy: %.2f'</span> % accuracy_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'precision: %.2f'</span> % precision_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'recall: %.2f'</span> % recall_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">'F1: %.2f'</span> % f1_score(y_test, y_pred))</span><br></pre></td></tr></tbody></table></figure><pre><code>accuracy: 0.72precision: 0.70recall: 0.74F1: 0.72</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># confusion matrix</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line">confu = confusion_matrix(y_true = y_test, y_pred = y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">sns.heatmap(confu, annot=<span class="literal">True</span>, annot_kws={<span class="string">'size'</span>:<span class="number">15</span>}, cmap=<span class="string">'OrRd'</span>, fmt=<span class="string">'.10g'</span>)</span><br><span class="line">plt.title(<span class="string">'Confusion Matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-TextMining-2/output_149_0.png" alt="png"></p><p>이제 모델이 “긍정적인” 케이스와 “부정적인” 케이스를 모두 적당히 잘 맞춘 것을 확인할 수 있습니다.</p><p><br>  <br></p><h2 id="5-긍정-부정-키워드-분석"><a class="markdownIt-Anchor" href="#5-긍정-부정-키워드-분석"></a> <strong>5. 긍정 / 부정 키워드 분석</strong></h2><p>기계는 이처럼 리뷰 내용에 나타나는 사람의 감성을 구별할 수 있을 뿐만 아니라, 학습된 Logistic Regression 모델을 이용하여 긍/부정 키워드도 추출해낼 수 있습니다.</p><p>추출된 키워드를 통해서 이용자가 느끼는 제주호델의 장,단점을 파악할 수 있고, 이를 기반으로 앞으로 유지해야 할 좋은 서비스와 개선이 필요한 아쉬운 서비스에 대해서도 어느정도 판단할 수 있습니다.</p>  <br><p>긍 / 부정 키워드를 추출하기 위해 먼저 Logistic Regression 모델에 각 단어의 coeficient를 시각화해보겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr2.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[ 0.28196772,  0.10796991, -0.04978601, ...,  0.        ,        -0.18315162,  0.28434689]])</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print logistic regression's coef</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">plt.bar(range(len(lr2.coef_[<span class="number">0</span>])), lr2.coef_[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;BarContainer object of 3599 artists&gt;</code></pre><p><img src="/images/E-Python-TextMining-2/output_158_1.png" alt="png"></p><br><p>여기서 계수가 양인 경우는 단어가 긍정적인 영향을 미쳤다고 볼 수 있고, 반면에, 음인 경우는 부정적인 영향을 미쳤다고 볼 수 있습니다.</p><p>이 계수들을 크기순으로 정렬하면, 긍정 / 부정 키워드를 출력하는 지표가 되겠습니다.</p>  <br><p>먼저 "긍정 키워드"와 "부정 키워드"의 Top 5를 각각 출력해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(((value, index) <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(lr2.coef_[<span class="number">0</span>])), reverse = <span class="literal">True</span>)[:<span class="number">5</span>])</span><br><span class="line">print(sorted(((value, index) <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(lr2.coef_[<span class="number">0</span>])), reverse = <span class="literal">True</span>)[<span class="number">-5</span>:])</span><br><span class="line"><span class="comment"># enumerate: 인덱스 번호와 컬렉션의 원소를 tuple형태로 반환함</span></span><br></pre></td></tr></tbody></table></figure><pre><code>[(1.2644550507381787, 1217), (0.9079356150239053, 2400), (0.895609472071521, 1148), (0.8859075267474583, 2730), (0.8795111499693716, 43)][(-0.7201222787741572, 1310), (-0.7519681298547074, 3022), (-0.8672956005075485, 567), (-0.9190158099937462, 515), (-0.9945592515966041, 2143)]</code></pre><p>이처럼 단어의 coeficient와 index가 출력이 됩니다.</p> <br><p>이제 전체 단어가 포함한 "긍정 키워드 리스트"와 "부정 키워드 리스트"를 정의하고 출력해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">coef_pos_index = sorted(((value, index) <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(lr2.coef_[<span class="number">0</span>])), reverse = <span class="literal">True</span>)</span><br><span class="line">coef_neg_index = sorted(((value, index) <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(lr2.coef_[<span class="number">0</span>])), reverse = <span class="literal">False</span>)</span><br><span class="line">coef_pos_index</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    [(1.2644550507381787, 1217),     (0.9079356150239053, 2400),     (0.895609472071521, 1148),     (0.8859075267474583, 2730),     (0.8795111499693716, 43),     (0.8541915649753757, 26),     (0.8362541212560809, 578),     (0.7714811231976703, 2957),     (0.7375280889735719, 1491),     (0.7203390936359615, 956),     (0.6503260268852225, 2977),     (0.6488836121942877, 115),     (0.6467914172687944, 910),     (0.6264469987695738, 1159),     (0.5943145305412955, 883),     (0.5505354129422678, 2988),     (0.5294632094678557, 692),     (0.5240729254152497, 2455),     (0.5207834696883535, 1922),     (0.5153917648445299, 2361),     (0.49372825531123943, 1215),     (0.49360869707006777, 246),     (0.4854919888814009, 680),     (0.4854086392859413, 269),     (0.4748702738145659, 686),     (0.4703566749364605, 1194),     (0.45896954031613635, 790),     (0.45586600022584467, 2834),     (0.45372800281293535, 19),     (0.4500540795581468, 2779),     (0.44412671542407905, 416),     (0.4425720292652355, 1805),     (0.4364684750426245, 263),     (0.4308546124247834, 3267),     (0.4255898116545533, 2797),     (0.4212941284904679, 2680),     (0.41423556597532674, 489),     (0.4121691212201187, 826),     (0.4118068110883225, 937),     (0.402234791816506, 353),     (0.39915216217204813, 136),     (0.3906502087724938, 131),     (0.38863745777148795, 2180),     (0.38330015115324956, 322),     (0.37909051494174656, 1027),     (0.3776598665737952, 1926),     (0.36980255314279886, 2760),     (0.3609360208520378, 3034),     (0.3601455791606223, 1342),     (0.3511486012544648, 344),     (0.35030155043520095, 3447),     (0.34810767211689553, 2674),     (0.3448646839750021, 3021),     (0.34466834073677766, 2070),     (0.3341929597049384, 1750),     (0.3332295460784216, 2849),     (0.3291725978477463, 3435),     (0.3276653378330499, 2530),     (0.3221942756247239, 1483),     (0.3217689173991826, 3397),     (0.32047891465181083, 2013),     (0.3080484198419967, 3029),     (0.3062772550220064, 939),     (0.30478483149478314, 627),     (0.30438930158469363, 2606),     (0.3027703771200994, 3454),     (0.2989615171043252, 4),     (0.2960030540205178, 1991),     (0.2941392017845358, 3347),     (0.290078280630203, 3593),     (0.28793362240859766, 1090),     (0.2861006595602784, 3404),     (0.28434689214226744, 3598),     (0.2819677181770861, 0),     (0.2818546705602182, 1809),     (0.2796034993266096, 1440),     (0.2783451949177126, 3410),     (0.27700777474574007, 1078),     (0.2764799249539472, 278),     (0.2757845449039994, 2074),     (0.27449374217124756, 1697),     (0.27211400542938347, 860),     (0.26958773489776877, 276),     (0.26894024258506205, 2642),     (0.2679652653240931, 451),     (0.26659353628773785, 2605),     (0.2642541001710917, 1073),     (0.2602933330998526, 71),     (0.2601225988013697, 2727),     (0.25898398896658026, 395),     (0.25523176043119644, 109),     (0.25400402242362763, 1120),     (0.25346771390562256, 2311),     (0.2525923917872476, 1760),     (0.252483390540294, 3549),     (0.25243556295192593, 44),     (0.2523758090983611, 410),     (0.25096842816549325, 3286),     (0.25030837769014164, 3013),     (0.2478963860060586, 3064),     (0.24711051623367455, 1700),     (0.24639626607741794, 532),     (0.24423718622136711, 2339),     (0.24419509835066824, 817),     (0.24268824175871553, 1646),     (0.24020390663531643, 847),     (0.23613168717319782, 1277),     (0.2356739894439279, 3547),     (0.23333780634901968, 1966),     (0.2331264370168398, 1350),     (0.23268102047017378, 769),     (0.23262817998676638, 3166),     (0.23066409348184064, 1384),     (0.23010041799635683, 210),     (0.22586220283294378, 1885),     (0.22523607425083558, 260),     (0.2222412951070305, 281),     (0.22091253142370337, 68),     (0.21922527479299828, 1147),     (0.21868875489181047, 1465),     (0.21807039000574996, 3299),     (0.21807039000574996, 172),     (0.2177926484819077, 3223),     (0.21751093007081115, 2634),     (0.2163036212275728, 1171),     (0.2162361260915301, 1671),     (0.21591443393848506, 1552),     (0.21530945315363187, 2038),     (0.21450361502341533, 385),     (0.2130004456328932, 2018),     (0.21283349877228466, 2752),     (0.21171382727695384, 1523),     (0.21156875238749653, 2906),     (0.21149936066156635, 3273),     (0.2107420524603348, 3062),     (0.2089604714261007, 2167),     (0.20857560294926117, 705),     (0.20849174650373709, 751),     (0.2084323782944626, 2374),     (0.2083850088267226, 1421),     (0.2076716418538995, 1823),     (0.20734493904041118, 2837),     (0.20719074367652907, 1455),     (0.20632098174995006, 2421),     (0.20497429689912247, 2866),     (0.20497429689912247, 1584),     (0.20460844733702388, 1309),     (0.20460135810671237, 1721),     (0.2026617971957564, 192),     (0.2021896255723423, 574),     (0.20076231770123473, 1122),     (0.20007368092656116, 981),     (0.1994615301156886, 2722),     (0.1987204932053518, 1895),     (0.1982476502888129, 1622),     (0.19668791935266033, 1816),     (0.19602558824910057, 767),     (0.195808499032481, 581),     (0.1954442410972148, 2551),     (0.19543920090503364, 2244),     (0.19535829875348126, 1249),     (0.19513316286959848, 2451),     (0.1932943416840944, 2561),     (0.19241691136362254, 1278),     (0.19188249800399276, 221),     (0.19059569732190523, 341),     (0.18931948208829832, 2965),     (0.18863137833398097, 2225),     (0.188233216963001, 1067),     (0.18823116402871, 1510),     (0.18591329718666444, 2556),     (0.1858513716606046, 1853),     (0.18475568229990585, 1553),     (0.1842332027380814, 15),     (0.18385370069092052, 490),     (0.183698940971588, 646),     (0.18352145151744345, 2709),     (0.18179588928699872, 1821),     (0.18141472902160485, 356),     (0.18101860699904043, 3325),     (0.17968533410962978, 1517),     (0.17894437469027485, 1441),     (0.1785803255429378, 203),     (0.17749094181502081, 1291),     (0.17745689661710926, 423),     (0.17691919755039834, 748),     (0.17681729295382825, 629),     (0.17650785942100156, 2042),     (0.17521436890986974, 2822),     (0.17420775259072946, 3525),     (0.17407554594971275, 1376),     (0.17390397512207328, 1508),     (0.17390397512207328, 584),     (0.1735238781146927, 509),     (0.1729437410073151, 2188),     (0.17166919021535662, 2761),     (0.1711332476240707, 1505),     (0.17079932615633314, 300),     (0.1706243328180457, 795),     (0.16989041829422863, 1577),     (0.16965179412684628, 1028),     (0.16919925883678436, 2705),     (0.1687459695340302, 667),     (0.16815742142636886, 1625),     (0.1676232210748594, 2755),     (0.16757499046872387, 2274),     (0.16736563458006257, 1485),     (0.16735261847037675, 2476),     (0.16642204341549788, 2035),     (0.16595006133727253, 760),     (0.16475334154520693, 1208),     (0.1646740028459598, 1937),     (0.16464847364532936, 690),     (0.1636808432150993, 3274),     (0.16348761826549618, 1676),     (0.16301112079103763, 2399),     (0.1629849886257, 3591),     (0.1629118596848168, 3186),     (0.1626689828520234, 3210),     (0.16142787916860177, 1598),     (0.1613522761276804, 3417),     (0.1603451229219545, 3116),     (0.1599203302911822, 2487),     (0.15983057428397826, 589),     (0.1586108439130326, 2331),     (0.15849368672169892, 1647),     (0.15826740340037068, 625),     (0.15743176994516933, 3490),     (0.1571722075528101, 3567),     (0.15712518230005013, 3027),     (0.15687460543471862, 3428),     (0.15651108129304298, 1307),     (0.15600166572103646, 1961),     (0.15583305075516699, 106),     (0.15577941820129187, 1617),     (0.155766902206714, 3017),     (0.15491622812261568, 382),     (0.15485968714815496, 1528),     (0.1545939535424059, 259),     (0.15411614699130288, 684),     (0.1535726280760412, 3293),     (0.1535726280760412, 2892),     (0.15341384775377642, 2726),     (0.15325471176173253, 1533),     (0.1529359648993235, 1983),     (0.1523311300168501, 1432),     (0.15231484413753682, 1030),     (0.15231397485990963, 556),     (0.15139635636201898, 2078),     (0.1511214654825413, 1312),     (0.15101670800091527, 2998),     (0.14887052306393284, 3096),     (0.14887052306393284, 1457),     (0.1485864638932176, 2600),     (0.14818094009147514, 2223),     (0.14810636314705725, 1859),     (0.14763883239448744, 1738),     (0.14724688251552864, 2328),     (0.1471683691325973, 1841),     (0.14705200941823965, 2268),     (0.14704245351541728, 660),     (0.14646359476664114, 3297),     (0.14621204479849256, 2226),     (0.14615889360176976, 3350),     (0.14576749911151465, 2851),     (0.14545079981853645, 2275),     (0.1447568799500706, 2798),     (0.1444313715254008, 2022),     (0.1444180222221931, 1654),     (0.1444180222221931, 1548),     (0.14434325571263137, 2445),     (0.14412764469019354, 1396),     (0.1439309933360322, 3220),     (0.14364997884743677, 3272),     (0.14359122893612475, 1814),     (0.14339034972990414, 2983),     (0.14305710787294673, 1085),     (0.14276222540097244, 348),     (0.14269270587505128, 996),     (0.14200348649786682, 3275),     (0.14175159317612532, 3189),     (0.14173146008479248, 714),     (0.14095242066301328, 306),     (0.14092668743912232, 2678),     (0.14086483039942074, 570),     (0.14061627821721584, 3414),     (0.14047941175558679, 387),     (0.1404004427633594, 3476),     (0.1404004427633594, 1112),     (0.13978500519793755, 2847),     (0.13978500519793755, 780),     (0.13964073789423023, 665),     (0.13934374266681135, 3500),     (0.13829992453370865, 3161),     (0.13817992752504213, 1768),     (0.13745049759016625, 3511),     (0.13665192952568253, 757),     (0.13642162742786484, 1351),     (0.1359845468368403, 271),     (0.13597476793796576, 534),     (0.135852916769958, 2497),     (0.13574633450491594, 3009),     (0.13574633450491594, 2299),     (0.13574633450491594, 1296),     (0.13574633450491594, 1188),     (0.13549762485752148, 3571),     (0.13549762485752148, 3391),     (0.13549762485752148, 2640),     (0.13541454362686076, 1332),     (0.13519719011184664, 238),     (0.13515286340239754, 2047),     (0.13500163846144472, 3152),     (0.1347989845038155, 2353),     (0.13477156350779324, 1527),     (0.13474112790096265, 1889),     (0.13474112790096265, 1196),     (0.13474112790096265, 462),     (0.13469292571022845, 11),     (0.13458956235978478, 924),     (0.13442001799674802, 2069),     (0.1342034640274507, 2869),     (0.1341559282111133, 2145),     (0.13415237816410766, 3471),     (0.13415237816410766, 3406),     (0.13388090777365988, 94),     (0.13342324387367194, 2971),     (0.1332930603370377, 3432),     (0.1330404844897235, 1506),     (0.13293873503860765, 3087),     (0.13272932864456133, 3073),     (0.13232986210850453, 2246),     (0.13218242328559932, 2082),     (0.13197846164836427, 3285),     (0.13197846164836427, 2297),     (0.13197846164836427, 1741),     (0.13197846164836427, 69),     (0.13179675529668713, 1549),     (0.1316814762162865, 3441),     (0.13154581005598, 3192),     (0.1314192595003537, 1386),     (0.13129169059042645, 969),     (0.1311653774611966, 244),     (0.13071289286611526, 3003),     (0.13067314069850974, 697),     (0.12989273592089953, 466),     (0.1297746134602387, 411),     (0.12976187780923948, 39),     (0.12975779444471916, 3176),     (0.12975779444471916, 3066),     (0.1296539223346817, 3169),     (0.1295761221334622, 2132),     (0.12915915165160174, 3585),     (0.12912049655247929, 3475),     (0.12912049655247929, 455),     (0.12897380261630323, 1053),     (0.12884028806560763, 2910),     (0.1283431735744972, 2344),     (0.1283431735744972, 1542),     (0.12780627572336126, 2207),     (0.12780627572336126, 531),     (0.1277445628861703, 2975),     (0.12741425172305826, 669),     (0.1268676275287745, 424),     (0.12600280097170596, 2053),     (0.1255687931546876, 1578),     (0.1251082717170878, 3287),     (0.12501636694175655, 3082),     (0.12485375424445369, 988),     (0.12485077138187695, 1247),     (0.12477317035474626, 1638),     (0.12470562190989118, 1234),     (0.12418537178635555, 3201),     (0.12412494478481371, 1572),     (0.12356427400475413, 720),     (0.12346465010011236, 3190),     (0.1232984083336477, 3384),     (0.12290996269246392, 2930),     (0.12272802616213961, 3448),     (0.12252951158801757, 73),     (0.12243269952395211, 3105),     (0.12240812373820147, 2735),     (0.12169970934221791, 2781),     (0.12150853668051385, 1722),     (0.12148978639712985, 1301),     (0.12147421457137794, 2320),     (0.12147421457137794, 2289),     (0.12135904501371637, 3339),     (0.12135904501371637, 1602),     (0.12085540050886351, 3206),     (0.12085540050886351, 2067),     (0.12085540050886351, 1282),     (0.12085540050886351, 1170),     (0.12085540050886351, 199),     (0.12073634202256898, 2460),     (0.12051291677661294, 2250),     (0.12051291677661294, 730),     (0.12036501072581905, 3263),     (0.12036501072581905, 373),     (0.11982407529162177, 74),     (0.11941421355306232, 2814),     (0.11941421355306232, 2193),     (0.11909411357560733, 2028),     (0.11903875427006184, 403),     (0.11887476984730765, 1374),     (0.11855602046019094, 912),     (0.11826793727408907, 2664),     (0.11797129443799506, 147),     (0.11792307582322151, 1752),     (0.11792307582322151, 518),     (0.1177499125052935, 1838),     (0.11735274081083348, 2526),     (0.11728847189963591, 1299),     (0.11682555059780918, 702),     (0.11662484295496746, 3453),     (0.11615131711727657, 777),     (0.11608095184078544, 771),     (0.11598871515918448, 2677),     (0.11589077346213462, 1341),     (0.11572533411469992, 2492),     (0.11567709862499206, 2587),     (0.11567709862499206, 2077),     (0.11542281429727001, 2221),     (0.11525735836070924, 3389),     (0.11501634646006889, 2886),     (0.11501634646006889, 835),     (0.11449108387629879, 267),     (0.11419455143266674, 41),     (0.11410478259093633, 2499),     (0.11410478259093633, 636),     (0.11391082531008434, 1939),     (0.11379525876290054, 1779),     (0.11369189505531267, 3279),     (0.11359623354805377, 3362),     (0.11328311707861126, 1626),     (0.11309515954317759, 2033),     (0.11309203979609482, 1163),     (0.11306723080679525, 446),     (0.11300787365565511, 88),     (0.11281954183130295, 2799),     (0.1125643845359886, 359),     (0.1125643845359886, 87),     (0.11236486622722328, 1599),     (0.11236486622722328, 1462),     (0.11202792916061027, 1320),     (0.11168083926782998, 2088),     (0.1116425153114436, 801),     (0.11160861926991839, 2298),     (0.11095938208098642, 304),     (0.11091238300534989, 773),     (0.1100077175343078, 2162),     (0.10976564909688623, 1790),     (0.10961263739649914, 258),     (0.10941413976516044, 3488),     (0.10941413976516044, 2819),     (0.10941413976516044, 1828),     (0.10917777932688458, 723),     (0.10864303256976575, 747),     (0.10864303256976575, 148),     (0.10852304491119706, 1106),     (0.10844777870744055, 1289),     (0.10844777870744055, 619),     (0.10832336961288917, 2692),     (0.10832336961288917, 1454),     (0.10830603618528553, 84),     (0.10796991064699014, 1),     (0.10795721696924253, 2315),     (0.10795721696924253, 425),     (0.1077710568146692, 3317),     (0.1077710568146692, 2663),     (0.10769380388975194, 2008),     (0.10720615786237517, 583),     (0.10673796206207481, 888),     (0.10671454696616327, 601),     (0.10656205646300153, 201),     (0.1064891137904478, 1554),     (0.10637660107629578, 1759),     (0.10634735402569995, 3408),     (0.10626212376589807, 2386),     (0.10623995311965392, 3319),     (0.10622168812753784, 333),     (0.10615533943965197, 772),     (0.10595924232583608, 337),     (0.10595924232583608, 272),     (0.10508229441497294, 3028),     (0.10485989916431773, 2462),     (0.10473698952461245, 3086),     (0.10473698952461245, 434),     (0.10473698952461245, 381),     (0.10461042411497755, 3129),     (0.10461042411497755, 1233),     (0.10461042411497755, 764),     (0.10461042411497755, 79),     (0.10445117600612656, 3513),     (0.10445117600612656, 3143),     (0.10445117600612656, 401),     (0.1041925044133613, 1207),     (0.10388289797906243, 3088),     (0.10359537183826453, 2766),     (0.10359537183826453, 822),     (0.10357097224199376, 3528),     (0.10298171781942682, 3460),     (0.10261708591617978, 527),     (0.10237985140859761, 1290),     (0.10223721967543753, 863),     (0.10222967216366273, 582),     (0.10189163932285969, 903),     (0.10174059857006298, 31),     (0.1015489083625263, 696),     (0.10152723059467353, 1012),     (0.10132218984016486, 2342),     (0.10132218984016486, 1914),     (0.10132218984016486, 1568),     (0.10132218984016486, 562),     (0.10132218984016486, 257),     (0.10132218984016486, 227),     (0.10132218984016486, 169),     (0.10132218984016486, 5),     (0.10129687975732969, 2385),     (0.10126776819935551, 3117),     (0.10063103908292556, 284),     (0.10055954160111301, 3081),     (0.10031435374070032, 1260),     (0.10028094106951953, 1317),     (0.10027605850365232, 3072),     (0.1000059209109059, 2336),     (0.1000059209109059, 479),     (0.09995417863737927, 1670),     (0.09946866203075326, 299),     (0.09937460223662734, 1955),     (0.09937460223662734, 355),     (0.0991931372321024, 3367),     (0.0991931372321024, 3052),     (0.0991931372321024, 2987),     (0.0991931372321024, 614),     (0.09885234039929348, 1496),     (0.0985825853170792, 2753),     (0.09833844719113422, 3349),     (0.09833844719113422, 2118),     (0.09828284940929058, 900),     (0.09826909686300346, 2262),     (0.09826909686300346, 1765),     (0.09826909686300346, 904),     (0.09826909686300346, 652),     (0.09820798725090112, 2536),     (0.09820798725090112, 1967),     (0.0979795780346747, 2907),     (0.09782691886062657, 377),     (0.09760724210433858, 3516),     (0.09755885308766699, 3164),     (0.09755885308766699, 683),     (0.09730186511202356, 3329),     (0.09730186511202356, 1733),     (0.09730186511202356, 1226),     (0.097102913934461, 2625),     (0.09610978450473183, 2087),     (0.09582399417186592, 1439),     (0.09577717071956568, 47),     (0.09574004674208489, 2532),     (0.09567949353604623, 153),     (0.09563595118779827, 1248),     (0.09563595118779827, 800),     (0.0955218528925641, 2265),     (0.0954330687710674, 1715),     (0.09490960244197376, 3079),     (0.09479895154722345, 3167),     (0.09479895154722345, 2182),     (0.09464204684604893, 2919),     (0.09464204684604893, 1007),     (0.09464204684604893, 421),     (0.0945793543479756, 3346),     (0.0945793543479756, 3214),     (0.09456116933710224, 1829),     (0.09452473946342346, 736),     (0.09441875395888008, 3102),     (0.09441875395888008, 1541),     (0.09418492749174653, 52),     (0.0939222882360469, 3558),     (0.0939222882360469, 3419),     (0.0939222882360469, 2608),     (0.0939222882360469, 2598),     (0.09392068680284914, 3344),     (0.09392068680284914, 2173),     (0.09392068680284914, 1138),     (0.09392068680284914, 461),     (0.09392068680284914, 34),     (0.09379123891116847, 2584),     (0.09353081179807116, 3259),     (0.09353081179807116, 1302),     (0.09353081179807116, 293),     (0.09309370020530645, 2639),     (0.09309370020530645, 2294),     (0.09309370020530645, 2083),     (0.09309370020530645, 1944),     (0.09309370020530645, 162),     (0.09298771310954623, 741),     (0.09298771310954623, 140),     (0.09292587512205373, 1929),     (0.09289423937435062, 3561),     (0.09274784637141024, 3307),     (0.09274784637141024, 2126),     (0.09274784637141024, 2025),     (0.09274784637141024, 1418),     (0.09254637783999758, 217),     (0.09226460305753335, 3403),     (0.09226460305753335, 1687),     (0.09226460305753335, 1592),     (0.09192383607443329, 3315),     (0.09192383607443329, 875),     (0.09183495854900056, 2985),     (0.09183495854900056, 1596),     (0.09173493202889069, 1770),     (0.09173493202889069, 431),     (0.09173143027976542, 2876),     (0.09113344147288725, 3120),     (0.09060526255265101, 3381),     (0.09060526255265101, 2287),     (0.09060526255265101, 1836),     (0.09060526255265101, 1769),     (0.09050760723810075, 326),     (0.08995529378430658, 340),     (0.08987429575682436, 1969),     (0.08982977958803778, 1812),     (0.08974209619577075, 838),     (0.08963253567327513, 2169),     (0.08951903081805541, 2618),     (0.08947267121555101, 989),     (0.08926541208781298, 1369),     (0.0890462273393359, 893),     (0.0890462273393359, 482),     (0.0888304568052451, 1118),     (0.08864375178731801, 2759),     (0.08862582335907176, 3128),     (0.08856874594603148, 2408),     (0.08847924280717331, 3541),     (0.08847924280717331, 2706),     (0.08845733589313011, 1614),     (0.08843074951990057, 1330),     (0.08827578191477906, 2529),     (0.08827578191477906, 548),     (0.08811593995641924, 2768),     (0.08795612661377235, 1848),     (0.0878632294425667, 3204),     (0.0878632294425667, 2905),     (0.0877915209166029, 2732),     (0.08724002705412705, 3125),     (0.08681879523440901, 472),     (0.0867590941431764, 1371),     (0.08591449282742145, 3413),     (0.08591449282742145, 1793),     (0.08591449282742145, 439),     (0.08569361517932625, 2429),     (0.08569361517932625, 1886),     (0.08564019433508445, 2981),     (0.08564019433508445, 2571),     (0.08564019433508445, 1852),     (0.08564019433508445, 145),     (0.0855146046919488, 3001),     (0.08482470727509915, 107),     (0.08474214619355472, 291),     (0.08474214619355472, 92),     (0.08464630577025285, 1353),     (0.08447795462677392, 83),     (0.08442221636455624, 2373),     (0.08435306298004447, 3302),     (0.08435306298004447, 1842),     (0.08435306298004447, 885),     (0.08406143202879186, 961),     (0.08374180878487095, 2901),     (0.08352466261109656, 1451),     (0.08248922005074939, 1131),     (0.08238017336779274, 2415),     (0.08216565036306289, 922),     (0.08170778577083812, 503),     (0.08139930660843568, 749),     (0.0810873859250381, 2703),     (0.08099924967644831, 3375),     (0.08036733484765383, 103),     (0.08024334048387935, 1346),     (0.08024334048387935, 1055),     (0.08024334048387935, 828),     (0.07995951135307515, 2913),     (0.07995254170536943, 3142),     (0.07975739071961907, 1238),     (0.07961368503404338, 3145),     (0.07961368503404338, 1102),     (0.0791011342722481, 2629),     (0.07909734484039603, 375),     (0.07903458017917456, 960),     (0.07865148217479348, 1387),     (0.0779646282219197, 3122),     (0.0779646282219197, 350),     (0.07794818207773628, 2696),     (0.07791539520575948, 2197),     (0.07791539520575948, 1425),     (0.07791539520575948, 1410),     (0.07791539520575948, 1270),     (0.07791539520575948, 1209),     (0.07791539520575948, 1108),     (0.07777326253628294, 2052),     (0.07777326253628294, 954),     (0.07777326253628294, 812),     (0.07776976305397286, 435),     (0.0776760937385194, 3588),     (0.07766249907323657, 1286),     (0.0768120675986713, 979),     (0.07633605683651937, 1618),     (0.07610302341355955, 1345),     (0.07610302341355955, 1329),     (0.07610302341355955, 938),     (0.07610302341355955, 754),     (0.07610302341355955, 502),     (0.07493632088882671, 1281),     (0.07486036923106522, 3114),     (0.07486036923106522, 759),     (0.07479212341391864, 3109),     (0.07479212341391864, 1125),     (0.07479212341391864, 711),     (0.07479212341391864, 445),     (0.07479212341391864, 25),     (0.0744210537557175, 3470),     (0.0744210537557175, 1928),     (0.0744210537557175, 1280),     (0.0744210537557175, 1243),     (0.0744210537557175, 1018),     (0.0744210537557175, 708),     (0.0740577155592499, 726),     (0.07358418456629864, 1743),     (0.07309840122961515, 1219),     (0.07303416054815363, 252),     (0.07271877218739466, 3241),     (0.07184102679685105, 121),     (0.07182717404842677, 587),     (0.07177500880745105, 2964),     (0.07127209654963827, 120),     (0.07087579658806266, 1316),     (0.07069880693740326, 339),     (0.07068023149332683, 2306),     (0.07068023149332683, 253),     (0.07065433840741699, 1033),     (0.07058992698239872, 3555),     (0.07043170609309371, 360),     (0.07023970587779339, 1004),     (0.06996622272883518, 3203),     (0.06996622272883518, 1585),     (0.06996622272883518, 1581),     (0.06943213017724599, 1461),     (0.06931620630006176, 1538),     (0.06923101778513037, 1918),     (0.06921851239026898, 2146),     (0.06914996226685433, 2312),     (0.06911832282266693, 206),     (0.06905411184938241, 2212),     (0.06879868009883609, 1498),     (0.06879341064374712, 3369),     (0.06829991205551972, 485),     (0.06793743237297642, 3094),     (0.06793743237297642, 2568),     (0.06793743237297642, 2509),     (0.06793743237297642, 1624),     (0.06793743237297642, 1311),     (0.06793743237297642, 830),     (0.06793743237297642, 193),     (0.06771012152570943, 896),     (0.06760842116575855, 3518),     (0.06728576906303034, 3478),     (0.06728576906303034, 2945),     (0.06728576906303034, 2592),     (0.06728576906303034, 2586),     (0.06728576906303034, 1111),     (0.06726031274341861, 2835),     (0.0668936390304386, 3283),     (0.06683941035275678, 1153),     (0.06670561404578652, 3300),     (0.06670561404578652, 2952),     (0.06670561404578652, 2949),     (0.06670561404578652, 2890),     (0.06670561404578652, 2481),     (0.06670561404578652, 1070),     (0.06616432949033017, 3503),     (0.0660445367892345, 3515),     (0.06603516959037964, 3352),     (0.06603516959037964, 1701),     (0.06594330439800165, 3537),     (0.06529883585157686, 3418),     (0.06529883585157686, 2650),     (0.06466761703140791, 2780),     (0.06451756127861434, 2546),     (0.06412036684718043, 906),     (0.06406825327936377, 393),     (0.06389147199964199, 1562),     (0.06389147199964199, 547),     (0.06296277600534345, 1898),     (0.06295775824880319, 1832),     (0.06295775824880319, 1144),     (0.06273519650642477, 2108),     (0.06257557985594793, 2438),     (0.06250818347087828, 2543),     (0.06237266652354673, 1818),     (0.062097593396214186, 2744),     (0.06179423738961337, 925),     (0.06141211575679981, 2260),     (0.060781144623716234, 3570),     (0.06066322422717442, 2844),     (0.060370008276426454, 3338),     (0.06029861224248649, 2784),     (0.06029861224248649, 1986),     (0.06029861224248649, 1543),     (0.06005526613023247, 897),     (0.05947175378230543, 1763),     (0.05909565017478048, 1849),     (0.05909352311701952, 1352),     (0.058961537911610754, 3510),     (0.058961537911610754, 3055),     (0.058961537911610754, 2737),     (0.058961537911610754, 2292),     (0.058961537911610754, 1475),     (0.058958973694166104, 3589),     (0.058958973694166104, 2651),     (0.058958973694166104, 1731),     (0.058958973694166104, 474),     (0.05832232735424722, 484),     (0.05776314858186377, 2356),     (0.057539284349787875, 2724),     (0.057539284349787875, 2716),     (0.057539284349787875, 2272),     (0.057539284349787875, 1980),     (0.057539284349787875, 1713),     (0.057539284349787875, 1604),     (0.057539284349787875, 1449),     (0.057539284349787875, 75),     (0.057539284349787875, 61),     (0.05679666092137163, 997),     (0.05679666092137163, 580),     (0.056729924333008365, 2637),     (0.056729924333008365, 831),     (0.05655015464811865, 487),     (0.05652766823426947, 2030),     (0.05640871242395038, 735),     (0.05614386926874535, 758),     (0.0559063955350394, 3184),     (0.0559063955350394, 3031),     (0.0559063955350394, 2944),     (0.0559063955350394, 2647),     (0.0559063955350394, 2528),     (0.0559063955350394, 2261),     (0.0559063955350394, 1269),     (0.0559063955350394, 1109),     (0.0559063955350394, 554),     (0.055648783133438656, 1407),     (0.055648783133438656, 586),     (0.055646362986584645, 1466),     (0.05516895684450839, 2793),     (0.054882824548443114, 3173),     (0.054882824548443114, 2982),     (0.054882824548443114, 2845),     (0.054882824548443114, 2542),     (0.054882824548443114, 1756),     (0.054882824548443114, 899),     (0.054882824548443114, 681),     (0.054882824548443114, 285),     (0.05486846085587583, 3026),     (0.05484348857927268, 3469),     (0.05484348857927268, 3465),     (0.05484348857927268, 2989),     (0.05484348857927268, 2879),     (0.05484348857927268, 2754),     (0.05484348857927268, 2406),     (0.05484348857927268, 1730),     (0.05484348857927268, 1667),     (0.05484348857927268, 1665),     (0.05484348857927268, 1615),     (0.05484348857927268, 1471),     (0.05484348857927268, 1191),     (0.05484348857927268, 1100),     (0.05484348857927268, 1079),     (0.05484348857927268, 851),     (0.05484348857927268, 458),     (0.054487189903820656, 2204),     (0.05430643890657519, 138),     (0.054058095179772864, 944),     (0.054022724280419834, 3212),     (0.05402202766157935, 1762),     (0.0533750821753445, 1695),     (0.05306742820929221, 2192),     (0.05276529397122469, 2809),     (0.05276529397122469, 2057),     (0.05276529397122469, 1691),     (0.0523101884772147, 1923),     (0.05215992194245664, 1550),     (0.052012698561421676, 2377),     (0.052012698561421676, 1984),     (0.052012698561421676, 1039),     (0.052012698561421676, 149),     (0.05179923233388806, 3394),     (0.05179923233388806, 846),     (0.051762106456659567, 2863),     (0.051472967058906464, 1912),     (0.051217574472353734, 2778),     (0.05110058750877395, 2041),     (0.050966072229566624, 1630),     (0.05077445418126315, 3336),     (0.05077445418126315, 2656),     (0.05077445418126315, 2570),     (0.05077445418126315, 2522),     (0.05077445418126315, 2121),     (0.05077445418126315, 2045),     (0.05077445418126315, 2010),     (0.05077445418126315, 1726),     (0.05077445418126315, 1655),     (0.05077445418126315, 1509),     (0.05077445418126315, 1507),     (0.05077445418126315, 732),     (0.05077445418126315, 524),     (0.05077445418126315, 422),     (0.05077445418126315, 196),     (0.05077445418126315, 171),     (0.05077445418126315, 99),     (0.050539089094784995, 100),     (0.05053664694441642, 3568),     (0.050492996404728846, 2961),     (0.050036275129686114, 396),     (0.05003297559110967, 2029),     (0.04984891386860787, 917),     (0.04961138883973778, 143),     (0.04958598961322054, 3056),     (0.049575831047697035, 1283),     (0.048727246055628254, 2248),     (0.04872402143683834, 1101),     (0.047921690809483164, 1603),     (0.047921690809483164, 1321),     (0.047921690809483164, 1017),     (0.04791436558471306, 2622),     (0.04791436558471306, 1241),     (0.04770759660795472, 717),     (0.04694083335282966, 289),     (0.04677698779883914, 2757),     (0.04666642228091436, 2141),     (0.04647288993080121, 2484),     (0.04637599875831547, 2512),     (0.045897622985651414, 139),     (0.045799053702209366, 1344),     (0.04570679344810075, 2147),     (0.04516689835379344, 1172),     (0.04492238369553648, 1149),     (0.04452311366966795, 3051),     (0.04452311366966795, 2743),     (0.04452311366966795, 2535),     (0.04452311366966795, 1784),     (0.04452311366966795, 1780),     (0.04452311366966795, 1511),     (0.04452311366966795, 1245),     (0.04452311366966795, 520),     (0.04431291167953588, 3124),     (0.04431291167953588, 2471),     (0.04431291167953588, 2230),     (0.04431291167953588, 1380),     (0.04379233051095153, 3250),     (0.04370894283540041, 2372),     (0.04342726715205229, 477),     (0.04339655458297072, 1349),     (0.04289303347380985, 1420),     (0.04209795683366029, 2573),     (0.04202158194623495, 2401),     (0.04202158194623495, 1294),     (0.0419602893158302, 3107),     (0.04182319015766572, 3536),     (0.04182319015766572, 2839),     (0.04182319015766572, 2765),     (0.04182319015766572, 1597),     (0.04182319015766572, 475),     (0.04120970047603527, 2595),     (0.04118433740575306, 2043),     (0.0410712841055371, 3050),     (0.04099650527849089, 1442),     (0.04049252050189614, 1797),     (0.04024671694278536, 1938),     (0.040121670241939675, 3222),     (0.040121670241939675, 2395),     (0.040121670241939675, 1682),     (0.040121670241939675, 1195),     (0.040121670241939675, 844),     (0.040121670241939675, 294),     (0.040056704625578095, 1482),     (0.03984593632828475, 2878),     (0.03939272315558761, 3076),     (0.0390809923939327, 405),     (0.038398821000790784, 3545),     (0.03814509952790994, 1161),     (0.03801064136229472, 321),     (0.03786743367501903, 468),     (0.037566983103707936, 2969),     (0.03725182003350967, 1723),     (0.037238370858689175, 2767),     (0.03696154627105317, 3205),     (0.03679414699666566, 864),     (0.036268027377411485, 2345),     (0.035970320215902754, 3057),     (0.034899356647054146, 3270),     (0.03454974613444602, 2350),     (0.034383816197631145, 2436),     ...]</pre></div><br>  <br><p>마지막으로 index를 단어로 변환하여 "긍정 키워드 리스트"와 "부정 키워드 리스트"의 Top 20 단어를 출력해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invert_index_vectorizer = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> vect.vocabulary_.items()}</span><br><span class="line">invert_index_vectorizer</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    {2866: '집중',     3588: '휴식',     2696: '제공',     2311: '위치',     1584: '선정',     790: '또한',     2927: '청소',     2925: '청결',     1527: '상태',     2392: '이상',     3022: '침대',     2388: '이불',     3021: '침구',     299: '교체',     2013: '어메니티',     1296: '보강',     1277: '베스트',     2299: '웨스턴',     3564: '회원',     185: '경우',     106: '객실',     3009: '층수',     2234: '요청',     2606: '적극',     1188: '반영',     2837: '지인',     1629: '소개',     2910: '처음',     611: '당황',     1607: '세면',     675: '도구',     2555: '잠옷',     3358: '필수',     361: '그것',     2673: '정도',     578: '다음',     2074: '여기',     1171: '박만',     2595: '저녁',     981: '맥주',     3414: '한잔',     838: '렌트',     791: '뚜벅',     1159: '바로',     1247: '버스',     2676: '정류',     697: '도착',     24: '가방',     2487: '일찍',     2685: '정비',     1225: '방이',     2500: '입실',     2038: '업그레이드',     2849: '직원',     2680: '정말',     1148: '바다',     2623: '전망',     2636: '전일',     3425: '함덕',     624: '대명',     3091: '콘도',     1861: '실내',     1384: '분위기',     1659: '손님',     40: '가장',     1241: '배치',     651: '대해',     634: '대응',     1889: '써비스',     2730: '조식',     1351: '부분',     1838: '신경',     1922: '아주',     3208: '특급',     3191: '트랜디',     210: '고민',     3593: '흔적',     2082: '여름',     1700: '수영장',     1483: '사용',     1297: '보고',     2035: '엄마',     2: '가격',     627: '대비',     2769: '주위',     924: '마트',     1826: '식당',     1816: '시장',     1217: '방문',     2361: '의사',     726: '동안',     2695: '정해진',     3580: '휘슬',     269: '공항',     1539: '생각',     1809: '시설',     1028: '모두',     3017: '친절',     1029: '모드',     917: '마지막',     900: '마무리',     3156: '테라스',     2612: '전경',     2427: '인근',     2583: '재래시장',     1979: '야시장',     2402: '이용도',     2400: '이용',     2488: '일차',     3581: '휘슬락',     2940: '체크',     2761: '주변',     2094: '여친',     2975: '추억',     26: '가성',     2977: '추천',     3575: '후회',     2145: '예전',     372: '그랜드',     2605: '저희',     1918: '아이',     708: '돌잔치',     581: '다정',     3470: '했었더랬',     2642: '전통',     1004: '메종',     387: '글래드',     1563: '서비스',     969: '매우',     3428: '합리',     635: '대의',     1018: '명절',     1721: '숙박',     1928: '아티',     1243: '백미',     3061: '커피',     1280: '베이커리',     43: '가족',     3342: '플러스',     2816: '지금',     2257: '우선',     2664: '접근성',     1671: '쇼핑',     940: '만족도',     2957: '최고',     1078: '무엇',     423: '기억',     2251: '우리',     2902: '찾기',     300: '교통',     2418: '이틀',     2691: '정원',     109: '거기',     160: '겨울',     3016: '친구',     541: '놀러와',     3185: '투숙',     1981: '야외',     1235: '방향',     1976: '야간',     2726: '조명',     1723: '순간',     638: '대접',     1868: '실명',     112: '거론',     3337: '프론트',     2378: '이름',     1938: '안나',     416: '기분',     1037: '모습',     2921: '첫날',     1761: '스타트',     576: '다시',     1578: '선물',     3032: '카운터',     1939: '안내',     777: '디너',     438: '기회',     1121: '미니바',     1067: '무료',     2959: '최근',     281: '관광지',     1719: '숙고',     88: '강추',     1977: '야경',     2475: '일부러',     2476: '일어나서',     714: '동네',     1168: '바퀴',     990: '먹방',     1843: '신라',     3105: '퀄리티',     1024: '모녀',     2711: '제주시',     2313: '위해',     1586: '선택',     2180: '오픈',     2143: '예약',     622: '대로',     115: '거리',     657: '더군다나',     1627: '셔틀버스',     2271: '운행',     670: '데스크',     2880: '차안',     1374: '분도',     2438: '인상',     3201: '트윈',     1489: '사이즈',     939: '만족',     1758: '스타',     45: '가짓수',     558: '느낌',     3538: '화장실',     505: '내부',     2455: '인테리어',     2859: '질적',     2368: '이건',     100: '개인',     3005: '취향',     321: '구비',     273: '과일',     480: '나이프',     3295: '포크',     1364: '부탁',     2786: '준비',     3305: '표방',     1046: '모텔',     165: '결론',     3577: '훌륭',     1799: '시간',     1737: '슈페리어킹룸',     3376: '하루',     3570: '후기',     2836: '지은지',     2033: '얼마',     136: '건물',     1985: '약간',     2318: '유럽',     1760: '스타일',     378: '그림',     2715: '조각',     1323: '복도',     2633: '전시',     2630: '전부',     3039: '카펫',     770: '등급',     567: '다른',     2394: '이서',     2512: '자기',     2722: '조금',     2218: '외투',     2206: '완전',     2856: '진짜',     1626: '셔틀',     1127: '미리',     1821: '시티',     2162: '오름',     570: '다만',     680: '도로',     39: '가인',     276: '관계',     2876: '차량',     1638: '소리',     574: '다소',     1215: '방도',     3273: '편의점',     3027: '칫솔',     709: '동계',     3576: '훈련',     795: '라마',     2116: '연인',     2641: '전체',     1493: '사진',     2920: '첨부',     2064: '엘리베이터',     1873: '실시간',     1440: '비행기',     3151: '택시',     1128: '미만',     2374: '이동',     9: '가능',     2961: '최상',     2235: '욕실',     1791: '슬리퍼',     2304: '위생',     2123: '염려',     1590: '설날',     788: '떡국',     840: '려고',     3495: '현장',     167: '결재',     3559: '황스',     841: '려운',     2789: '중국',     932: '만두',     2744: '종류',     1293: '별로',     316: '구만',     996: '메뉴',     603: '답변',     2709: '제일',     2779: '주차',     131: '걱정',     3423: '할아버지',     1945: '안심',     3067: '컨디션',     1095: '문어',     2909: '처리',     3561: '회사',     2988: '출장',     1567: '서울',     64: '간혹',     2386: '이벤트',     3460: '해주시',     1344: '부대',     3435: '항상',     855: '롯데',     1434: '비지니스',     2097: '여행객',     1664: '손색',     2236: '욕조',     175: '겸비',     1459: '사계절',     1715: '수풀',     2794: '중문',     3306: '표선등',     2281: '원거리',     2101: '여행지',     1322: '복귀',     1805: '시내',     2323: '유명',     2462: '일단',     2781: '주차장',     2844: '지하',     246: '공간',     2356: '응대',     1097: '문의사항',     1850: '신지',     71: '감동',     2106: '역시',     2566: '장도',     807: '락타',     1550: '샤워',     896: '마련',     3089: '코인',     1620: '세탁실',     2167: '오션',     994: '멀리',     497: '남자친구',     665: '덕분',     2385: '이번',     3331: '프런트',     1239: '배정',     2415: '이착륙',     3120: '클리닝',     382: '근무',     1923: '아주머니',     2436: '인사',     3085: '코로나',     1496: '사태',     535: '노화',     1286: '벽지',     2756: '주름',     2814: '지고',     3133: '타일',     4: '가구',     3082: '코너',     243: '곳곳이',     279: '관광객',     2449: '인지',     1463: '사람',     1369: '북적',     2627: '전반',     284: '관리',     3274: '편이',     3346: '피드백',     3276: '편입',     686: '도시',     278: '관광',     3214: '특화',     2834: '지역',     385: '근처',     3034: '카페',     6: '가기',     221: '고유',     3210: '특색',     1768: '스테이',     10: '가도',     1759: '스타벅스',     1263: '번화가',     1924: '아침',     3057: '커서',     1224: '방음',     988: '먹거리',     588: '단점',     797: '라면',     2170: '오심',     2411: '이중',     3523: '혼자',     157: '겐찮은듯',     563: '다그',     694: '도일',     456: '께빵',     2793: '중국인',     3127: '타고',     556: '눈앞',     44: '가지',     3598: '힐링',     3354: '피트니스',     3254: '패키지',     1122: '미닫이',     847: '로비',     1421: '비롯',     1030: '모든',     52: '각종',     1103: '물건',     1926: '아침식사',     1207: '밥맛',     3349: '피아노',     2118: '연주',     867: '룸타입',     3250: '패밀리',     121: '거실',     3412: '한실',     1562: '서부',     1690: '수산시장',     1534: '새벽',     182: '경매',     304: '구경',     2972: '추가',     2022: '어차피',     3496: '현재',     1090: '묵고',     2453: '인터넷',     2840: '지정',     1952: '안해',     3330: '프런터',     1096: '문의',     2135: '영화',     1810: '시스템',     3219: '티브이',     2903: '채널',     1020: '몇개',     3092: '콘센트',     3341: '플러그',     2201: '와이프',     2995: '충전',     168: '결정',     594: '달라',     190: '경험',     2579: '장점',     2439: '인생',     2966: '최악',     2797: '중심',     1153: '바닷가',     1413: '비교',     3275: '편임',     3408: '한번',     2146: '예정',     3585: '휴가',     1750: '스위트룸',     2322: '유리창',     2312: '위트',     3050: '캠핑',     3160: '테이블',     1621: '세트',     3161: '텐트',     2054: '에어컨',     2543: '작은방',     975: '매트',     2520: '자리',     3142: '탑동',     263: '공원',     3338: '프리',     923: '마켓',     259: '공연',     971: '매일',     1833: '식사',     282: '관덕정',     2682: '정문',     684: '도보',     1645: '소요',     3458: '해장국',     717: '동문',     1560: '서문시장',     1047: '목관',     960: '맞은편',     1792: '슬슬',     1291: '별관',     1330: '본관',     68: '갈수',     2965: '최신',     377: '그린',     3545: '환경',     787: '때문',     1292: '별도',     641: '대중교통',     317: '구매',     1882: '심플',     1438: '비품',     3205: '트윈침대',     1763: '스탠다드',     548: '높이',     3404: '한라산',     525: '노곤',     3152: '터미널',     2189: '온돌룸',     1608: '세면대',     1114: '물이',     3013: '치약',     150: '것임',     1545: '생수',     3550: '환승',     231: '곧바로',     710: '동광양',     2677: '정류장',     1818: '시청',     1771: '스텝',     3502: '협소하',     130: '거품',     3131: '타월',     3537: '화장',     612: '대가',     123: '거울',     1670: '쇼파',     2739: '조합',     395: '금액',     2780: '주차공간',     267: '공터',     3150: '태풍',     104: '개층',     2184: '오후',     3409: '한시',     1485: '사우나',     1349: '부모님',     3422: '할머니',     1038: '모시',     197: '계획',     2464: '일로',     1445: '빠듯해',     2004: '어디',     441: '길가',     235: '골목길',     2377: '이륙',     2887: '착륙',     1310: '보이',     363: '그냥',     2469: '일반',     633: '대욕',     3489: '헬스장',     19: '가면',     206: '고려',     837: '렌터카',     2496: '입구',     1182: '반대쪽',     3416: '한정',     591: '단체',     660: '더블',     2708: '제외',     2088: '여유',     1183: '반대편',     688: '도심',     1387: '불구',     1648: '소음',     125: '거의',     1609: '세명',     3199: '트리플',     2618: '전날',     495: '남아',     2534: '자체',     610: '당일',     2683: '정보',     3468: '햇반',     2580: '장조림',     2637: '전자',     831: '레인지',     33: '가야',     1610: '세미나',     3400: '한국인',     369: '그대로',     469: '나름',     2697: '제과점',     2670: '정거장',     1022: '모기',     944: '만해',     898: '마리',     16: '가량',     1222: '방안',     2058: '에프킬라',     1435: '비치',     195: '계속',     1456: '뿌리',     2557: '잡고',     2891: '찬장',     2915: '천장',     242: '곳곳',     3008: '측은',     1265: '벌레',     414: '기본',     2223: '요금',     135: '건너편',     1262: '번호',     1538: '샐러드',     2349: '음식',     326: '구성',     2629: '전복죽',     2601: '저번',     3464: '핸드폰',     2996: '충전기',     1400: '불편',     1622: '센터',     256: '공사',     1720: '숙면',     1061: '무난',     528: '노력',     2826: '지불',     1430: '비용',     845: '로맨틱',     702: '독립',     1368: '북유럽',     2321: '유리',     3059: '커튼',     1145: '바깥',     1595: '설치',     1025: '모던',     1418: '비데',     3569: '효율',     2451: '인치',     1512: '삼성',     927: '만끽',     3270: '편안함',     2091: '여정',     1151: '바닥',     1052: '목적',     3060: '커플',     464: '끼리',     2852: '직진',     2268: '운전',     261: '공영',     1962: '애기',     1074: '무선인터넷',     80: '갑자기',     1568: '서전',     3432: '항공',     562: '다가',     5: '가급',     169: '결제',     2342: '은방',     1533: '상황',     1914: '아시',     227: '고트',     2822: '지도',     1614: '세심',     257: '공시',     1815: '시작',     982: '맥주잔',     3102: '쿠폰',     2463: '일도',     3108: '크기',     864: '룸서비스',     2690: '정신',     3277: '평가',     3272: '편의',     2233: '요즘',     2078: '여러',     2848: '직언',     1412: '블룸',     1288: '변기',     1115: '물질',     1997: '얘기',     1675: '수건',     3548: '환불',     2293: '월일',     3313: '푸른',     3223: '파도',     2918: '철썩',     3320: '풍경',     1544: '생선회',     2573: '장소',     543: '놀이',     1989: '양도',     735: '돼지',     2613: '전골',     970: '매운탕',     3512: '형편',     1406: '브런치',     751: '뒤쪽',     956: '맛집',     2869: '쭈욱',     79: '갑인',     764: '드타',     1233: '방파제',     3567: '횟집',     3129: '타운',     3448: '해산물',     356: '규모',     7: '가까이',     2008: '어르신',     454: '깨끗',     629: '대신',     2538: '작고',     1697: '수영',     1912: '아쉬움',     2430: '인도',     1634: '소독약',     1745: '스비',     3525: '홀로',     775: '등정후',     1365: '부터',     3520: '혹시',     3543: '확인',     2645: '전화',     3180: '통해',     3582: '휘트니',     2266: '운동복',     1698: '수영모',     219: '고오',     1157: '바람',     631: '대여',     2093: '여직원',     1077: '무시',     951: '말투',     2284: '원래',     2700: '제로',     2267: '운영',     2470: '일반인',     2503: '입장',     1583: '선심',     3360: '필요',     430: '기전',     620: '대뜸',     3528: '화가',     200: '고객',     3343: '플레인',     1800: '시경',     1917: '아웃',     3382: '하야',     998: '메리어트',     2081: '여럿',     2397: '이어도',     1707: '수준',     2370: '이군',     1867: '실망',     2747: '종일',     880: '리셉션',     3070: '컨시어',     3147: '태도',     2319: '유료',     1460: '사고',     3393: '학생',     1580: '선생님',     2005: '어딘',     1498: '사항',     1075: '무슨',     128: '거지',     879: '리빙룸',     3368: '하나요',     3202: '트윈룸',     1065: '무려',     156: '게재',     1869: '실물',     2881: '차이',     1879: '실화',     3231: '파우더',     240: '곰팡이',     2511: '자국',     2539: '작동',     233: '골드스타',     517: '냉장고',     2649: '절대',     826: '레스토랑',     2513: '자꾸',     2687: '정색',     1510: '살짝',     1561: '서버',     669: '데리',     32: '가신',     470: '나머지',     1105: '물기',     2851: '직접',     2931: '체계',     2048: '엉망',     1630: '소규모',     1803: '시기',     910: '마음',     886: '리트',     794: '라그',     409: '기대',     1862: '실내수영장',     1701: '수온',     1749: '스위트',     1427: '비수',     1515: '상대',     536: '노후',     2669: '정가',     1072: '무리',     3424: '할인',     3473: '행사',     2893: '참고',     3298: '포함',     913: '마일리지',     650: '대한항공',     3377: '하룻밤',     3542: '확실',     2115: '연식',     201: '고급',     2280: '원가',     1566: '서우',     3453: '해수욕장',     3402: '한눈',     2900: '창문',     161: '겨울철',     2187: '온도',     870: '리기',     1214: '방기',     725: '동시',     1221: '방식',     621: '대략',     695: '도정',     1352: '부스',     2137: '옆방',     3220: '티비',     3001: '취침',     2946: '초등학생',     1996: '양호',     3411: '한식당',     2875: '차라리',     1184: '반드시',     3107: '크게',     1896: '씨유',     674: '델문',     3035: '카페나',     3452: '해수욕',     2969: '최적',     778: '디럭스',     1203: '발코니',     1034: '모로',     3203: '트윈룸입니',     1585: '선착순',     2142: '예술',     1106: '물놀이',     1031: '모래',     3352: '피크',     1817: '시즌',     491: '날씨',     1581: '선선',     381: '근래',     3269: '편리',     3086: '코르',     434: '기지',     1481: '사양',     2782: '주체',     302: '교회',     2653: '절반',     2440: '인수',     1314: '보임',     1927: '아트',     2976: '추정',     3333: '프로',     3264: '페셔',     2432: '인력',     976: '매트리스',     472: '나무',     3482: '허리',     1934: '안감',     3447: '해변',     2275: '워낙',     31: '가시',     2757: '주말',     3397: '한국',     1270: '벚꽃',     403: '기간',     3503: '협재',     2197: '옹포',     1209: '밥집',     1505: '산책',     860: '루프',     1425: '비바람',     1396: '불어',     1410: '블로거',     1108: '물떄',     360: '그거',     2308: '위주',     3317: '풀이',     2192: '온수',     1133: '미온수',     1132: '미온',     2536: '자쿠지',     2551: '잠깐',     2458: '인피니트',     3549: '환상',     3365: '하나',     1782: '스페',     3015: '치킨',     1446: '빠에야',     1779: '스파',     333: '구조',     1780: '스파룸',     2535: '자쿠',     2401: '이용권',     3371: '하니',     1487: '사이',     1820: '시트',     2678: '정리',     1511: '삼다수',     1294: '병과',     520: '네스프레소',     3051: '캡슐',     2089: '여자',     3347: '피로',     1784: '스페인',     2132: '영업',     2743: '종료',     1245: '버거',     2161: '오른쪽',     893: '마담',     482: '나탈리',     2351: '음악',     3362: '필터',     1875: '실외수영장',     147: '검색',     2186: '옥상',     164: '결과',     653: '대형',     942: '만큼',     1260: '번잡',     98: '개수대',     2407: '이전',     1909: '아무',     884: '리지',     2714: '제한',     189: '경치',     2403: '이웃',     2467: '일몰',     1877: '실제',     883: '리조트',     3527: '홍보',     1529: '상통',     3532: '화산',     1166: '바위',     2686: '정상',     431: '기점',     1770: '스템',     2556: '잠자리',     435: '기타',     1359: '부족함',     444: '길이',     582: '다행',     2792: '중국어',     2131: '영어',     692: '도움',     3438: '해결',     1053: '목적지',     3461: '해피',     2346: '음료',     1488: '사이다',     2764: '주스',     592: '달걀',     3014: '치즈',     3597: '히터',     3187: '투어',     3515: '호스텔',     2858: '질문',     1530: '상품',     270: '과거',     154: '게스트하우스',     2510: '자고',     2150: '오기',     2479: '일이',     1201: '발전',     2141: '예상',     3165: '토스터',     2424: '이후',     1635: '소등',     1399: '불키',     2733: '조용조',     1232: '방키',     218: '고여',     496: '남자',     1946: '안전',     2878: '차로',     2373: '이내',     1403: '뷔페',     2076: '여느',     856: '롯데리아',     1216: '방만',     224: '고정',     1060: '무궁화',     1676: '수기',     1490: '사이트',     3526: '홈페이지',     921: '마치',     1088: '무척',     2617: '전기차',     134: '건너',     402: '급속',     1628: '소가',     2333: '유치원',     2784: '주택가',     ...}</pre></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> coef <span class="keyword">in</span> coef_pos_index[:<span class="number">20</span>]:</span><br><span class="line">    print(invert_index_vectorizer[coef[<span class="number">1</span>]], coef[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>방문 1.2644550507381787이용 0.9079356150239053바다 0.895609472071521조식 0.8859075267474583가족 0.8795111499693716가성 0.8541915649753757다음 0.8362541212560809최고 0.7714811231976703사장 0.7375280889735719맛집 0.7203390936359615추천 0.6503260268852225거리 0.6488836121942877마음 0.6467914172687944바로 0.6264469987695738리조트 0.5943145305412955출장 0.5505354129422678도움 0.5294632094678557인테리어 0.5240729254152497아주 0.5207834696883535의사 0.5153917648445299</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> coef <span class="keyword">in</span> coef_neg_index[:<span class="number">20</span>]:</span><br><span class="line">    print(invert_index_vectorizer[coef[<span class="number">1</span>]], coef[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>예약 -0.9945592515966041냄새 -0.9190158099937462다른 -0.8672956005075485침대 -0.7519681298547074보이 -0.7201222787741572최악 -0.7142499739127354에어컨 -0.6786616478611768별로 -0.6742178511586063찾기 -0.6584721911054098취소 -0.6464141509409321사람 -0.6451323735594592정도 -0.6240099604615805사진 -0.6089303470147718대부분 -0.5889712626646347다시 -0.5601302753897155대해 -0.5518124209379022노후 -0.5484791097700695느낌 -0.5423970967095598필요 -0.5413974621071783문제 -0.5287746123667489</code></pre><br><p>키워드를 살펴보면:</p><ul><li>이용객들이 보통 제주 호텔의 바다뷰 혹은 바다 접근성, 주변 맛집 그리고 인테리어 등에 만족하는 것으로 보입니다.</li><li>하지만 숙소의 냄새 그리고 침대, 에어컨 등 시설의 상태가 많이 아쉬워 보이고 개선이 필요해보입니다.</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      1. 감성 분류 예측 모델 도출 (Logistic Regression);  2. 긍/부정 키워드 추출
    
    </summary>
    
    
      <category term="【EXERCISE】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90EXERCISE%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Text Mining" scheme="https://hyemin-kim.github.io/tags/Text-Mining/"/>
    
  </entry>
  
</feed>
