<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hyemin Kim</title>
  
  <subtitle>김혜민 / 金慧敏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyemin-kim.github.io/"/>
  <updated>2020-08-20T13:10:28.893Z</updated>
  <id>https://hyemin-kim.github.io/</id>
  
  <author>
    <name>Hyemin Kim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【실습】 Python &gt;&gt; Text Mining -- 영화 시나리오</title>
    <link href="https://hyemin-kim.github.io/2020/08/20/E-Python-TextMining-1/"/>
    <id>https://hyemin-kim.github.io/2020/08/20/E-Python-TextMining-1/</id>
    <published>2020-08-20T12:58:32.394Z</published>
    <updated>2020-08-20T13:10:28.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="text-mining-실습-영화-시나리오-word-cloud-단어-중요도tf-idf-분석"><a class="markdownIt-Anchor" href="#text-mining-실습-영화-시나리오-word-cloud-단어-중요도tf-idf-분석"></a> 【Text Mining 실습】-- 영화 시나리오: Word Cloud &amp; 단어 중요도(TF-IDF) 분석</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%AA%A9%ED%91%9C"><strong>0. 목표</strong></a></li><li><a href="#1-library-data-import"><strong>1. Library &amp; Data Import</strong></a></li><li><a href="#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0"><strong>2. 데이터셋 살펴보기</strong></a><ul><li><a href="#2-1-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%ED%83%90%EC%83%89">2-1. 기본 정보 탐색</a></li></ul></li><li><a href="#3-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC"><strong>3. 텍스트 데이터 전처리</strong></a><ul><li><a href="#3-1-%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D-%EC%A0%81%EC%9A%A9">3-1. 정규 표현식 적용</a></li><li><a href="#3-2-word-count">3-2. Word Count</a><ul><li><a href="#1-%EB%A7%90%EB%AD%89%EC%B9%98%EC%BD%94%ED%8D%BC%EC%8A%A4-%EC%83%9D%EC%84%B1">(1) 말뭉치(코퍼스) 생성</a></li><li><a href="#2-bow-bag-of-words-%EB%B2%A1%ED%84%B0-%EC%83%9D%EC%84%B1">(2) BoW (Bag of Words) 벡터 생성</a></li><li><a href="#3-%EB%8B%A8%EC%96%B4-%EB%B6%84%ED%8F%AC-%ED%83%90%EC%83%89">(3) 단어 분포 탐색</a></li></ul></li></ul></li><li><a href="#4-%ED%83%9D%EC%8A%A4%ED%8A%B8-%EB%A7%88%EC%9D%B4%EB%8B%9D"><strong>4. 택스트 마이닝</strong></a><ul><li><a href="#4-1-%EB%8B%A8%EC%96%B4%EB%B3%84-%EB%B9%88%EB%8F%84-%EB%B6%84%EC%84%9D-word-cloud">4-1. 단어별 빈도 분석 (+ Word Cloud)</a><ul><li><a href="#1-%EC%83%81%EC%9C%84-%EB%B9%88%EB%8F%84%EC%88%98-%EB%8B%A8%EC%96%B4-%EC%B6%9C%EB%A0%A5">(1) 상위 빈도수 단어 출력</a></li><li><a href="#2-word-cloud-%EC%8B%9C%EA%B0%81%ED%99%94">(2) Word Cloud 시각화</a></li></ul></li><li><a href="#4-2-%EC%9E%A5%EB%A9%B4%EB%B3%84-%EC%A4%91%EC%9A%94-%EB%8B%A8%EC%96%B4-%EC%8B%9C%EA%B0%81%ED%99%94-tf-idf">4-2. 장면별 중요 단어 시각화 (TF-IDF)</a><ul><li><a href="#1-tf-idf-%EB%B3%80%ED%99%98">(1) TF-IDF 변환</a></li><li><a href="#2-%EB%B2%A1%ED%84%B0-%EB%8B%A8%EC%96%B4-mapping">(2) “벡터” - “단어” mapping</a></li><li><a href="#3-%EC%A4%91%EC%9A%94-%EB%8B%A8%EC%96%B4-%EC%B6%94%EC%B6%9C-top-3-tf-idf">(3) 중요 단어 추출 - Top 3 TF-IDF</a></li></ul></li></ul></li></ul><p></p><br><h2 id="0-목표"><a class="markdownIt-Anchor" href="#0-목표"></a> <strong>0. 목표</strong></h2><p>영화 시나리오 데이터를 활용해 2가지의 Text Mining 분석을 진행하겠습니다.</p><ol><li><p>단어별 빈도 분석 (Word Cloud 산출)</p></li><li><p>장면별 중요 단어 시각화 (TF-IDF 분석)</p><br></li></ol><h2 id="1-library-data-import"><a class="markdownIt-Anchor" href="#1-library-data-import"></a> <strong>1. Library &amp; Data Import</strong></h2><p><strong>&gt;&gt; 사용할 Library</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>&gt;&gt; 사용할 데이터셋</strong></p><p>영화 "The Bourne Supermacy"의 시나리오를 활용하겠습니다. <a href="https://www.dailyscript.com/scripts/bournesupremacy.pdf" target="_blank" rel="noopener">Link (pdf파일)</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/yoonkt200/FastCampusDataset/master/bourne_scenario.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>page_no</th>      <th>scene_title</th>      <th>text</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1         EXT. MERCEDES WINDSHIELD -- DUSK</td>      <td>1                It's raining...             ...</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>A1        INT. MERCEDES -- NIGHT</td>      <td>A1                On his knee -- a syringe an...</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>2         INT. COTTAGE BEDROOM -- NIGHT</td>      <td>2                BOURNE'S EYES OPEN! -- panic...</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>A2        INT. COTTAGE LIVING AREA/BATHROOM ...</td>      <td>A2                BOURNE moving for the medic...</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>3         INT./EXT. COTTAGE LIVING ROOM/VERA...</td>      <td>3                One minute later.  BOURNE mo...</td>    </tr>  </tbody></table></div><br><p><strong>&gt;&gt; Feature Description</strong></p><ul><li><p>page_no: 데이터가 위치한 pdf파일의 페이지 수</p></li><li><p>scene_title: 씬 제목</p></li><li><p>text: 씬에 해당하는 지문/대본 텍스트 정보</p><br><br></li></ul><h2 id="2-데이터셋-살펴보기"><a class="markdownIt-Anchor" href="#2-데이터셋-살펴보기"></a> <strong>2. 데이터셋 살펴보기</strong></h2><h3 id="2-1-기본-정보-탐색"><a class="markdownIt-Anchor" href="#2-1-기본-정보-탐색"></a> 2-1. 기본 정보 탐색</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demension</span></span><br><span class="line">df.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(320, 3)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결측치</span></span><br><span class="line">df.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>page_no        0scene_title    0text           0dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># information</span></span><br><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 320 entries, 0 to 319Data columns (total 3 columns): #   Column       Non-Null Count  Dtype ---  ------       --------------  -----  0   page_no      320 non-null    int64  1   scene_title  320 non-null    object 2   text         320 non-null    objectdtypes: int64(1), object(2)memory usage: 7.6+ KB</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># text 변수 확인</span></span><br><span class="line">df[<span class="string">'text'</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>" 1                It's raining...                Light strobes across the wet glass at a rhythmic pace...                 Suddenly -- through the window a face -- JASON BOURNE --               riding in the backseat -- his gaze fixed.      "</code></pre>  <br><p>"text"내용을 확인해보면, 여기에 우리가 필요없는 내용들이 포함되어있습니다: 맨 앞에 있는 씬 번호, 공백, 특수 문자 등. 이들을 제거하는 전처리 과정이 필요해보입니다.<br>또한, Text mining을 진행할 때, 대소분자의 구분이 의미가 없습니다. 따라서, 대분자를 소문자로 변환하는 작업도 함계 진행하겠습니다.</p><p><br> <br></p><h2 id="3-텍스트-데이터-전처리"><a class="markdownIt-Anchor" href="#3-텍스트-데이터-전처리"></a> <strong>3. 텍스트 데이터 전처리</strong></h2><h3 id="3-1-정규-표현식-적용"><a class="markdownIt-Anchor" href="#3-1-정규-표현식-적용"></a> 3-1. 정규 표현식 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'text'</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>" 1                It's raining...                Light strobes across the wet glass at a rhythmic pace...                 Suddenly -- through the window a face -- JASON BOURNE --               riding in the backseat -- his gaze fixed.      "</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규 표현식 함수 정의</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_regular_expression</span><span class="params">(text)</span>:</span></span><br><span class="line">    text = text.lower()  <span class="comment"># 대문자 -&gt; 소문자 변환</span></span><br><span class="line">    english = re.compile(<span class="string">'[^ a-z]'</span>)  <span class="comment"># 영어 추출 규칙: 띄어 쓰기를 포함한 알파벳</span></span><br><span class="line">    result = english.sub(<span class="string">''</span>, text)  <span class="comment"># 위에 설정한 "english"규칙을 "text"에 적용(.sub)시킴</span></span><br><span class="line">    result = re.sub(<span class="string">' +'</span>, <span class="string">' '</span>, result) <span class="comment"># 2개 이상의 공백을(' +') 하나의 공백(' ')으로 바꿈</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure>  <br><p>만들어 놓은 정규 표현식을 "text"의 첫번째 데이터에 적용해보면:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply_regular_expression(df[<span class="string">'text'</span>][<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>' its raining light strobes across the wet glass at a rhythmic pace suddenly through the window a face jason bourne riding in the backseat his gaze fixed '</code></pre><br><p>우리의 예상대로 소문자만 존재하고, 공백과 특수문자가 모두 제거됐습니다.</p><p>그럼 이제 이 규칙을 전체 데이터셋에 적용해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규 표현식 적용</span></span><br><span class="line">df[<span class="string">'processed_text'</span>] = df[<span class="string">'text'</span>].apply(<span class="keyword">lambda</span> x: apply_regular_expression(x))</span><br><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>page_no</th>      <th>scene_title</th>      <th>text</th>      <th>processed_text</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1         EXT. MERCEDES WINDSHIELD -- DUSK</td>      <td>1                It's raining...             ...</td>      <td>its raining light strobes across the wet glas...</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>A1        INT. MERCEDES -- NIGHT</td>      <td>A1                On his knee -- a syringe an...</td>      <td>a on his knee a syringe and a gun the eyes of...</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>2         INT. COTTAGE BEDROOM -- NIGHT</td>      <td>2                BOURNE'S EYES OPEN! -- panic...</td>      <td>bournes eyes open panicked gasping trying to ...</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>A2        INT. COTTAGE LIVING AREA/BATHROOM ...</td>      <td>A2                BOURNE moving for the medic...</td>      <td>a bourne moving for the medicine cabinet digs...</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>3         INT./EXT. COTTAGE LIVING ROOM/VERA...</td>      <td>3                One minute later.  BOURNE mo...</td>      <td>one minute later bourne moves out onto the ve...</td>    </tr>  </tbody></table></div>  <br><h3 id="3-2-word-count"><a class="markdownIt-Anchor" href="#3-2-word-count"></a> 3-2. Word Count</h3><h4 id="1-말뭉치코퍼스-생성"><a class="markdownIt-Anchor" href="#1-말뭉치코퍼스-생성"></a> (1) 말뭉치(코퍼스) 생성</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make corpus</span></span><br><span class="line">corpus = df[<span class="string">'processed_text'</span>].tolist()</span><br><span class="line">corpus</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:auto"><pre>    [' its raining light strobes across the wet glass at a rhythmic pace suddenly through the window a face jason bourne riding in the backseat his gaze fixed ',     ' a on his knee a syringe and a gun the eyes of the driver jarda watching bournes pov the passenger back of his head cell phone rings the head turns its conklin bourne returns his stare ',     ' bournes eyes open panicked gasping trying to stay quiet marie sleeps ',     ' a bourne moving for the medicine cabinet digs through the medicine cabinet downs something specific ',     ' one minute later bourne moves out onto the veranda marie pads in watching him for a moment concerned clearly its not the first time this has happened they both look different than last we saw them his hair is longer shes a blonde hippie travelers their cottage is humble but sweet the bedroom opens to a beach and a town just down the hill club music from some all night rave wafting in from the far distance marie where were you jason bourne in the car conklin up front marie ill get the book bourne no theres nothing new marie youre sure he nods we should still we should write it down bourne two years were scribbling in a notebook marie it hasnt been two years bourne its always bad and its never anything but bits and pieces anyway shes gone quiet you ever think that maybe its just making it worse you dont wonder that she lays her hands on his shoulders steadies him marie we write them down because sooner or later youre going to remember something good bourne softens i do remember something good all the time i remember you she smiles kisses him leads him back in ',     ' marie getting bourne into the bed turning down the light getting him settled waiting for that pill to kick in what would he do without her bourne im trying marie okay marie i worry when you get like this bourne its just a nightmare marie i dont mean that i worry when you try to ignore it he hesitates but that gets him he knows shes right and with that opening hes letting go resistance folding almost childlike shes gathering him in hes letting her do it marie contd sleep sleep now bourne i should be better by now marie you are better and i think its not memories at all its just a dream you keep having over and over bourne but it ends up the same marie one day it will be different it just takes time beat well make new memories you and me silence she strokes his face he gives in to her tenderness hes fading two waifs in the dark ',     ' bourne running in the sun a punishing pace along the sand moving strong effortless deep into it focused the stunning conjunction of sun and scenery are lost on him ',     ' a busy market town fishing town hippie town lots of young western faces rundown and happening at the same time marie shopping filling a bag with local produce ',     ' bourne still running leaving the beach behind ',     ' marie back from the market putting the groceries away almost done when she stops for a moment a photograph there on the windowsill a snapshot jason and marie on a beach her arms around him as if she were the protector big smiles young alive in love marie smiles ',     ' funky busy colonial facades in vivid subcontinental technicolor loud morning traffic camera finds bourne coming out of a store with a big bottle of water hes just finished his run standing there chugging away checking the scene when something catches his eye his pov the street a silver car something newish pulling down the block cant quite see whos driving but back to bourne watching this silver car so serious hes casual nobody passing would notice but we do hes on alert moving with him as bourne follows the silver car on foot natural cruising the busy sidewalk blending into the mix chugging on that water bottle and up ahead the silver car making the corner and turning now back to bourne slowing as he reaches the corner his pov the silver car has parked theres a guy welldressed casual physical sunglasses call him kirill hes out of the car and heading across the street toward a building there a telegraph office back to bourne checking his watch the car the guy perimeter ',     ' mr mohan at his desk hes a crisp proper man of fifty hes just been handed something a photograph of marie an old passport picture mr mohan and your question sir kirill across the desk kirill shes my sister theres been a death in the family this is the last place we know she called from ',     ' a note on the table im at the beach bourne has just come in just read the note balling it quickly in fact everything is quickly now because bourne is bailing fast calm methodical some exfil procedure that hes honed and choreographed packing like a machine rapid time cuts backpacks thrown open on the bed house cash pulled from a lamp base credit cards taped under the counter ',     ' kirill coming out of the bank mission accomplished heading back to the silver car getting in and ',     ' kirill starting it up glancing around nice and easy hes cool putting the car into gear he makes a slow pass through the marketplace eyes everywhere ',     ' bourne done the place is stripped pulling on the backpacks glancing around one last thing shit he almost missed it the photograph the one of he and marie on the beach the one we saw her looking at earlier there it is on the windowsill jamming it into his pocket and ',     ' a kirill now parked and out of the car on the move on foot he begins a sweep of the beach ',     ' bourne out the back jogging keeping low into the neighborhood through the alleys nothing random about it this has all been worked out and ',     ' crowded with tourists sunbathers marie at her favorite spot talking with two women laughing with them happy ',     ' a a burly jeep comes roaring up bourne spots the silver car parks at the other end takes off towards the beach ',     ' kirill methodically making his way up the beach checking every blue tent every towel ',     ' bourne coming up the beach the opposite way one eye on kirill one eye on marie he arrives just as kirill looks up and sees them a hundred yards away a hard stare between them bourne bends down bourne we gotta go marie we gotta go now from the tone of his voice she knows its serious marie grabs her bag a quick goodbye to the friends they hurry off bourne uses the sunbathers as cover kirill retreats ',     ' they reach the jeep she knows the drill bag tossed in the back even as the jeep pulls away and ',     ' bourne driving marie beside him bourne were blown she hesitates one minute ago everything was fine marie no how bourne the telegraph office marie but we were so careful bourne we pushed it we got lazy ',     ' kirill already back at the silver car following them out onto the main street blocked by the local traffic pulling a huge automatic pistol out from his travel bag ',     ' the jeep pulling down this narrow little passageway and bournes windshield pov main street packed with traffic and back to bourne not liking this eyes all over trying to decide marie but youre sure bourne he was at the campground yesterday marie so bourne its wrong guy with a rental car and hundred dollar sneakers sleeps in a tent trying to decide whether to pull out or back up marie thats crazy bourne no not this this is real suddenly and hes right there throwing the car into reverse marie where bourne back there at the corner hyundai silver ',     ' kirill trapped in some main street gridlock glancing back for a way out freezing suddenly because there his pov the jeep the alley right there twenty yards back a good look at bourne and marie as they disappear and ',     ' the jeep backing up the way it came blowing its horn because an old van pulls in and blocks him from behind ',     ' bourne leaning on the horn shit now theyve got to wait marie but youre not youre not sure bourne we cant wait to be sure marie i dont want to move againi like it here bourne look we clear out we get to the shack we get safe we hang there awhile ill come back ill check it out but right now we cant marie wheres left to go bourne theres places we cant afford to be wrong ',     ' kirill calm possessed of a familiar tactical patience he cant get the hyundai to the alley from where he is and it doesnt make sense to go on foot he checks his rearview fuck it theres an opening ahead and hes taking it even though its away from them hell find another way ',     ' bourne sees the hyundai move forward into traffic the old van is still blocking them from behind bourne you drive marie what bourne already squeezing over switch you drive marie where bourne make the left toward the bridge marie scrambling over the seat bourne eyes everywhere checks his watch the jeep squirts back on the main street and ',     ' marie at the wheel adrenaline pumping clear running for thirty yards ahead and marie skidding them into the right turn clipping another vehicle mirror shattering speeding up bourne scanning behind them marie moving out to pass veering back an oncoming bus just in time and marie jesus glancing over is he back there bourne not yet marie its just him bourne yeah one guy i dont think he was ready marie hang on marie bearing down pulling out gives him a quick smile bourne knowing hes got a good one here ',     ' kirill stopping short on a rise bit of a view from here gets half out the car to look below the jeep headed for a bridge hes gonna lose them kirills mind racing grabs duffle from the back abandons car ',     ' marie driving bourne preps his pistol eye out for kirill bourne you keep going to the shack ill meet you there in an hour marie concerned where are you going bourne im going to bail on the other side and wait this bridge is the only way he can follow marie what if its not who you think it is bourne if he crosses the bridge it is marie there must be another way bourne i warned them marie i told them to leave us alone marie jason please dont do thisit wont ever be over like this bourne theres no choice her pov the old concrete bridge ahead almost there ',     ' kirill slams into it quick precise grabs into the bag only a moment and hes got a sniper rifle ',     ' a bourne pistol in hand spare clip in the other checks his watch bourne at the end make the left when i roll out do not slow down marie nods got it after a beat marie i love you too bourne tell me later marie looks ahead ',     ' b kirill eye to the scope sniper scope pov there the jeep rumbling across the bridge no clear target just the back of the full drivers side headrest kirills finger squeezing firing ',     ' the jeep jerking front fender tearing into and along the guard rail cement shards fill the air bourne reaching for the wheel too late as the jeep finally crashes through the flimsy guardrail plummets splashes hard begins to sink out of sight ',     ' kirill lowers the scope takes a quick look around hes basically gone unnoticed in this little nook with his silenced rifle but people are already rushing toward the bridge then there an old woman looking directly at kirill from a doorway not quite sure what but an old indian woman in goa so what kirill drills her with a look as she sinks back inside ',     ' swallowed up bourne and marie gone ',     ' kirill scans the surface of the river under the bridge waiting ',     ' mud plumes as the jeep settles bourne reaches over to marie tries to urge her out ',     ' kirill with a killers patience waiting almost done scope pov the surface of the water unbroken kirill scans his perimeter theres the old woman again but more people with her people coming out of the woodwork kirill checks the surface one last time nothing he breaks down the rifle in moments goes ',     ' bourne up into an air pocket held by the jeeps canvas top a big gulp of air and hes back to marie frantic trying to unclip her seatbelt pull her out but its all jammed up ',     ' bag chucked in the back all he has left is the scope one last look to the unbroken surface then its time to go kirill drifting away disappears ',     ' the red halo growing bigger blood bourne pauses maries face is blank shes dead bourne finally pulling back realizing this is goodbye ',     ' we pick up a man with a briefcase on a telephoto lens teddyradio vo the seller has arrived berlin as the man comes to a chinese restaurant he stops squarely so he can be seen clearly then he enters a stark glass office building teddyradio vo contd contd hes inside ',     ' two men cross the square to the chinese restaurant vic is forty steelass intel operator he carries a large samples case beside him mike younger exnavyseal ',     ' the hub secure anonymous office space somewhere in the city shades drawn lots of gear cabled around the stale improvised feel of a temporary outpost four serious people alone in this room pamela landy is a senior cia counterintelligence officer hovering over the communications console cronin pamelas early forties stonecold facade quarterbacking the operation over the radio kurt and kim are the techs here his and her headphones ruggedized laptops and comm gear spread around them cronin what have you got survey one ',     ' dark teddy at the window another military face radio rig night scope watching vic and mike pass below him teddyradio over hub this is survey one mobile one is in motion seller is inside and waiting ',     ' vic and mike slow as they come to the same stark glass office building teddyradio over we are ready to go ',     ' mike and vic shake hands two tired coworkers parting ways mike will keep walking vic entering the building through the big glass doors smiling as hes approached by a night shift security guard and we hear mike still walking alone now heading away from the glass office building toward a van parked up the block mikeradio sleeve mike earpiece this is escort one im clear ',     ' the command post cronin works the communications board cronin all teams listen up we are standing by for final green turning now to pamela who has been listening just as shes about to give the final word kim raises a finger kim langley she hands pamela a phone thats patched into her board pamela a bit surprised martin ',     ' three men cia mandarins sit around a round table martin marshall deputy vicedirector hes in charge all is tense marshall im here so is donnie and jack weller we understand youre using the full allocation for this buy pamela thats where we came out marshall its a lot of money pam pamela were talking raw unprocessed kgb files its not something we can go out and comparison shop marshall still pamela for a thief a mole i vetted the source marty hes real if it does nothing more than narrow the list of suspects its a bargain at ten times the price mandarin pamela jack weller here its the quality thats at issue pamela yes sir im in total agreement if theyre fakes theyre expensive furious impatient gentlemen ive got the seller on site and in play quite honestly theres not much more to talk about marshall looks to his mandarians not convinced but doesnt want to lose the opportunity time to wash his hands marshall all right pam your game your call ',     ' all eyes on pamela as she puts down the phone to langley nodding to cronin yes croninradio final green you are go repeat you are go for final green ',     ' vic has just passed muster with the security guard hes standing alone at an elevator bank vicradio sleeve mike earpiece on my way up vic pulling his earpiece going dark waits for an elevator ',     ' a dark a small room full of wiring and infrastructure lit by the glare of someones maglight gloved hands quickly pass over racks of gear and wiring and then stopping at the main electrical risers they carefully place an explosive device no bigger than a pack of cigarettes onto the main riser done with that here comes a second small explosive device but this ones special its being taken from a plastic bag and mounted down by the floor on a subpanel done the hands hold up what looks like a piece of tape ',     ' transferring it onto the charge ',     ' vic alone with the samples case pressing the button for the top floor the doors close the car rises and then it stops vic bracing himself as the door opens and ivan russian the guy we saw outside with the briefcase standing in an empty darkened hallway ivan show me vic here ivan holding open the door now show now vic flips open the case cash three million dollars ',     ' a glass door a suite of offices beyond clean anonymous one light on deep inside caspiexpetroleum cherbourg moscow rome tehran',     ' curtains drawn lights low ivan sitting with the samples case counting the cash vic poring over russian document files dozens of kgb files old and new spread sheets financial data incomprehensibly cyrillic marked up but judging by the seals and clearance sign offs all topsecret vic this is everything ivan is there is all there suddenly music a radio some tinny pop tune just started playing from somewhere down the hall vic what the hell is that alone you said alone both of them sure theyre being doublecrossed vic contd contd reaching for his ankle who who else is here ivan no not me no other people vic coming up with a pistol shut up just shut the freaked by the gun ivan to his feet vic pushing him back as he rushes past the sample case spilling cash and wrong snapph snapph snapph snapph snapph five fast suppressed small caliber shots vic falls first ivan crashing back across a desk as the bullets tear into him both of them dead before they hit the floor and reverse to find the gloved hands unscrewing a silencer tucking away the weapon already in motion before we know whats happened pulling a climbing duffel out from his back pack stuffing in the samples case and ivans briefcase all the files all the money except wait hes left out one old kgb file cover and now he pulls a plastic bag from his backpack gloved hands carefully remove a single sheet of paper from inside the bag and this paper looks exactly like all the stuff hes just tucked away another page full of cyrillic blur hes putting this sheet of paper inside the file cover now hes slipping them both underneath the desk tossing them there as if they fell in the struggle and ',     ' the electrical risers as one of the two detonation decives blows a single tidy selfcontained explosion and ',     ' as the lights flicker and fail and the night shift security guard is suddenly cast into darkness and ',     ' as they were waiting but only a moment before teddyradio sudden urgent hub we just we lost power the building the whole place just went dark cronin looking at pamela the first whiff of dread as cronin repeat who is dark the target building or your location radio voices piling up panicked confusion cascading as ab ',     ' anonymous drone barn kirill stepping out of a car hes carrying the duffle ',     ' kirill heading down the hall ',     ' kirill enters its a small room gretkov is waiting hes forty professional trim and polished dominant gretkov russian youre early kirill youre complaining gretkov its clean kirill would i bring it gretkov taking over now tosses some money on the bed checks out the photocopy of the files gretkov what are you doing kirill stripping quickly kirill im taking a shower its been a long day gretkov make it fast my plane is waiting gretkov dumping three million dollars over the bed as kirill sheds his clothes and we ',     ' a workmen cluster as a cable winches the jeep is raised from the river bottom as water pours off of it bourne watching from a distance empty ',     ' b crime scene police blocking office workers from getting in the building media vans clogging the street pamela and cronin across the street watching the mood is black ashes pamela we need to get in there cronin im working on it pamela stands there silent staring at the disaster across the street a ',     ' a bourne is bailing exfil procedure but this is a heartbroken exfil a footlocker open bournes main stash bourne going through the footlocker setting aside his work clothes other things he needs but he also has to separate a growing pile of marie memories bank cards phony student ids loose passport photos with a mix of looks and hairdos clothes vacuumpacked bags spare shoes ',     ' b a gasolinestoked fire burning in a rocklined pit bourne feeding his papers and all of maries belongings into the fire a passport cover crinkles back to reveal her photo her face begins to burn gassoaked clothes tossed in nothing left except the photograph the picture of he and marie at the beach the one from his desk bourne hesitates holds the photo out to the flames the rules of exfil say drop it but he cant wont he reaches to his bag sticks the photo on top of his gear then hefting the bag bourne strides away ',     ' a folding table covered with xeroxed berlin police paperwork pamela getting a showandtell from cronin and teddy cronin so there were two of these explosive charges placed on the power lines one of them failed the fingerprint pamelas got it thats from the one that didnt go off pamela and the germans cant match it teddy nobodys got it we checked every database we could access nothing cronin show her the other thing teddy this is a kgb file that mustve fallen somehow and then slipped under i guess a desk there or handing it to her pamela do we know what this says teddy yup a scrap of paper the main word there the file heading translates as treadstone pamela what the hell is a treadstone cronin shaking his head nobody knows ',     ' c bourne bouncing around on an old punjab bus alone in a crush of humanity going only god knows where ',     ' a pamelas pov as she drives toward the entrance cia headquarters virginia ',     ' a long bright sterile hallway pamela and cronin walking briskly alongside a uniformed sps officer ',     ' pamela and cronin watching the sps officer unlock the operation panel coding in they begin to descend and ',     ' drab and desolate pamela and cronin come around a corner walking with a new escort officer passing a sign that reads operations library center ',     ' sealed triplelocked numbered door it swings open lights flicker on tons of shit packed away in here shelves bulging boxes tapes binders hard drives pamela steps in a huge filing cabinet labeled treadstone pamelaphone over ward abbott os yes pamelaphone pamela landy a ',     ' ward abbott at his desk the cluttered clubhouse hq of a man whos spent the last thirtyfive years in the spy game a picture window offers a commanders view of the bullpen abbottphone what can i do for you pam pamelaphone i was hoping you had some time for me abbottphone time for what pamelaphone im free right now actually abbottphone that sounds ominous let me check my schedule abbott holds the phone eyes drifting out the window and abbotts pov the bullpen cronin is standing with daniel zorn one of abbotts trusted s clearly zorn is getting the less polite version of pamelas invitation zorn managing to shoot a quick questioning glance to abbott as ',     ' a cold room desk two chairs abbott and pamela alone pamela treadstone abbott never heard of it pamela thats not gonna fly abbott with all due respect pam i think you mightve wandered a little past your pay grade she has a piece of paper she slides it forward pamela thats a warrant from director marshall granting me unrestricted access to all personnel and materials associated with treadstone abbott rocked and trying to hide it abbott and what are we looking for pamela i want to know about treadstone abbott to know about it almost amused it was a kill squad black on black closed down two years ago more abbott contd nobody wants to know about treadstone not around here the warrant you better take this back to marty and make sure he knows what youre doing pamela trump card he does ive been down to the archives i have the files ward ',     ' a a hard working port a big mediterranean ferry coming in naples ferry bourne at the rail unchanged from india staring ahead as europe looms ',     ' b bourne disembarking to an immigration queue looking unremarkable just one of many passing through ',     ' as they were abbott watching pamela pull a photo from her file sliding it over conklins face peering back pamela lets talk about conklin abbott what are you after pam you want to fry me you want my desk is that it pamela i want to know what happened abbott what happened jason bourne happened fury focusing youve got the files then lets cut the crap it went wrong conklin had these guys wound so tight they were bound to snap more abbott contd bourne was his number one guy went out to work screwed the op and never came back conklin couldnt fix it couldnt find bourne couldnt adjust it all went sideways finally there were no options left pamela so you had conklin killed silence i mean if were cutting the crap abbott ive given thirty years and two marriages to this agency ive shoveled shit on four continents im due to retire next year and believe me i need my pension but if you think im gonna sit here and let you dangle me with this you can go to hell marshall too flat it had to be done pamela and bourne wheres he now abbott shrugs dead in a ditch drunk in a bar in mogadishu who knows pamela i think i do we had a deal going down in berlin last week during the buy both our field agent and the seller were killed we pulled a fingerprint from a timing charge that didnt go off beat they were killed by jason bourne abbott hesitates blindsided what a courtesy knock at the door cronin appearing in the doorway theyre ready for us upstairs ',     ' a now at the immigration officer booth bourne hands over an old blue passport it reads jason bourne whats he up to is he giving up immigration officer where you coming from mr bourne bourne tangiers the officer runs the code on the passport through the scanner ',     ' a tech turns as a computer alarm begins an incessant beeping the screen as jason bournes passport data begins scrolling through a sleeper waking up on the grid then his photo work station as an interpol supervisor leans in over the techs shoulder to see whats up after a beat as the tech begins typing and hits send ',     ' crewcut turns from his monitor to his own superior as at the same time ',     ' looking up from his computer the immigration officer gestures bourne to one side immigration officer sir would you be so kind as to step over here please bourne uh sure the immigration officer comes out of his booth as a carabinieri joins him and they escort bourne to a small room at the side of the customs hall immigration officer please wait in here bourne scans the hall as he walks enters room pamelas vo seven years ago twelve million dollars was stolen from a cia account bourne takes a seat carabinieri guards the room ',     ' same table more faces marshall back in the throne abbott three cia mandarins plus their s and pamela in warsaw this is click a photo of the man killed in berlin fills the projection screen behind her click crime scene photo of dead body click pecos oil logo pamela contd ivan mevedev senior financial manager worked for one of the new russian petroleum companies pecos oil he claimed to know where the money landed we believe this could have only happened with help from someone inside the agency this click conklins photo pamela contd placing it on the table this is conklins computer click a photocopy of a banking contract pamela contd at the time of his death conklin was sitting on a personal account in the amount of sevenhundred and sixty thousand dollars abbott do you know what his budget was pamela excuse me abbott we were throwing money at him throwing it at him and asking him to keep it dark pamela may i finish abbott conklin mightve been a nut but he wasnt a mole you have me his calendar for a couple of days ill prove he killed lincoln appealing to marshall this is supposed to be definitive pamela whats definitive is that i just lost two people in berlin abbott so whats your theory mocking her conklins reaching out from the grave to protect his good name incredulous the man is dead marshall hes heard enough no ones disputing that ward abbott for crissake marty you knew conklin does this scan i mean at all marshall signals for quiet marshall okay cut to the chase pam what are you selling pamela i think that bourne and conklin were in business that bourne is still involved more pamela contd and that whatever information i was going to buy in berlin it was big enough to make bourne come out from wherever hes been hiding to kill again to abbott hows that scan as the mandarins all start talking at once zorn enters stands at the head of the table tries to get their attention zorn hey they look up look youre not gonna believe this but jason bournes passport just came on the grid in naples abbott blinks what ',     ' nevins american a junior cia field officer walking from the parking lot talking on his cellphone nevins what can i do i cant ill call you when i know what im into a hassled pause i dont know some guys name came up on the computer starting toward the building so start without me if i can get there i will later nevins hangs up and pockets the phone he hustles towards the building ',     ' the room is jumping agents tracking working the phones and computers pamela giving orders abbott watches cronin looks up from computer screen looks like hes been detained pamela whos going us cronin theres only a consulate they sent a field officer out half an hour ago pamela cuts him off then get a number they need to know who theyre dealing with cronin already on it ',     ' as nevins flashes his credentials to carabinieri at door who gives an unimpressed shrug and lets him in nevins takes his overcoat off tosses it on the empty chair we see a big ass for just a second under his suit jacket nevins alright mr bourne is that your name bourne nods names nevins im with the us consulate could i see your passport bourne silent hands over his passport nevins contd so mr bourne nevins studies bournes passport nevins contd what are you doing in tangiers silence nevins contd faux friendly are you travelling alone bourne stares straight ahead nevins comes around the table and sits in front of bourne nevins contd in his face look i dont know what youve done but youre gonna need to play ball here nevins cell starts to ring he shrugs an apology turns away and answers nevins contd contd nevins pamelaphone this is pamela landy a ci supervisor calling from langley virginia are you with a jason bourne now nevins listens looks at bourne yes ',     ' a pamela on the phone pamela then use extreme caution he can be very unpredictable and violent use whatever means necessary to ',     ' whatever nevins is being told its concerning bourne watching him knows exactly what this is close on nevins as he steps away listening intently his hand just starting to move toward his shoulder holster nevins contd okay ill call you right back nevins flips shut his phone he reaches for his gun even as he turns and bourne is right there in his face whump momentum and gravity reaching mutual agreement as nevins hits the deck carabinieri barely clears his holster before chop chop bourne has him down in a heap bourne is back silent and effective finding nevins cellphone bourne reaches into his bag he holds the phone next to a larger diagnostic mobile unit the confirm light blinks nevins phone has been cloned bourne puts the phone back in nevins coat takes his gun and carabinieris gun and radio and puts them in his duffle were starting to realize theres a plan at work here finally bourne exits the door wedging a desk under the handle so it cannot be opened from the inside and calmly walks away like nothing ever happened ',     ' and now we see the old bourne in his long black coat purposely striding out of the building he pauses long enough for the security camera to get a good look at him the ronin returns ',     ' bourne crosses the street and approaches a man putting his suitcase in the trunk of a green peugeot bourne reaches into his bag pulls out some cash ',     ' nevins stirring the carabinieri still out a phone starts to ring nevins phone finally sitting up he answers nevins hello ',     ' pamela at the other end of the line pamelaphone mr nevins nevinsphone whos this pamelaphone pamela landy again where do we stand ',     ' a nevins barely knows where he is ',     ' bourne sits in the dark car headphones a nest of cool gadgetry on the passenger seat listening in recording he writes pamela landy circles it nevinsphone i think i think he got away pamela looks at the faces waiting around the table shakes her head no pamela have you locked down the area nevinsphone ah were in italy they dont exactly lock down real quick intercut bourne nevins pamela pamelaphone how long have you worked for the agency nevinsphone me four years pamelaphone if you ever want to make it to five youre gonna listen to me real close jason bourne is armed and extremely dangerous a week ago he assassinated two men in berlin one of whom was a highlyexperienced field officer continuing as were totally on bourne at this point sitting there in the dark car struggling to make sense of this what the fuck is she talking about berlin he writes it circles it pamelaphone contd i want that area secured i want any evidence secured and i want it done now is that clear nevinsphone yes sir maam pamelaphone im getting on a plane to berlin in minutes which means you are going to call me back in and when i ask you where we stand i had better be impressed my mobile number is bourne already turning the key in the ignition the peugeot roaring to life as he writes the number dropping the car into gear bourne pulls briskly away from the curb ',     ' a pamela finishes hangs up abbott berlin pamela ive already got a team there i doubt bournes in naples to settle down and raise a family abbott you dont know what youre getting into here pamela and you do from the moment he left treadstone he has killed and eluded every person that you sent to find him before it can come to blows marshall riot act enough i want both of you on that plane more marshall contd and we are all of us going to do what we were either too lazy or inept to do the last time around youre going to find this sonofabitch and take him down before he destroys any more of this agency beat is that definitive enough for you abbott nods sharing a look with pamela as we ',     ' aa pamela and cronin come screaming around a corner and down a long corridor abbott and zorn trying to keep up cronin kurts reopening all the wyfi and sat links pamela uplink all relevant files to kim a look back at zorn and i want them to contact anyone who had anything to do with treadstone zorn looks to abbott as they disappear around a corner ',     ' b the peugeot speeding north north towards germany and ',     ' bourne driving listening to playback of pamelas conversation with nevins pamelatape jason bourne is armed and extremely dangerous bournes face eyes tight looking weird pamelatape contd contd a week ago he assassinated two men in berlin one a highly a suddenly a flashback a shard pieces lightning flash of images getting in the back seat of the car rolling brandenburg berlin a mirror the television tower the driver looks back we see him well know him later as jarda then a steel case on the backseat inside a syringe a dark vial pistol as we lay hands on them b back to b bourne out of it jolted almost losing control of the car for a second jerking back into his lane recognition toughing it out steady as she goes catching his rhythm again accelerating and ',     ' a bakery on the corner nicky emerging nicky from the old days suddenly she stops abbott stands there beside a parked car the passenger door open message clear get the fuck in ',     ' inside a hanger inside an office abbott watching as cronin questions nicky pamela sits on a window sill cronin so your cover at the time was what nicky that i was an american student in paris cronin what exactly did your job with treadstone in paris consist of nicky looks to abbott he nods that its okay to answer pamela bristles at the checkoff nicky i had two responsibilities one was to coordinate logistical operations the other was to monitor the health of the agents to make sure they were up to date with their medications cronin health meaning what nicky their mental health because of what theyd been through they were prone to a variety of problems pamela losing patience what kind of problems nicky depression anger compulsive behaviors they had physical symptoms headaches sensitivity to light pamela amnesia nicky before this before bourne no nicky gets agitated abbott steps in fatherly good cop abbott were you familiar with the training program nicky the details no i mean i was told it was voluntary i dont know if thats true or not but thats what i was told a bit defensive look they took vulnerable subjects okay you mix that with the right pharmacology and some serious behavior modification and i dont know i mean i guess anythings possible zorn arrives from outside zorn the jets ready points to nicky theres a car for you everybody moving nicky relieved shes off the hook she thinks she becomes aware of pamela considering her nicky good luck pamela you were his local contact you were with him the night conklin died youre coming with us ',     ' streaks across the sky ',     ' quiet in the cabin abbott gets up to use the bathroom pamela sits across from nicky who stares out the window as the bathroom door clicks shut pamela seizes the privacy pamela im curious about bourne your interpretation of his condition you have specific training in the identification and diagnosis of psychological conditions nicky am i a doctor no but pamela are you an expert in amnesia nicky look what do you want me to say i was there i believed him pamela believed what nicky i believed jason bourne had suffered a severe traumatic breakdown pamela so he fooled you nicky frustration building if you say so pamela leans in still low not good enough youre the person who floated this amnesia story shifts gears ever feel sorry for him for what hed been through nicky youre making it out like were friends here or something i met him alone twice pamela you felt nothing no spark two young people in paris dangerous missions life and death nicky incredulous you mean did i want a date pamela did you nicky these were killers conklin had them all jacked up they were dobermans pamela some women like dobermans nicky what do you want from me i was reassigned im out pamela see thats a problem for me nicky whatever hes doing we need to end it this isnt the kind of mess you walk away from pamela leans away nicky looks back out the window ',     ' three in the morning as the gulf stream lurches to a stop two black sedans here for the pickup teddy the greeting party as pamela cronin abbott zorn and nicky disembark ',     ' a the sedans making their way stopping at a nondescript office building ',     ' b elevator opens into their th floor world emergency activity kim ready to debrief kurt work the computers energy up pamela abbott and cronin bring nicky into the room kim so far bournes had no contact with anyone on the list langley pulled an image out of naples its uploading right now kurt coming in now everything stops as the photo blurry oblique begins materializing on halfadozen monitors around the room suddenly theyre surrounded by bourne pamela to nicky is it him looking closer she nods cronin hes not hiding thats for sure zorn why naples why now pamela has gone quiet just staring at the picture as kurt could be random cronin maybe hes running abbott looks skeptical abbott on his own passport kim the image whats he actually doing cronin whats he doing hes making his first mistake and then from behind them nicky its not a mistake everyone looks over they dont make mistakes and they dont do random theres always an objective always a target beat if hes in naples on his own passport theres a reason pamela turns to abbott a silent moment between them theyre in it now and they know it ',     ' c the peugeot streaking through the alps passing a sign for the german border moonlit glacial peaks whipping past as club music starts pulsing louder and louder and ',     ' d bourne driving hard pushing the car through the night mission bourne as the music keeps just building and building taking us into ',     ' packed and loud skin and smoke a doorman on the move taking us with him through the crowd faces voices all the moscow party people and at the back a vip booth kirill simply shitfaced but in a really creepy numb kind of way three women absolutely gorgeous are sitting around him chatting away as if he werent even there the girls looking up to see the doorman standing there can he walk kirill stirs his stupor a futile attempt to escape eyes still those of an exceptionally hard man a minute later kirill can walk the most graceful drunk youve ever seen making his way through the club tuning out everything but the need to get to the door and ',     ' yes day its nine am kirill suddenly in the sunlight people going to work kids off to school and gretkov sitting in his mercedes not happy follow car and security and assistant equally unhappy gretkov you told me jason bourne was dead kirill blinking against the sunlight trying to process ',     ' discreet and chilly a car pulls up a man gets out munich we dont see his face as he heads in ',     ' the man enters his alarm system beep beep starts once he comes through the door theres a keypad on the wall he enters his code and the beeping stops just like everyday its a sad house he hangs his coat on the rack moving now into the kitchen he drops his briefcase on the table opens the fridge for a drink except what he comes out with is a gun wheeling around the salaryman is jarda jarda from bournes dream but as he turns bourne behind him bigger gun waiting so ready bourne i emptied it jarda a total pro felt a little light bourne drop it jarda lets the gun fall looks his old comrade over a beat but bournes not interested in a reunion bourne contd contd here bourne tosses him flexcuffs jarda puts his hands behind his back turns to let bourne cinch them bourne contd contd front use your teeth jarda caught scamming sorry old habits bourne kicks over a chair sit jarda contd word in the ether was youd lost your memory bourne checking jardas briefcase tearing through it bourne you still shouldve moved jarda i like it here a beat more jarda contd last time i saw you was greece you had a good spot bourne reacts doesnt look over but realizes jarda contd i had the girl i had her lined up that whole afternoon waiting for you that was the problem defensive you ever do two targets its tough bourne turns cold jarda contd his real question so why didnt you kill me then bourne she wouldnt let me beat shes the only reason youre alive silence jarda down a peg or two jarda what do you want bourne conklin jarda hes dead bourne the gun right to jardas face bourne try again jarda shot dead in paris dead the night you walked out bournephone then who runs treadstone jarda nobody they shut it down were the last two its over not finishing because hes falling landing hard bourne just kicked the chair out from under him bourne youre lying if its over why are they after me jarda i dont know bourne who sent you to greece jarda a voice a voice from the states someone new bourne pamela landy jarda i dont know who that is bourne whats going on in berlin jarda i dont know why would i lie silence bourne pulls back unsure jarda makes it to his feet jarda contd what the hell did you do you must have really screwed up bourne doesnt know he backs off jarda contd she really did that told you not to kill me beat i had a woman once but after a while what do you talk about i mean for us the work you cant tell them who you are bourne i did jarda hesitates its really like bourne just told him how much he loved her jarda i thought you were here to kill me something in the way he said it plus jarda just glanced at his watch bourne what did you do jarda shrugs almost embarrassed bourne looks across to the alarm pad jarda hit on the way in voltage like a switch bourne contd contd you called it in jarda im sorry bourne how long how long do i have stopping because the phone just started ringing loud insistent bourne contd contd how long ',     ' jamming right the fuck into it three guys jarheads dod special force dudes speeding through munich jar is the driver jar is prepping weapons like a maniac in the backseat and jar on the phone its a red flag file so fix it call them back asap jar the call what whatd they do jar bad news she called munich local jar slamming home another clip its probably just a drill anyway ',     ' phone ringing jarda in cuffs bourne scanning out the windows everything fast bourne car keys jarda my coat but we should bourne what jarda take the back get another car bourne hesitates just a moment wrong slam out of nowhere jarda swings twohands still cuffed like a mace catching bourne hard and bourne stunned jarda smashing the coffee table slices the flexcuffs through on a shard of glass free jarda follows up knee up in the ribs the gun knocked free from bournes hand skittering across the floor bourne as jarda starts to move backhanding him and ',     ' two munich patrol cars rolling and ',     ' seen from inside glimpsed through the glass outside its war a flatout closequarter death match jarda older and cuffed but strong and determined bourne still hammered from that opening suckerpunch the two of them braced there grappling falling jarda the cuffs hes got bourne in a chokehold but bourne driving his head back into jardas face and ',     ' jamming along through munich ',     ' jarda bourne the gun on the floor struggling for it jarda there first bourne on him pinned there four hands one gun and blamm wild shot into the refrigerator still wrestling breaking jardas nose until the gun knocked away again finally their hands locked into each others throats this is as real and up close as it gets until bourne finally holds dead weight eyes fixed staring bourne jumping back blood all over his shirt bournes first kill in a long time a messy one revulsion ',     ' jarheads getting close but up ahead another munich patrol car in motion the jarheads react dont need or want the company ',     ' bourne all business now pulling the stove away from the wall there the gas line hose bourne ripping it free gas running wide open into the room next a fork grabbing it jamming it down into the mechanism on a toaster wedging it there and now hes grabbing papers jardas stuff on the table jamming a roll of sales projections into the toaster beside the fork bourne coughing from the gas turning the toaster on checking his watch taking one last look at jarda dead on the floor and ',     ' theyre just turning into the street ',     ' the dod car three dods approaching the house when booooomm jardas kitchen blown out gone ',     ' bourne same moment flying out the rear as planned urban backyard exfil hes flying and gone ',     ' fire smoke its all burning now munich cops blown back theyll have a story to tell tonight ',     ' drives away past arriving police ',     ' the bullpen is cranking phones to munich lines to langley abbott watching from the sidelines kurt and kim at their work stations pamela on mobile turns to abbott pamela so he beats a man within an inch of his life strangles him then blows the place up at nicky for someone with amnesia he certainly hasnt forgotten how to kill has he across the room cronin and teddy suddenly excited about what theyre seeing on their screen cronin hey theyve got him boxed in new data coming up on the monitor everyone rushing to look excited except zorn forget it they lost him teddy whatre you talking about theyve got a three block perimeter zorn you cant see him hes not in front of you forget it hes gone cronin fuck you buzzkill its not gonna be like last time zorn you better start listening to someone cause weve been there abbott okay enough stepping in take a walk danny get some air zorn nods happy to nicky piping in i dont think we need to keep looking for him anyway pamela and why is that nicky because hes doing just what he said hed do hes coming for us and for the first time theyre all thinking the same thing ',     ' it is pouring rain seen from that hellish car a huge distinctive needlelike tower dominates the skyline lights flashing through the dark and wet ',     ' bournes eyes opening heart pounding springing up alone damn his side hurts recoiling from that where is he hes in the car looking around and his windshield pov an autobahn reststop gas station sleeping trucks back to bourne catching his breath shifting away from the pain in his rib checking his watch but what the hell is that on his sleeve fuck its blood jardas blood ',     ' bourne out of the car fast careless wrong not even checking whos watching pulling off the shirt tearing it off throwing it down and standing there in the weird light a big bruise ripening on his side looking around its okay nobodys watching but shit man get it together ',     ' a streaking along bourne back to his mission ',     ' b roaring by a sign berlin km ',     ' kirill striding through the terminal moving quickly toward a departure gate and gretkov above watching him go ',     ' bourne drives up ',     ' quiet and forlorn this early just like bourne whos taking a locker stashing a backpack prepping the evac always ready he heads outside we hear hotel operator vo front desk german berlin hilton how can i help you bournephone vo im trying to reach a guest pamela landy please hotel operator vo im sorry but im not showing that we have a guest by that name continuing as ',     ' a bourne tucked in with a berlin guide book a felt tip pen and a fiftyeuro phonecard working it bournephone pamela landy please hotel operator sorry i dont see it here crossing out another hotel off the list four down forty to go as we start time cutting and hotel voices vo overlapping no one here by that name no sir theres no landy here how are you spelling that sir sorry but no i have no landy registered sir continuing until ',     ' b clean and plain a bed nobodys slept in the phone begins ringing pamela fresh from the shower rushing out from the bathroom to answer it pamelaphone hello dial tone pamela hangs up that was strange ',     ' c a taxi driving through the empty early streets and ',     ' d bourne in the backseat staring out the window and his pov the fernsehturm looming as they pass the berlin tv tower that needle in the sky from the flashback and then e suddenly e flashback its raining were still moving still in a car still near alexanderplatz but suddenly its pouring outside turning back we realize were not in the cab anymore theres a driver up front and beside him conklin yes conklin hes in the passenger seat turning back to us handing us something a photograph a face some guy conklin neski vladimir neski the photo hes at the hotel brecker get the papers beat say it bourne treadstone bourne alone in the back staring at the photo bourne neski hotel brecker papers conklin this is not a drill soldier were clear on that this is a live project and you are go training is over bourne yes sir conklin good then gimme the damn picture back taking it see you on the other side to the driver pull over hes getting out f back to f bourne sitting in the back seat of the cab frozen there rocked whats happening to him no chance to work it out because the taxis stopped and taxi driver waiting irritated the hotel brecker or the grand make up your mind bourne what taxi driver this is the westin grand you just said brecker bourne fishing for money yeah sorry this is good ',     ' g concentric rings looking down on each other bourne slipping in unnoticed taking a quick look up before moving along ',     ' h bourne stepping up to the guy behind the desk the gym mostly empty bourne hi i think i left my backpack here yesterday black nike the guy disappears in back to check bourne leans across the counter scrolling the computer the guest list his finger stabbing down on screen landy pamela bourne clears the screen walks away ',     ' j because of the setup bourne pretending to talk on a house phone has a view of room across the way the door opens pamela exits carrying an overnight bag bourne watches ',     ' k elevator doors opening pamela coming out into the lobby heading toward the exit and ',     ' l a black suburban at the curb cronin standing there waiting as she emerges pamela anything teddy no munichs a bust hes loose pamela are we locked up cronin i told everyone they had an hour eat sleep shave whatever they want but once were back were back for good as they pile in and bourne walking right past them hes got the whole thing scoped heading quickly across the street and ',     ' m bourne jumps into the first cab in the rank and ',     ' n the driver starting up the car as bourne that black suv fifty euros if you keep me close the driver smiles and ',     ' i pt kirill walks down the same hallway gretkov came to meet him last time a guy carrying a briefcase toward him stopping for a moment to light a smoke letting kirill take charge of the briefcase smooth like it never happened ',     ' the suv rolling up the cab continuing past and stopping at the corner ',     ' a bourne looking back out the rear window his pov as they pile out of the van start inside acknowledged by a security detail pretending to loiter outside as we hear pamela vo munich to berlin check everything flights trains police reports thatll be box teddy thats yours continuing as ',     ' i pt kirill opening the briefcase two automatic pistols silencers ammo care package ',     ' a bulkhead opening bourne stepping out among the satellite dishes unpacks a bag telescope water food and we hear pamela vo box call it prior german connections nicky i want to rerun all bournes treadstone material every footstep kim box lets call it munich outbound continuing as ',     ' weve been hearing it now were seeing it pamela at the chalkboard abbott backing her up everyone else spread around theyre regrouping urgently behind them cots are being set up food water stacked up pamela lets stay on the local cops we need a vehicle parking ticket something langleys offered to upload any satellite imaging we need so lets find a target to look for to zorn danny box i need fresh eyes review the buy where we lost the three million timeline it with what we know about bournes movements turn it upside down and see how it looks continuing as ',     ' a decent view into the berlin hq two windows one offers a look at an empty kitchenette the other a nice shot of the bullpen area it looks like they are in for the long haul theres teddy pacing pasta glimpse of zorn conferring with abbottnow kim talking on the phone ',     ' bourne eyes locked on the target scanning waiting and then something changes suddenly theres something down there thats clearly a great deal more electric than what hes seen so far a telescopic pov a nicky shes just come into the kitchenette pouring herself a cup of coffee nicky who he knows and bourne lowering the telescope yes now hes getting somewhere thinking it through as ',     ' nicky is joined by pamela who goes for the coffee pamela is it fresh nicky its got caffeine in it thats all i know before pamela can pour her cell phone rings she answers pamela pamela landy bournephone i was at the westin this morning i could have killed you pamela who is this intercut with rooftop bourne its me pamela holy christ bourne nicky reacts to the name runs to the other room to try and start a trace pamela contd contd what do you want bourne i want to come in he wants to come in its like a bomb going off nicky back in with conklin pamela waving for a pencil pamela okay how do you want to do it bourne i want someone i know to take me in pamela who bourne there was a girl in paris part of the program she used to handle the medication and now we stay with pamela her eyes flicker over to nicky pamela what if we cant find her bournephone its easy shes standing right in front of you busted pamela okay jason your move bourne alexanderplatz minutes under the world clock alone give her your phone click the line goes dead pamela steps away from the window realizing hes on one of the roofs out there ',     ' a as the bulkhead door swings in the wind bourne is gone ',     ' b everyone gathered a big detailed map of alexanderplatz spread on the table zorn heres the clock shit hes put her in the middle of everything cronin its a nightmare well never get her covered abbott call a mayday into berlin station we need snipers dod whatever they got pamela snipers hold on he said he wants to come in abbott my ass he does youre playing with fire pamela marshall said nail him to the wall i dont know how you interpreted that but i dont think he meant repatriate him pamela dont you want answers abbott there are no answers theres either jason bourne alive or jason bourne dead and i for one would prefer the latter and what about her points to nicky you just send her out to this lunatic with no protection pamela looks to nicky pamela what do you think is he coming in nicky i dont know he was sick he wanted out i believed him pamela alright pamela gestures to abbott cronin teddy pamela contd make the call get a wire on her if it starts to go wrong take him out ',     ' a the rear of the official berlin cia hq and here they come ten delta dudes in civvies sprinting to a couple vehicles with drivers ready and engines running and bc ',     ' d nicky her hands overhead as zorn tapes a transmitter and battery between her shoulder blades teddy and cronin plot the area with two men plainclothed delta team kim and kurt on their own lines kim this just in they got the number bournes calls came from nevins phone the field agent in genoa teddy nevins is bourne abbott losing it are you an idiot bourne mustve cloned his phone an embarrassed silence abbott mad at himself for losing his temper looking up to find pamelas eyes on his abbott contd contd i hope you know what youre doing ef ',     ' g in all its vastness alone theres the world clock nicky waiting on the periphery two plainclothed deltas nearby in quick succession nicky binocular pov sniper scope pov on a video monitor ',     ' h everyone waiting holding their breath watching nicky standing as ',     ' j nickys pamelas phone rings she answers as a yellow tram approaches bourne see that tram coming around the corner nicky yes bourne get on it she turns and walks as the tram arrives the delta dudes start moving ',     ' k the yellow tram arrives nicky enters one of the delta dudes just barely joining her the tram begins moving nicky looks around nervously nothing happens the tram moves about yards across the platz stops at the next stop people get on and off nicky and delta dude relax a bit doors begin to close and just like that bourne swoops in beside nicky flashes a gun bourne walk bourne takes her arm and they just get off as the doors close leaving the delta dude behind they disappear down into the pedestrian subway lm ',     ' n a madhouse a video feed on a monitor pamela wheres nicky as they realize shes gone abbott goddamn it i told you cronin listen listen he cranks the speaker bournes voice what did i say what did i tell you in paris o ',     ' p bourne what were my words but she cant speak leave me alone leave me out of it but you couldnt do that could you nicky i didjason i swear i didi told them i told them i believed you bourne who is pamela landy nicky you hear me i believed you bourne is she running treadstone ',     ' q pamela all ears nickys voice shes ci counterintelligence shes a deputy director bournes voice what the hell is she doing ',     ' r nicky whats she doing nicky looks at him like hes crazy bourne why is she trying to kill me nicky they know defiant reckless they know you were here they know you killed these two guys they know you and conklin had something on the side they dont know what it is but they know as bourne tries to process ',     ' s radio chatter going wild panic delta vo into radio where are they anyone ',     ' t still walking bourne knowing he must be driving them nuts bourne how do they know that how can they know any of that nicky what is this a game bourne i want to hear it from you she looks at him is he crazy what bourne contd contd say it nicky last week an agency field officer went to make a buy from a russian national bourne a russian nicky it was pamela landys op the guy was going to sellout a mole or something i havent been debriefed on exactly what it was bourne last week when is she supposed to answer nicky shrugs on quicksand nicky and you got to him before we could bourne i killed him nicky you left a print there was kel that didnt go off there was a partial print they tracked it back to treadstone they know its you bourne i left a fingerprint you fucking people suddenly bournes jerking her down to a lower level ',     ' u big static on the speakers delta co cooly checks the map delta co she must be in one of the pedestrian tunnels ',     ' v as delta dudes fan out head for the subway entrances ',     ' w an intersection of three tunnels bourne leads nicky far left she looks really scared ',     ' gretkov has landed just coming off the flight a ',     ' bourne what was landy buying what kind of files when she doesnt answer instantly what was she buying nicky conklin stuff on conklin trying not to lose it suddenly he rips the microphone out from under her shirt he knew of course dropping it as he yanks her along ',     ' as the transmission goes dead christ aboott drills a look at pamela your fault pamela ignoring abbott that phone has a locator on it kurt and kim work their stuff ',     ' gloomy deserted a mausoleum here come nicky and bourne she knows shes on her own now bourne dead serious looks at his watch bourne why are you here then nicky please im only here because of paris because they cant figure out what youre doing im here because of abbott bourne abbott nicky he closed down treadstone he took care of me after paris bourne so when was i here nicky what do you mean bourne for treadstone in berlin you know my file i did a job here when nicky no you never worked berlin bourne my first job nicky your first assignment was geneva bourne thats a lie nicky emphatic you never worked berlin bourne raising the gun eyes gone dead oh shit nicky contd nojasonplease bourne i was here nicky its not in the filei sweari know your fileyour first job was genevai swear to god you never worked here hes so ready to kill her nicky starting to cry hands over her face covering up bracing for the bullet she knows is coming bourne about to pull the trigger suddenly a flashback a moment a shard a womans face a backing away begging begging us begging the camera pleading for her life in russian this awful blur of desperation and panic fear too fast too panicked b jam back to b bourne swamped thrown hesitating close on nicky sobbing now when finally looking out and bourne is gone ',     ' c an hour later whole new vibe siege mode curtains drawn three delta dudes parked around the room kurt and kim working the phones and screens the mood is dark pamela abbott cronin all in here the safe zone away from the windows cronin on a cell phone got it yeah hang on to the room okay theyve got three guys out front and another two taking the back stairs no word on nicky kurt looks up from screen even if shes still got your phone it might take awhile signals hard to trace down there pamela turns looking at the photo of bourne in naples introspective pamela so whats he doing you believe him abbott its hard to swallow beat the confusion the amnesia but he keeps on killing its more calculated than sick real soft sell what about nicky shes the last one to see bourne in paris shes the one he asks for they disappear pamela well whatever hes doing ive had enough this is now a search and destroy mission turns to the room i want the berlin police fully briefed and handing the photo to cronin get this out to all the agencies abbott agrees ',     ' a bmw parked in the shadows ',     ' kirill wearing headphones listening to a berlin police frequency theres an interpol wanted picture of jason bourne there on the seat hes in play ',     ' d quiet intense activity military radios chirping here and there zorn moving through the bullpen carrying a cup of coffee heading back toward pamelas office where abbott is leaning in the doorway past him inside we can see pamela in the midst of a tough phone conversation cronin and the delta boss sitting there with her zorn the coffee sir abbott thanks abbott nods takes a sip looking beat zorn contd i have that number you wanted abbott hesitates but only a moment he never asked for a number but hes playing along looking satisfied as zorn hands him a slip of paper abbott glancing at it she say what time i should call zorn the sooner the better abbott nods pockets the paper turning back as if it were nothing and ',     ' e massive modern busy bourne in the back in a corner doing a search hotel brecker scrolling and then stopping freezing because on the monitor a berlin newspaper archive there it is written large in loud tabloid german oil reformer murdered theres a photograph of the berlin police carrying two body bags out of the hotel brecker theres a caption identifying the dead as vladimir and sonya neski theres even a long article accompanying all this but its in german and we dont need to read it anyway because bourne is reading it and were reading in his face that he is rocked that he has found another bottom to the abyss ',     ' f remember the building where vic was killed were back zorn and abbott making their way in zorn steering them away toward a stairwell at the back ',     ' zorn and abbott have snuck in here work light signs of repair on the wall zorn nervous i did my box work but i wanted to show you before i showed landy i came out here last night because none of this was making any sense i mean im with you on this conklin was a nut but a traitor i just cant get there abbott what do you have danny zorn the electrical riser you put a fourgam kel on here and its gonna take out power to the building you know that what you cant know is if its gonna blow the room with it abbott and zorn there were two charges they were supposed to go off simultaneously the second one the one that didnt go off was down here pointing it out first of all this is nothing its a sub line for the breaker above second why put the charge all the way down here if youre good enough to get in here and handle the gear youre good enough to know you dont need this beat bourne would know abbott it was staged zorn is it a slam dunk no but abbott jesus zorn spitballing okay what if someone decided to cover their tracks by blaming conklin and bourne what if bourne didnt have anything to do with this abbott keep going zorn somethings been going on here in europe and its still going on post conklin whos been in berlin abbott lots of people zorn including landy jumping off the cliff she had access to the archives zorn hesitates but its out its in the room abbott who else knows about this zorn nobody you hes scared i had to tell you right abbott show me again zorn okay turning away when abbott out of nowhere his hand jamming up into zorns ribcage more than his hand because zorns eyes barely have a moment to register shock before they bulge clenching the younger mans body pulling him close as he turns the knife and zorn is dead abbott without hesitation shifting away from the blood letting the body fall abbott standing there listening checking himself for blood hes clean looking for a place to stash the body as ',     ' a bourne across the street staring at the hotel haunted as a police siren edges closer through the empty streets aa flashback aa we are a pov a stakeout watching the hotel across the way the pov checks its watch checks the perimeter the street deserted foreboding the hotel our destiny waiting up there somehow and suddenly a light comes on a terrible signal and as the car suddenly lurches forward and around the corner ab back to ab bourne muscling up his backpack heading toward the hotel ',     ' b and hotel fusty but comfortable and busy guests and staff doing their thing a clerk behind the reception desk clerk guten abend bourne playing it american guten abend clerk switching to english can i help you suddenly ba flashback the lobby but seven years ago ba across the room a man buttoning a raincoat as he passes neski bb jamming back to bb bourne stalled coming back as clerk contd contd sir smiling do you have a reservation bourne no sorry i just got in rallying back i is room available off the clerks look i stayed there before my wife and i the clerk nods checking the register the concierge just down the desk glancing over at bourne nodding hello and clerk im sorry that room is occupied would room be okay its just across the hall bourne sure thats fine danka cd shot ',     ' a bourne riding up alone dread mounting and ',     ' the concierge coming out of the office with a sheet of fax paper placing it quietly down beside the clerk and the fax bournes face the same wanted picture and ',     ' bourne off the elevator he makes his way down his pov the sixth floor hallway suddenly scary ',     ' a kirill sitting up as the police radio starts broadcoasting an allpoints bulletin the words hotel brecker in there kirill dropping the car into gear and ',     ' b bourne walking theres his room but across the hall and down one room bourne steps up listening a moment then he knocks nothing he pulls a knife from his pocket checks the hallway hes clear wedges the blade in there and onetwo pop ',     ' bourne enters a suite closing the door behind him and treadstone bourne seven years ago does the same bourne shakes off the flash looks around the lights are on an open suitcase on the bed ',     ' the clerk the concierge and the manager are huddled in conversation with three berlin cops whove just arrived and trying to be discreet but this is clearly serious ',     ' bourne just standing there breathing it in treadstone bourne doing the same ',     ' bourne with his hand on the wall as if he can feel it like its all still here heart pounding and ',     ' chaos bournes been found everybody rushing out cronin to teddy go take the van pamela the hotel how far teddy five six minutes cronin kurt youre here keep the comm line open ',     ' bourne standing there looking out the window the images the television tower over the city everything but the rain ',     ' the berlin police swat team truck arrives discreetly by the back loading area ',     ' bourne flat against the wall just as he was leaning forward to see in the mirror just so and there ',     ' a a man in the mirror pacing into view neski on the phone a talking in russian its raining bourne standing there treadstone bourne still wet from the rain one eye on that mirror and the other on a syringe that he prepped a predator the mirror the doorbell rings neski gets off the phone bourne tensing new element factoring and the mirror as neski opens the door a new flood of russian happy its mrs neski a surprise but hes very happy to see her bourne pocketing the syringe new weapon pistol quiet methodical watching the lovers bill and coo and the mirror mr neski kisses her takes her bag shes hanging up her coat and moving now toward the bathroom and bourne checking the window the weapon his balance and the mirror mrs neskis face right there seeing him so freaked she cant even register it yet bourne with the pistol in her face finger to his lips shhh but she knows backing away begging for her life in russian this awful blur of desperation and fear mr neski turning back to see his wife backing out of the bathroom and bourne with the pistol with no hesitation snap one shot into neskis heart hes down mrs neski whats just happened bourne has her wrist in his hand raising it to her head to where he holds the pistol her fingers his trigger snap letting the gun fall with her as she drops and bourne starts to move starts to prep his evac but theres something on the dresser a photograph the neski family father mother and a twelveyearold girl arms around each other happy and bourne staring at the picture undone for a moment hard out flashback to ',     ' bourne our bourne standing where they fell frozen there paralyzed by the shame of original sin pt ',     ' a swat captain conferring discreetly with the manager manager hes in swat captain call all the guests on the th floor tell them to remain in their rooms tell them its a police order then start on the th and th floors ',     ' a bourne trying to stabilize to breathe ',     ' the swat team on their way up ',     ' a ring ring bourne snaps back as the phone in his room starts to ring four times and it stops bourne freezes footsteps shadows under the door he leans into the peephole bournes pov room german swat team taking position ',     ' b bourne backs away surveys the room his watch his balance and ',     ' c quickly turning into a major event halfadozen police vehicles already parked here more arriving every minute passersby mixing with the cops and people from the hotel whove just come out and kirill jogging over from the bmw hes just parked and ',     ' wham the door kicked off its hinges swat team flooding into bournes empty hotel room and ',     ' a bourne in motion out the bathroom window and ',     ' berlin swat leader gives order to search other rooms and ',     ' bourne up the water pipe to the roof as he arrives a swat team member turns bourne pulls him over the edge fires point blank into the nd swat members vest stunning him hes moving fast scrambling along the roof and into the night ',     ' wham the door caves in and the swat team moves enters rushing to the window nobody no sign of him and ',     ' kirill heading for the hotel entrance blocked by the exiting guests ',     ' too many cops and radios swat team boss trying to take charge listen up were clearing the building room by room ',     ' pamela jumping out of a van the moment it stops seeing it all the crowd the army of cops the searchlights playing across the hotel facade its another disaster ',     ' kirill wants to get upstairs he cant too many guests coming down the stairwell berlin cops trying keep it moving and ',     ' kirill hears bourne is on the roof ',     ' pamela and cronin listening to teddy who just got the police update teddy black coat possibly leather dark slacks dark tshirt pointing now he says theyre gonna try and corral the guests on the street over there and then check them out but pamela disgusted yeah thatll workwhat the hell was he doing here cronin maybe he just needed a place to spend the night pamela i want to look at the room to teddy as she goes check it out pamelas in charge now they enter the elevator ',     ' bourne coming around the other side of the hotel stepping to the left before he spots the swat van bourne aboutfaces heads the other way a sidewalk cop looks over checks the bourne photo print out in his hand ',     ' teddy huddled with the hotel manager and a group of high ranking berlin cops turning back as abbott arriving breathless they missed him teddy so far but they found nicky shes back at the westin bourne let her go abbott he let her go great wheres danny he should head over there and debrief her the hotel whats here what was he doing teddy we dont know theyre in a room upstairs i was told to wait down here abbott accepting that because he has to only we see the fear turns to leave abbott ok if you see danny tell him i went back to the hotel abbott steps out into the street as ',     ' bourne striding away and following sidewalk cop blowing a whistle fumbling for his holster bourne running now slowly at first and ',     ' a now faster as if he can gauge his speed and distance ',     ' motion bourne tearing away and ',     ' a bourne slows to a walk two patrol cars heading his way no choice there a narrow passageway between two moving trolley trains and sprinting through the patrol cars skidding into s ',     ' b the river spree lit by the trolley thats rumbling past and the running lights of a double coal barge up the river bourne runs across the bridge going as fast as he can hearing the police sirens swirling behind him when a third and fourth police car ahead bourne turns hard for a stairwell jumps the walkway curb leaps up the stairs two at a time as all four cop cars skid to a stop as doors open ',     ' a tram waiting as the last few passengers get on the doors seem to stay open in slow motion as bourne appears makes a mad last dash and hes on and the doors dont close its not scheduled to go yet and here come the cops bourne off the tram guns appear bourne runs to his left stops short the other cops are coming this way screaming at him not a lot of options bourne looks over the rail down below a coal barge passing the prow just emerging bourne on the rail and jumping even as the first shot is fired ',     ' bourne lands hard stands voltage going up one leg and theyre shooting at him he can worry about the leg later he runs back toward them the barge moving slow bourne disappears under the bridge ',     ' guns aimed police waiting for a clear shot two of them dash to watch over the other side ',     ' countering the barge going one way bourne the other dodging all the superstructure on deck all the while keeping his cover overhead and leaping to the second barge and more of the same until bourne running out of barge leaping back onto the bridge footing and ',     ' the police watching the barge fully emerge continuing down river shouting in german that hes either in the water or hiding on the barge off they go down the stairs leaving the passengers on the tram blinking out in shock and bourne climbing back over the rail limping back on the tram just before the doors close and off it goes ',     ' police converge from both ends barge goes under as kirill arrives at the center of the bridge missed again behind kirill a train snakes off into the night ',     ' pt pamela and cronin move into the living room a couple of cops in the hallway outside cronin the room he checked into was across the hall why why would he come here pamela glances around something bothering her about this space pamela he mustve had a reason thats how they were trained cronin moves around the bedroom then into the bathroom and cronin he went out the window in here ',     ' pt there on the mirror scrawled in soap on the glass i killed neski cronin pam you need to see this pamela moves in behind him cronin contd whos neski both of them staring pamela thinking alrighttake it down cronin what pamela this stays between you and i sensing confusion we finally have an edge i dont want to lose it ',     ' very late abbott waits on an isolated bridge a lone figure in the shadow of east berlin gretkov arrives by car walks through the darkness abbott barely glancing over abbott you told me bourne was dead gretkov there was a mistake abbott ill say you killed his goddam girlfriend instead now theyre onto neski theyre at the brecker hotel even as we speak gretkov will it track back to us abbott no the files are spotless whatever they find its just going to make conklin look worse gretkov and the landy woman abbott shes done everything i wanted she bit on conklin so fast it was laughable she even found his bogus swiss account gretkov anything else abbott shoves a piece of paper and address into gretkovs hand abbott the paper theres a body in the basement danny zorn hes got to disappear for good clean and fast ill put him in bed with conklin and bourne even the girl nicky give me twentyfour hours ill think it up but get the goddamn body out of there its getting late a taxi now and then abbott contd neski was a roadblock without me theres no company no fortune you owe me uri one last push gretkov one last push one gretkov leaves abbott watches him go ',     ' seconds later gretkov getting in slowly ',     ' kirill slouched in back waiting gretkov to the driver gretkov airport to kirill were done here kirill nods as they pull away abbott turns and walks into the foggy night ',     ' a late abbott walks a lonely figure past someone in the shadows bourne mr abbott he turns to answer when bourne firmly guides him into a side street bourneabbott scene ',     ' as pamela and cronin exit the elevator they are met by teddy teddy heres what ive got reads remember vladimir neski russian politician seven years ago he was due to speak to a group of european oil ministers here at the hotel he never did he was murdered pamela by who teddy his wife in room then she shot herself pamela and cronin share a look pamela to teddy alrighti want you kurt and kim to stay on bourne track everything thats out there teddy goes to get in the van pamela follows with cronin pamela contd confidentially to cronin and i want you to go through and cross reference our buy that went bad the neskis and treadstone as they get in pamela contd they have to be related ',     ' bournes arrived limping as he continues for the station ',     ' bourne retrieving the exfil bag he stashed in the locker changed his clothes ',     ' bag slung limping out bourne has changed clothes a big overcoat knit cap ',     ' a busy midnight departure big train bourne climbing on the train under the sign moscow express moved ',     ' a a blueprint spread across a table nicky kurt kim all gathered around cronin works the treadstone files on another table teddy at center briefing pamela teddy were looking at all berlin outbound good news is every train station in berlin has thirty to forty fixed digital security cameras common feed pamela are we hacking or asking teddy yes in that order pamela and what about you anything cronin its starting to link up the hijacked money the leak pecos oil one last bit is treadstone ',     ' crossing the border into poland cold desolate snow ',     ' conductors moving quietly through the dark cars checking tickets and visas and bourne hands over his ticket and russian passport off the grid ',     ' a am kurt kim and teddy spread around the room theyve been running laptop train station videos for hours just about ready to raise the white flag all they have so far is an isolated loop of bourne limping into the mens room cronin watches it stutter along cronin does it look like hes faking teddy on the way in forget it kurt the legs definitely hurt cronin the blueprint well theres no window in the mens room folks so lets find somebody coming out with a bad left leg kurt worn out maybe hes still in there teddy ive got a limping guy but its the right leg kim walking away or walking toward you cronin jumping on that right there over teddys shoulder cronin thats him its the coat what train is that ',     ' bourne asleep in his chair rocked by the rhythm but something wakes him up looks out the window something weird about the light out there then up to see marie looking at him over the back of his chair in front of him no big deal bourne hey she smiles a beat she comes around sits beside him he looks away out the window bourne contd i wanted to kill him marie but you found another choice bourne i did marie it wouldnt have changed the way you feel bourne it might have bourne looks back at her she smiles he accepts it leans back closes his eyes bourne contd i know its a dream marie you do bourne i only dream about people who are dead marie leans over kisses his forehead whispers bourne contd god i miss you i dont know what to do without you marie softly serenely jason you know exactly what to do that is your mission now bourne opens his eyes and its morning outside and marie is gone a little girl smiles at him from over the back of the chair in front bourne cant meet her gaze for long as he looks back out the window ',     ' bourne watching the birch trees rush past not quite hiding the smokestacks beyond eyes locked forging something within one final mission as we ',     ' abbott coming through its empty this early but heres pamela nicky cronin and the team waiting to report pamela sorry to wake you abbott waves off apology i wasnt sleeping to nicky as he passes you ok nicky yeah thanks abbott whats up pamela bunch of stuff pamela looks to cronin him first cronin we tied the room bourne visited tonight to a murdersuicide seven years ago a russian couple the neskis abbott playing along neski the reformer i remember that cronin he championed the equal distribution of oil leases in the caspian sea when he died they were all released to one petroleum company pecos oil guess what the ceo uri gretkov is ex kgb nicky someone was using treadstone as a private cleaning service abbott conklin a beat its im sorry pamela i guess you were right all along pamela waves him off its okay but pamela theres something else abbott can see by their faces this hits closer to home abbott what pamela they found danny zorns body dead in the basement at the building where my people got hit the first time abbott oh god it must have been bourne pamela did he say anything to you abbott no it must have been bourne pamela straight pamela well know for sure when we get the security tapes cronin but we can relax we tracked him hes on a train to moscow abbott reeling hiding it abbott moscow what the hells he going to moscow for pamela shrugs dont know abbott jesus i zorn i have to call his family tell them pamela im sorry ward they watch as he goes ',     ' abbott in the rising elevator imploding ',     ' palatial but you cant buy taste gretkov working his computer answers his phone gretkov da abbottphone you didnt stay uri gretkov matter of fact this is not a clean phone ',     ' everyone still here cronin answering his cell phone motioning to them hes got news cronin phone to his ear youre sure pamela what the tapes cronin nodding but hold on holding the phone yep and abbott just direct dialed moscow from his room now we realize shes set a trap and abbotts walked in all the same pamela shakes her head wishes it wasnt true and theyre moving ',     ' abbott at his desk still on the phone pouring a vodka gretkov leaving was a business decision were both rich come enjoy it abbott what do you mean gretkov go to the airport get a plane ill have a brass band waiting for you abbott save it for bourne gretkov what theres a knocking at his door abbott simply ignores it abbott he left yesterday on the night train hes probably just getting in now he drinks youll have to hurry gretkov bourne comes here why more knocking abbott good luck ',     ' a speeding east through the russian countryside the forest is gone replaced by factories and refineries a wasteland of rust and gray that seems to go on forever ',     ' pamela knocking again nicky teddy and cronin behind her pamela open it cronin with a pass key teddy prepped and ',     ' a pamela leading they enter stop short abbott at his desk calmly pointing a pistol at pamela abbott they go you stay she looks back cronin shakes his head no pamela yes now they reluctantly obey the door clicking shut behind them abbott sit down pamela id rather stand if its all the same to you abbott i dont exactly know what to say im sorry pamela why would be enough for me abbott im not a traitor ive served my country pamela and pocketed a fair amount of change while doing it abbott why not it was just money pamela and danny zorn what was that abbott had to be done pamela no good options left abbott shrugs in the end honestly its hubris simple hubris you reach a point in this game when the only satisfaction left is to see how clever you are pamela no you lost your way abbott well youre probably right i guess thats all that hubris is he raises the gun pamela presses her lips together closes her eyes boom she opens them and as cronin flies back through the door theres abbott dead at the desk hes shot himself also in a way with some help from bourne ',     ' the train easing to a stop the platform busy with people waiting and passengers disembarking bourne among them unremarkable in the crowd and ',     ' bourne on the move welcome to the whole mad moscow scene a jumble of faces and voices travellers arrivals and departures families beggars drunk war vets hawkers ',     ' there in the plaza bourne hobbling across the street when suddenly a car horn he turns and look out a big black bmw speeding past followed by two more all three cars with blue lights strobing on the dashboards a convoy whipping by like they own the place and taxi driver os gangster bastards dont care what they do bourne turns a grizzled taxi driver right beside him bourne pulls a slip of paper from his pocket bourne his russian is basic you know this address the taxi driver squints finally grunts affirmative he motions to his cab as they get in and pull away ',     ' lots of cars no people but someone running its kirill pulling his keys as he sprints past and ',     ' bourne and the taxi driver looking over as three moscow police cars speed by sirens wailing taxi driver its always something right bourne just nods as we ',     ' kirill at the wheel a guy in a hurry who knows what hes doing one more thing on the passenger seat two big automatic pistols ',     ' moscow cops fanning through the crowd showing bournes interpol picture have you seen him ',     ' moscow cops with the picture flashing it around until young cabby the moment he sees it he was just here they just left ',     ' theyve stopped bourne flashes a fifty dollar bill bourne you wait you understand stay taxi driver happy to pocket the cash sure no problem i sit ',     ' old moscow but not for long theres new construction metastasizing all around it bourne crosses the street and his pov an abandoned wooden house windows shattered and boarded up paint all but gone roof and gables all failing back to bourne crestfallen checking the address this is it ',     ' more cops everything focused on another taxi driver whos making a call on a cell phone everybody waiting on it ',     ' bourne off the sidewalk now peering around the side trying to see if theres anything around back and over there an old woman on the steps next door watching him bourne starts over finding the sweetest smile hes got ',     ' the taxi driver still parked there his pov bourne and the old lady shes pointing like shes giving directions when suddenly the drivers cell phone rings taxi driverphone hello ',     ' bourne and the old lady his russian is limited but shes charmed nonetheless bourne a pento writeone minute searching his pockets ',     ' the taxi driver on the phone not so happy anymore taxi driver im looking at him american hes right here ',     ' the old lady scribbling on a piece of paper bourne reacting as the taxi drops into gear pulls away bourne wait hey but the taxi only speeds up and ',     ' moscow police cars tearing away and ',     ' kirill driving reaching for his ringing phone and ',     ' the black bmw a moment later slamming on the brakes fishtailing a uturn and ',     ' bourne hustling past all the new construction glancing back as police sirens start rising behind him and ',     ' kirill skidding around another corner and ',     ' two police cars just stopped there cops the old lady pointing everyone turning as the red lexus speeds past them and ',     ' bourne coming down as fast as he can just ahead theres a footpath beneath a four lane overpass a neighborhood on the other side he could disappear there ',     ' kirill driving and scanning there as he passes it the overpass slamming on the brakes and ',     ' bourne hobbling out in the open twenty yards to go ',     ' kirill jumping out of the lexus with a pistol in hand and ',     ' bourne no clue bang his shoulder hes hit he throws himself forward and ',     ' kirill shifting for a better second shot and ',     ' bourne hes diving rolling pure instinct back under the embankment and ',     ' kirill with no shot suddenly leaning over the rail just as the two moscow police cars come screaming up moscow cops jumping out with guns drawn and ',     ' bourne hes up hes bleeding hes moving and ',     ' chaos kirill with his hands in the air moscow cops coming toward him everyone screaming moscow cops mockbourne up hands up keep im kgb assholes them up drop the gun were chasing the same guy drop it hes getting away they let kirill go he looks back at the footpath bourne is gone as ',     ' a gretkov strolls along suddenly two black sedans pull up and he is arrested ',     ' a bourne hurriedly makes his way to the other end a few beats later kirill on the hunt ',     ' a labyrinth of stalls food hardware clothes and crowded even this hardtoimpress crowd noticing bourne hobbling through nothing like a limping madman with a fresh gunshot wound to get attention people back off pull their kids out of the way some woman starts screaming and ',     ' a security guard hears the commotion jogs out and ',     ' kirill running toward the market five moscow cops behind him cant keep up and ',     ' the security guard coming up fast behind bourne security guard hey hey you stop bourne turns the security guard right behind him and bourne no warning his good arm smash right into the security guards face and bourne takes his pistol and the crowd they jump holy shit ',     ' crazy kirill sprinting through where did bourne go ',     ' bourne back on the march except now hes shopping grabbing a bundle of tube socks and ',     ' kirill sprinting out toward the stalls and ',     ' bourne there a roll of duct tape and a bottle of vodka and ',     ' kirill fighting his way through the fleeing crowd ',     ' pt bourne leaving the market taking a swig of vodka and continues knows there are two new cops on his ass ',     ' pt another cab stand cabbie by a yellow cab looks up to see bourne coming toward him and also the two cops as bourne nears the cabbie shakes his head bourne pivots casually like he doesnt know theyre coming until he spits vodka into one of the cops face blinded as bourne takes him and his partner out the cabbie raises his hands in surrender steps aside as bourne takes his car ',     ' pt bourne in the yellow cab starting the engine peeling away careening into the street and kirill sprinting into the parking lot just in time to see ',     ' pt bourne concentrating away the pain trying to drive ',     ' two ladies ducked behind a big black gwagon freaked out as kirill grabs their keys and ',     ' the cab speeding across a boulevard into an older neighborhood of rising narrow streets and two moscow police cars pulling uturns on the boulevard whipping around to give chase and the gwagon in full pursuit now and bourne driving up this curving little hill and the two moscow police cars starting to climb and kirill driving and hes on the hill now bourne bad hand on the wheel holding on trying to find something in passenger seat tube socks the two moscow police cars splitting up one on bournes ass the other cutting hard into a side street flanking him and bourne topping the hill two choices right or left right no wrong because down the hill theres a police car just about to angle in from the sidestreet and bourne no choice flooring it the cab its a whale slam knifing the front end of the police car and the police car spun back crashing against a building on the corner and kirill right behind that guy swerving onto the sidewalk sparks from the wall as he scrapes hanging in skidding into a turn down the hill and just missing the first police car bombing right past him bourne in pain as he packs his shoulder wound with the socks ahead the street banks downhill to left and there a boulevard wide ride lots of traffic and the cab rocketing into the flow and behind him police car with the gwagon right on his ass and bourne wrists flicking the wheel the cab screaming through the slower traffic and kirill totally on it pedal down passenger window open wind blowing hes got the pistol in his hand closing the gap and the black gwagon blowing past police car and bourne steering barely as he tears a few strips of duct tape to finish his triage blam blam the gwagon right beside him bourne reacting what the fuck thats not a cop but no time to clock kirill because kirill shit cant keep shooting into the oncoming lanes swinging wide a truck swerving again and the cab wavering again rallying and up ahead the boulevard opens into the river beltway big wide fast kremlin in the bg and four new police cars screaming down from red square and bourne skidding onto the beltway looking for room finding it open road kirill back in the hunt and the river beltway cab screaming past then one two three four police cars now the black gwagon and bourne both hands on the wheel hes already forgotten about his shoulder the beltway up ahead another choice right takes you up to the city left is a transit tunnel and bourne checking his rearview starting right and the two lead police cars right on his ass and bourne fake out veering left last second into the tunnel and the two lead police cars wrong and worse trying to change crash spinning and its not just them a third police car caught in the clutter not to mention the commuters crash the police are out of the race kirill not fooled threading the needle through the carnage and into ',     ' four lanes two way and long theres the cab squibbing past slower cars and kirill on him move for move follow the leader and bourne checks the rearview hes lost them all but the gwagon who the hell is that the heavyweights world championship belt up for grabs kirill gaining nearly pulling level bourne nowhere to go thats never stopped him before he carves a path turns two lanes into three as sparks his way through a lane split the gwagon roaring after him bourne checks the mirror closer who the hell is that guy kirill gaining firing through his passenger window bourne brakes tunnel as the two vehicles scrape along each other kirill firing back odd angle bourne ducking for meager cover as bullets stitch through the roof tunnel the gwagon crushes the cab against the wall sparks showering the windshield finally the cab shoots ahead kirill in a controlled fury the suv jerking hard and right into the rear of the cab bourne trying to keep control spots a maintenance truck up ahead kirill banging away as his quarry straightens maintenance truck looming bourne a hard left tunnel the cab wrapping around the front of the suv wham pushing it to the right the cab continues spinning around the gwagon details front bumpers locking on rear fenders as tunnel the gwagon hurtling forward the cab ass end first locked together kirill firing into the cab really unloading now bourne down on the floor a tornado overhead kirill slaps in a new clip intense bourne gun against his door just below the window knob whumpwhumpwhump suv tire shredding kirill fights the wheel another truck looming large bourne looking between the seats out the rear window a lane dividing pillar ahead cab as bourne sits up jerks the wheel to the right tunnel the cars unlock spin away from each other kirill focused taking deadly aim bourne staring back at him calm i know something you dont know kirill frowns the truck swerves to reveal the pillar to kirills pov kirill eyes go wide whallop steel vs concrete concrete victorious a bone compressing truly horrendous impact bourne whipping the wheel cab spinning to a stop out of harms way door opening ',     ' gun ready bourne heads over ahead spam in a can bourne crouches down looks in kirill bloody beattocrap barely alive but trapped entombed alive by the metal crushed around him bourne watches not here to help kirill looks over calms a moment as the two men consider each other bourne looks at him long and hard kirill dies and bourne stands and just walks away ',     ' a snow swirls pamela disembarks from the g or us military plane she is met by russian officials ',     ' huge awful sovietera housing towers fill the horizon a city bus grinds to a stop people trundle off working people at the end of their day tired cold a girl trudging a manmade wasteland twenty a proud little waif sad eyes home from some job irena ',     ' grimmer up close rusted steel mesh over the windows drunk teenagers a haze of cigarette smoke irena pushing through doesnt want to talk to anyone ',     ' irena climbing a junkie here flickering light there ',     ' irena her key at the door domestic disturbance playing across the hall she opens up and ',     ' its dark and shes barely through the door when irena jumps chokes back a cry bourne is standing there propped there actually behind her gun in hand motioning for her to be quiet bourne his shabby russian quiet silence okay irena nods scared gun in hand bourne pushes the door the last few inches so its fully closed irena i have no money no drugs is that what you want and now she can really see him hes a disaster shivering bloody eyes more hollow than hers are bourne sit can you trying to conjure the russian the chair have the chair irena accented i speak english bourne staring at her nods gestures for her to sit bourne please so she does and here they are bourne contd contd of all the people in the world youre the only one i have anything to offer hesitating thats why i came here irena shes terrified okay hes got something beside him something hes taken off the wall its the photograph the neski family same as the one that was in the hotel brecker mom dad and irena arms around each other in front of the house before it was abandoned happy smiling perfect bourne its nice a beat does this picture mean anything to you no answer hmm irena its nothing its just a picture bourne no its because you dont know how they died irena he couldnt understand no i do a change in bourne as he studies her measures her some moment of truth is here irena braces unsure bourne i would want to know beat i would want to know that my mother didnt kill my father i would want to know that she didnt kill herself irena what she really looks at him now fear overwhelmed by curiosity bourne i would grow up thinking that they didnt love me if they just left me like that irena making sure her eyes dont leave his they dont bourne contd contd it changes things that knowledge doesnt it irena wary yes bourne thats not what happened to your parents irena then what bourne i killed them body blows but he has her attention she wipes a tear bourne contd it was my job my first time your father was supposed to be alone but then your mother she came out of nowhere a little shrug i had to change my plan beat you understand me does she you dont have to live like that anymore thinking that irena you killed them bourne nods thats right bourne they loved you beat and i killed them irena howhow canhow can you be here and say this bourne i dont want you to forgive me she stands suddenly stands because if she doesnt shell burst into tears because she knows if she starts crying she wont be able to make sense of this irena for who he doesnt answer killed for who bourne pushes himself to his feet a real effort bourne it doesnt matter your life is hard enough irena youre a liar bourne you know im not irena youre a liar bourne look at me there they are two people standing in a room squared off and now she starts crying really crying and hes taking it irena i should kill youif its true you should diei should kill you now bourne i cant let you do that either irena because youre afraid bourne no starting for the door because you dont want to know how it feels she hesitates stunned hes leaving hes opening the door bourne contd i have to go now irena is this really happening bourne empty im sorry and she sags back into the chair as the photograph on the table the sound of the door closing and irena crying as ',     ' bourne trudging along across the snow hes done it and he really cant take another step theres a bench he sits down out of gas he just might die here we slowly tilt up to the multi colored moscow tenements fade out ',     ' bourne waking up sitting up where is he trying to get his bearings but its so bright white walls sheets sunshine through clean windows and pamela os hello david there she is standing at the foot of his bed bourne where am i pamela ramstein air base germany smiles before the wall fell you would have woken up in a russian prison hospital he looks around tries to move hammered by pain bourne oh shit pamela careful long moment hes taking it in trying to bourne why am i alive pamela are you disappointed they study each other a beat bourne i know who you are pamela nods very calm here no sudden movements pamela thank you for your gift im sorry about marie bourne whats that pamela do you think you can read are you well enough she has a folder a photograph bournes face stapled to the cover pamela contd its all in here treadstone a summary of your life all of it he waves it off bourne dont need it i remember everything pamela smiles again sounds like a threat bourne you didnt answer my question pamela why youre alive beat youre alive because youre special because she kept you alive she smiles because we want you back on our side bourne silent but hearing it pamela leaves the file pamela contd contd take a look at it well talk later bourne watching her back away as she exits into ',     ' long sterile hallway cronin and nicky standing there with an air force sentry assigned to guard the room cronin and nicky trying to play it cool but now as they get some distance down the hallway pamela to the sentry lets give him half an hour nicky quietly so pamela felt promising its a start a chill in the air both of them going quiet because theres a nurse carrying a tray of food shes coming toward us theyre walking away staying with the nurse now coming up the hall the sentry smiles opens the door and she enters ',     ' empty bed open window bourne is gone as the music starts pumping and we ',     ' off he goes disappearing into thin air fade out the end ']</pre></div><br><h4 id="2-bow-bag-of-words-벡터-생성"><a class="markdownIt-Anchor" href="#2-bow-bag-of-words-벡터-생성"></a> (2) BoW (Bag of Words) 벡터 생성</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter stop words</span></span><br><span class="line">vect = CountVectorizer(tokenizer=<span class="literal">None</span>, stop_words=<span class="string">'english'</span>, analyzer=<span class="string">'word'</span>).fit(corpus)</span><br><span class="line"><span class="comment"># tokenize: 문장을 단어로 나누는 기준; stop_words: 불용어 설정</span></span><br><span class="line"></span><br><span class="line">bow_vect = vect.fit_transform(corpus) <span class="comment"># BoW 벡터 생성</span></span><br><span class="line">word_list = vect.get_feature_names()</span><br><span class="line">count_list = bow_vect.toarray().sum(axis=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 등장한 단어 list</span></span><br><span class="line"></span><br><span class="line">word_list</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:scroll"><pre>    ['aa',     'ab',     'abandoned',     'abandons',     'abbott',     'abbottnow',     'abbottphone',     'abbotts',     'abend',     'able',     'aboott',     'aboutfaces',     'absolutely',     'abyss',     'accelerating',     'accented',     'accepting',     'accepts',     'access',     'accompanying',     'accomplished',     'account',     'acknowledged',     'act',     'activity',     'actually',     'address',     'adjust',     'adrenaline',     'affirmative',     'afford',     'afraid',     'afternoon',     'againi',     'agencies',     'agency',     'agent',     'agents',     'agitated',     'ago',     'agreement',     'agrees',     'ah',     'ahead',     'aim',     'aimed',     'air',     'airport',     'alarm',     'alert',     'alexanderplatz',     'alive',     'alley',     'alleys',     'allocation',     'allpoints',     'alongside',     'alps',     'alright',     'alrighti',     'alrighttake',     'american',     'ammo',     'amnesia',     'amused',     'anger',     'angle',     'ankle',     'anonymous',     'answer',     'answering',     'answers',     'anymore',     'anythings',     'apology',     'appealing',     'appear',     'appearing',     'appears',     'approached',     'approaches',     'approaching',     'archive',     'archives',     'area',     'arm',     'armed',     'arms',     'army',     'arrested',     'arrivals',     'arrived',     'arrives',     'arriving',     'article',     'asap',     'ashes',     'aside',     'ask',     'asked',     'asking',     'asks',     'asleep',     'ass',     'assassinated',     'assholes',     'assigned',     'assignment',     'assistant',     'associated',     'attempt',     'attention',     'autobahn',     'automatic',     'available',     'aware',     'away',     'awful',     'awhile',     'ba',     'backhanding',     'backing',     'backpack',     'backpacks',     'backs',     'backseat',     'backyard',     'bad',     'bag',     'bags',     'bail',     'bailing',     'bakery',     'balance',     'ball',     'balling',     'band',     'bang',     'banging',     'bank',     'banking',     'banks',     'bar',     'barely',     'bargain',     'barge',     'barn',     'base',     'basement',     'basic',     'basically',     'bastards',     'bathroom',     'battery',     'bb',     'bc',     'beach',     'bearing',     'bearings',     'beat',     'beats',     'beattocrap',     'bed',     'bedroom',     'beep',     'beeping',     'beggars',     'begging',     'begin',     'begins',     'behavior',     'behaviors',     'believe',     'believed',     'belongings',     'belt',     'beltway',     'bench',     'bends',     'beneath',     'berlin',     'better',     'bg',     'big',     'bigger',     'binders',     'binocular',     'birch',     'bit',     'bits',     'black',     'blade',     'blades',     'blam',     'blaming',     'blamm',     'blank',     'bleeding',     'blending',     'blinded',     'blindsided',     'blinking',     'blinks',     'block',     'blocked',     'blocking',     'blocks',     'blonde',     'blood',     'bloody',     'blow',     'blowing',     'blown',     'blows',     'blue',     'blueprint',     'blur',     'blurry',     'bmw',     'board',     'boarded',     'body',     'bogus',     'bomb',     'bombing',     'bone',     'book',     'boom',     'booooomm',     'booth',     'border',     'boss',     'bothering',     'bottle',     'boulevard',     'bouncing',     'bound',     'bourne',     'bourneabbott',     'bournephone',     'bournes',     'box',     'boxed',     'boxes',     'braced',     'braces',     'bracing',     'brakes',     'brandenburg',     'brass',     'breakdown',     'breaker',     'breaking',     'breaks',     'breath',     'breathe',     'breathing',     'breathless',     'brecker',     'bridge',     'briefcase',     'briefed',     'briefing',     'bright',     'bring',     'briskly',     'bristles',     'broadcoasting',     'bruise',     'budget',     'building',     'bulge',     'bulging',     'bulkhead',     'bullet',     'bulletin',     'bullets',     'bullpen',     'bumpers',     'bunch',     'bundle',     'burly',     'burn',     'burning',     'burst',     'bus',     'business',     'bust',     'busted',     'busy',     'button',     'buttoning',     'buy',     'buying',     'buzzkill',     'cab',     'cabbie',     'cabby',     'cabin',     'cabinet',     'cable',     'cabled',     'caffeine',     'calculated',     'calendar',     'caliber',     'called',     'calling',     'calls',     'calm',     'calmly',     'calms',     'came',     'camera',     'cameras',     'campground',     'canhow',     'canvas',     'cap',     'captain',     'caption',     'car',     'carabinieri',     'carabinieris',     'card',     'cards',     'care',     'careening',     'careful',     'carefully',     'careless',     'carnage',     'carries',     'carrying',     'cars',     'carves',     'cascading',     'case',     'cash',     'caspian',     'caspiexpetroleum',     'cast',     'casual',     'casually',     'catches',     'catching',     'caught',     'cause',     'caution',     'caves',     'cd',     'cell',     'cellphone',     'cement',     'center',     'ceo',     'certainly',     'chair',     'chairs',     'chalkboard',     'championed',     'championship',     'chance',     'change',     'changed',     'changes',     'chaos',     'charge',     'charges',     'charmed',     'chase',     'chasing',     'chatter',     'chatting',     'check',     'checked',     'checking',     'checkoff',     'checks',     'cherbourg',     'childlike',     'chill',     'chilly',     'chinese',     'chirping',     'choice',     'choices',     'chokehold',     'chokes',     'chop',     'choreographed',     'christ',     'chucked',     'chugging',     'ci',     'cia',     'cigarette',     'cigarettes',     'cinch',     'circles',     'city',     'civvies',     'claimed',     'clean',     'cleaning',     'clear',     'clearance',     'clearing',     'clearly',     'clears',     'clenching',     'clerk',     'clerks',     'clever',     'click',     'clicking',     'clicks',     'cliff',     'climb',     'climbing',     'clip',     'clipping',     'clock',     'clogging',     'cloned',     'close',     'closed',     'closequarter',     'closer',     'closes',     'closing',     'clothes',     'club',     'clubhouse',     'clue',     'cluster',     'clutter',     'cluttered',     'coal',     'coat',     'code',     'coding',     'coffee',     'cold',     'colonial',     'colored',     'come',     'comes',     'comfortable',     'coming',     'comm',     'command',     'commanders',     'common',     'commotion',     'communications',     'commuters',     'companies',     'company',     'comparison',     'complaining',     'compressing',     'compulsive',     'computer',     'computers',     'comrade',     'concentrating',     'concentric',     'concerned',     'concerning',     'concierge',     'concrete',     'condition',     'conditions',     'conductors',     'conferring',     'confidentially',     'confirm',     'confusion',     'conjunction',     'conjure',     'conklin',     'conklins',     'connections',     'consider',     'considering',     'consist',     'console',     'construction',     'consulate',     'contact',     'contd',     'continents',     'continues',     'continuing',     'contract',     'control',     'controlled',     'converge',     'conversation',     'convinced',     'convoy',     'coo',     'cool',     'cooly',     'coordinate',     'cop',     'cops',     'corner',     'corral',     'corridor',     'cots',     'cottage',     'coughing',     'counter',     'countering',     'counterintelligence',     'counting',     'country',     'countryside',     'couple',     'course',     'courtesy',     'cover',     'covered',     'covering',     'coworkers',     'cranking',     'cranks',     'crap',     'crash',     'crashes',     'crashing',     'crazy',     'credentials',     'credit',     'creepy',     'crestfallen',     'crewcut',     'crime',     'crinkles',     'crisp',     'crissake',     'cronin',     'croninradio',     'cross',     'crosses',     'crossing',     'crouches',     'crowd',     'crowded',     'cruising',     'crush',     'crushed',     'crushes',     'crying',     'cuffed',     'cuffs',     'cup',     'curb',     'curiosity',     'curious',     'curtains',     'curving',     'customs',     'cut',     'cuts',     'cutting',     'cyrillic',     'da',     'dad',     'damn',     'dangerous',     'dangle',     'daniel',     'danka',     'danny',     'dark',     'darkened',     'darkness',     'dash',     'dashboards',     'data',     'database',     'date',     'david',     'day',     'days',     'dead',     'deadly',     'deal',     'dealing',     'death',     'debrief',     'debriefed',     'decent',     'decide',     'decided',     'decision',     'decives',     'deck',     'deep',     'defensive',     'defiant',     'definitely',     'definitive',     'delta',     'deltas',     'departure',     'departures',     'depression',     'deputy',     'descend',     'deserted',     'desk',     'desolate',     'desperation',     'destiny',     'destroy',     'destroys',     'detailed',     'details',     'detained',     'determined',     'detonation',     'device',     'diagnosis',     'diagnostic',     'dial',     'dialed',     'did',     'didi',     'didjason',     'didnt',     'die',     'died',     'diei',     'dies',     'different',     'digital',     'digs',     'direct',     'directions',     'directly',     'director',     'disappear',     'disappearing',     'disappears',     'disappointed',     'disaster',     'discreet',     'discreetly',     'disembark',     'disembarking',     'disembarks',     'disgusted',     'dishes',     'disputing',     'distance',     'distinctive',     'distribution',     'disturbance',     'ditch',     'dividing',     'diving',     'dobermans',     'doctor',     'document',     'dod',     'dodging',     'dods',     'does',     'doesnt',     'doing',     'dollar',     'dollars',     'domestic',     'dominant',     'dominates',     'donnie',     'dont',     'door',     'doorbell',     'doorman',     'doors',     'doorway',     'double',     'doublecrossed',     'doubt',     'downhill',     'downs',     'dozens',     'drab',     'drawn',     'dread',     'dream',     'dresser',     'drifting',     'drill',     'drills',     'drink',     'drinks',     'drive',     'driver',     'driverphone',     'drivers',     'drives',     'driving',     'drone',     'drop',     'dropping',     'drops',     'drugs',     'drunk',     'ducked',     'ducking',     'duct',     'dude',     'dudes',     'duffel',     'duffle',     'dumping',     'dunk',     'ear',     'earlier',     'early',     'earpiece',     'ears',     'easing',     'east',     'easy',     'eat',     'edge',     'edges',     'ef',     'effective',     'effort',     'effortless',     'electric',     'electrical',     'element',     'elevator',     'eluded',     'embankment',     'embarrassed',     'emerge',     'emergency',     'emerges',     'emerging',     'emphatic',     'emptied',     'end',     'ends',     'energy',     'engine',     'engines',     'english',     'enjoy',     'enter',     'entering',     'enters',     'entombed',     'entrance',     'entrances',     'equal',     'equally',     'escape',     'escort',     'ether',     'europe',     'european',     'euros',     'evac',     'event',     'everybody',     'everyday',     'evidence',     'ex',     'exactly',     'exceptionally',     'excited',     'excuse',     'exfil',     'exit',     'exiting',     'exits',     'exnavyseal',     'expensive',     'expert',     'explosion',     'explosive',     'express',     'extreme',     'extremely',     'eye',     'eyes',     'facade',     'facades',     'face',     'faces',     'fact',     'factories',     'factoring',     'fade',     'fading',     'fail',     'failed',     'failing',     'fair',     'fake',     'fakes',     'faking',     'fall',     'fallen',     'falling',     'falls',     'familiar',     'families',     'family',     'fan',     'fanning',     'far',     'fast',     'faster',     'father',     'fatherly',     'fault',     'faux',     'favorite',     'fax',     'fear',     'feed',     'feeding',     'feel',     'feels',     'feet',     'fell',     'felt',     'fender',     'fenders',     'fernsehturm',     'ferry',     'field',     'fiftyeuro',     'fighting',     'fights',     'figure',     'file',     'filei',     'files',     'fileyour',     'filing',     'filling',     'fills',     'final',     'finally',     'financial',     'finding',     'finds',     'fine',     'finger',     'fingerprint',     'fingers',     'finish',     'finished',     'finishes',     'finishing',     'fired',     'fires',     'firing',     'firmly',     'fishing',     'fishtailing',     'fix',     'fixed',     'flag',     'flames',     'flanking',     'flash',     'flashback',     'flashes',     'flashing',     'flat',     'flatout',     'fleeing',     'flexcuffs',     'flicker',     'flickering',     'flicking',     'flies',     'flight',     'flights',     'flimsy',     'flips',     'floated',     'flood',     'flooding',     'floor',     'flooring',     'floors',     'flow',     'fly',     'flying',     'focused',     'focusing',     'foggy',     'folder',     'folding',     'folks',     'follow',     'followed',     'following',     'follows',     'food',     'fooled',     'foot',     'footing',     'footlocker',     'footpath',     'footstep',     'footsteps',     'force',     'foreboding',     'forehead',     'forest',     'forever',     'forget',     'forging',     'forgive',     'forgotten',     'fork',     'forlorn',     'forties',     'fortune',     'forward',     'fourgam',     'fourth',     'frantic',     'freaked',     'free',     'freezes',     'freezing',     'frequency',     'fresh',     'fridge',     'friendly',     'friends',     'frowns',     'frozen',     'frustration',     'fry',     'fuck',     'fucking',     'fully',     'fumbling',     'funky',     'furious',     'fury',     'fusty',     'futile',     'gables',     'gadgetry',     'gaining',     'game',     'gangster',     'gap',     'gas',     'gasolinestoked',     'gasping',     'gassoaked',     'gate',     'gathered',     'gathering',     'gauge',     'gaze',     'gear',     'gears',     'geneva',     'genevai',     'genoa',     'gentlemen',     'german',     'germans',     'germany',     'gestures',     'gets',     'getting',     'gift',     'gimme',     'girl',     'girlfriend',     'girls',     'given',     'gives',     'giving',     'glacial',     'glance',     'glanced',     'glances',     'glancing',     ...]</pre></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각 단어의 씬별 등장 횟수</span></span><br><span class="line"></span><br><span class="line">bow_vect.toarray()</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0],       ...,       [0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ..., 0, 0, 0]], dtype=int64)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bow_vect.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(320, 2850)</code></pre>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각 단어의 총 등장 횟수 (모든 씬에서의 등장 횟수의 합)</span></span><br><span class="line"></span><br><span class="line">count_list  <span class="comment"># BoW array의 각 column에 대해서 모든 row의 합을 구하기</span></span><br></pre></td></tr></tbody></table></figure><pre><code>array([ 3,  3,  2, ...,  1, 42,  3], dtype=int64)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "단어" - "총 등장 횟수" Matching</span></span><br><span class="line"></span><br><span class="line">word_count_dict = dict(zip(word_list, count_list))</span><br><span class="line">word_count_dict</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:scroll"><pre>    {'aa': 3,     'ab': 3,     'abandoned': 2,     'abandons': 1,     'abbott': 128,     'abbottnow': 1,     'abbottphone': 4,     'abbotts': 3,     'abend': 2,     'able': 1,     'aboott': 1,     'aboutfaces': 1,     'absolutely': 1,     'abyss': 1,     'accelerating': 1,     'accented': 1,     'accepting': 1,     'accepts': 1,     'access': 3,     'accompanying': 1,     'accomplished': 1,     'account': 3,     'acknowledged': 1,     'act': 1,     'activity': 2,     'actually': 3,     'address': 3,     'adjust': 1,     'adrenaline': 1,     'affirmative': 1,     'afford': 1,     'afraid': 1,     'afternoon': 1,     'againi': 1,     'agencies': 1,     'agency': 5,     'agent': 2,     'agents': 2,     'agitated': 1,     'ago': 10,     'agreement': 2,     'agrees': 1,     'ah': 1,     'ahead': 17,     'aim': 1,     'aimed': 1,     'air': 9,     'airport': 2,     'alarm': 3,     'alert': 1,     'alexanderplatz': 3,     'alive': 9,     'alley': 2,     'alleys': 1,     'allocation': 1,     'allpoints': 1,     'alongside': 1,     'alps': 1,     'alright': 2,     'alrighti': 1,     'alrighttake': 1,     'american': 4,     'ammo': 1,     'amnesia': 5,     'amused': 1,     'anger': 1,     'angle': 2,     'ankle': 1,     'anonymous': 3,     'answer': 8,     'answering': 1,     'answers': 7,     'anymore': 3,     'anythings': 1,     'apology': 2,     'appealing': 1,     'appear': 1,     'appearing': 1,     'appears': 1,     'approached': 1,     'approaches': 2,     'approaching': 1,     'archive': 1,     'archives': 2,     'area': 5,     'arm': 2,     'armed': 2,     'arms': 3,     'army': 1,     'arrested': 1,     'arrivals': 1,     'arrived': 3,     'arrives': 8,     'arriving': 3,     'article': 1,     'asap': 1,     'ashes': 1,     'aside': 2,     'ask': 1,     'asked': 1,     'asking': 2,     'asks': 1,     'asleep': 1,     'ass': 7,     'assassinated': 2,     'assholes': 1,     'assigned': 1,     'assignment': 1,     'assistant': 1,     'associated': 1,     'attempt': 1,     'attention': 3,     'autobahn': 1,     'automatic': 3,     'available': 1,     'aware': 1,     'away': 48,     'awful': 3,     'awhile': 2,     'ba': 2,     'backhanding': 1,     'backing': 5,     'backpack': 4,     'backpacks': 2,     'backs': 2,     'backseat': 4,     'backyard': 1,     'bad': 5,     'bag': 18,     'bags': 2,     'bail': 1,     'bailing': 2,     'bakery': 1,     'balance': 2,     'ball': 1,     'balling': 1,     'band': 1,     'bang': 1,     'banging': 1,     'bank': 3,     'banking': 1,     'banks': 1,     'bar': 1,     'barely': 8,     'bargain': 1,     'barge': 9,     'barn': 1,     'base': 2,     'basement': 2,     'basic': 1,     'basically': 1,     'bastards': 1,     'bathroom': 7,     'battery': 1,     'bb': 2,     'bc': 1,     'beach': 10,     'bearing': 1,     'bearings': 1,     'beat': 22,     'beats': 2,     'beattocrap': 1,     'bed': 9,     'bedroom': 2,     'beep': 2,     'beeping': 2,     'beggars': 1,     'begging': 4,     'begin': 2,     'begins': 9,     'behavior': 1,     'behaviors': 1,     'believe': 4,     'believed': 6,     'belongings': 1,     'belt': 1,     'beltway': 4,     'bench': 1,     'bends': 1,     'beneath': 1,     'berlin': 37,     'better': 7,     'bg': 1,     'big': 17,     'bigger': 3,     'binders': 1,     'binocular': 1,     'birch': 1,     'bit': 6,     'bits': 1,     'black': 15,     'blade': 1,     'blades': 1,     'blam': 2,     'blaming': 1,     'blamm': 1,     'blank': 2,     'bleeding': 1,     'blending': 1,     'blinded': 1,     'blindsided': 1,     'blinking': 2,     'blinks': 2,     'block': 3,     'blocked': 2,     'blocking': 2,     'blocks': 1,     'blonde': 1,     'blood': 6,     'bloody': 2,     'blow': 1,     'blowing': 4,     'blown': 3,     'blows': 4,     'blue': 3,     'blueprint': 2,     'blur': 3,     'blurry': 1,     'bmw': 4,     'board': 2,     'boarded': 1,     'body': 9,     'bogus': 1,     'bomb': 1,     'bombing': 1,     'bone': 1,     'book': 2,     'boom': 1,     'booooomm': 1,     'booth': 3,     'border': 2,     'boss': 2,     'bothering': 1,     'bottle': 3,     'boulevard': 4,     'bouncing': 1,     'bound': 1,     'bourne': 455,     'bourneabbott': 1,     'bournephone': 5,     'bournes': 29,     'box': 5,     'boxed': 1,     'boxes': 1,     'braced': 1,     'braces': 1,     'bracing': 2,     'brakes': 3,     'brandenburg': 1,     'brass': 1,     'breakdown': 1,     'breaker': 1,     'breaking': 1,     'breaks': 1,     'breath': 2,     'breathe': 1,     'breathing': 1,     'breathless': 1,     'brecker': 9,     'bridge': 13,     'briefcase': 8,     'briefed': 1,     'briefing': 1,     'bright': 2,     'bring': 2,     'briskly': 2,     'bristles': 1,     'broadcoasting': 1,     'bruise': 1,     'budget': 1,     'building': 20,     'bulge': 1,     'bulging': 1,     'bulkhead': 2,     'bullet': 1,     'bulletin': 1,     'bullets': 2,     'bullpen': 5,     'bumpers': 1,     'bunch': 1,     'bundle': 1,     'burly': 1,     'burn': 1,     'burning': 2,     'burst': 1,     'bus': 3,     'business': 3,     'bust': 1,     'busted': 1,     'busy': 7,     'button': 1,     'buttoning': 1,     'buy': 7,     'buying': 2,     'buzzkill': 1,     'cab': 24,     'cabbie': 3,     'cabby': 1,     'cabin': 1,     'cabinet': 3,     'cable': 1,     'cabled': 1,     'caffeine': 1,     'calculated': 1,     'calendar': 1,     'caliber': 1,     'called': 3,     'calling': 1,     'calls': 1,     'calm': 4,     'calmly': 2,     'calms': 1,     'came': 10,     'camera': 3,     'cameras': 1,     'campground': 1,     'canhow': 1,     'canvas': 1,     'cap': 1,     'captain': 2,     'caption': 1,     'car': 51,     'carabinieri': 5,     'carabinieris': 1,     'card': 1,     'cards': 2,     'care': 3,     'careening': 1,     'careful': 2,     'carefully': 2,     'careless': 1,     'carnage': 1,     'carries': 1,     'carrying': 6,     'cars': 20,     'carves': 1,     'cascading': 1,     'case': 7,     'cash': 6,     'caspian': 1,     'caspiexpetroleum': 1,     'cast': 1,     'casual': 2,     'casually': 1,     'catches': 1,     'catching': 3,     'caught': 2,     'cause': 1,     'caution': 1,     'caves': 1,     'cd': 1,     'cell': 7,     'cellphone': 2,     'cement': 1,     'center': 3,     'ceo': 1,     'certainly': 1,     'chair': 9,     'chairs': 1,     'chalkboard': 1,     'championed': 1,     'championship': 1,     'chance': 1,     'change': 4,     'changed': 3,     'changes': 2,     'chaos': 2,     'charge': 7,     'charges': 2,     'charmed': 1,     'chase': 2,     'chasing': 1,     'chatter': 1,     'chatting': 1,     'check': 6,     'checked': 2,     'checking': 13,     'checkoff': 1,     'checks': 12,     'cherbourg': 1,     'childlike': 1,     'chill': 1,     'chilly': 1,     'chinese': 2,     'chirping': 1,     'choice': 5,     'choices': 1,     'chokehold': 1,     'chokes': 1,     'chop': 2,     'choreographed': 1,     'christ': 2,     'chucked': 1,     'chugging': 2,     'ci': 2,     'cia': 7,     'cigarette': 1,     'cigarettes': 1,     'cinch': 1,     'circles': 2,     'city': 4,     'civvies': 1,     'claimed': 1,     'clean': 7,     'cleaning': 1,     'clear': 9,     'clearance': 1,     'clearing': 1,     'clearly': 5,     'clears': 2,     'clenching': 1,     'clerk': 8,     'clerks': 1,     'clever': 1,     'click': 6,     'clicking': 1,     'clicks': 1,     'cliff': 1,     'climb': 1,     'climbing': 4,     'clip': 3,     'clipping': 1,     'clock': 4,     'clogging': 1,     'cloned': 2,     'close': 13,     'closed': 3,     'closequarter': 1,     'closer': 4,     'closes': 2,     'closing': 3,     'clothes': 7,     'club': 3,     'clubhouse': 1,     'clue': 1,     'cluster': 1,     'clutter': 1,     'cluttered': 1,     'coal': 2,     'coat': 7,     'code': 2,     'coding': 1,     'coffee': 5,     'cold': 4,     'colonial': 1,     'colored': 1,     'come': 18,     'comes': 10,     'comfortable': 1,     'coming': 30,     'comm': 2,     'command': 1,     'commanders': 1,     'common': 1,     'commotion': 1,     'communications': 2,     'commuters': 1,     'companies': 1,     'company': 3,     'comparison': 1,     'complaining': 1,     'compressing': 1,     'compulsive': 1,     'computer': 7,     'computers': 2,     'comrade': 1,     'concentrating': 1,     'concentric': 1,     'concerned': 2,     'concerning': 1,     'concierge': 3,     'concrete': 3,     'condition': 1,     'conditions': 1,     'conductors': 1,     'conferring': 2,     'confidentially': 1,     'confirm': 1,     'confusion': 3,     'conjunction': 1,     'conjure': 1,     'conklin': 29,     'conklins': 4,     'connections': 1,     'consider': 1,     'considering': 1,     'consist': 1,     'console': 1,     'construction': 2,     'consulate': 2,     'contact': 3,     'contd': 63,     'continents': 1,     'continues': 3,     'continuing': 8,     'contract': 1,     'control': 2,     'controlled': 1,     'converge': 1,     'conversation': 3,     'convinced': 1,     'convoy': 1,     'coo': 1,     'cool': 3,     'cooly': 1,     'coordinate': 1,     'cop': 5,     'cops': 22,     'corner': 13,     'corral': 1,     'corridor': 1,     'cots': 1,     'cottage': 1,     'coughing': 1,     'counter': 2,     'countering': 1,     'counterintelligence': 2,     'counting': 1,     'country': 1,     'countryside': 1,     'couple': 4,     'course': 1,     'courtesy': 1,     'cover': 9,     'covered': 2,     'covering': 1,     'coworkers': 1,     'cranking': 1,     'cranks': 1,     'crap': 2,     'crash': 2,     'crashes': 1,     'crashing': 2,     'crazy': 4,     'credentials': 1,     'credit': 1,     'creepy': 1,     'crestfallen': 1,     'crewcut': 1,     'crime': 2,     'crinkles': 1,     'crisp': 1,     'crissake': 1,     'cronin': 81,     'croninradio': 1,     'cross': 2,     'crosses': 3,     'crossing': 2,     'crouches': 1,     'crowd': 7,     'crowded': 2,     'cruising': 1,     'crush': 1,     'crushed': 1,     'crushes': 1,     'crying': 4,     'cuffed': 2,     'cuffs': 2,     'cup': 2,     'curb': 3,     'curiosity': 1,     'curious': 1,     'curtains': 2,     'curving': 1,     'customs': 1,     'cut': 2,     'cuts': 2,     'cutting': 3,     'cyrillic': 2,     'da': 1,     'dad': 1,     'damn': 2,     'dangerous': 3,     'dangle': 1,     'daniel': 1,     'danka': 1,     'danny': 8,     'dark': 16,     'darkened': 1,     'darkness': 2,     'dash': 2,     'dashboards': 1,     'data': 3,     'database': 1,     'date': 2,     'david': 1,     'day': 4,     'days': 2,     'dead': 22,     'deadly': 1,     'deal': 3,     'dealing': 1,     'death': 4,     'debrief': 2,     'debriefed': 1,     'decent': 1,     'decide': 2,     'decided': 1,     'decision': 1,     'decives': 1,     'deck': 2,     'deep': 2,     'defensive': 2,     'defiant': 1,     'definitely': 1,     'definitive': 3,     'delta': 12,     'deltas': 1,     'departure': 2,     'departures': 1,     'depression': 1,     'deputy': 2,     'descend': 1,     'deserted': 2,     'desk': 17,     'desolate': 2,     'desperation': 2,     'destiny': 1,     'destroy': 1,     'destroys': 1,     'detailed': 1,     'details': 2,     'detained': 1,     'determined': 1,     'detonation': 1,     'device': 2,     'diagnosis': 1,     'diagnostic': 1,     'dial': 1,     'dialed': 1,     'did': 15,     'didi': 1,     'didjason': 1,     'didnt': 11,     'die': 1,     'died': 3,     'diei': 1,     'dies': 1,     'different': 2,     'digital': 1,     'digs': 1,     'direct': 1,     'directions': 1,     'directly': 1,     'director': 2,     'disappear': 6,     'disappearing': 1,     'disappears': 3,     'disappointed': 1,     'disaster': 3,     'discreet': 2,     'discreetly': 2,     'disembark': 1,     'disembarking': 2,     'disembarks': 1,     'disgusted': 1,     'dishes': 1,     'disputing': 1,     'distance': 4,     'distinctive': 1,     'distribution': 1,     'disturbance': 1,     'ditch': 1,     'dividing': 1,     'diving': 1,     'dobermans': 2,     'doctor': 1,     'document': 1,     'dod': 3,     'dodging': 1,     'dods': 1,     'does': 9,     'doesnt': 11,     'doing': 20,     'dollar': 2,     'dollars': 4,     'domestic': 1,     'dominant': 1,     'dominates': 1,     'donnie': 1,     'dont': 42,     'door': 31,     'doorbell': 1,     'doorman': 2,     'doors': 9,     'doorway': 3,     'double': 1,     'doublecrossed': 1,     'doubt': 1,     'downhill': 1,     'downs': 1,     'dozens': 1,     'drab': 1,     'drawn': 4,     'dread': 2,     'dream': 4,     'dresser': 1,     'drifting': 2,     'drill': 3,     'drills': 2,     'drink': 1,     'drinks': 1,     'drive': 3,     'driver': 20,     'driverphone': 1,     'drivers': 3,     'drives': 4,     'driving': 12,     'drone': 1,     'drop': 4,     'dropping': 3,     'drops': 3,     'drugs': 1,     'drunk': 4,     'ducked': 1,     'ducking': 1,     'duct': 2,     'dude': 2,     'dudes': 6,     'duffel': 1,     'duffle': 3,     'dumping': 1,     'dunk': 1,     'ear': 1,     'earlier': 1,     'early': 5,     'earpiece': 3,     'ears': 1,     'easing': 1,     'east': 2,     'easy': 2,     'eat': 1,     'edge': 2,     'edges': 1,     'ef': 1,     'effective': 1,     'effort': 1,     'effortless': 1,     'electric': 1,     'electrical': 3,     'element': 1,     'elevator': 8,     'eluded': 1,     'embankment': 1,     'embarrassed': 2,     'emerge': 1,     'emergency': 1,     'emerges': 1,     'emerging': 2,     'emphatic': 1,     'emptied': 1,     'end': 10,     'ends': 2,     'energy': 1,     'engine': 1,     'engines': 1,     'english': 2,     'enjoy': 1,     'enter': 2,     'entering': 1,     'enters': 10,     'entombed': 1,     'entrance': 2,     'entrances': 1,     'equal': 1,     'equally': 1,     'escape': 1,     'escort': 3,     'ether': 1,     'europe': 2,     'european': 1,     'euros': 1,     'evac': 2,     'event': 1,     'everybody': 3,     'everyday': 1,     'evidence': 1,     'ex': 1,     'exactly': 7,     'exceptionally': 1,     'excited': 2,     'excuse': 1,     'exfil': 6,     'exit': 2,     'exiting': 1,     'exits': 3,     'exnavyseal': 1,     'expensive': 1,     'expert': 1,     'explosion': 1,     'explosive': 3,     'express': 1,     'extreme': 1,     'extremely': 2,     'eye': 6,     'eyes': 25,     'facade': 2,     'facades': 1,     'face': 22,     'faces': 6,     'fact': 2,     'factories': 1,     'factoring': 1,     'fade': 2,     'fading': 1,     'fail': 1,     'failed': 1,     'failing': 1,     'fair': 1,     'fake': 1,     'fakes': 1,     'faking': 1,     'fall': 3,     'fallen': 1,     'falling': 2,     'falls': 1,     'familiar': 2,     'families': 1,     'family': 5,     'fan': 1,     'fanning': 1,     'far': 7,     'fast': 13,     'faster': 1,     'father': 3,     'fatherly': 1,     'fault': 1,     'faux': 1,     'favorite': 1,     'fax': 2,     'fear': 4,     'feed': 2,     'feeding': 1,     'feel': 4,     'feels': 1,     'feet': 3,     'fell': 3,     'felt': 4,     'fender': 1,     'fenders': 1,     'fernsehturm': 1,     'ferry': 2,     'field': 6,     'fiftyeuro': 1,     'fighting': 1,     'fights': 1,     'figure': 3,     'file': 8,     'filei': 1,     'files': 11,     'fileyour': 1,     'filing': 1,     'filling': 1,     'fills': 1,     'final': 5,     'finally': 11,     'financial': 2,     'finding': 3,     'finds': 1,     'fine': 2,     'finger': 4,     'fingerprint': 3,     'fingers': 1,     'finish': 2,     'finished': 1,     'finishes': 1,     'finishing': 1,     'fired': 1,     'fires': 1,     'firing': 4,     'firmly': 1,     'fishing': 2,     'fishtailing': 1,     'fix': 2,     'fixed': 3,     'flag': 2,     'flames': 1,     'flanking': 1,     'flash': 2,     'flashback': 7,     'flashes': 3,     'flashing': 2,     'flat': 2,     'flatout': 1,     'fleeing': 1,     'flexcuffs': 2,     'flicker': 3,     'flickering': 1,     'flicking': 1,     'flies': 1,     'flight': 1,     'flights': 1,     'flimsy': 1,     'flips': 2,     'floated': 1,     'flood': 1,     'flooding': 1,     'floor': 10,     'flooring': 1,     'floors': 1,     'flow': 1,     'fly': 1,     'flying': 2,     'focused': 3,     'focusing': 1,     'foggy': 1,     'folder': 1,     'folding': 2,     'folks': 1,     'follow': 3,     'followed': 1,     'following': 2,     'follows': 3,     'food': 4,     'fooled': 2,     'foot': 4,     'footing': 1,     'footlocker': 2,     'footpath': 2,     'footstep': 1,     'footsteps': 1,     'force': 2,     'foreboding': 1,     'forehead': 1,     'forest': 1,     'forever': 1,     'forget': 3,     'forging': 1,     'forgive': 1,     'forgotten': 2,     'fork': 2,     'forlorn': 1,     'forties': 1,     'fortune': 1,     'forward': 6,     'fourgam': 1,     'fourth': 1,     'frantic': 1,     'freaked': 3,     'free': 4,     'freezes': 1,     'freezing': 2,     'frequency': 1,     'fresh': 4,     'fridge': 1,     'friendly': 1,     'friends': 2,     'frowns': 1,     'frozen': 2,     'frustration': 1,     'fry': 1,     'fuck': 7,     'fucking': 1,     'fully': 3,     'fumbling': 1,     'funky': 1,     'furious': 1,     'fury': 2,     'fusty': 1,     'futile': 1,     'gables': 1,     'gadgetry': 1,     'gaining': 2,     'game': 4,     'gangster': 1,     'gap': 1,     'gas': 5,     'gasolinestoked': 1,     'gasping': 1,     'gassoaked': 1,     'gate': 1,     'gathered': 2,     'gathering': 1,     'gauge': 1,     'gaze': 2,     'gear': 9,     'gears': 1,     'geneva': 1,     'genevai': 1,     'genoa': 1,     'gentlemen': 1,     'german': 7,     'germans': 1,     'germany': 2,     'gestures': 3,     'gets': 7,     'getting': 16,     'gift': 1,     'gimme': 1,     'girl': 6,     'girlfriend': 1,     'girls': 1,     'given': 1,     'gives': 4,     'giving': 3,     'glacial': 1,     'glance': 1,     'glanced': 1,     'glances': 1,     'glancing': 8,     ...}</pre></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 등장 횟수 (count) 순으로 정렬</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">sorted(word_count_dict.items(), key = operator.itemgetter(<span class="number">1</span>), reverse = <span class="literal">True</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>[('bourne', 455), ('pamela', 199), ('abbott', 128), ('hes', 100), ('kirill', 93)]</code></pre> <br> <h4 id="3-단어-분포-탐색"><a class="markdownIt-Anchor" href="#3-단어-분포-탐색"></a> (3) 단어 분포 탐색</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(list(word_count_dict.values()), bins=<span class="number">150</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-TextMining-1/output_60_0.png" alt="output_60_0"></p><p>대부분의 단어가 0번~50번 사이에 등장했고, 일부 소수의 단어들이 100번 이상 등장한 것을 확인할 수 있습니다.</p>  <br>  <br><h2 id="4-택스트-마이닝"><a class="markdownIt-Anchor" href="#4-택스트-마이닝"></a> <strong>4. 택스트 마이닝</strong></h2><h3 id="4-1-단어별-빈도-분석-word-cloud"><a class="markdownIt-Anchor" href="#4-1-단어별-빈도-분석-word-cloud"></a> 4-1. 단어별 빈도 분석 (+ Word Cloud)</h3><h4 id="1-상위-빈도수-단어-출력"><a class="markdownIt-Anchor" href="#1-상위-빈도수-단어-출력"></a> (1) 상위 빈도수 단어 출력</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># word_count_dict중 상위 25 tags 확인해보기</span></span><br><span class="line"></span><br><span class="line">ranked_tags = Counter(word_count_dict).most_common(<span class="number">25</span>)</span><br><span class="line">ranked_tags</span><br></pre></td></tr></tbody></table></figure><pre><code>[('bourne', 455), ('pamela', 199), ('abbott', 128), ('hes', 100), ('kirill', 93), ('nicky', 90), ('cronin', 81), ('just', 80), ('marie', 67), ('contd', 63), ('know', 61), ('car', 51), ('away', 48), ('room', 44), ('jarda', 43), ('looks', 43), ('dont', 42), ('zorn', 42), ('phone', 40), ('right', 39), ('theres', 39), ('police', 38), ('want', 38), ('berlin', 37), ('teddy', 35)]</code></pre>  <br><h4 id="2-word-cloud-시각화"><a class="markdownIt-Anchor" href="#2-word-cloud-시각화"></a> (2) Word Cloud 시각화</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install pytagcloud pygame simplejson</span><br></pre></td></tr></tbody></table></figure><pre><code>Collecting pytagcloud  Downloading pytagcloud-0.3.5.tar.gz (754 kB)Collecting pygame  Downloading pygame-1.9.6-cp37-cp37m-win_amd64.whl (4.3 MB)Collecting simplejson  Downloading simplejson-3.17.2-cp37-cp37m-win_amd64.whl (73 kB)Building wheels for collected packages: pytagcloud  Building wheel for pytagcloud (setup.py): started  Building wheel for pytagcloud (setup.py): finished with status 'done'  Created wheel for pytagcloud: filename=pytagcloud-0.3.5-py3-none-any.whl size=759873 sha256=0c740b8c183f3dd04c6b6353e75f2307bdcc7855bb0ce66f4caa3ed352b6e8cc  Stored in directory: c:\users\kimsu\appdata\local\pip\cache\wheels\fc\fd\aa\86956a295a7c9205bafd518ef4b6d489e51d2d476990c18238Successfully built pytagcloudInstalling collected packages: pytagcloud, pygame, simplejsonSuccessfully installed pygame-1.9.6 pytagcloud-0.3.5 simplejson-3.17.2</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pytagcloud</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br></pre></td></tr></tbody></table></figure><pre><code>pygame 1.9.6Hello from the pygame community. https://www.pygame.org/contribute.html</code></pre><br><p>내림순으로 상위 N개를 추출하는 두가지 방법:</p><ol><li><p>sorted(<em>dict</em> .items(), key = operator.itemgetter(<em>col_index</em>), reverse=True) [:N]</p></li><li><p>Counter(<em>dict</em> .most_common(N))</p><br></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Top 40 단어로 word cloud 생성하기</span></span><br><span class="line">taglist = pytagcloud.make_tags(sorted(word_count_dict.items(), key = operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)[:<span class="number">40</span>], maxsize=<span class="number">60</span>)  <span class="comment"># 빈도수(itemgetter(1)) 내림차순(reverse=True)으로 정렬, maxsize: 글자 크기</span></span><br><span class="line"><span class="comment"># taglist = pytagcloud.make_tages(Counter(word_count_dict).most_common(40), maxsize=60)</span></span><br><span class="line"></span><br><span class="line">pytagcloud.create_tag_image(taglist, <span class="string">'movie_wordcloud.jpg'</span>, rectangular=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line">Image(filename=<span class="string">'movie_wordcloud.jpg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-TextMining-1/output_74_0.jpg" alt="output_74_0"></p><p>​    <br></p><h3 id="4-2-장면별-중요-단어-시각화-tf-idf"><a class="markdownIt-Anchor" href="#4-2-장면별-중요-단어-시각화-tf-idf"></a> 4-2. 장면별 중요 단어 시각화 (TF-IDF)</h3><h4 id="1-tf-idf-변환"><a class="markdownIt-Anchor" href="#1-tf-idf-변환"></a> (1) TF-IDF 변환</h4><p>Bag of Words 벡터에 대해서 TF-IDF변환 진행합니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"></span><br><span class="line">tfidf_vectorizer = TfidfTransformer()</span><br><span class="line">tf_idf_vect = tfidf_vectorizer.fit_transform(bow_vect)</span><br><span class="line"></span><br><span class="line">print(tf_idf_vect.shape)  <span class="comment"># 320*2850 vector: 320 scenes, 2850 sentences</span></span><br></pre></td></tr></tbody></table></figure><pre><code>(320, 2850)</code></pre><br><p>변환 후 320*2850 matrix가 출력됩니다. 여기서</p><ul><li><p>한 행(row)은 한 씬을 의미하고</p></li><li><p>한 열(column)은 한 단어를 의미합니다.</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 첫번째 행 출력 (0이 아닌것 만) -- 즉 첫 씬에서 모든 단어의 TF-IDF 값</span></span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>(320, 2850)  (0, 2788)0.19578974958217082  (0, 2763)0.27550455848587985  (0, 2412)0.1838379942679887  (0, 2387)0.3109660261831164  (0, 1984)0.2902223973596984  (0, 1978)0.3109660261831164  (0, 1898)0.27550455848587985  (0, 1673)0.2902223973596984  (0, 1366)0.21520447034992146  (0, 1251)0.19855583314180728  (0, 1001)0.2340173008390438  (0, 974)0.2902223973596984  (0, 874)0.27550455848587985  (0, 798)0.1906694714764746  (0, 237)0.08646242181596513  (0, 125)0.26408851574819875</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (0을 포함한) 실제 vector의 모습 출력해보기</span></span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>].toarray().shape)</span><br><span class="line">print(tf_idf_vect[<span class="number">0</span>].toarray())</span><br></pre></td></tr></tbody></table></figure><pre><code>(1, 2850)[[0. 0. 0. ... 0. 0. 0.]]</code></pre><br><h4 id="2-벡터-단어-mapping"><a class="markdownIt-Anchor" href="#2-벡터-단어-mapping"></a> (2) “벡터” - “단어” mapping</h4><p>길이가 2850인 단어 벡터의 각 위치가 어떤 단어를 상징하는지를 알아내기 위해 단어 벡터에 대해서 “단어” - “index No.” Mapping 을 진행합니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vect.vocabulary_</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:scroll"><pre>    {'raining': 1898,     'light': 1366,     'strobes': 2387,     'wet': 2763,     'glass': 1001,     'rhythmic': 1978,     'pace': 1673,     'suddenly': 2412,     'window': 2788,     'face': 798,     'jason': 1251,     'bourne': 237,     'riding': 1984,     'backseat': 125,     'gaze': 974,     'fixed': 874,     'knee': 1297,     'syringe': 2459,     'gun': 1055,     'eyes': 795,     'driver': 703,     'jarda': 1248,     'watching': 2741,     'bournes': 240,     'pov': 1817,     'passenger': 1710,     'head': 1097,     'cell': 351,     'phone': 1747,     'rings': 1990,     'turns': 2626,     'conklin': 481,     'returns': 1971,     'stare': 2332,     'open': 1649,     'panicked': 1693,     'gasping': 968,     'trying': 2615,     'stay': 2347,     'quiet': 1886,     'marie': 1454,     'sleeps': 2221,     'moving': 1556,     'medicine': 1482,     'cabinet': 299,     'digs': 640,     'downs': 690,     'specific': 2283,     'minute': 1515,     'later': 1333,     'moves': 1555,     'veranda': 2679,     'pads': 1681,     'moment': 1537,     'concerned': 468,     'clearly': 408,     'time': 2542,     'happened': 1082,     'look': 1405,     'different': 638,     'saw': 2044,     'hair': 1065,     'longer': 1404,     'shes': 2137,     'blonde': 207,     'hippie': 1138,     'travelers': 2592,     'cottage': 512,     'humble': 1174,     'sweet': 2445,     'bedroom': 163,     'opens': 1652,     'beach': 156,     'town': 2570,     'just': 1272,     'hill': 1135,     'club': 432,     'music': 1566,     'night': 1602,     'rave': 1909,     'wafting': 2708,     'far': 821,     'distance': 658,     'car': 321,     'ill': 1193,     'book': 226,     'theres': 2513,     'new': 1595,     'youre': 2844,     'sure': 2428,     'nods': 1607,     'write': 2823,     'years': 2834,     'scribbling': 2070,     'notebook': 1615,     'bad': 127,     'bits': 189,     'pieces': 1760,     'gone': 1012,     'think': 2521,     'maybe': 1470,     'making': 1442,     'worse': 2816,     'dont': 680,     'wonder': 2800,     'lays': 1337,     'hands': 1077,     'shoulders': 2157,     'steadies': 2351,     'sooner': 2268,     'going': 1011,     'remember': 1951,     'good': 1014,     'softens': 2260,     'smiles': 2241,     'kisses': 1293,     'leads': 1342,     'getting': 986,     'bed': 162,     'turning': 2625,     'settled': 2110,     'waiting': 2713,     'pill': 1763,     'kick': 1281,     'im': 1194,     'okay': 1641,     'worry': 2815,     'like': 1369,     'nightmare': 1603,     'mean': 1473,     'try': 2614,     'ignore': 1190,     'hesitates': 1124,     'gets': 985,     'knows': 1310,     'right': 1987,     'opening': 1651,     'hes': 1123,     'letting': 1359,     'resistance': 1963,     'folding': 907,     'childlike': 380,     'gathering': 972,     'contd': 491,     'sleep': 2218,     'better': 181,     'memories': 1487,     'dream': 695,     'having': 1094,     'ends': 752,     'day': 586,     'takes': 2464,     'beat': 159,     'make': 1440,     'silence': 2182,     'strokes': 2389,     'gives': 993,     'tenderness': 2499,     'fading': 804,     'waifs': 2710,     'dark': 577,     'running': 2022,     'sun': 2418,     'punishing': 1865,     'sand': 2038,     'strong': 2391,     'effortless': 737,     'deep': 601,     'focused': 903,     'stunning': 2400,     'conjunction': 479,     'scenery': 2055,     'lost': 1414,     'busy': 289,     'market': 1457,     'fishing': 871,     'lots': 1416,     'young': 2842,     'western': 2761,     'faces': 799,     'rundown': 2021,     'happening': 1083,     'shopping': 2152,     'filling': 852,     'bag': 128,     'local': 1391,     'produce': 1841,     'leaving': 1352,     'putting': 1875,     'groceries': 1040,     'away': 116,     'stops': 2369,     'photograph': 1753,     'windowsill': 2790,     'snapshot': 2250,     'arms': 87,     'protector': 1853,     'big': 183,     'alive': 51,     'love': 1419,     'funky': 955,     'colonial': 444,     'facades': 797,     'vivid': 2698,     'subcontinental': 2404,     'technicolor': 2483,     'loud': 1417,     'morning': 1545,     'traffic': 2576,     'camera': 313,     'finds': 858,     'coming': 449,     'store': 2370,     'bottle': 233,     'water': 2742,     'finished': 864,     'run': 2020,     'standing': 2329,     'chugging': 393,     'checking': 376,     'scene': 2054,     'catches': 344,     'eye': 794,     'street': 2380,     'silver': 2188,     'newish': 1596,     'pulling': 1861,     'block': 203,     'quite': 1888,     'whos': 2779,     'driving': 707,     'casual': 342,     'passing': 1714,     'notice': 1616,     'alert': 49,     'follows': 912,     'foot': 915,     'natural': 1575,     'cruising': 551,     'sidewalk': 2174,     'blending': 198,     'mix': 1525,     'ahead': 43,     'corner': 508,     'slowing': 2233,     'reaches': 1912,     'parked': 1700,     'guy': 1059,     'welldressed': 2757,     'physical': 1755,     'sunglasses': 2420,     'kirill': 1291,     'heading': 1100,     'building': 270,     'telegraph': 2491,     'office': 1632,     'watch': 2739,     'perimeter': 1739,     'mr': 1557,     'mohan': 1534,     'desk': 614,     'crisp': 541,     'proper': 1849,     'man': 1443,     'handed': 1074,     'old': 1642,     'passport': 1715,     'picture': 1758,     'question': 1879,     'sir': 2197,     'sister': 2200,     'death': 592,     'family': 818,     'place': 1772,     'know': 1307,     'called': 306,     'note': 1614,     'table': 2460,     'come': 446,     'read': 1917,     'balling': 135,     'quickly': 1884,     'fact': 800,     'bailing': 131,     'fast': 822,     'calm': 309,     'methodical': 1501,     'exfil': 782,     'procedure': 1839,     'honed': 1150,     'choreographed': 390,     'packing': 1678,     'machine': 1432,     'rapid': 1908,     'cuts': 566,     'backpacks': 123,     'thrown': 2534,     'house': 1163,     'cash': 338,     'pulled': 1860,     'lamp': 1318,     'base': 147,     'credit': 535,     'cards': 325,     'taped': 2470,     'counter': 514,     'bank': 139,     'mission': 1521,     'accomplished': 20,     'starting': 2338,     'glancing': 999,     'nice': 1599,     'easy': 730,     'cool': 503,     'gear': 975,     'makes': 1441,     'slow': 2231,     'pass': 1707,     'marketplace': 1458,     'stripped': 2384,     'thing': 2519,     'shit': 2143,     'missed': 1519,     'looking': 1406,     'earlier': 724,     'jamming': 1246,     'pocket': 1793,     'begins': 169,     'sweep': 2444,     'jogging': 1259,     'keeping': 1273,     'low': 1422,     'neighborhood': 1587,     'alleys': 53,     'random': 1905,     'worked': 2807,     'crowded': 550,     'tourists': 2566,     'sunbathers': 2419,     'favorite': 828,     'spot': 2298,     'talking': 2467,     'women': 2799,     'laughing': 1335,     'happy': 1085,     'burly': 281,     'jeep': 1252,     'comes': 447,     'roaring': 2003,     'spots': 2300,     'parks': 1702,     'end': 751,     'methodically': 1502,     'way': 2746,     'blue': 214,     'tent': 2503,     'towel': 2567,     'opposite': 1657,     'arrives': 92,     'looks': 1407,     'sees': 2089,     'yards': 2831,     'hard': 1086,     'bends': 178,     'gotta': 1018,     'tone': 2552,     'voice': 2702,     'grabs': 1020,     'quick': 1883,     'goodbye': 1015,     'friends': 946,     'hurry': 1177,     'uses': 2667,     'cover': 523,     'retreats': 1969,     'reach': 1911,     'drill': 698,     'tossed': 2559,     'pulls': 1862,     'blown': 212,     'ago': 39,     'fine': 859,     'careful': 328,     'pushed': 1871,     'got': 1017,     'lazy': 1338,     'following': 911,     'main': 1437,     'blocked': 204,     'huge': 1172,     'automatic': 113,     'pistol': 1768,     'travel': 2591,     'narrow': 1573,     'little': 1385,     'passageway': 1708,     'windshield': 2791,     'packed': 1677,     'liking': 1370,     'decide': 596,     'campground': 315,     'yesterday': 2838,     'wrong': 2827,     'rental': 1953,     'dollar': 674,     'sneakers': 2251,     'pull': 1859,     'thats': 2511,     'crazy': 533,     'real': 1921,     'throwing': 2533,     'reverse': 1974,     'hyundai': 1183,     'trapped': 2589,     'gridlock': 1036,     'freezing': 941,     'alley': 52,     'disappear': 645,     'backing': 121,     'came': 312,     'blowing': 211,     'horn': 1156,     'van': 2672,     'blocks': 206,     'leaning': 1344,     'theyve': 2517,     'wait': 2712,     'want': 2726,     'againi': 33,     'clear': 405,     'shack': 2117,     'safe': 2031,     'hang': 1078,     'awhile': 118,     'check': 374,     'wheres': 2773,     'left': 1353,     'places': 1774,     'afford': 30,     'possessed': 1809,     'familiar': 816,     'tactical': 2462,     'patience': 1720,     'doesnt': 672,     'sense': 2098,     'checks': 378,     'rearview': 1927,     'fuck': 951,     'taking': 2465,     'hell': 1117,     'forward': 934,     'blocking': 205,     'drive': 702,     'squeezing': 2313,     'switch': 2455,     'bridge': 259,     'scrambling': 2061,     'seat': 2078,     'squirts': 2316,     'wheel': 2771,     'adrenaline': 28,     'pumping': 1864,     'thirty': 2524,     'skidding': 2208,     'turn': 2624,     'clipping': 421,     'vehicle': 2677,     'mirror': 1517,     'shattering': 2130,     'speeding': 2285,     'scanning': 2050,     'veering': 2676,     'oncoming': 1645,     'bus': 285,     'jesus': 1256,     'yeah': 2832,     'ready': 1920,     'bearing': 157,     'smile': 2240,     'knowing': 1308,     'stopping': 2368,     'short': 2153,     'rise': 1995,     'bit': 188,     'view': 2692,     'half': 1067,     'headed': 1099,     'gonna': 1013,     'lose': 1412,     'kirills': 1292,     'mind': 1513,     'racing': 1890,     'duffle': 720,     'abandons': 3,     'preps': 1825,     'meet': 1484,     'hour': 1161,     'bail': 130,     'follow': 909,     'crosses': 546,     'warned': 2731,     'told': 2551,     'leave': 1350,     'thisit': 2526,     'wont': 2801,     'choice': 385,     'concrete': 471,     'slams': 2216,     'precise': 1819,     'sniper': 2252,     'rifle': 1985,     'hand': 1073,     'spare': 2276,     'clip': 420,     'roll': 2007,     'tell': 2496,     'scope': 2059,     'rumbling': 2019,     'target': 2472,     'drivers': 705,     'headrest': 1103,     'finger': 860,     'firing': 869,     'jerking': 1254,     'fender': 838,     'tearing': 2480,     'guard': 1045,     'rail': 1895,     'cement': 353,     'shards': 2126,     'air': 46,     'reaching': 1913,     'late': 1332,     'finally': 855,     'crashes': 531,     'flimsy': 892,     'guardrail': 1046,     'plummets': 1791,     'splashes': 2295,     'sink': 2194,     'sight': 2177,     'lowers': 1425,     'basically': 150,     'unnoticed': 2646,     'nook': 1611,     'silenced': 2183,     'people': 1737,     'rushing': 2026,     'woman': 2797,     'directly': 643,     'doorway': 685,     'indian': 1211,     'goa': 1006,     'drills': 699,     'sinks': 2195,     'inside': 1215,     'swallowed': 2439,     'scans': 2051,     'surface': 2429,     'river': 2000,     'mud': 1559,     'plumes': 1790,     'settles': 2111,     'tries': 2599,     'urge': 2661,     'killers': 1287,     'unbroken': 2634,     'woodwork': 2803,     'breaks': 253,     'moments': 1538,     'goes': 1010,     'held': 1116,     'jeeps': 1253,     'canvas': 317,     'gulp': 1054,     'frantic': 937,     'unclip': 2636,     'seatbelt': 2079,     'jammed': 1245,     'chucked': 392,     'drifting': 697,     'disappears': 647,     'red': 1935,     'halo': 1071,     'growing': 1043,     'bigger': 184,     'blood': 208,     'pauses': 1723,     'maries': 1455,     'blank': 196,     'dead': 588,     'realizing': 1924,     'pick': 1756,     'briefcase': 260,     'telephoto': 2492,     'lens': 1356,     'teddyradio': 2486,     'vo': 2700,     'seller': 2093,     'arrived': 91,     'berlin': 180,     'chinese': 383,     'restaurant': 1966,     'squarely': 2312,     'seen': 2088,     'enters': 760,     'stark': 2335,     'men': 1489,     'cross': 545,     'square': 2310,     'vic': 2686,     'steelass': 2354,     'intel': 1220,     'operator': 1655,     'carries': 332,     'large': 1330,     'samples': 2037,     'case': 337,     'mike': 1509,     'younger': 2843,     'exnavyseal': 786,     'hub': 1169,     'secure': 2083,     'anonymous': 68,     'space': 2274,     'city': 400,     'shades': 2118,     'drawn': 693,     'cabled': 301,     'stale': 2325,     'improvised': 1203,     'feel': 833,     'temporary': 2498,     'outpost': 1664,     'room': 2014,     'pamela': 1687,     'landy': 1322,     'senior': 2097,     'cia': 395,     'counterintelligence': 516,     'officer': 1633,     'hovering': 1165,     'communications': 455,     'console': 487,     'cronin': 543,     'pamelas': 1689,     'early': 725,     'forties': 932,     'stonecold': 2365,     'facade': 796,     'quarterbacking': 1878,     'operation': 1653,     'radio': 1893,     'kurt': 1312,     'kim': 1289,     'techs': 2484,     'headphones': 1101,     'ruggedized': 2017,     'laptops': 1329,     'comm': 450,     'spread': 2301,     'survey': 2434,     'teddy': 2485,     'military': 1511,     'rig': 1986,     'mobile': 1527,     'motion': 1548,     'shake': 2121,     'tired': 2549,     'coworkers': 526,     'parting': 1704,     'ways': 2747,     'walking': 2720,     'entering': 759,     'doors': 684,     'smiling': 2242,     'approached': 79,     'shift': 2139,     'security': 2085,     'hear': 1107,     'mikeradio': 1510,     'sleeve': 2222,     'earpiece': 726,     'escort': 767,     'command': 451,     'post': 1812,     'works': 2811,     'board': 219,     'teams': 2478,     'listen': 1381,     'final': 854,     'green': 1031,     'listening': 1382,     'word': 2804,     'raises': 1901,     'langley': 1326,     'patched': 1718,     'surprised': 2431,     'martin': 1461,     'mandarins': 1448,     'sit': 2201,     'round': 2016,     'marshall': 1460,     'deputy': 611,     'vicedirector': 2687,     'charge': 367,     'tense': 2501,     'donnie': 679,     'jack': 1241,     'weller': 2758,     'understand': 2638,     'using': 2668,     'allocation': 54,     'buy': 292,     'lot': 1415,     'money': 1540,     'pam': 1686,     'raw': 1910,     'unprocessed': 2649,     'kgb': 1280,     'files': 849,     'comparison': 459,     'shop': 2151,     'thief': 2518,     'mole': 1535,     'vetted': 2683,     'source': 2272,     'marty': 1462,     'does': 671,     'list': 1380,     'suspects': 2436,     'bargain': 144,     'times': 2544,     'price': 1829,     'mandarin': 1447,     'quality': 1876,     'issue': 1236,     'yes': 2837,     'total': 2562,     'agreement': 40,     'theyre': 2516,     'fakes': 810,     'expensive': 787,     'furious': 956,     'impatient': 1200,     'gentlemen': 980,     'ive': 1240,     'site': 2202,     'play': 1784,     'honestly': 1151,     'talk': 2466,     'mandarians': 1446,     'convinced': 500,     'opportunity': 1656,     'wash': 2736,     'game': 963,     'puts': 1874,     'nodding': 1606,     'croninradio': 544,     'repeat': 1957,     'passed': 1709,     'muster': 1567,     'elevator': 741,     'vicradio': 2688,     'waits': 2714,     'small': 2237,     'wiring': 2794,     'infrastructure': 1214,     'lit': 1384,     'glare': 1000,     'someones': 2264,     'maglight': 1436,     'gloved': 1005,     'racks': 1892,     'electrical': 739,     'risers': 1997,     'carefully': 329,     'explosive': 790,     'device': 625,     'pack': 1675,     'cigarettes': 397,     'riser': 1996,     'second': 2081,     'ones': 1646,     'special': 2282,     'taken': 2463,     'plastic': 1781,     'mounted': 1551,     'floor': 897,     'subpanel': 2406,     'hold': 1143,     'piece': 1759,     'tape': 2469,     'transferring': 2583,     'pressing': 1827,     'button': 290,     'close': 425,     'rises': 1998,     'bracing': 246,     'door': 681,     'ivan': 1238,     'russian': 2027,     'outside': 1665,     'darkened': 578,     'hallway': 1070,     'holding': 1144,     'flips': 893,     'million': 1512,     'dollars': 675,     'suite': 2416,     'offices': 1634,     'clean': 403,     'caspiexpetroleum': 340,     'cherbourg': 379,     'moscow': 1546,     'rome': 2009,     'tehran': 2490,     'curtains': 562,     'lights': 1368,     'sitting': 2204,     'counting': 517,     'poring': 1806,     'document': 667,     'dozens': 691,     'sheets': 2134,     'financial': 856,     'data': 582,     'incomprehensibly': 1208,     'cyrillic': 568,     'marked': 1456,     'judging': 1265,     'seals': 2074,     'clearance': 406,     'sign': 2178,     'offs': 1637,     'topsecret': 2557,     'tinny': 2546,     'pop': 1805,     'tune': 2620,     'started': 2337,     'playing': 1786,     'hall': 1069,     'said': 2033,     'doublecrossed': 687,     'ankle': 67,     'shut': 2170,     'freaked': 938,     'feet': 835,     'pushing': 1873,     'rushes': 2025,     'past': 1716,     'sample': 2036,     'spilling': 2290,     'snapph': 2248,     'suppressed': 2427,     'caliber': 305,     'shots': 2155,     'falls': 815,     'crashing': 532,     'bullets': 276,     'tear': 2479,     'hit': 1139,     'unscrewing': 2652,     'silencer': 2184,     'tucking': 2619,     'weapon': 2748,     'whats': 2770,     'climbing': 419,     'duffel': 719,     'stuffing': 2398,     'ivans': 1239,     'file': 847,     'backpack': 122,     'remove': 1952,     'single': 2193,     'sheet': 2133,     'paper': 1694,     'exactly': 778,     'stuff': 2397,     'tucked': 2618,     'page': 1682,     'blur': 216,     'slipping': 2229,     'underneath': 2637,     'tossing': 2561,     'fell': 836,     'struggle': 2392,     'detonation': 624,     'decives': 599,     'blows': 213,     'tidy': 2538,     'selfcontained': 2091,     'explosion': 789,     'flicker': 886,     'fail': 805,     'cast': 341,     'darkness': 579,     'sudden': 2411,     'urgent': 2662,     'power': 1818,     'went': 2759,     'whiff': 2774,     'dread': 694,     'location': 1392,     'voices': 2703,     'piling': 1762,     'confusion': 478,     'cascading': 336,     'ab': 1,     'drone': 708,     'barn': 146,     'stepping': 2357,     'carrying': 333,     'gretkov': 1033,     'professional': 1842,     'trim': 2601,     'polished': 1802,     'dominant': 677,     'complaining': 460,     'bring': 264,     'tosses': 2560,     'photocopy': 1752,     'doing': 673,     'stripping': 2385,     'shower': 2164,     'long': 1403,     'plane': 1779,     'dumping': 721,     'sheds': 2132,     'clothes': 431,     'workmen': 2810,     'cluster': 435,     'cable': 300,     'winches': 2786,     'raised': 1900,     'pours': 1816,     'crime': 539,     'police': 1801,     'workers': 2808,     'media': 1479,     'vans': 2673,     'clogging': 423,     'mood': 1543,     'black': 190,     'ashes': 96,     'need': 1582,     'working': 2809,     'stands': 2330,     'silent': 2186,     'staring': 2334,     'disaster': 649,     'heartbroken': 1112,     'footlocker': 917,     'stash': 2340,     'setting': 2108,     'aside': 97,     'work': 2806,     'things': 2520,     'needs': 1586,     'separate': 2103,     'pile': 1761,     'phony': 1750,     'student': 2394,     'ids': 1188,     'loose': 1411,     'photos': 1754,     'hairdos': 1066,     'vacuumpacked': 2671,     'bags': 129,     'shoes': 2147,     'gasolinestoked': 967,     'burning': 283,     'rocklined': 2006,     'pit': 1770,     'feeding': 832,     'papers': 1695,     'belongings': 174,     'crinkles': 540,     'reveal': 1973,     'photo': 1751,     'burn': 282,     'gassoaked': 969,     'holds': 1145,     'flames': 876,     'rules': 2018,     'say': 2045,     'drop': 709,     'sticks': 2360,     'hefting': 1115,     'strides': 2382,     'covered': 524,     'xeroxed': 2829,     'paperwork': 1696,     'showandtell': 2162,     'charges': 368,     'placed': 1773,     'lines': 1376,     'failed': 806,     'fingerprint': 861,     'didnt': 633,     ...}</pre></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mapping: 단어 &lt;-&gt; 벡터안의 index no. </span></span><br><span class="line">invert_index_vectorizer = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> vect.vocabulary_.items()}  <span class="comment"># value : key</span></span><br><span class="line">print(str(invert_index_vectorizer)[:<span class="number">100</span>]+<span class="string">'...'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>{1898: 'raining', 1366: 'light', 2387: 'strobes', 2763: 'wet', 1001: 'glass', 1978: 'rhythmic', 1673...</code></pre><br><h4 id="3-중요-단어-추출-top-3-tf-idf"><a class="markdownIt-Anchor" href="#3-중요-단어-추출-top-3-tf-idf"></a> (3) 중요 단어 추출 - Top 3 TF-IDF</h4><p>먼저 TF-IDF Matrix 첫번째 행 (첫 씬)의 Top 3 단어의 index을 출력해보겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argsort(tf_idf_vect[<span class="number">0</span>].toarray())[<span class="number">0</span>][<span class="number">-3</span>:]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([1984, 2387, 1978], dtype=int64)</code></pre><p>즉 단어 벡터중의 1984번(0.2902), 2387번(0.3109), 1978번째(0.3109) 단어가 첫 씬에서 제일 중요한 단어로 뽑혔습니다.</p>  <br><p>이제 전체 TF-IDF matrix 에 적용해볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argsort(tf_idf_vect.toarray())[:, <span class="number">-3</span>:]</span><br></pre></td></tr></tbody></table></figure><div style="height:300px; overflow:scroll"><pre>    array([[1984, 2387, 1978],           [1297, 1971, 1097],           [1693, 2221,  968],           [ 690,  299, 1482],           [2823, 1951, 1454],           [2218, 2815, 1454],           [2038,  737, 2418],           [ 852, 2761, 2570],           [2022,  156, 1352],           [2250, 2241, 1454],           [ 342,  321, 2188],           [ 614, 1557, 1534],           [ 535, 1884, 1614],           [2188,  139,   20],           [ 503,  730, 1458],           [2790, 2384,  724],           [ 169,  915, 2444],           [1905, 1259,   53],           [2566, 1335,  828],           [2300,  281, 1702],           [2503, 1502, 2567],           [ 794, 1454, 1018],           [ 698, 2559, 1252],           [1871,  237, 1454],           [ 204,  911, 2591],           [ 237,  596, 1454],           [  52,  941, 1036],           [ 211, 1156,  206],           [1193, 2712, 1454],           [  52, 1809, 2462],           [ 237, 1454,  702],           [2130,  237, 1454],           [1995, 1890,  321],           [1011,  259, 1454],           [1985, 2216, 1819],           [ 420, 2276, 1454],           [2019, 1103, 2059],           [2177,  353, 1252],           [1642, 1291, 2797],           [1454, 1012, 2439],           [2000, 2429, 2051],           [2111, 1559, 2661],           [1737, 1291, 2429],           [1116, 2079,   46],           [2634,  697,  392],           [1723, 1015, 1071],           [1443, 2700, 2486],           [ 332, 2354,  786],           [1165,  543,  975],           [1169, 2434, 1986],           [1509, 2486, 2335],           [1001, 2686, 1509],           [1289,  854,  219],           [2758, 1687, 1460],           [ 544, 1031,  854],           [2686,  741,  726],           [ 790,  625, 2794],           [ 955,  367, 2583],           [ 337, 1238, 2686],           [ 340, 1634, 2490],           [1238, 2248, 2686],           [ 624,  789, 2538],           [ 579,  341,  805],           [ 543,  270,  577],           [  68,  146,  708],           [1291, 1100, 1069],           [ 162, 1291, 1033],           [ 300, 2786, 1900],           [ 543, 1687, 2380],           [ 431,  782,  917],           [2006,  128, 1751],           [1687,  543, 2485],           [ 552, 1866,  235],           [2695,  762, 1102],           [ 265, 2641,   56],           [ 612, 1691,  441],           [1654,  692, 1363],           [2136,  243, 1688],           [   7, 2848,    6],           [2596, 1687,    4],           [2635, 1483,  841],           [ 653, 2650, 1882],           [1687,  481,    4],           [1715, 1198, 1633],           [2219, 2482,  169],           [1541, 2423,  538],           [ 322, 1633, 1198],           [1460,    4,  414],           [1307,  270, 1593],           [1407, 1687,  543],           [ 237,  491, 1593],           [ 792,  348, 2665],           [1055, 1747, 1593],           [2010, 1868, 1403],           [  80, 2415, 2611],           [2361, 1747, 1593],           [1687, 1594, 1688],           [1310, 1593,  143],           [2825, 1688, 1594],           [1460,    4, 1687],           [   4,  508, 2848],           [1745,  983, 1612],           [ 180,  491, 1690],           [1496,  132, 1600],           [1687, 1105, 1600],           [2849, 2211, 2378],           [ 173, 1687, 1600],           [1757, 2379,  652],           [2368, 2086, 1609],           [   4, 1312, 1572],           [1725, 1863, 1418],           [1873, 1274,  270],           [1291, 2718,  683],           [ 108, 1033, 2421],           [1104,  650,  382],           [ 491,  237, 1248],           [2768, 1561, 1247],           [ 939,  237, 1248],           [1561, 2008, 1721],           [ 883,  623, 1248],           [ 944, 1561, 1246],           [ 855, 1248, 1055],           [ 458, 1914, 1250],           [ 930,  966, 2550],           [2380, 2516, 2625],           [ 670,  228,   81],           [2660, 1780,  902],           [2371, 2553, 2515],           [1716,  706,   93],           [ 926,  780, 2848],           [1585,  659, 1118],           [1967, 1180,  208],           [1992,  268, 2741],           [ 237, 1521, 2377],           [2178, 2003, 1296],           [ 608, 2504,  970],           [2849,  237,  706],           [1655, 1049, 2700],           [1160, 1322, 2197],           [2375, 2223, 1776],           [2475,  725, 2381],           [ 703,  258,  481],           [2646, 2229,  467],           [ 237, 1059, 2067],           [1828, 1669, 2112],           [ 741, 1390,  783],           [1562, 2407,  543],           [ 295, 1269, 1906],           [2437,  771,  703],           [1291, 2245,  260],           [2368, 2008, 2437],           [ 891, 1400, 1960],           [  62, 2185, 1676],           [1465,  919,  241],           [2658, 1358, 1582],           [1091,  595, 1002],           [ 738, 1424, 1600],           [2726, 1600, 1687],           [2451, 2787,  273],           [   4,  680, 1687],           [ 755,  401,  155],           [1593,    4, 1413],           [ 607, 1600, 1817],           [2329, 1144,  254],           [  80, 1601, 2582],           [ 606, 1600, 2582],           [1434,  630, 1381],           [2551, 1350,  173],           [ 727, 2137, 2702],           [1931, 1600, 1307],           [1692,  372, 1893],           [1830,  237, 1600],           [ 504, 2344,  606],           [2408,  819,  763],           [2623, 1342, 1228],           [1033, 1319,  890],           [ 521,  481,  293],           [  10,  826, 2586],           [ 167,  237, 1600],           [2014, 1687, 2137],           [1700,  218, 2120],           [1225, 2750,  942],           [ 442, 2848,    4],           [ 981,  258, 1918],           [2323, 2355, 2848],           [ 221,    4, 2848],           [   1,    0, 1160],           [   8, 2014,  411],           [1984,  694, 1552],           [1775, 2133,  829],           [1441, 2053, 2205],           [  55,  275,  267],           [1647, 1306, 2014],           [2415, 2416,  878],           [2780,  650, 1171],           [2329,  673,  256],           [ 833, 1111, 1813],           [ 366,  543, 2485],           [1896, 2495, 1196],           [2604,  651, 1389],           [1344, 1272,  882],           [1558, 1517, 1590],           [1697, 1661, 2192],           [1444,  319, 2507],           [2615, 2318,  255],           [2746, 2477, 2441],           [1730, 2014, 1988],           [ 124,  133, 2435],           [1439, 1712, 1700],           [1282, 1137,  896],           [2788, 1548,  152],           [1659, 1340, 2015],           [1486, 2441, 2011],           [1555, 2767,  349],           [ 204,  762,  784],           [1894,  407, 2014],           [ 796,   88, 2077],           [2728, 2323, 2659],           [1291, 2011, 1110],           [ 577,  374, 2485],           [2300, 1830,   11],           [1160, 2485,    4],           [1147, 2777,  954],           [2284,  973,  823],           [ 116, 1548, 2480],           [2235,  334, 1721],           [2207, 1801, 2000],           [ 684, 1895, 2582],           [2149, 1321, 1354],           [1056,  580,   45],           [2424, 1346,  145],           [2159,  145, 2582],           [ 752,  498, 2246],           [2014, 1687,  543],           [1687, 1590,  543],           [1193, 1033,    4],           [1333, 2234, 2082],           [2230, 1291, 1033],           [ 238,  870,    4],           [ 543, 1687, 2485],           [1372,  493,   91],           [1396, 1970, 2341],           [1301,  318, 2236],           [1506,  791, 2577],           [1687, 2460, 2485],           [ 615,  230, 1800],           [2537,  474, 2696],           [1490, 1312,  543],           [ 357,  237, 1454],           [ 187, 2244, 2597],           [ 543, 1687,    4],           [ 741, 1999, 1201],           [1685, 1747, 1033],           [2588,  543, 1747],           [1305, 1033,    4],           [1938,  925,  924],           [1305,  543, 2485],           [1170, 1687,    4],           [ 653,  728, 1782],           [1266,   90,  817],           [2626,  703, 2475],           [1416, 1279, 2305],           [2711,  703, 2475],           [ 113, 1177, 1769],           [1225, 2166,  820],           [1272,  881,  297],           [2638,  880,  674],           [2129,  960, 1500],           [ 351,  903,  774],           [1731, 2240, 2446],           [ 642, 2137, 2475],           [2076, 1371,  369],           [  72,  703, 2475],           [1915, 2070, 2475],           [1546,  334, 2480],           [ 707, 1913, 1989],           [2215,  872, 2669],           [1999,  488, 1182],           [1291,  508, 2208],           [2367, 1361, 2286],           [ 918, 1670,  179],           [2215, 1713, 1670],           [1649, 2831, 1142],           [1768, 1268, 1361],           [ 434,  137, 2535],           [2081,  181, 2140],           [1867,  664, 1219],           [1344, 1056, 1546],           [1556,  197, 1123],           [1077, 1546,  709],           [2086, 2390,   89],           [1175,  160, 1176],           [1057, 1315, 1088],           [1110, 1260,  454],           [1546, 2022, 1457],           [1127, 1045, 2085],           [ 630, 2304,  533],           [1019,  280, 1453],           [1291, 2304, 2327],           [2469,  716,  233],           [ 549,  884,  844],           [2701,  493, 2449],           [ 237,  295,  296],           [ 754,  327, 1729],           [1683,  702,  466],           [1061, 1316,  714],           [ 334, 1987, 1801],           [2622, 1291,  295],           [ 237, 1407,   51],           [ 654, 1636, 2453],           [1155, 2569, 1737],           [1037, 1494, 2488],           [ 419,  887, 1271],           [1277,  676,  661],           [ 555,  237, 1232],           [ 445,  177, 1560],           [ 237,   51, 1687],           [1600, 1621, 2102],           [ 162, 1566, 1864],           [  46,  803,  646]], dtype=int64)</pre></div><br><p>이를 변수로 저장해서 원본 데이터셋에 추가하면 다음와 같습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top_3_words = np.argsort(tf_idf_vect.toarray())[:, <span class="number">-3</span>:]</span><br><span class="line">df[<span class="string">'important_word_index'</span>] = pd.Series(top_3_words.tolist())</span><br><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>page_no</th>      <th>scene_title</th>      <th>text</th>      <th>processed_text</th>      <th>important_word_index</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1         EXT. MERCEDES WINDSHIELD -- DUSK</td>      <td>1                It's raining...             ...</td>      <td>its raining light strobes across the wet glas...</td>      <td>[1984, 2387, 1978]</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>A1        INT. MERCEDES -- NIGHT</td>      <td>A1                On his knee -- a syringe an...</td>      <td>a on his knee a syringe and a gun the eyes of...</td>      <td>[1297, 1971, 1097]</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>2         INT. COTTAGE BEDROOM -- NIGHT</td>      <td>2                BOURNE'S EYES OPEN! -- panic...</td>      <td>bournes eyes open panicked gasping trying to ...</td>      <td>[1693, 2221, 968]</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>A2        INT. COTTAGE LIVING AREA/BATHROOM ...</td>      <td>A2                BOURNE moving for the medic...</td>      <td>a bourne moving for the medicine cabinet digs...</td>      <td>[690, 299, 1482]</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>3         INT./EXT. COTTAGE LIVING ROOM/VERA...</td>      <td>3                One minute later.  BOURNE mo...</td>      <td>one minute later bourne moves out onto the ve...</td>      <td>[2823, 1951, 1454]</td>    </tr>  </tbody></table></div> <br> <p>하지만 지금 중요한 단어의 index만 표시 되고, 과연 어떤 단어인지를 모릅니다. 그래서 우리는 방금 추출한 “벡터”-“단어” Mapping 결과를 이용해 index에 해당하는 단어들을 추출하여 데이터셋에 저장하겠습니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index -&gt; word 변환함수 만들기</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_word</span><span class="params">(x)</span>:</span></span><br><span class="line">    word_list = []</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> x:</span><br><span class="line">        word_list.append(invert_index_vectorizer[index])</span><br><span class="line">    <span class="keyword">return</span> word_list</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'important_words'</span>] = df[<span class="string">'important_word_index'</span>].apply(<span class="keyword">lambda</span> x: convert_to_word(x))</span><br><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>page_no</th>      <th>scene_title</th>      <th>text</th>      <th>processed_text</th>      <th>important_word_index</th>      <th>important_words</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1         EXT. MERCEDES WINDSHIELD -- DUSK</td>      <td>1                It's raining...             ...</td>      <td>its raining light strobes across the wet glas...</td>      <td>[1984, 2387, 1978]</td>      <td>[riding, strobes, rhythmic]</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>A1        INT. MERCEDES -- NIGHT</td>      <td>A1                On his knee -- a syringe an...</td>      <td>a on his knee a syringe and a gun the eyes of...</td>      <td>[1297, 1971, 1097]</td>      <td>[knee, returns, head]</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>2         INT. COTTAGE BEDROOM -- NIGHT</td>      <td>2                BOURNE'S EYES OPEN! -- panic...</td>      <td>bournes eyes open panicked gasping trying to ...</td>      <td>[1693, 2221, 968]</td>      <td>[panicked, sleeps, gasping]</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>A2        INT. COTTAGE LIVING AREA/BATHROOM ...</td>      <td>A2                BOURNE moving for the medic...</td>      <td>a bourne moving for the medicine cabinet digs...</td>      <td>[690, 299, 1482]</td>      <td>[downs, cabinet, medicine]</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>3         INT./EXT. COTTAGE LIVING ROOM/VERA...</td>      <td>3                One minute later.  BOURNE mo...</td>      <td>one minute later bourne moves out onto the ve...</td>      <td>[2823, 1951, 1454]</td>      <td>[write, remember, marie]</td>    </tr>  </tbody></table></div> <br> <p>이제 장면별 중요한 단어 Top 3가 모두 출력됐습니다.</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      1. 단어별 빈도 분석 -- Word Cloud 산출; 2. 장면별 중요 단어 시각화 -- TF-IDF 중요도 분석
    
    </summary>
    
    
      <category term="【Exercise】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Text Mining" scheme="https://hyemin-kim.github.io/tags/Text-Mining/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; 텍스트 마이닝 (Text Mining) 소개</title>
    <link href="https://hyemin-kim.github.io/2020/08/19/S-Python-TextMining1/"/>
    <id>https://hyemin-kim.github.io/2020/08/19/S-Python-TextMining1/</id>
    <published>2020-08-19T11:10:26.000Z</published>
    <updated>2020-08-20T13:13:27.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="텍스트-마이닝-text-mining-소개"><a class="markdownIt-Anchor" href="#텍스트-마이닝-text-mining-소개"></a> 텍스트 마이닝 (Text Mining) 소개</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%88%EC%9D%B4%EB%8B%9D%EC%9D%98-%EA%B0%9C%EB%85%90"><strong>1. 텍스트 마이닝의 개념</strong></a></li><li><a href="#2-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%88%EC%9D%B4%EB%8B%9D-%EC%9D%91%EC%9A%A9%EB%B6%84%EC%95%BC"><strong>2. 텍스트 마이닝 응용분야</strong></a></li><li><a href="#3-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95"><strong>3. 텍스트 데이터의 처리 방법</strong></a><ul><li><a href="#3-1-bow-bag-of-words">3-1. BoW (Bag of Words)</a></li><li><a href="#3-2-%EB%AC%B8%EC%84%9C-%EB%8B%A8%EC%96%B4-%ED%96%89%EB%A0%AC-document-term-matrix-dtm">3-2. 문서 단어 행렬 (Document-Term Matrix, DTM)</a></li><li><a href="#3-3-%EB%8B%A8%EC%96%B4%EC%9D%98-%EC%A4%91%EC%9A%94%EB%8F%84%EB%A5%BC-%EA%B3%84%EC%82%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-tf-idf">3-3. 단어의 중요도를 계산하는 방법 (TF-IDF)</a></li></ul></li></ul><p></p><br><h2 id="1-텍스트-마이닝의-개념"><a class="markdownIt-Anchor" href="#1-텍스트-마이닝의-개념"></a> <strong>1. 텍스트 마이닝의 개념</strong></h2><p>텍스트 마이닝은 비정형 및 반정형 텍스트 데이터에 대하여 자연어 처리(Natural Langrage Precessing) 기술과 문서 처리 기술을 적용하여 가치와 의미가 있는 정보를 찾아내는(Mining) 기술입니다.</p>  <br><h2 id="2-텍스트-마이닝-응용분야"><a class="markdownIt-Anchor" href="#2-텍스트-마이닝-응용분야"></a> <strong>2. 텍스트 마이닝 응용분야</strong></h2><p><strong>단어의 빈도수 기반</strong></p><ul><li>Word Cloud: 텍스트 데이터에서의 단어 등장 빈도수 시각화</li><li>문서 분류: 감성 분류</li><li>Topic Modeling: 텍스트 데이터를 분석하여 여러 Topic으로 Clustering 하는 직업</li></ul><p><strong>단어의 의미 기반</strong></p><ul><li><p>Semantic Analysis: 사람처럼 자연어를 이해하기</p><br></li></ul><h2 id="3-텍스트-데이터의-처리-방법"><a class="markdownIt-Anchor" href="#3-텍스트-데이터의-처리-방법"></a> <strong>3. 텍스트 데이터의 처리 방법</strong></h2><h3 id="3-1-bow-bag-of-words"><a class="markdownIt-Anchor" href="#3-1-bow-bag-of-words"></a> 3-1. BoW (Bag of Words)</h3><p><strong>단어 가방(Bag of Words) 모델</strong>은 문장의 문법 및 단어 순서를 무시하고 텍스트 문서를 "단어"로 변환한 후 다양한 측정 값을 계산할 수 있도록 "가방"형식으로 저장해놓는 겁니다.</p><p>단어 가방 모델에서 계산 된 가장 일반적인 유형의 특성 또는 기능은 <strong>용어 빈도</strong>, 즉 용어가 텍스트에 나타나는 횟수입니다.</p>  <br><p>《기생충》중의 한 대사로 예를 들어 볼게요.</p><img src="https://s1.ax1x.com/2020/08/19/dloE0P.png" width="60%," height="60%"><p>이 문장에서 “그”, “을”, "듯"와 같이 실질적인 의미가 없는 "불용어"를 제외하고 의미 있는 “형태소” 단어와 해당 형태소의 등장 횟수을 추출합니다.</p><p>그럼 다음과 같은 표로 요약할 수 있겠습니다.</p><img src="https://s1.ax1x.com/2020/08/19/dl7CqI.png" width="60%," height="60%"><p>이것이 바로 "Bag of Words 모델"입니다.</p>  <br><h3 id="3-2-문서-단어-행렬-document-term-matrix-dtm"><a class="markdownIt-Anchor" href="#3-2-문서-단어-행렬-document-term-matrix-dtm"></a> 3-2. 문서 단어 행렬 (Document-Term Matrix, DTM)</h3><p>위에 설명드린 Bag of Words는 한 문장에 대해 적용하는 것이고, 문장이 여러 개가 있을 때는 (DataFrame 형태) <strong>문서 단어 행렬 (Document-Term Matrix)</strong> 로 표현됩니다.</p><p>똑같이 《기생충》중의 대사들로 예를 들어 볼게요.</p><img src="https://s1.ax1x.com/2020/08/19/d1SKaQ.png" width="70%," height="70%"><img src="https://s1.ax1x.com/2020/08/19/d1pLX6.png" width="90%," height="90%"><p>이처럼 여러 문장의 경우에 "문서 단어 행렬"은 위와 같이 표현 됩니다.</p>  <br><h3 id="3-3-단어의-중요도를-계산하는-방법-tf-idf"><a class="markdownIt-Anchor" href="#3-3-단어의-중요도를-계산하는-방법-tf-idf"></a> 3-3. 단어의 중요도를 계산하는 방법 (TF-IDF)</h3><p>문서 단어 행렬은 그저 단어의 등장 횟수를 단순히 세는 겁니다. 각 문장에서 어떤 단어가 중요한지 알 수 없습니다.<br>이를 알아내기 위해 우리는 “TF-IDF (Term Frequency-Inverse Document Frequency)” 라는 지표를 사용합니다.</p>  <br><ul><li><p><strong>TF (Term Frequency):</strong> 특정 문서에서 특정 단어의 등장 횟수</p></li><li><p><strong>DF (Document Frequency):</strong> 특정 단어가 등장한 문서의 수</p></li><li><p><strong>IDF (Inverse Document Frequency):</strong> DF와 반비례 값을 가지는 수식<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>d</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mrow><mn>1</mn><mo>+</mo><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IDF(d,t) = \ln ( \frac{n}{1+DF(t)} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.27em;vertical-align:-0.52em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p></li><li><p><strong>TF-IDF (Term Frequency-Inverse Document Frequency):</strong> TF와 IDF를 곱한 값</p><br></li></ul><p><strong>TF-IDF로 특정 문서 안의 특정 단어의 중요도를 나타나는 원리는:</strong></p><p>특정 문서에서는 많이 등장했으면서 다른 문서에서 잘 등장하지 않은 단어가 결국 이 문서에서 가장 중요한 단어가 될것이다라는 가설입니다.</p>  <br><p><strong>[예]</strong> 문서1에서 "아들"와 “계획” 이 두 단어의 TF-IDF를 한번 계산해봅시다.</p><img src="https://s1.ax1x.com/2020/08/19/d1u2eH.png" width="90%," height="90%"><ul><li><strong>Step 1. TF</strong><br>A: 1<br>B: 1</li><li><strong>Step 2. DF</strong><br>A: 1<br>B: 3</li><li><strong>Step 3. IDF</strong><br>A: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mn>4</mn><mrow><mn>1</mn><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn><mo>≈</mo><mn>0.6931</mn></mrow><annotation encoding="application/x-tex">\ln( \frac{4}{1+1} ) = \ln 2 \approx 0.6931</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">9</span><span class="mord">3</span><span class="mord">1</span></span></span></span><br>B: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mn>4</mn><mrow><mn>1</mn><mo>+</mo><mn>3</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\ln( \frac{4}{1+3} ) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><strong>Step 4. TF-IDF</strong><br>A: 1 * 0.6931 = 0.6931<br>B: 1 * 0 = 0</li></ul><br>  <p><strong>혜석:</strong></p><p>"계획"이라는 단어가 《기생충》의 문장들에서 너무 많이 등장해서 문서1에서 특별히 중요한 단어라고 볼 수 없다.</p><p>하지만 "아들"이라는 단어가 다른 문장에서 한번도 나타나지 않았기 때문에 문장1에서는 매우 중요하다고 볼 수 있다</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      텍스트 마이닝의 개념 &amp; 응용분야; 텍스트 데이터의 처리 방법
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Text Mining" scheme="https://hyemin-kim.github.io/tags/Text-Mining/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 Python &gt;&gt; Classification -- 포켓몬 데이터셋</title>
    <link href="https://hyemin-kim.github.io/2020/08/13/E-Python-Classification-1/"/>
    <id>https://hyemin-kim.github.io/2020/08/13/E-Python-Classification-1/</id>
    <published>2020-08-13T14:00:08.000Z</published>
    <updated>2020-08-25T05:17:05.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="classification-실습-포켓몬-데이터셋"><a class="markdownIt-Anchor" href="#classification-실습-포켓몬-데이터셋"></a> 【Classification 실습】 – 포켓몬 데이터셋</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%AA%A9%ED%91%9C"><strong>0. 목표</strong></a></li><li><a href="#1-library-data-import"><strong>1. Library &amp; Data Import</strong></a></li><li><a href="#2-eda-exploratoty-data-analysis-%ED%83%90%EC%83%89%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D"><strong>2. EDA (Exploratoty Data Analysis: 탐색적 데이터 분석)</strong></a><ul><li><a href="#2-1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%ED%83%90%EC%83%89">2-1. 데이터셋 기본 정보 탐색</a></li><li><a href="#2-2-%EB%B3%80%EC%88%98feature-%ED%8A%B9%EC%A7%95-%ED%83%90%EC%83%89">2-2. 변수(Feature) 특징 탐색</a><ul><li><a href="#1-%EA%B0%81-%EB%8A%A5%EB%A0%A5%EC%B9%98-%EB%B6%84%ED%8F%AC">(1) 각 능력치 분포</a></li><li><a href="#2-%EC%B4%9D-%EB%8A%A5%EB%A0%A5%EC%B9%98-total-%EB%B6%84%ED%8F%AC">(2) 총 능력치 (Total) 분포</a></li><li><a href="#3-%ED%8F%AC%EC%BC%93%EB%AA%AC-%ED%83%80%EC%9E%85-type-1-type-2-%EB%B6%84%ED%8F%AC">(3) 포켓몬 타입 (Type 1 &amp; Type 2) 분포</a></li><li><a href="#4-%ED%8F%AC%EC%BC%93%EB%AA%AC-%EC%84%B8%EB%8C%80generation-%EB%B6%84%ED%8F%AC">(4) 포켓몬 세대(Generation) 분포</a></li></ul></li></ul></li><li><a href="#3-%EC%A7%80%EB%8F%84-%ED%95%99%EC%8A%B5-%EA%B8%B0%EB%B0%98-%EB%B6%84%EB%A5%98-%EB%B6%84%EC%84%9D-logistic-regression"><strong>3. 지도 학습 기반 분류 분석 – Logistic Regression</strong></a><ul><li><a href="#3-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC">3-1. 데이터 전처리</a><ul><li><a href="#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD">(1) 데이터 타입 변경</a></li><li><a href="#2-one-hot-encoding">(2) One-Hot Encoding</a></li><li><a href="#3-feature-%ED%8F%AC%EC%A4%80%ED%99%94">(3) Feature 포준화</a></li><li><a href="#4-training-set-test-set-%EB%82%98%EB%88%84%EA%B8%B0">(4) Training set / Test set 나누기</a></li></ul></li><li><a href="#3-2-logistic-regression-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5">3-2. Logistic Regression 모델 학습</a><ul><li><a href="#1-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5">(1) 모델 학습</a></li><li><a href="#2-%EB%AA%A8%EB%8D%B8-%ED%8F%89%EA%B0%80">(2) 모델 평가</a></li></ul></li><li><a href="#3-3-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B6%88%EA%B7%A0%ED%98%95-%EC%A1%B0%EC%A0%95">3-3. 클래스 불균형 조정</a></li></ul></li><li><a href="#4-%EB%B9%84%EC%A7%80%EB%8F%84-%ED%95%99%EC%8A%B5-%EA%B8%B0%EB%B0%98-%EA%B5%B0%EC%A7%91-%EB%B6%84%EB%A5%98-%EB%B6%84%EC%84%9D-k-means-clustering"><strong>4. 비지도 학습 기반 군집 분류 분석 – K-Means Clustering</strong></a><ul><li><a href="#4-1-k-means-%EA%B5%B0%EC%A7%91-%EB%B6%84%EB%A5%98">4-1. K-Means 군집 분류</a><ul><li><a href="#1-2%EC%B0%A8%EC%9B%90-%EA%B5%B0%EC%A7%91-%EB%B6%84%EC%84%9D">(1) 2차원 군집 분석</a></li><li><a href="#2-%EB%8B%A4%EC%B0%A8%EC%9B%90-%EA%B5%B0%EC%A7%91-%EB%B6%84%EC%84%9D">(2) 다차원 군집 분석</a></li></ul></li></ul></li></ul><p></p><br><h2 id="0-목표"><a class="markdownIt-Anchor" href="#0-목표"></a> <strong>0. 목표</strong></h2><p>포켓몬 데이터셋을 이용해 분류 분석을 진행하겠습니다.</p><ul><li><strong>지도 학습 (Logistic Regression):</strong> “전설의 포켓몬” 여부 예측 – “Legendary” = 0/1</li><li><strong>비지도 학습 (K-Means Clustering):</strong> 포켓몬 분류</li></ul><br>  <h2 id="1-library-data-import"><a class="markdownIt-Anchor" href="#1-library-data-import"></a> <strong>1. Library &amp; Data Import</strong></h2><p><strong>&gt;&gt; 사용할 Library</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">'Malgun Gothic'</span>  <span class="comment"># 한글 깨짐 방지</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">10</span>, <span class="number">8</span>)  <span class="comment"># figsize 설정</span></span><br></pre></td></tr></tbody></table></figure><br>  <p><strong>&gt;&gt; 사용할 데이터셋 - Pokemon Dataset</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/yoonkt200/FastCampusDataset/master/Pokemon.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>#</th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>VenusaurMega Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>False</td>    </tr>  </tbody></table></div><br><p><strong>&gt;&gt; Feature Description</strong></p><ul><li>Name: 포켓몬 이름</li><li>Type 1: 포켓몬 타입 1</li><li>Type 2: 포켓몬 타입 2</li><li>Total: 포켓몬 총 능력치 (Sum of ‘HP’, ‘Attack’, ‘Defense’, ‘Sp.Atk’, ‘Sp.Def’ and ‘Speed’)</li><li>HP: 포켓몬 HP 능력치</li><li>Attack: 포켓몬 Attack 능력치</li><li>Defense: 포켓몬 Defense 능력치</li><li>Sp.Atk: 포켓몬 Sp.Atk 능력치</li><li>Sp.Def: 포켓몬 Sp.Def 능력치</li><li>Speed: 포켓몬 Speed 능력치</li><li>Generation: 포켓몬 세대</li><li>Legendary: 전설의 포켓몬 여부</li></ul><p><br>  <br></p><h2 id="2-eda-exploratoty-data-analysis-탐색적-데이터-분석"><a class="markdownIt-Anchor" href="#2-eda-exploratoty-data-analysis-탐색적-데이터-분석"></a> <strong>2. EDA (Exploratoty Data Analysis: 탐색적 데이터 분석)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그래프 배경 설정</span></span><br><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-데이터셋-기본-정보-탐색"><a class="markdownIt-Anchor" href="#2-1-데이터셋-기본-정보-탐색"></a> 2-1. 데이터셋 기본 정보 탐색</h3><p><strong>&gt;&gt; 전체 데이터셋</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demension</span></span><br><span class="line">df.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(800, 13)</code></pre>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># information (data type)</span></span><br><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 800 entries, 0 to 799Data columns (total 13 columns): #   Column      Non-Null Count  Dtype ---  ------      --------------  -----  0   #           800 non-null    int64  1   Name        800 non-null    object 2   Type 1      800 non-null    object 3   Type 2      414 non-null    object 4   Total       800 non-null    int64  5   HP          800 non-null    int64  6   Attack      800 non-null    int64  7   Defense     800 non-null    int64  8   Sp. Atk     800 non-null    int64  9   Sp. Def     800 non-null    int64  10  Speed       800 non-null    int64  11  Generation  800 non-null    int64  12  Legendary   800 non-null    bool  dtypes: bool(1), int64(9), object(3)memory usage: 75.9+ KB</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결측치</span></span><br><span class="line">df.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>#               0Name            0Type 1          0Type 2        386Total           0HP              0Attack          0Defense         0Sp. Atk         0Sp. Def         0Speed           0Generation      0Legendary       0dtype: int64</code></pre>  <br><p><strong>&gt;&gt; 개별 Feature 탐색</strong></p><ul><li><strong>분류할 목표 Feature</strong>: “Legendary” (전설의 포켓몬 여부)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class 별 데이터 수 확인</span></span><br><span class="line">df[<span class="string">'Legendary'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>False    735True      65Name: Legendary, dtype: int64</code></pre> <br> <ul><li>“Generation” (포켓몬 세대)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 세대별 데이터 수 확인</span></span><br><span class="line">df[<span class="string">'Generation'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>1    1665    1653    1604    1212    1066     82Name: Generation, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 세대 순서로 데이터 갯수 시각화</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">df[<span class="string">'Generation'</span>].value_counts().sort_index().plot()</span><br><span class="line">plt.title(<span class="string">"'Generation 별 데이터 갯수'"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_34_0.png" alt="output_34_0"></p><br><ul><li>“Type 1” &amp; “Type 2” (포켓몬 타입)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unique value of "Type 1"</span></span><br><span class="line">df[<span class="string">'Type 1'</span>].unique()</span><br></pre></td></tr></tbody></table></figure><pre><code>array(['Grass', 'Fire', 'Water', 'Bug', 'Normal', 'Poison', 'Electric',       'Ground', 'Fairy', 'Fighting', 'Psychic', 'Rock', 'Ghost', 'Ice',       'Dragon', 'Dark', 'Steel', 'Flying'], dtype=object)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># No. of unique value for "Type 1"</span></span><br><span class="line">len(df[<span class="string">'Type 1'</span>].unique())</span><br></pre></td></tr></tbody></table></figure><pre><code>18</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unique value of "Type 2"  (exclude "NaN")</span></span><br><span class="line">df[df[<span class="string">'Type 2'</span>].notnull()][<span class="string">'Type 2'</span>].unique()</span><br></pre></td></tr></tbody></table></figure><pre><code>array(['Poison', 'Flying', 'Dragon', 'Ground', 'Fairy', 'Grass',       'Fighting', 'Psychic', 'Steel', 'Ice', 'Rock', 'Dark', 'Water',       'Electric', 'Fire', 'Ghost', 'Bug', 'Normal'], dtype=object)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># No. of unique value for "Type 2"</span></span><br><span class="line">len(df[df[<span class="string">'Type 2'</span>].notnull()][<span class="string">'Type 2'</span>].unique())</span><br></pre></td></tr></tbody></table></figure><pre><code>18</code></pre>  <br><h3 id="2-2-변수feature-특징-탐색"><a class="markdownIt-Anchor" href="#2-2-변수feature-특징-탐색"></a> 2-2. 변수(Feature) 특징 탐색</h3><p>각 변수(Feature)의 분포를 관찰함으로써, 변수들의 특징을 알아보도록 하겠습니다.</p><p>특히, 저희가 분류할 목표 Feature가 "Legendary"이므로, 각 변수의 분포를 탐색 시:</p><ol><li>각 항목(feature)에서 <strong>전체 데이터의 분포</strong> 뿐만 아닌</li><li><strong>"Legendary"변수 class 별의 데이터 분포</strong>도 함께 살펴볼게요.</li></ol>   <br> <p><strong>GUIDE</strong></p><p>【전체 데이터 탐색】  <strong>&amp;</strong>  【“Legendary” class별 탐색】</p><ol><li>각 능력치 분포</li><li>총 능력치 (Toal) 분포</li><li>포켓몬 타입 (Type 1 &amp; Type 2) 분포</li><li>포켓몬 세대 (Generation) 분포</li></ol> <br> <h4 id="1-각-능력치-분포"><a class="markdownIt-Anchor" href="#1-각-능력치-분포"></a> (1) 각 능력치 분포</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 포켓몬의 각 능력치 분포</span></span><br><span class="line"></span><br><span class="line">stats = [<span class="string">'HP'</span>, <span class="string">'Attack'</span>, <span class="string">'Defense'</span>, <span class="string">'Sp. Atk'</span>, <span class="string">'Sp. Def'</span>, <span class="string">'Speed'</span>] <span class="comment"># 능력치 변수 집합</span></span><br><span class="line">sns.boxplot(data = df[stats])</span><br><span class="line">plt.title(<span class="string">'각 능력치 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_48_0.png" alt="output_48_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "전설의 포켓몬" 여부에 따른 능력치 분포</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.boxplot(data = df[df[<span class="string">'Legendary'</span>]==<span class="number">1</span>][stats])</span><br><span class="line">plt.title(<span class="string">'Legendary = True'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.boxplot(data = df[df[<span class="string">'Legendary'</span>]==<span class="number">0</span>][stats])</span><br><span class="line">plt.title(<span class="string">'Legendary = False'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_50_0.png" alt="output_50_0"></p> <br><p>"전설의 포켓몬"은 전체적으로 더 높은 능력치를 보유하고 있으며, Attack와 Sp.Atk가 특히 높은 것으로 보입니다.</p> <br> <h4 id="2-총-능력치-total-분포"><a class="markdownIt-Anchor" href="#2-총-능력치-total-분포"></a> (2) 총 능력치 (Total) 분포</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 포켓몬의 총 능력치 분포</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'Total'</span>].hist(bins=<span class="number">50</span>)</span><br><span class="line">plt.title(<span class="string">'총 능력치 (Total) 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_54_0.png" alt="output_54_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 세대별 총 능력치 분포</span></span><br><span class="line">sns.boxplot(data = df, x = <span class="string">"Generation"</span>, y=<span class="string">"Total"</span>)</span><br><span class="line">plt.title(<span class="string">"세대별 총 능력치 분포"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_56_0.png" alt="output_56_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각 세대 "전설의 포켓몬" 여부에 따른 총 능력치 분포</span></span><br><span class="line">sns.boxplot(data = df, x = <span class="string">"Generation"</span>, y=<span class="string">"Total"</span>, hue=<span class="string">"Legendary"</span>)</span><br><span class="line">plt.title(<span class="string">"각 세대 '전설의 포켓몬' 여부에 따른 총 능력치 분포"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_57_0.png" alt="output_57_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 타입(Type 1)별 총 능력치 분포</span></span><br><span class="line">sns.boxplot(data = df, x = <span class="string">'Type 1'</span>, y = <span class="string">'Total'</span>)</span><br><span class="line">plt.title(<span class="string">"타입(Type 1)별 총 능력치 분포"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_59_0.png" alt="output_59_0"></p><br><h4 id="3-포켓몬-타입-type-1-type-2-분포"><a class="markdownIt-Anchor" href="#3-포켓몬-타입-type-1-type-2-분포"></a> (3) 포켓몬 타입 (Type 1 &amp; Type 2) 분포</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 포켓몬 -- Type 1 분포</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'Type 1'</span>].value_counts(sort=<span class="literal">False</span>).sort_index().plot.barh()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2e92fab51c8&gt;</code></pre><p><img src="/images/E-Python-Classification-1/output_62_1.png" alt="output_62_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "전설의 포켓몬" 여부에 따른 Type 1 분포</span></span><br><span class="line"></span><br><span class="line">T1_Total = pd.DataFrame(df[<span class="string">'Type 1'</span>].value_counts().sort_index())</span><br><span class="line">T1_NotLeg = pd.DataFrame(df[df[<span class="string">'Legendary'</span>]==<span class="number">0</span>].groupby(<span class="string">'Type 1'</span>).size())</span><br><span class="line">T1_count = pd.concat([T1_Total, T1_NotLeg], axis = <span class="number">1</span>)</span><br><span class="line">T1_count.columns = [<span class="string">'Total'</span>, <span class="string">'Not Legend'</span>]</span><br><span class="line">T1_count[<span class="string">'Legend'</span>] = T1_count[<span class="string">'Total'</span>] - T1_count[<span class="string">'Not Legend'</span>]</span><br><span class="line">T1_count</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>Not Legend</th>      <th>Legend</th>    </tr>    <tr>      <th>Type 1</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Bug</th>      <td>69</td>      <td>69</td>      <td>0</td>    </tr>    <tr>      <th>Dark</th>      <td>31</td>      <td>29</td>      <td>2</td>    </tr>    <tr>      <th>Dragon</th>      <td>32</td>      <td>20</td>      <td>12</td>    </tr>    <tr>      <th>Electric</th>      <td>44</td>      <td>40</td>      <td>4</td>    </tr>    <tr>      <th>Fairy</th>      <td>17</td>      <td>16</td>      <td>1</td>    </tr>    <tr>      <th>Fighting</th>      <td>27</td>      <td>27</td>      <td>0</td>    </tr>    <tr>      <th>Fire</th>      <td>52</td>      <td>47</td>      <td>5</td>    </tr>    <tr>      <th>Flying</th>      <td>4</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>Ghost</th>      <td>32</td>      <td>30</td>      <td>2</td>    </tr>    <tr>      <th>Grass</th>      <td>70</td>      <td>67</td>      <td>3</td>    </tr>    <tr>      <th>Ground</th>      <td>32</td>      <td>28</td>      <td>4</td>    </tr>    <tr>      <th>Ice</th>      <td>24</td>      <td>22</td>      <td>2</td>    </tr>    <tr>      <th>Normal</th>      <td>98</td>      <td>96</td>      <td>2</td>    </tr>    <tr>      <th>Poison</th>      <td>28</td>      <td>28</td>      <td>0</td>    </tr>    <tr>      <th>Psychic</th>      <td>57</td>      <td>43</td>      <td>14</td>    </tr>    <tr>      <th>Rock</th>      <td>44</td>      <td>40</td>      <td>4</td>    </tr>    <tr>      <th>Steel</th>      <td>27</td>      <td>23</td>      <td>4</td>    </tr>    <tr>      <th>Water</th>      <td>112</td>      <td>108</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T1_count[[<span class="string">'Not Legend'</span>, <span class="string">'Legend'</span>]].plot.barh(width=<span class="number">0.7</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2e92ff18b88&gt;</code></pre><p><img src="/images/E-Python-Classification-1/output_65_1.png" alt="output_65_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 포켓몬 -- Type 2 분포</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'Type 2'</span>].value_counts(sort=<span class="literal">False</span>).sort_index().plot.barh()</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'"전설의 포켓몬" 여부에 따른 Type 1 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_67_0.png" alt="output_67_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "전설의 포켓몬" 여부에 따른 Type 2 분포</span></span><br><span class="line"></span><br><span class="line">T2_Total = pd.DataFrame(df[<span class="string">'Type 2'</span>].value_counts().sort_index())</span><br><span class="line">T2_NotLeg = pd.DataFrame(df[df[<span class="string">'Legendary'</span>]==<span class="number">0</span>].groupby(<span class="string">'Type 2'</span>).size())</span><br><span class="line">T2_count = pd.concat([T2_Total, T2_NotLeg], axis = <span class="number">1</span>)</span><br><span class="line">T2_count.columns = [<span class="string">'Total'</span>, <span class="string">'Not Legend'</span>]</span><br><span class="line">T2_count[<span class="string">'Legend'</span>] = T2_count[<span class="string">'Total'</span>] - T2_count[<span class="string">'Not Legend'</span>]</span><br><span class="line">T2_count</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>Not Legend</th>      <th>Legend</th>    </tr>    <tr>      <th>Type 2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Bug</th>      <td>3</td>      <td>3</td>      <td>0</td>    </tr>    <tr>      <th>Dark</th>      <td>20</td>      <td>19</td>      <td>1</td>    </tr>    <tr>      <th>Dragon</th>      <td>18</td>      <td>14</td>      <td>4</td>    </tr>    <tr>      <th>Electric</th>      <td>6</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>Fairy</th>      <td>23</td>      <td>21</td>      <td>2</td>    </tr>    <tr>      <th>Fighting</th>      <td>26</td>      <td>22</td>      <td>4</td>    </tr>    <tr>      <th>Fire</th>      <td>12</td>      <td>9</td>      <td>3</td>    </tr>    <tr>      <th>Flying</th>      <td>97</td>      <td>84</td>      <td>13</td>    </tr>    <tr>      <th>Ghost</th>      <td>14</td>      <td>13</td>      <td>1</td>    </tr>    <tr>      <th>Grass</th>      <td>25</td>      <td>25</td>      <td>0</td>    </tr>    <tr>      <th>Ground</th>      <td>35</td>      <td>34</td>      <td>1</td>    </tr>    <tr>      <th>Ice</th>      <td>14</td>      <td>11</td>      <td>3</td>    </tr>    <tr>      <th>Normal</th>      <td>4</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>Poison</th>      <td>34</td>      <td>34</td>      <td>0</td>    </tr>    <tr>      <th>Psychic</th>      <td>33</td>      <td>28</td>      <td>5</td>    </tr>    <tr>      <th>Rock</th>      <td>14</td>      <td>14</td>      <td>0</td>    </tr>    <tr>      <th>Steel</th>      <td>22</td>      <td>21</td>      <td>1</td>    </tr>    <tr>      <th>Water</th>      <td>14</td>      <td>13</td>      <td>1</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T2_count[[<span class="string">'Not Legend'</span>, <span class="string">'Legend'</span>]].plot.barh(width=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'"전설의 포켓몬" 여부에 따른 Type 2 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_70_0.png" alt="output_70_0"></p><br><h4 id="4-포켓몬-세대generation-분포"><a class="markdownIt-Anchor" href="#4-포켓몬-세대generation-분포"></a> (4) 포켓몬 세대(Generation) 분포</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 포켓몬 -- 세대 분포</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'Generation'</span>].value_counts().sort_index().plot.bar()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2e930887d08&gt;</code></pre><p><img src="/images/E-Python-Classification-1/output_73_1.png" alt="output_73_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "전설의 포켓몬" 여부에 따른 세대 분포</span></span><br><span class="line"></span><br><span class="line">gene_Leg = pd.DataFrame(df[df[<span class="string">'Legendary'</span>]==<span class="number">1</span>].groupby(<span class="string">'Generation'</span>).size())</span><br><span class="line">gene_NotLeg = pd.DataFrame(df[df[<span class="string">'Legendary'</span>]==<span class="number">0</span>].groupby(<span class="string">'Generation'</span>).size())</span><br><span class="line">gene_count = pd.concat([gene_Leg, gene_NotLeg], axis=<span class="number">1</span>)</span><br><span class="line">gene_count.columns = [<span class="string">'Legend'</span>, <span class="string">'Not Legend'</span>]</span><br><span class="line">gene_count</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Legend</th>      <th>Not Legend</th>    </tr>    <tr>      <th>Generation</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>6</td>      <td>160</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>101</td>    </tr>    <tr>      <th>3</th>      <td>18</td>      <td>142</td>    </tr>    <tr>      <th>4</th>      <td>13</td>      <td>108</td>    </tr>    <tr>      <th>5</th>      <td>15</td>      <td>150</td>    </tr>    <tr>      <th>6</th>      <td>8</td>      <td>74</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gene_count.plot.bar()</span><br><span class="line">plt.title(<span class="string">'"전설의 포켓몬" 여부에 따른 세대 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_76_0.png" alt="output_76_0"></p><br><br><h2 id="3-지도-학습-기반-분류-분석-logistic-regression"><a class="markdownIt-Anchor" href="#3-지도-학습-기반-분류-분석-logistic-regression"></a> <strong>3. 지도 학습 기반 분류 분석 – Logistic Regression</strong></h2><h3 id="3-1-데이터-전처리"><a class="markdownIt-Anchor" href="#3-1-데이터-전처리"></a> 3-1. 데이터 전처리</h3><h4 id="1-데이터-타입-변경"><a class="markdownIt-Anchor" href="#1-데이터-타입-변경"></a> (1) 데이터 타입 변경</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>#</th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>VenusaurMega Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>False</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 800 entries, 0 to 799Data columns (total 13 columns): #   Column      Non-Null Count  Dtype ---  ------      --------------  -----  0   #           800 non-null    int64  1   Name        800 non-null    object 2   Type 1      800 non-null    object 3   Type 2      414 non-null    object 4   Total       800 non-null    int64  5   HP          800 non-null    int64  6   Attack      800 non-null    int64  7   Defense     800 non-null    int64  8   Sp. Atk     800 non-null    int64  9   Sp. Def     800 non-null    int64  10  Speed       800 non-null    int64  11  Generation  800 non-null    int64  12  Legendary   800 non-null    bool  dtypes: bool(1), int64(9), object(3)memory usage: 75.9+ KB</code></pre><br><ul><li><p>분류예측 목표 Feature인 "Lengendary"의 값은 현재 “True”/"False"로 구성되어있습니다. 예측 모델에 적용하기 위해 “1”/"0"으로 바꾸겠습니다.</p></li><li><p>포켓몬의 세대를 나타나는 Feature인 "Generation"의 타입은 지금 "int"로 되어있지만, Feature의 의미상 해당 숫자는 분류 역할을 하고 있으므로 "str"타입으로 변환시키겠습니다.</p></li><li><p>분류 예측 시 이름 데이터가 예측에 도움이 없으므로 "Name"을 빼고 데이터셋을 제구성하겠습니다.</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Legendary'</span>] = df[<span class="string">'Legendary'</span>].astype(int)</span><br><span class="line">df[<span class="string">'Generation'</span>] = df[<span class="string">'Generation'</span>].astype(str)</span><br><span class="line">preprocessed_df = df[[<span class="string">'Type 1'</span>, <span class="string">'Type 2'</span>, <span class="string">'Total'</span>, <span class="string">'HP'</span>, <span class="string">'Attack'</span>, <span class="string">'Defense'</span>, </span><br><span class="line">                      <span class="string">'Sp. Atk'</span>, <span class="string">'Sp. Def'</span>, <span class="string">'Speed'</span>, <span class="string">'Generation'</span>, <span class="string">'Legendary'</span>]]</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>Grass</td>      <td>Poison</td>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><br>  <h4 id="2-one-hot-encoding"><a class="markdownIt-Anchor" href="#2-one-hot-encoding"></a> (2) One-Hot Encoding</h4><p>Categorical Variable에 대해서 dummy화 작업을 진행하겠습니다.</p><ul><li><p>1 data one-label: One-hot Encoding</p></li><li><p>1 data multi-label: Multi-label Encoding</p><br></li></ul><p><strong>&gt;&gt; 타입 (Type) – Multi-label Encoding</strong></p><ul><li>먼저 Type 1과 Type 2를 하나의 변수(Type)로 묶는다.</li><li>그 다음 1~2개의 label를 가진 Type변수에 대해서 Multi-label Encoding을 진행한다.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pokemon type list 생성</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_list</span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">    type_list = []</span><br><span class="line">    type_list.append(x1)</span><br><span class="line">    <span class="keyword">if</span> x2 <span class="keyword">is</span> <span class="keyword">not</span> np.nan:</span><br><span class="line">        type_list.append(x2)</span><br><span class="line">    <span class="keyword">return</span> type_list</span><br><span class="line"></span><br><span class="line">preprocessed_df[<span class="string">'Type'</span>] = preprocessed_df.apply(<span class="keyword">lambda</span> x: make_list(x[<span class="string">'Type 1'</span>], x[<span class="string">'Type 2'</span>]), axis=<span class="number">1</span>)</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>      <th>Type</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>1</th>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>2</th>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>3</th>      <td>Grass</td>      <td>Poison</td>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>4</th>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>0</td>      <td>[Fire]</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> preprocessed_df[<span class="string">'Type 1'</span>]</span><br><span class="line"><span class="keyword">del</span> preprocessed_df[<span class="string">'Type 2'</span>]</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>      <th>Type</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>1</th>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>2</th>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>3</th>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>[Grass, Poison]</td>    </tr>    <tr>      <th>4</th>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>0</td>      <td>[Fire]</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># multi-lacel encoding</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MultiLabelBinarizer</span><br><span class="line"></span><br><span class="line">ml = MultiLabelBinarizer()</span><br><span class="line">preprocessed_df = preprocessed_df.join(pd.DataFrame(ml.fit_transform(preprocessed_df.pop(<span class="string">'Type'</span>)),</span><br><span class="line">                                                    columns = ml.classes_))</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html" target="_blank" rel="noopener">[pandas.DataFrame.join]</a>: Join columns of another DataFrame</li><li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pop.html" target="_blank" rel="noopener">[pandas.DataFrame.pop (<em>item</em>) ]</a>: Return item and drop from frame</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Generation</th>      <th>Legendary</th>      <th>Bug</th>      <th>...</th>      <th>Ghost</th>      <th>Grass</th>      <th>Ground</th>      <th>Ice</th>      <th>Normal</th>      <th>Poison</th>      <th>Psychic</th>      <th>Rock</th>      <th>Steel</th>      <th>Water</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 27 columns</p></div></div> <br> <p><strong>&gt;&gt; 세대 (Generation) – One-hot Encoding</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apply one-hot encoding to 'Generation'</span></span><br><span class="line">preprocessed_df = pd.get_dummies(preprocessed_df)  <span class="comment"># df name입력하면 str var를 자동 식별하여 encoding 진행함</span></span><br><span class="line"><span class="comment"># preprocessed_ddf = pd.get_dummies(preprocessed_df['Generation'])  # 작업할 var 지정</span></span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Legendary</th>      <th>Bug</th>      <th>Dark</th>      <th>...</th>      <th>Psychic</th>      <th>Rock</th>      <th>Steel</th>      <th>Water</th>      <th>Generation_1</th>      <th>Generation_2</th>      <th>Generation_3</th>      <th>Generation_4</th>      <th>Generation_5</th>      <th>Generation_6</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>625</td>      <td>80</td>      <td>100</td>      <td>123</td>      <td>122</td>      <td>120</td>      <td>80</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 32 columns</p></div></div><br>  <h4 id="3-feature-포준화"><a class="markdownIt-Anchor" href="#3-feature-포준화"></a> (3) Feature 포준화</h4><p>Numerical Feature간의 Scale차이를 없애기 위해 feature 표준화를 진행합니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preprocessed_df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 800 entries, 0 to 799Data columns (total 32 columns): #   Column        Non-Null Count  Dtype---  ------        --------------  ----- 0   Total         800 non-null    int64 1   HP            800 non-null    int64 2   Attack        800 non-null    int64 3   Defense       800 non-null    int64 4   Sp. Atk       800 non-null    int64 5   Sp. Def       800 non-null    int64 6   Speed         800 non-null    int64 7   Legendary     800 non-null    int32 8   Bug           800 non-null    int32 9   Dark          800 non-null    int32 10  Dragon        800 non-null    int32 11  Electric      800 non-null    int32 12  Fairy         800 non-null    int32 13  Fighting      800 non-null    int32 14  Fire          800 non-null    int32 15  Flying        800 non-null    int32 16  Ghost         800 non-null    int32 17  Grass         800 non-null    int32 18  Ground        800 non-null    int32 19  Ice           800 non-null    int32 20  Normal        800 non-null    int32 21  Poison        800 non-null    int32 22  Psychic       800 non-null    int32 23  Rock          800 non-null    int32 24  Steel         800 non-null    int32 25  Water         800 non-null    int32 26  Generation_1  800 non-null    uint8 27  Generation_2  800 non-null    uint8 28  Generation_3  800 non-null    uint8 29  Generation_4  800 non-null    uint8 30  Generation_5  800 non-null    uint8 31  Generation_6  800 non-null    uint8dtypes: int32(19), int64(7), uint8(6)memory usage: 107.9 KB</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># feature standardization</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">scale_columns = [<span class="string">'Total'</span>, <span class="string">'HP'</span>, <span class="string">'Attack'</span>, <span class="string">'Defense'</span>, <span class="string">'Sp. Atk'</span>, <span class="string">'Sp. Def'</span>, <span class="string">'Speed'</span>]</span><br><span class="line">preprocessed_df[scale_columns] = scaler.fit_transform(preprocessed_df[scale_columns])</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Legendary</th>      <th>Bug</th>      <th>Dark</th>      <th>...</th>      <th>Psychic</th>      <th>Rock</th>      <th>Steel</th>      <th>Water</th>      <th>Generation_1</th>      <th>Generation_2</th>      <th>Generation_3</th>      <th>Generation_4</th>      <th>Generation_5</th>      <th>Generation_6</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.976765</td>      <td>-0.950626</td>      <td>-0.924906</td>      <td>-0.797154</td>      <td>-0.239130</td>      <td>-0.248189</td>      <td>-0.801503</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>-0.251088</td>      <td>-0.362822</td>      <td>-0.524130</td>      <td>-0.347917</td>      <td>0.219560</td>      <td>0.291156</td>      <td>-0.285015</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>0.749845</td>      <td>0.420917</td>      <td>0.092448</td>      <td>0.293849</td>      <td>0.831146</td>      <td>1.010283</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>1.583957</td>      <td>0.420917</td>      <td>0.647369</td>      <td>1.577381</td>      <td>1.503891</td>      <td>1.729409</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>-1.051836</td>      <td>-1.185748</td>      <td>-0.832419</td>      <td>-0.989683</td>      <td>-0.392027</td>      <td>-0.787533</td>      <td>-0.112853</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 32 columns</p></div></div> <br> <h4 id="4-training-set-test-set-나누기"><a class="markdownIt-Anchor" href="#4-training-set-test-set-나누기"></a> (4) Training set / Test set 나누기</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X = preprocessed_df.loc[:, preprocessed_df.columns != <span class="string">'Legendary'</span>]</span><br><span class="line">y = preprocessed_df[<span class="string">'Legendary'</span>]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((600, 31), (600,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((200, 31), (200,))</code></pre> <br> <h3 id="3-2-logistic-regression-모델-학습"><a class="markdownIt-Anchor" href="#3-2-logistic-regression-모델-학습"></a> 3-2. Logistic Regression 모델 학습</h3><h4 id="1-모델-학습"><a class="markdownIt-Anchor" href="#1-모델-학습"></a> (1) 모델 학습</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit in Training set</span></span><br><span class="line">logit = LogisticRegression(random_state=<span class="number">0</span>)</span><br><span class="line">logit.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict in Test set</span></span><br><span class="line">y_pred = logit.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><h4 id="2-모델-평가"><a class="markdownIt-Anchor" href="#2-모델-평가"></a> (2) 모델 평가</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># classification result for test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"accuracy: %.2f"</span> % accuracy_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">"Precision: %.3f"</span> % precision_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">"Recall: %.3f"</span> % recall_score(y_test, y_pred))</span><br><span class="line">print(<span class="string">"F1: %.3f"</span> % f1_score(y_test, y_pred))</span><br></pre></td></tr></tbody></table></figure><pre><code>accuracy: 0.93Precision: 0.615Recall: 0.471F1: 0.533</code></pre><br><p>위 모델 평가 결과를 확인해보면, 해당 모델은 <strong>정확도(accuracy) 만</strong> 높고, 정밀도(Precision), 재현율(Recall), F1 score 등 모두 낮습니다. 이는 학습 데이터의 <strong>클래스 불균형으로 인한 정확도 함정</strong> 문제일 가능성이 높습니다. (참고: <a href="https://hyemin-kim.github.io/2020/07/26/S-Python-sklearn2/#4-2-%EC%A0%95%ED%99%95%EB%8F%84-accuracy">[Python &gt;&gt; sklearn - (2) 분류] 4-2. !!정확도 함정!!</a>)</p><p>추가 확인을 위해 Confusion Matrix를 출력해 봅니다.</p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># print confusion matrix</span></span><br><span class="line">confu = confusion_matrix(y_true = y_test, y_pred = y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">sns.heatmap(confu, annot=<span class="literal">True</span>, annot_kws={<span class="string">'size'</span>:<span class="number">15</span>}, cmap=<span class="string">'OrRd'</span>, fmt=<span class="string">'.10g'</span>)</span><br><span class="line">plt.title(<span class="string">'Confusion Matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_122_0.png" alt="output_122_0"></p><p>Positive Condition ( <em>“Legendary” = True/1</em> ) &lt;17&gt; 대비 Negative Condition ( <em>“Legendary” = False/0</em> ) &lt;183&gt;인 케이스가 훨씬 많다는 것을 볼 수 있습니다. 따라서, 클래스 불균형으로 인한 정확도 함정 분제가 맞으며, <strong>클래스 불균형을 조정</strong>한 후 다시 학습 시키도록 하겠습니다.</p><br>  <h3 id="3-3-클래스-불균형-조정"><a class="markdownIt-Anchor" href="#3-3-클래스-불균형-조정"></a> 3-3. 클래스 불균형 조정</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preprocessed_df[<span class="string">'Legendary'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>0    7351     65Name: Legendary, dtype: int64</code></pre><br>  <p><strong>&gt;&gt; 1:1 샘플링</strong></p><p>Positive Condition 케이스와 Negative Condition 케이스를 1:1비율로 샘플링 합니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positive_random_idx = preprocessed_df[preprocessed_df[<span class="string">'Legendary'</span>]==<span class="number">1</span>].sample(<span class="number">65</span>, random_state=<span class="number">12</span>).index.tolist()</span><br><span class="line">negative_random_idx = preprocessed_df[preprocessed_df[<span class="string">'Legendary'</span>]==<span class="number">0</span>].sample(<span class="number">65</span>, random_state=<span class="number">12</span>).index.tolist()</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>&gt;&gt; Training set / Test set 나누기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random_idx = positive_random_idx + negative_random_idx</span><br><span class="line">X = preprocessed_df.loc[random_idx, preprocessed_df.columns != <span class="string">'Legendary'</span>]</span><br><span class="line">y = preprocessed_df[<span class="string">'Legendary'</span>][random_idx]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((97, 31), (97,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((33, 31), (33,))</code></pre><br>  <p><strong>&gt;&gt; 모델 재학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fit in Training set</span></span><br><span class="line">logit2 = LogisticRegression(random_state=<span class="number">0</span>)</span><br><span class="line">logit2.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict in Test set</span></span><br><span class="line">y_pred2 = logit2.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>&gt;&gt; 모델 재평가</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clssification result for test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"accuracy: %.2f"</span> % accuracy_score(y_test, y_pred2))</span><br><span class="line">print(<span class="string">"Precision: %.3f"</span> % precision_score(y_test, y_pred2))</span><br><span class="line">print(<span class="string">"Recall: %.3f"</span> % recall_score(y_test, y_pred2))</span><br><span class="line">print(<span class="string">"F1: %.3f"</span> % f1_score(y_test, y_pred2))</span><br></pre></td></tr></tbody></table></figure><pre><code>accuracy: 1.00Precision: 1.000Recall: 1.000F1: 1.000</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># confusion matrix</span></span><br><span class="line"></span><br><span class="line">confu2 = confusion_matrix(y_true=y_test, y_pred = y_pred2)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">sns.heatmap(confu2, annot=<span class="literal">True</span>, annot_kws={<span class="string">'size'</span>:<span class="number">15</span>}, cmap=<span class="string">'OrRd'</span>, fmt=<span class="string">'.10g'</span>)</span><br><span class="line">plt.title(<span class="string">'Confusion Matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_143_0.png" alt="output_143_0"></p><p>클래스 불균형을 조정한 후, 새롭게 학습된 모델의 performance가 많이 좋아졌습니다.</p><p><br>  <br></p><h2 id="4-비지도-학습-기반-군집-분류-분석-k-means-clustering"><a class="markdownIt-Anchor" href="#4-비지도-학습-기반-군집-분류-분석-k-means-clustering"></a> <strong>4. 비지도 학습 기반 군집 분류 분석 – K-Means Clustering</strong></h2><h3 id="4-1-k-means-군집-분류"><a class="markdownIt-Anchor" href="#4-1-k-means-군집-분류"></a> 4-1. K-Means 군집 분류</h3><h4 id="1-2차원-군집-분석"><a class="markdownIt-Anchor" href="#1-2차원-군집-분석"></a> (1) 2차원 군집 분석</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># K-means train &amp; Elbow method</span></span><br><span class="line">X = preprocessed_df[[<span class="string">'Attack'</span>, <span class="string">'Defense'</span>]]</span><br><span class="line"></span><br><span class="line">k_list = []</span><br><span class="line">cost_list = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range (<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">    kmeans = KMeans(n_clusters=k).fit(X)</span><br><span class="line">    interia = kmeans.inertia_  <span class="comment"># inertia: Sum of squared distances of samples to their closest cluster center.</span></span><br><span class="line">    print(<span class="string">"k:"</span>, k, <span class="string">"| cost:"</span>, interia)</span><br><span class="line">    k_list.append(k)</span><br><span class="line">    cost_list.append(interia)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(k_list, cost_list)</span><br></pre></td></tr></tbody></table></figure><pre><code>k: 1 | cost: 1600.0k: 2 | cost: 853.3477298974242k: 3 | cost: 642.3911470107209k: 4 | cost: 480.49450250321513k: 5 | cost: 403.97191765107124k: 6 | cost: 343.98696660525184k: 7 | cost: 295.56093457429847[&lt;matplotlib.lines.Line2D at 0x2e930467c48&gt;]</code></pre><p><img src="/images/E-Python-Classification-1/output_151_2.png" alt="output_151_2"></p><br><p>추세를 봤을 때, 4 clusters가 제일 적당한 것으로 보입니다.</p><p>따라서, cluster를 4로 지정한 후 다시 학습시킨 뒤, 각 데이터가 분류된 cluster 결과를 원 데이터셋에 추가합니다.</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k-means fitting and predict</span></span><br><span class="line">kmeans = KMeans(n_clusters=<span class="number">4</span>).fit(X)</span><br><span class="line">cluster_num = pd.Series(kmeans.predict(X))</span><br><span class="line">preprocessed_df[<span class="string">'cluster_num'</span>] = cluster_num.values</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Legendary</th>      <th>Bug</th>      <th>Dark</th>      <th>...</th>      <th>Rock</th>      <th>Steel</th>      <th>Water</th>      <th>Generation_1</th>      <th>Generation_2</th>      <th>Generation_3</th>      <th>Generation_4</th>      <th>Generation_5</th>      <th>Generation_6</th>      <th>cluster_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.976765</td>      <td>-0.950626</td>      <td>-0.924906</td>      <td>-0.797154</td>      <td>-0.239130</td>      <td>-0.248189</td>      <td>-0.801503</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>-0.251088</td>      <td>-0.362822</td>      <td>-0.524130</td>      <td>-0.347917</td>      <td>0.219560</td>      <td>0.291156</td>      <td>-0.285015</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>0.749845</td>      <td>0.420917</td>      <td>0.092448</td>      <td>0.293849</td>      <td>0.831146</td>      <td>1.010283</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>1.583957</td>      <td>0.420917</td>      <td>0.647369</td>      <td>1.577381</td>      <td>1.503891</td>      <td>1.729409</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>-1.051836</td>      <td>-1.185748</td>      <td>-0.832419</td>      <td>-0.989683</td>      <td>-0.392027</td>      <td>-0.787533</td>      <td>-0.112853</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 33 columns</p></div></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(preprocessed_df[<span class="string">'cluster_num'</span>].value_counts())</span><br></pre></td></tr></tbody></table></figure><pre><code>2    3090    2533    1281    110Name: cluster_num, dtype: int64</code></pre><br><p><strong>&gt;&gt; 군집 시각화</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Visualization</span></span><br><span class="line"></span><br><span class="line">plt.scatter(preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">0</span>][<span class="string">'Attack'</span>],</span><br><span class="line">            preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">0</span>][<span class="string">'Defense'</span>],</span><br><span class="line">            s = <span class="number">50</span>, c = <span class="string">'red'</span>, alpha = <span class="number">0.5</span>, label = <span class="string">'Pokemon Group 1'</span>)</span><br><span class="line">plt.scatter(preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">1</span>][<span class="string">'Attack'</span>],</span><br><span class="line">            preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">1</span>][<span class="string">'Defense'</span>],</span><br><span class="line">            s = <span class="number">50</span>, c = <span class="string">'green'</span>, alpha = <span class="number">0.7</span>, label = <span class="string">'Pokemon Group 2'</span>)</span><br><span class="line">plt.scatter(preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">2</span>][<span class="string">'Attack'</span>],</span><br><span class="line">            preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">2</span>][<span class="string">'Defense'</span>],</span><br><span class="line">            s = <span class="number">50</span>, c = <span class="string">'blue'</span>, alpha = <span class="number">0.5</span>, label = <span class="string">'Pokemon Group 3'</span>)</span><br><span class="line">plt.scatter(preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">3</span>][<span class="string">'Attack'</span>],</span><br><span class="line">            preprocessed_df[preprocessed_df[<span class="string">'cluster_num'</span>] == <span class="number">3</span>][<span class="string">'Defense'</span>],</span><br><span class="line">            s = <span class="number">50</span>, c = <span class="string">'yellow'</span>, alpha = <span class="number">0.8</span>, label = <span class="string">'Pokemon Group 4'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Pokemon Cluster by "Attack" &amp; "Defense"'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Attack'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Defense'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_157_0.png" alt="output_157_0"></p><br><h4 id="2-다차원-군집-분석"><a class="markdownIt-Anchor" href="#2-다차원-군집-분석"></a> (2) 다차원 군집 분석</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># K-Means train &amp; Elbow method</span></span><br><span class="line">X = preprocessed_df[[<span class="string">'HP'</span>, <span class="string">'Attack'</span>, <span class="string">'Defense'</span>, <span class="string">'Sp. Atk'</span>, <span class="string">'Sp. Def'</span>, <span class="string">'Speed'</span>]]</span><br><span class="line"></span><br><span class="line">k_list = []</span><br><span class="line">cost_list = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range (<span class="number">1</span>, <span class="number">15</span>):</span><br><span class="line">    kmeans = KMeans(n_clusters=k).fit(X)</span><br><span class="line">    interia = kmeans.inertia_  <span class="comment"># inertia: Sum of squared distances of samples to their closest cluster center.</span></span><br><span class="line">    print(<span class="string">"k:"</span>, k, <span class="string">"| cost:"</span>, interia)</span><br><span class="line">    k_list.append(k)</span><br><span class="line">    cost_list.append(interia)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(k_list, cost_list)</span><br></pre></td></tr></tbody></table></figure><pre><code>k: 1 | cost: 4800.0k: 2 | cost: 3275.3812330305977k: 3 | cost: 2862.057922495397k: 4 | cost: 2566.5807792995274k: 5 | cost: 2328.0706840275643k: 6 | cost: 2182.759972635841k: 7 | cost: 2070.734327066247k: 8 | cost: 1957.5240844927844k: 9 | cost: 1854.3770148227836k: 10 | cost: 1778.3178764912984k: 11 | cost: 1721.845255688537k: 12 | cost: 1644.3967658442484k: 13 | cost: 1579.4938049394318k: 14 | cost: 1536.785887021493[&lt;matplotlib.lines.Line2D at 0x2e930efbb88&gt;]</code></pre><p><img src="/images/E-Python-Classification-1/output_160_2.png" alt="output_160_2"></p><br><p>이 경우에는 cluster가 5일 때가 제일 적당해 보입니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k-means fitting and predict</span></span><br><span class="line">kmeans = KMeans(n_clusters=<span class="number">5</span>).fit(X)</span><br><span class="line">cluster_num = pd.Series(kmeans.predict(X))</span><br><span class="line">preprocessed_df[<span class="string">'cluster_num'</span>] = cluster_num.values</span><br><span class="line">preprocessed_df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Legendary</th>      <th>Bug</th>      <th>Dark</th>      <th>...</th>      <th>Rock</th>      <th>Steel</th>      <th>Water</th>      <th>Generation_1</th>      <th>Generation_2</th>      <th>Generation_3</th>      <th>Generation_4</th>      <th>Generation_5</th>      <th>Generation_6</th>      <th>cluster_num</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.976765</td>      <td>-0.950626</td>      <td>-0.924906</td>      <td>-0.797154</td>      <td>-0.239130</td>      <td>-0.248189</td>      <td>-0.801503</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>-0.251088</td>      <td>-0.362822</td>      <td>-0.524130</td>      <td>-0.347917</td>      <td>0.219560</td>      <td>0.291156</td>      <td>-0.285015</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>0.749845</td>      <td>0.420917</td>      <td>0.092448</td>      <td>0.293849</td>      <td>0.831146</td>      <td>1.010283</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1.583957</td>      <td>0.420917</td>      <td>0.647369</td>      <td>1.577381</td>      <td>1.503891</td>      <td>1.729409</td>      <td>0.403635</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>-1.051836</td>      <td>-1.185748</td>      <td>-0.832419</td>      <td>-0.989683</td>      <td>-0.392027</td>      <td>-0.787533</td>      <td>-0.112853</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>4</td>    </tr>  </tbody></table><p>5 rows × 33 columns</p></div></div><br>  <p><strong>&gt;&gt; 군집별 특성 시각화</strong></p><p>2차원이 아니기 때문에 위와 같이 군집 결과를 시각화하기 어렵습니다.</p><p>군집화 결과를 확인하기 위해 <strong>각 Feature의 군집별 특성</strong>을 시각화하도록 하겠습니다.</p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HP</span></span><br><span class="line">sns.boxplot(x = <span class="string">"cluster_num"</span>, y = <span class="string">"HP"</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "HP" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_167_0.png" alt="output_167_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Attack</span></span><br><span class="line">sns.boxplot(x = <span class="string">'cluster_num'</span>, y = <span class="string">'Attack'</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "Attack" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_169_0.png" alt="output_169_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Defense</span></span><br><span class="line">sns.boxplot(x = <span class="string">'cluster_num'</span>, y = <span class="string">'Defense'</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "Defense" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_171_0.png" alt="output_171_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sp. Atk</span></span><br><span class="line">sns.boxplot(x = <span class="string">'cluster_num'</span>, y = <span class="string">'Sp. Atk'</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "Sp. Atk" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_173_0.png" alt="output_173_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sp. Def</span></span><br><span class="line">sns.boxplot(x = <span class="string">'cluster_num'</span>, y = <span class="string">'Sp. Def'</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "Sp. Def" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_175_0.png" alt="output_175_0"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Speed</span></span><br><span class="line">sns.boxplot(x = <span class="string">'cluster_num'</span>, y = <span class="string">'Speed'</span>, data = preprocessed_df)</span><br><span class="line">plt.title(<span class="string">'군집별 "Speed" 분포'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-Classification-1/output_177_0.png" alt="output_177_0"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      지도학습(Logistic Regression) -- &quot;전설의 포켓몬&quot; 여부 예측;  비지도학습(K-Means Clustering) -- 포켓몬 분류
    
    </summary>
    
    
      <category term="【Exercise】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="분류" scheme="https://hyemin-kim.github.io/tags/%EB%B6%84%EB%A5%98/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 Python &gt;&gt; EDA &amp; Linear Regression -- 부동산 데이터</title>
    <link href="https://hyemin-kim.github.io/2020/08/11/E-Python-LinearRegression-1/"/>
    <id>https://hyemin-kim.github.io/2020/08/11/E-Python-LinearRegression-1/</id>
    <published>2020-08-10T15:42:27.000Z</published>
    <updated>2020-08-25T05:16:44.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eda-regression-실습-부동산-데이터"><a class="markdownIt-Anchor" href="#eda-regression-실습-부동산-데이터"></a> 【EDA &amp; Regression 실습】 – 부동산 데이터</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%AA%A9%ED%91%9C"><strong>0. 목표</strong></a></li><li><a href="#1-library-data-import"><strong>1. Library &amp; Data Import</strong></a></li><li><a href="#2-eda-exploratory-data-analysis-%ED%83%90%EC%83%89%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D"><strong>2. EDA (Exploratory Data Analysis: 탐색적 데이터 분석)</strong></a><ul><li><a href="#2-1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%ED%83%90%EC%83%89">2-1. 데이터셋 기본 정보 탐색</a></li><li><a href="#2-2-%ED%9A%8C%EA%B7%80-%EB%B6%84%EC%84%9D-%EC%A2%85%EC%86%8D%EB%AA%A9%ED%91%9C-%EB%B3%80%EC%88%98-%ED%83%90%EC%83%89">2-2. 회귀 분석 종속(목표) 변수 탐색</a></li><li><a href="#2-3-%ED%9A%8C%EA%B7%80-%EB%B6%84%EC%84%9D-%EC%84%A4%EB%AA%85-%EB%B3%80%EC%88%98-%ED%83%90%EC%83%89">2-3. 회귀 분석 설명 변수 탐색</a><ul><li><a href="#%EC%84%A4%EB%AA%85-%EB%B3%80%EC%88%98%EB%93%A4%EC%9D%98-%EB%B6%84%ED%8F%AC-%ED%83%90%EC%83%89">&gt;&gt; 설명 변수들의 분포 탐색</a></li><li><a href="#%EC%84%A4%EB%AA%85-%EB%B3%80%EC%88%98%EB%93%A4%EC%9D%98-%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84-%ED%83%90%EC%83%89-with-target-variable-cmedv">&gt;&gt; 설명 변수들의 상관관계 탐색  (with target variable “CMEDV”)</a></li><li><a href="#%EC%84%A4%EB%AA%85-%EB%B3%80%EC%88%98%EC%99%80-%EC%A2%85%EC%86%8D-%EB%B3%80%EC%88%98%EC%9D%98-%EA%B4%80%EA%B3%84-%ED%83%90%EC%83%89">&gt;&gt; 설명 변수와 종속 변수의 관계 탐색</a></li><li><a href="#%EC%A7%80%EC%97%AD%EB%B3%84-%EC%B0%A8%EC%9D%B4-%ED%83%90%EC%83%89">&gt;&gt; 지역별 차이 탐색</a></li></ul></li></ul></li><li><a href="#3-%EC%A7%91%EA%B0%92-%EC%98%88%EC%B8%A1-%EB%B6%84%EC%84%9D-%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D"><strong>3. 집값 예측 분석: 회귀분석</strong></a><ul><li><a href="#3-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC">3-1. 데이터 전처리</a><ul><li><a href="#feature-%ED%91%9C%EC%A4%80%ED%99%94">&gt;&gt; feature 표준화</a></li><li><a href="#training-set-test-set-%EB%82%98%EB%88%84%EA%B8%B0">&gt;&gt; Training set / Test set 나누기</a></li><li><a href="#%EB%8B%A4%EC%A4%91-%EA%B3%B5%EC%84%A0%EC%84%B1">&gt;&gt; 다중 공선성</a></li></ul></li><li><a href="#3-2-%ED%9A%8C%EA%B7%80-%EB%B6%84%EC%84%9D-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5-%EB%B0%8F-%EC%98%88%EC%B8%A1">3-2. 회귀 분석 모델 학습 및 예측</a><ul><li><a href="#coefficients-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0">&gt;&gt; coefficients 확인하기</a></li><li><a href="#feature-%EC%9C%A0%EC%9D%98%EC%84%B1-%EA%B2%80%EC%A0%95">&gt;&gt; feature 유의성 검정</a></li><li><a href="#%EC%98%88%EC%B8%A1-%EA%B2%B0%EA%B3%BC-%EB%B0%8F-%EB%AA%A8%EB%8D%B8-%EC%84%B1%EB%8A%A5-%ED%99%95%EC%9D%B8">&gt;&gt; 예측 결과 및 모델 성능 확인</a></li></ul></li></ul></li></ul><p></p><br> <h2 id="0-목표"><a class="markdownIt-Anchor" href="#0-목표"></a> <strong>0. 목표</strong></h2><p>Boston 지역의 부동산 데이터를 이용하여 선형 집값 예측 모델을 만듭니다.</p><p>사용 방법: 지도학습 — Linear Regression</p> <br><h2 id="1-library-data-import"><a class="markdownIt-Anchor" href="#1-library-data-import"></a> <strong>1. Library &amp; Data Import</strong></h2><p><strong>&gt;&gt; 사용할 Library</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br></pre></td></tr></tbody></table></figure><br>  <p><strong>&gt;&gt; 사용할 데이터셋 – Boston Housing Dataset</strong></p><blockquote><p>Original Data Source: <a href="http://lib.stat.cmu.edu/datasets/boston_corrected.txt" target="_blank" rel="noopener">http://lib.stat.cmu.edu/datasets/boston_corrected.txt</a><br>Dataset Introduction: <a href="https://geodacenter.github.io/data-and-lab/boston-housing/" target="_blank" rel="noopener">Boston Housing 1970</a></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/yoonkt200/FastCampusDataset/master/BostonHousing2.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>TOWN</th>      <th>LON</th>      <th>LAT</th>      <th>CMEDV</th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Nahant</td>      <td>-70.955</td>      <td>42.2550</td>      <td>24.0</td>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1</td>      <td>296</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>    </tr>    <tr>      <th>1</th>      <td>Swampscott</td>      <td>-70.950</td>      <td>42.2875</td>      <td>21.6</td>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2</td>      <td>242</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>    </tr>    <tr>      <th>2</th>      <td>Swampscott</td>      <td>-70.936</td>      <td>42.2830</td>      <td>34.7</td>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2</td>      <td>242</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>    </tr>    <tr>      <th>3</th>      <td>Marblehead</td>      <td>-70.928</td>      <td>42.2930</td>      <td>33.4</td>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3</td>      <td>222</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>    </tr>    <tr>      <th>4</th>      <td>Marblehead</td>      <td>-70.922</td>      <td>42.2980</td>      <td>36.2</td>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3</td>      <td>222</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>    </tr>  </tbody></table></div></div><br>  <p><strong>&gt;&gt; Feature Description</strong></p><ul><li><p>TOWN: 지역 이름</p></li><li><p>LON, LAT: 경도(Longitudes) 위도(Latitudes) 정보</p></li><li><p><strong>CMEDV: 해당 지역의 집값 (중앙값)</strong> (corrected median values of housing in USD 1000)</p></li><li><p>CRIM: 근방 범죄율 per capita crime</p></li><li><p>ZN: 주택지 비율</p></li><li><p>INDUS: 상업적 비즈니스에 활용되지 않는 농지 면적</p></li><li><p>CHAS: 경계선에 강에 있는지 여부 <strong>(dummy variable)</strong></p></li><li><p>NOX: 산화질소 농도</p></li><li><p>RM: 자택당 평균 방 갯수</p></li><li><p>AGE: 1940년 이전에 건설된 비율</p></li><li><p>DIS: 5개의 보스턴 고용 센터와의 거리레 따른 가중치 부여</p></li><li><p>RAD: radial 고속도로와의 접근성 지수</p></li><li><p>TAX: 10000달러당 재산세</p></li><li><p>PTRATIO: 지역별 학생-교사 비율</p></li><li><p>B: 지역의 흑인 지수 (1000(Bk - 0.63)^2), Bk는 흑인의 비율</p></li><li><p>LSTAT: 빈곤층의 비율</p><br><br></li></ul><h2 id="2-eda-exploratory-data-analysis-탐색적-데이터-분석"><a class="markdownIt-Anchor" href="#2-eda-exploratory-data-analysis-탐색적-데이터-분석"></a> <strong>2. EDA (Exploratory Data Analysis: 탐색적 데이터 분석)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그래프 배경 설정</span></span><br><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-데이터셋-기본-정보-탐색"><a class="markdownIt-Anchor" href="#2-1-데이터셋-기본-정보-탐색"></a> 2-1. 데이터셋 기본 정보 탐색</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shape (dimension)</span></span><br><span class="line">df.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(506, 17)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 결측치</span></span><br><span class="line">df.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>TOWN       0LON        0LAT        0CMEDV      0CRIM       0ZN         0INDUS      0CHAS       0NOX        0RM         0AGE        0DIS        0RAD        0TAX        0PTRATIO    0B          0LSTAT      0dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># information (data type)</span></span><br><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 506 entries, 0 to 505Data columns (total 17 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   TOWN     506 non-null    object  1   LON      506 non-null    float64 2   LAT      506 non-null    float64 3   CMEDV    506 non-null    float64 4   CRIM     506 non-null    float64 5   ZN       506 non-null    float64 6   INDUS    506 non-null    float64 7   CHAS     506 non-null    int64   8   NOX      506 non-null    float64 9   RM       506 non-null    float64 10  AGE      506 non-null    float64 11  DIS      506 non-null    float64 12  RAD      506 non-null    int64   13  TAX      506 non-null    int64   14  PTRATIO  506 non-null    float64 15  B        506 non-null    float64 16  LSTAT    506 non-null    float64dtypes: float64(13), int64(3), object(1)memory usage: 67.3+ KB</code></pre><br><h3 id="2-2-회귀-분석-종속목표-변수-탐색"><a class="markdownIt-Anchor" href="#2-2-회귀-분석-종속목표-변수-탐색"></a> 2-2. 회귀 분석 종속(목표) 변수 탐색</h3><p><strong>&gt;&gt; Target Variable: ‘CMEDV’(집값) 탐색</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'CMEDV'</span>].describe()</span><br></pre></td></tr></tbody></table></figure><pre><code>count    506.000000mean      22.528854std        9.182176min        5.00000025%       17.02500050%       21.20000075%       25.000000max       50.000000Name: CMEDV, dtype: float64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 분포</span></span><br><span class="line">df[<span class="string">'CMEDV'</span>].hist(bins=<span class="number">50</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23cf30df388&gt;</code></pre><p><img src="/images/E-Python-LinearRegression-1/output_24_1.png" alt="output_24_1"></p><br><p><strong>boxplot:</strong></p><ol><li>Pandas Function (<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.boxplot.html?highlight=boxplot#pandas.DataFrame.boxplot" target="_blank" rel="noopener">pandas.DataFrame.boxplot</a>)</li><li>Matplotlib Function (<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html#matplotlib.pyplot.boxplot" target="_blank" rel="noopener">matplotlib.pyplot.boxplot</a>)</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boxplot - Pandas</span></span><br><span class="line">df.boxplot(column=[<span class="string">'CMEDV'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23cf38c44c8&gt;</code></pre><p><img src="/images/E-Python-LinearRegression-1/output_26_1.png" alt="output_26_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boxplot - matplotlib</span></span><br><span class="line">plt.boxplot(df[<span class="string">'CMEDV'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_27_0.png" alt="output_27_0"></p><br><h3 id="2-3-회귀-분석-설명-변수-탐색"><a class="markdownIt-Anchor" href="#2-3-회귀-분석-설명-변수-탐색"></a> 2-3. 회귀 분석 설명 변수 탐색</h3><h4 id="설명-변수들의-분포-탐색"><a class="markdownIt-Anchor" href="#설명-변수들의-분포-탐색"></a> &gt;&gt; 설명 변수들의 분포 탐색</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numerical features (except "LON" &amp; "LAT")</span></span><br><span class="line">numerical_columns = [<span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'CHAS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>, <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">16</span>, <span class="number">20</span>))</span><br><span class="line">ax = fig.gca()  <span class="comment"># Axes 생성</span></span><br><span class="line"></span><br><span class="line">df[numerical_columns].hist(ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_31_0.png" alt="output_31_0"></p><br><h4 id="설명-변수들의-상관관계-탐색-with-target-variable-cmedv"><a class="markdownIt-Anchor" href="#설명-변수들의-상관관계-탐색-with-target-variable-cmedv"></a> &gt;&gt; 설명 변수들의 상관관계 탐색  (with target variable “CMEDV”)</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Person 상관계수</span></span><br><span class="line">cols = [<span class="string">'CMEDV'</span>, <span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'CHAS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>, <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>]</span><br><span class="line"></span><br><span class="line">corr = df[cols].corr(method = <span class="string">'pearson'</span>)</span><br><span class="line">corr</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CMEDV</th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>CMEDV</th>      <td>1.000000</td>      <td>-0.389582</td>      <td>0.360386</td>      <td>-0.484754</td>      <td>0.175663</td>      <td>-0.429300</td>      <td>0.696304</td>      <td>-0.377999</td>      <td>0.249315</td>      <td>-0.384766</td>      <td>-0.471979</td>      <td>-0.505655</td>      <td>0.334861</td>      <td>-0.740836</td>    </tr>    <tr>      <th>CRIM</th>      <td>-0.389582</td>      <td>1.000000</td>      <td>-0.200469</td>      <td>0.406583</td>      <td>-0.055892</td>      <td>0.420972</td>      <td>-0.219247</td>      <td>0.352734</td>      <td>-0.379670</td>      <td>0.625505</td>      <td>0.582764</td>      <td>0.289946</td>      <td>-0.385064</td>      <td>0.455621</td>    </tr>    <tr>      <th>ZN</th>      <td>0.360386</td>      <td>-0.200469</td>      <td>1.000000</td>      <td>-0.533828</td>      <td>-0.042697</td>      <td>-0.516604</td>      <td>0.311991</td>      <td>-0.569537</td>      <td>0.664408</td>      <td>-0.311948</td>      <td>-0.314563</td>      <td>-0.391679</td>      <td>0.175520</td>      <td>-0.412995</td>    </tr>    <tr>      <th>INDUS</th>      <td>-0.484754</td>      <td>0.406583</td>      <td>-0.533828</td>      <td>1.000000</td>      <td>0.062938</td>      <td>0.763651</td>      <td>-0.391676</td>      <td>0.644779</td>      <td>-0.708027</td>      <td>0.595129</td>      <td>0.720760</td>      <td>0.383248</td>      <td>-0.356977</td>      <td>0.603800</td>    </tr>    <tr>      <th>CHAS</th>      <td>0.175663</td>      <td>-0.055892</td>      <td>-0.042697</td>      <td>0.062938</td>      <td>1.000000</td>      <td>0.091203</td>      <td>0.091251</td>      <td>0.086518</td>      <td>-0.099176</td>      <td>-0.007368</td>      <td>-0.035587</td>      <td>-0.121515</td>      <td>0.048788</td>      <td>-0.053929</td>    </tr>    <tr>      <th>NOX</th>      <td>-0.429300</td>      <td>0.420972</td>      <td>-0.516604</td>      <td>0.763651</td>      <td>0.091203</td>      <td>1.000000</td>      <td>-0.302188</td>      <td>0.731470</td>      <td>-0.769230</td>      <td>0.611441</td>      <td>0.668023</td>      <td>0.188933</td>      <td>-0.380051</td>      <td>0.590879</td>    </tr>    <tr>      <th>RM</th>      <td>0.696304</td>      <td>-0.219247</td>      <td>0.311991</td>      <td>-0.391676</td>      <td>0.091251</td>      <td>-0.302188</td>      <td>1.000000</td>      <td>-0.240265</td>      <td>0.205246</td>      <td>-0.209847</td>      <td>-0.292048</td>      <td>-0.355501</td>      <td>0.128069</td>      <td>-0.613808</td>    </tr>    <tr>      <th>AGE</th>      <td>-0.377999</td>      <td>0.352734</td>      <td>-0.569537</td>      <td>0.644779</td>      <td>0.086518</td>      <td>0.731470</td>      <td>-0.240265</td>      <td>1.000000</td>      <td>-0.747881</td>      <td>0.456022</td>      <td>0.506456</td>      <td>0.261515</td>      <td>-0.273534</td>      <td>0.602339</td>    </tr>    <tr>      <th>DIS</th>      <td>0.249315</td>      <td>-0.379670</td>      <td>0.664408</td>      <td>-0.708027</td>      <td>-0.099176</td>      <td>-0.769230</td>      <td>0.205246</td>      <td>-0.747881</td>      <td>1.000000</td>      <td>-0.494588</td>      <td>-0.534432</td>      <td>-0.232471</td>      <td>0.291512</td>      <td>-0.496996</td>    </tr>    <tr>      <th>RAD</th>      <td>-0.384766</td>      <td>0.625505</td>      <td>-0.311948</td>      <td>0.595129</td>      <td>-0.007368</td>      <td>0.611441</td>      <td>-0.209847</td>      <td>0.456022</td>      <td>-0.494588</td>      <td>1.000000</td>      <td>0.910228</td>      <td>0.464741</td>      <td>-0.444413</td>      <td>0.488676</td>    </tr>    <tr>      <th>TAX</th>      <td>-0.471979</td>      <td>0.582764</td>      <td>-0.314563</td>      <td>0.720760</td>      <td>-0.035587</td>      <td>0.668023</td>      <td>-0.292048</td>      <td>0.506456</td>      <td>-0.534432</td>      <td>0.910228</td>      <td>1.000000</td>      <td>0.460853</td>      <td>-0.441808</td>      <td>0.543993</td>    </tr>    <tr>      <th>PTRATIO</th>      <td>-0.505655</td>      <td>0.289946</td>      <td>-0.391679</td>      <td>0.383248</td>      <td>-0.121515</td>      <td>0.188933</td>      <td>-0.355501</td>      <td>0.261515</td>      <td>-0.232471</td>      <td>0.464741</td>      <td>0.460853</td>      <td>1.000000</td>      <td>-0.177383</td>      <td>0.374044</td>    </tr>    <tr>      <th>B</th>      <td>0.334861</td>      <td>-0.385064</td>      <td>0.175520</td>      <td>-0.356977</td>      <td>0.048788</td>      <td>-0.380051</td>      <td>0.128069</td>      <td>-0.273534</td>      <td>0.291512</td>      <td>-0.444413</td>      <td>-0.441808</td>      <td>-0.177383</td>      <td>1.000000</td>      <td>-0.366087</td>    </tr>    <tr>      <th>LSTAT</th>      <td>-0.740836</td>      <td>0.455621</td>      <td>-0.412995</td>      <td>0.603800</td>      <td>-0.053929</td>      <td>0.590879</td>      <td>-0.613808</td>      <td>0.602339</td>      <td>-0.496996</td>      <td>0.488676</td>      <td>0.543993</td>      <td>0.374044</td>      <td>-0.366087</td>      <td>1.000000</td>    </tr>  </tbody></table></div></div><br><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># heatmap (seaborn)</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">16</span>, <span class="number">12</span>))</span><br><span class="line">ax = fig.gca()</span><br><span class="line"></span><br><span class="line">sns.set(font_scale = <span class="number">1.5</span>)  <span class="comment"># heatmap 안의 font-size 설정</span></span><br><span class="line">heatmap = sns.heatmap(corr.values, annot = <span class="literal">True</span>, fmt=<span class="string">'.2f'</span>, annot_kws={<span class="string">'size'</span>:<span class="number">15</span>},</span><br><span class="line">                      yticklabels = cols, xticklabels = cols, ax=ax)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_35_0.png" alt="output_35_0"></p><p>우리의 관심사인 target variable **“CMEDV”**가 다른 feature간의 상관관계를 살펴보면, 이는 <strong>“RM - 자택당 평균 방 갯수”(0.7)</strong> 및 **“LSTAT - 빈곤층의 비율”(-0.74)**과 <strong>강한 상관관계</strong>를 보이고 있다는 것을 알 수 있다.</p><p>이 두 변수와의 관계를 좀 더 자세히 살펴볼게요.</p>  <br><h4 id="설명-변수와-종속-변수의-관계-탐색"><a class="markdownIt-Anchor" href="#설명-변수와-종속-변수의-관계-탐색"></a> &gt;&gt; 설명 변수와 종속 변수의 관계 탐색</h4><ul><li>집값 ( “CMEDV” )  ~  방 갯수 ( “RM” )</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scatter plot</span></span><br><span class="line">sns.scatterplot(data=df, x=<span class="string">'RM'</span>, y=<span class="string">'CMEDV'</span>, markers=<span class="string">'o'</span>, color=<span class="string">'blue'</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.title(<span class="string">'Scatter Plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_40_0.png" alt="output_40_0"></p><p>집값은 방 갯수와 양의 상관관계(positive correlation)를 갖는다. 즉, 방 갯수가 많을 수록 집값이 높을 경향이 있다</p><br><ul><li>집값(“CMEDV”) ~ 빈곤층의 비율(“LSTAT”)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scatter plot</span></span><br><span class="line">sns.scatterplot(data=df, x=<span class="string">'LSTAT'</span>, y=<span class="string">'CMEDV'</span>, markers=<span class="string">'o'</span>, color=<span class="string">'blue'</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.title(<span class="string">'Scatter Plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_43_0.png" alt="output_43_0"></p><p>집값은 빈곤층의 비율과 음의 상관관계(negative correlation)를 갖는다. 즉, 빈곤층의 비율이 높을 수록 집값이 낮은 경향이 있다.</p>  <br><h4 id="지역별-차이-탐색"><a class="markdownIt-Anchor" href="#지역별-차이-탐색"></a> &gt;&gt; 지역별 차이 탐색</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역 데이터 - "TOWN"</span></span><br><span class="line">df[<span class="string">'TOWN'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>Cambridge            30Boston Savin Hill    23Lynn                 22Boston Roxbury       19Newton               18                     ..Hanover               1Hull                  1Sherborn              1Hamilton              1Dover                 1Name: TOWN, Length: 92, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역별 데이터 갯수</span></span><br><span class="line">df[<span class="string">'TOWN'</span>].value_counts().hist(bins=<span class="number">50</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23cf3fb4b08&gt;</code></pre><p><img src="/images/E-Python-LinearRegression-1/output_48_1.png" alt="output_48_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역별 집값 특징 (boxplot 이용)</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">20</span>))</span><br><span class="line">sns.boxplot(x=<span class="string">'CMEDV'</span>, y=<span class="string">'TOWN'</span>, data=df)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23cf3ff9ec8&gt;</code></pre><p><img src="/images/E-Python-LinearRegression-1/output_49_1.png" alt="output_49_1"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역별 범죄율 특징</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">20</span>))</span><br><span class="line">sns.boxplot(x=<span class="string">'CRIM'</span>, y=<span class="string">'TOWN'</span>, data=df)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23cf407fec8&gt;</code></pre><p><img src="/images/E-Python-LinearRegression-1/output_50_1.png" alt="output_50_1"></p><br><br><h2 id="3-집값-예측-분석-회귀분석"><a class="markdownIt-Anchor" href="#3-집값-예측-분석-회귀분석"></a> <strong>3. 집값 예측 분석: 회귀분석</strong></h2><h3 id="3-1-데이터-전처리"><a class="markdownIt-Anchor" href="#3-1-데이터-전처리"></a> 3-1. 데이터 전처리</h3><h4 id="feature-표준화"><a class="markdownIt-Anchor" href="#feature-표준화"></a> &gt;&gt; feature 표준화</h4><p>Feature 들의 scale 차이를 없애기 위해 먼저 Feature 표준화를 진행한다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>TOWN</th>      <th>LON</th>      <th>LAT</th>      <th>CMEDV</th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Nahant</td>      <td>-70.955</td>      <td>42.2550</td>      <td>24.0</td>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1</td>      <td>296</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>    </tr>    <tr>      <th>1</th>      <td>Swampscott</td>      <td>-70.950</td>      <td>42.2875</td>      <td>21.6</td>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2</td>      <td>242</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>    </tr>    <tr>      <th>2</th>      <td>Swampscott</td>      <td>-70.936</td>      <td>42.2830</td>      <td>34.7</td>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2</td>      <td>242</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>    </tr>    <tr>      <th>3</th>      <td>Marblehead</td>      <td>-70.928</td>      <td>42.2930</td>      <td>33.4</td>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3</td>      <td>222</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>    </tr>    <tr>      <th>4</th>      <td>Marblehead</td>      <td>-70.922</td>      <td>42.2980</td>      <td>36.2</td>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3</td>      <td>222</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>    </tr>  </tbody></table></div></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 506 entries, 0 to 505Data columns (total 17 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   TOWN     506 non-null    object  1   LON      506 non-null    float64 2   LAT      506 non-null    float64 3   CMEDV    506 non-null    float64 4   CRIM     506 non-null    float64 5   ZN       506 non-null    float64 6   INDUS    506 non-null    float64 7   CHAS     506 non-null    int64   8   NOX      506 non-null    float64 9   RM       506 non-null    float64 10  AGE      506 non-null    float64 11  DIS      506 non-null    float64 12  RAD      506 non-null    int64   13  TAX      506 non-null    int64   14  PTRATIO  506 non-null    float64 15  B        506 non-null    float64 16  LSTAT    506 non-null    float64dtypes: float64(13), int64(3), object(1)memory usage: 67.3+ KB</code></pre><br><p>Dummy Variable을 제외한 Numerical Variable 들을 표준화 함.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># feature standardization  (numerical_columns except dummy var.-"CHAS")</span></span><br><span class="line">scaler = StandardScaler()  <span class="comment"># 평균 0, 표준편차 1</span></span><br><span class="line">scale_columns = [<span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>, <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>]</span><br><span class="line">df[scale_columns] = scaler.fit_transform(df[scale_columns])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>TOWN</th>      <th>LON</th>      <th>LAT</th>      <th>CMEDV</th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Nahant</td>      <td>-70.955</td>      <td>42.2550</td>      <td>24.0</td>      <td>-0.419782</td>      <td>0.284830</td>      <td>-1.287909</td>      <td>0</td>      <td>-0.144217</td>      <td>0.413672</td>      <td>-0.120013</td>      <td>0.140214</td>      <td>-0.982843</td>      <td>-0.666608</td>      <td>-1.459000</td>      <td>0.441052</td>      <td>-1.075562</td>    </tr>    <tr>      <th>1</th>      <td>Swampscott</td>      <td>-70.950</td>      <td>42.2875</td>      <td>21.6</td>      <td>-0.417339</td>      <td>-0.487722</td>      <td>-0.593381</td>      <td>0</td>      <td>-0.740262</td>      <td>0.194274</td>      <td>0.367166</td>      <td>0.557160</td>      <td>-0.867883</td>      <td>-0.987329</td>      <td>-0.303094</td>      <td>0.441052</td>      <td>-0.492439</td>    </tr>    <tr>      <th>2</th>      <td>Swampscott</td>      <td>-70.936</td>      <td>42.2830</td>      <td>34.7</td>      <td>-0.417342</td>      <td>-0.487722</td>      <td>-0.593381</td>      <td>0</td>      <td>-0.740262</td>      <td>1.282714</td>      <td>-0.265812</td>      <td>0.557160</td>      <td>-0.867883</td>      <td>-0.987329</td>      <td>-0.303094</td>      <td>0.396427</td>      <td>-1.208727</td>    </tr>    <tr>      <th>3</th>      <td>Marblehead</td>      <td>-70.928</td>      <td>42.2930</td>      <td>33.4</td>      <td>-0.416750</td>      <td>-0.487722</td>      <td>-1.306878</td>      <td>0</td>      <td>-0.835284</td>      <td>1.016303</td>      <td>-0.809889</td>      <td>1.077737</td>      <td>-0.752922</td>      <td>-1.106115</td>      <td>0.113032</td>      <td>0.416163</td>      <td>-1.361517</td>    </tr>    <tr>      <th>4</th>      <td>Marblehead</td>      <td>-70.922</td>      <td>42.2980</td>      <td>36.2</td>      <td>-0.412482</td>      <td>-0.487722</td>      <td>-1.306878</td>      <td>0</td>      <td>-0.835284</td>      <td>1.228577</td>      <td>-0.511180</td>      <td>1.077737</td>      <td>-0.752922</td>      <td>-1.106115</td>      <td>0.113032</td>      <td>0.441052</td>      <td>-1.026501</td>    </tr>  </tbody></table></div></div><br>  <h4 id="training-set-test-set-나누기"><a class="markdownIt-Anchor" href="#training-set-test-set-나누기"></a> &gt;&gt; Training set / Test set 나누기</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features for linear regression model</span></span><br><span class="line">df[numerical_columns].head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.419782</td>      <td>0.284830</td>      <td>-1.287909</td>      <td>0</td>      <td>-0.144217</td>      <td>0.413672</td>      <td>-0.120013</td>      <td>0.140214</td>      <td>-0.982843</td>      <td>-0.666608</td>      <td>-1.459000</td>      <td>0.441052</td>      <td>-1.075562</td>    </tr>    <tr>      <th>1</th>      <td>-0.417339</td>      <td>-0.487722</td>      <td>-0.593381</td>      <td>0</td>      <td>-0.740262</td>      <td>0.194274</td>      <td>0.367166</td>      <td>0.557160</td>      <td>-0.867883</td>      <td>-0.987329</td>      <td>-0.303094</td>      <td>0.441052</td>      <td>-0.492439</td>    </tr>    <tr>      <th>2</th>      <td>-0.417342</td>      <td>-0.487722</td>      <td>-0.593381</td>      <td>0</td>      <td>-0.740262</td>      <td>1.282714</td>      <td>-0.265812</td>      <td>0.557160</td>      <td>-0.867883</td>      <td>-0.987329</td>      <td>-0.303094</td>      <td>0.396427</td>      <td>-1.208727</td>    </tr>    <tr>      <th>3</th>      <td>-0.416750</td>      <td>-0.487722</td>      <td>-1.306878</td>      <td>0</td>      <td>-0.835284</td>      <td>1.016303</td>      <td>-0.809889</td>      <td>1.077737</td>      <td>-0.752922</td>      <td>-1.106115</td>      <td>0.113032</td>      <td>0.416163</td>      <td>-1.361517</td>    </tr>    <tr>      <th>4</th>      <td>-0.412482</td>      <td>-0.487722</td>      <td>-1.306878</td>      <td>0</td>      <td>-0.835284</td>      <td>1.228577</td>      <td>-0.511180</td>      <td>1.077737</td>      <td>-0.752922</td>      <td>-1.106115</td>      <td>0.113032</td>      <td>0.441052</td>      <td>-1.026501</td>    </tr>  </tbody></table></div></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># split dataset into training &amp; test</span></span><br><span class="line">X = df[numerical_columns]</span><br><span class="line">y = df[<span class="string">'CMEDV'</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((404, 13), (404,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((102, 13), (102,))</code></pre><br><h4 id="다중-공선성"><a class="markdownIt-Anchor" href="#다중-공선성"></a> &gt;&gt; 다중 공선성</h4><p>다중 공선성을 판단할 때 보통 VIF값을 본다.</p><p>일반적으로, VIF &gt; 10인 feature들은 다른 변수와 상관관계가 높아, 다중 공선성이 존재하는 것으로 판단한다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.stats.outliers_influence <span class="keyword">import</span> variance_inflation_factor</span><br><span class="line"></span><br><span class="line">vif = pd.DataFrame()</span><br><span class="line">vif[<span class="string">'features'</span>] = X_train.columns</span><br><span class="line">vif[<span class="string">"VIF Factor"</span>] = [variance_inflation_factor(X_train.values, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(X_train.shape[<span class="number">1</span>])]</span><br><span class="line">vif.round(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>features</th>      <th>VIF Factor</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>CRIM</td>      <td>1.7</td>    </tr>    <tr>      <th>1</th>      <td>ZN</td>      <td>2.5</td>    </tr>    <tr>      <th>2</th>      <td>INDUS</td>      <td>3.8</td>    </tr>    <tr>      <th>3</th>      <td>CHAS</td>      <td>1.1</td>    </tr>    <tr>      <th>4</th>      <td>NOX</td>      <td>4.4</td>    </tr>    <tr>      <th>5</th>      <td>RM</td>      <td>1.9</td>    </tr>    <tr>      <th>6</th>      <td>AGE</td>      <td>3.2</td>    </tr>    <tr>      <th>7</th>      <td>DIS</td>      <td>4.2</td>    </tr>    <tr>      <th>8</th>      <td>RAD</td>      <td>8.1</td>    </tr>    <tr>      <th>9</th>      <td>TAX</td>      <td>9.8</td>    </tr>    <tr>      <th>10</th>      <td>PTRATIO</td>      <td>1.9</td>    </tr>    <tr>      <th>11</th>      <td>B</td>      <td>1.4</td>    </tr>    <tr>      <th>12</th>      <td>LSTAT</td>      <td>3.0</td>    </tr>  </tbody></table></div><br><h3 id="3-2-회귀-분석-모델-학습-및-예측"><a class="markdownIt-Anchor" href="#3-2-회귀-분석-모델-학습-및-예측"></a> 3-2. 회귀 분석 모델 학습 및 예측</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit regression model in training set</span></span><br><span class="line">lr = linear_model.LinearRegression()</span><br><span class="line">model = lr.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict in test set</span></span><br><span class="line">pred_test = lr.predict(X_test)</span><br></pre></td></tr></tbody></table></figure>  <br><h4 id="coefficients-확인하기"><a class="markdownIt-Anchor" href="#coefficients-확인하기"></a> &gt;&gt; coefficients 확인하기</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print coef</span></span><br><span class="line">print(lr.coef_)</span><br></pre></td></tr></tbody></table></figure><pre><code>[-0.9479409   1.39796831  0.14786968  2.13469673 -2.25995614  2.15879342  0.12103297 -3.23121173  2.63662665 -1.95959865 -2.05639351  0.65670428 -3.93702535]</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "feature - coefficients" DataFrame 만들기</span></span><br><span class="line">coefs = pd.DataFrame(zip(df[numerical_columns].columns, lr.coef_), columns = [<span class="string">'feature'</span>, <span class="string">'coefficients'</span>])</span><br><span class="line">coefs</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>feature</th>      <th>coefficients</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>CRIM</td>      <td>-0.947941</td>    </tr>    <tr>      <th>1</th>      <td>ZN</td>      <td>1.397968</td>    </tr>    <tr>      <th>2</th>      <td>INDUS</td>      <td>0.147870</td>    </tr>    <tr>      <th>3</th>      <td>CHAS</td>      <td>2.134697</td>    </tr>    <tr>      <th>4</th>      <td>NOX</td>      <td>-2.259956</td>    </tr>    <tr>      <th>5</th>      <td>RM</td>      <td>2.158793</td>    </tr>    <tr>      <th>6</th>      <td>AGE</td>      <td>0.121033</td>    </tr>    <tr>      <th>7</th>      <td>DIS</td>      <td>-3.231212</td>    </tr>    <tr>      <th>8</th>      <td>RAD</td>      <td>2.636627</td>    </tr>    <tr>      <th>9</th>      <td>TAX</td>      <td>-1.959599</td>    </tr>    <tr>      <th>10</th>      <td>PTRATIO</td>      <td>-2.056394</td>    </tr>    <tr>      <th>11</th>      <td>B</td>      <td>0.656704</td>    </tr>    <tr>      <th>12</th>      <td>LSTAT</td>      <td>-3.937025</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 크기 순서로 나열</span></span><br><span class="line">coefs.reindex(coefs.coefficients.abs().sort_values(ascending=<span class="literal">False</span>).index)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>feature</th>      <th>coefficients</th>    </tr>  </thead>  <tbody>    <tr>      <th>12</th>      <td>LSTAT</td>      <td>-3.937025</td>    </tr>    <tr>      <th>7</th>      <td>DIS</td>      <td>-3.231212</td>    </tr>    <tr>      <th>8</th>      <td>RAD</td>      <td>2.636627</td>    </tr>    <tr>      <th>4</th>      <td>NOX</td>      <td>-2.259956</td>    </tr>    <tr>      <th>5</th>      <td>RM</td>      <td>2.158793</td>    </tr>    <tr>      <th>3</th>      <td>CHAS</td>      <td>2.134697</td>    </tr>    <tr>      <th>10</th>      <td>PTRATIO</td>      <td>-2.056394</td>    </tr>    <tr>      <th>9</th>      <td>TAX</td>      <td>-1.959599</td>    </tr>    <tr>      <th>1</th>      <td>ZN</td>      <td>1.397968</td>    </tr>    <tr>      <th>0</th>      <td>CRIM</td>      <td>-0.947941</td>    </tr>    <tr>      <th>11</th>      <td>B</td>      <td>0.656704</td>    </tr>    <tr>      <th>2</th>      <td>INDUS</td>      <td>0.147870</td>    </tr>    <tr>      <th>6</th>      <td>AGE</td>      <td>0.121033</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## coefficients 시각화</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># figure size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bar plot</span></span><br><span class="line">plt.barh(coefs[<span class="string">'feature'</span>], coefs[<span class="string">'coefficients'</span>])</span><br><span class="line">plt.title(<span class="string">'"feature - coefficient" Graph'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'coefficients'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'features'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_81_0.png" alt="output_81_0"></p><br><h4 id="feature-유의성-검정"><a class="markdownIt-Anchor" href="#feature-유의성-검정"></a> &gt;&gt; feature 유의성 검정</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">X_train2 = sm.add_constant(X_train)</span><br><span class="line">model2 = sm.OLS(y_train, X_train2).fit()</span><br><span class="line">model2.summary()</span><br></pre></td></tr></tbody></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tbody><tr>  <th>Dep. Variable:</th>          <td>CMEDV</td>      <th>  R-squared:         </th> <td>   0.734</td> </tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.725</td> </tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   82.86</td> </tr><tr>  <th>Date:</th>             <td>Tue, 11 Aug 2020</td> <th>  Prob (F-statistic):</th> <td>1.72e-103</td></tr><tr>  <th>Time:</th>                 <td>00:22:07</td>     <th>  Log-Likelihood:    </th> <td> -1191.9</td> </tr><tr>  <th>No. Observations:</th>      <td>   404</td>      <th>  AIC:               </th> <td>   2412.</td> </tr><tr>  <th>Df Residuals:</th>          <td>   390</td>      <th>  BIC:               </th> <td>   2468.</td> </tr><tr>  <th>Df Model:</th>              <td>    13</td>      <th>                     </th>     <td> </td>    </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    </tr></tbody></table><table class="simpletable"><tbody><tr>     <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P&gt;|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>const</th>   <td>   22.4313</td> <td>    0.245</td> <td>   91.399</td> <td> 0.000</td> <td>   21.949</td> <td>   22.914</td></tr><tr>  <th>CRIM</th>    <td>   -0.9479</td> <td>    0.290</td> <td>   -3.263</td> <td> 0.001</td> <td>   -1.519</td> <td>   -0.377</td></tr><tr>  <th>ZN</th>      <td>    1.3980</td> <td>    0.372</td> <td>    3.758</td> <td> 0.000</td> <td>    0.667</td> <td>    2.129</td></tr><tr>  <th>INDUS</th>   <td>    0.1479</td> <td>    0.458</td> <td>    0.323</td> <td> 0.747</td> <td>   -0.753</td> <td>    1.049</td></tr><tr>  <th>CHAS</th>    <td>    2.1347</td> <td>    0.899</td> <td>    2.375</td> <td> 0.018</td> <td>    0.367</td> <td>    3.902</td></tr><tr>  <th>NOX</th>     <td>   -2.2600</td> <td>    0.490</td> <td>   -4.617</td> <td> 0.000</td> <td>   -3.222</td> <td>   -1.298</td></tr><tr>  <th>RM</th>      <td>    2.1588</td> <td>    0.332</td> <td>    6.495</td> <td> 0.000</td> <td>    1.505</td> <td>    2.812</td></tr><tr>  <th>AGE</th>     <td>    0.1210</td> <td>    0.415</td> <td>    0.292</td> <td> 0.771</td> <td>   -0.695</td> <td>    0.937</td></tr><tr>  <th>DIS</th>     <td>   -3.2312</td> <td>    0.477</td> <td>   -6.774</td> <td> 0.000</td> <td>   -4.169</td> <td>   -2.293</td></tr><tr>  <th>RAD</th>     <td>    2.6366</td> <td>    0.671</td> <td>    3.931</td> <td> 0.000</td> <td>    1.318</td> <td>    3.955</td></tr><tr>  <th>TAX</th>     <td>   -1.9596</td> <td>    0.731</td> <td>   -2.679</td> <td> 0.008</td> <td>   -3.398</td> <td>   -0.522</td></tr><tr>  <th>PTRATIO</th> <td>   -2.0564</td> <td>    0.319</td> <td>   -6.446</td> <td> 0.000</td> <td>   -2.684</td> <td>   -1.429</td></tr><tr>  <th>B</th>       <td>    0.6567</td> <td>    0.272</td> <td>    2.414</td> <td> 0.016</td> <td>    0.122</td> <td>    1.191</td></tr><tr>  <th>LSTAT</th>   <td>   -3.9370</td> <td>    0.405</td> <td>   -9.723</td> <td> 0.000</td> <td>   -4.733</td> <td>   -3.141</td></tr></tbody></table><table class="simpletable"><tbody><tr>  <th>Omnibus:</th>       <td>169.952</td> <th>  Durbin-Watson:     </th> <td>   1.935</td> </tr><tr>  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 859.012</td> </tr><tr>  <th>Skew:</th>          <td> 1.762</td>  <th>  Prob(JB):          </th> <td>2.94e-187</td></tr><tr>  <th>Kurtosis:</th>      <td> 9.213</td>  <th>  Cond. No.          </th> <td>    10.7</td> </tr></tbody></table><br>Warnings:<br>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br><br><p>t검정 결과를 확인해보면, INDUS(상업적 비즈니스에 활용되지 않는 농지 면적)과 AGE(1940 년 이전에 건설된 비율) 두 변수가 유의하지 않다는 것을 확인할 수 있다.</p> <br> <h4 id="예측-결과-및-모델-성능-확인"><a class="markdownIt-Anchor" href="#예측-결과-및-모델-성능-확인"></a> &gt;&gt; 예측 결과 및 모델 성능 확인</h4><ul><li>예측 결과 시각화</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예측 결과 시각화 (test set)</span></span><br><span class="line">df = pd.DataFrame({<span class="string">'actual'</span>: y_test, <span class="string">'prediction'</span>: pred_test})</span><br><span class="line">df = df.sort_values(by=<span class="string">'actual'</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">plt.scatter(df.index, df[<span class="string">'prediction'</span>], marker=<span class="string">'x'</span>, color=<span class="string">'r'</span>)</span><br><span class="line">plt.scatter(df.index, df[<span class="string">'actual'</span>], alpha=<span class="number">0.7</span>, marker=<span class="string">'o'</span>, color=<span class="string">'black'</span>)</span><br><span class="line">plt.title(<span class="string">"Prediction Result in Test Set"</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.legend([<span class="string">'prediction'</span>, <span class="string">'actual'</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/E-Python-LinearRegression-1/output_89_0.png" alt="output_89_0"></p><br><ul><li>R square</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R square</span></span><br><span class="line">print(model.score(X_train, y_train))  <span class="comment"># training set</span></span><br><span class="line">print(model.score(X_test, y_test))  <span class="comment"># test set</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0.73418320551691440.7639579157366423</code></pre><br><ul><li>RMSE</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RMSE</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment"># training set</span></span><br><span class="line">pred_train = lr.predict(X_train)</span><br><span class="line">print(sqrt(mean_squared_error(y_train, pred_train)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># test set</span></span><br><span class="line">print(sqrt(mean_squared_error(y_test, pred_test)))</span><br></pre></td></tr></tbody></table></figure><pre><code>4.6240517608403344.829847098176557</code></pre><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Linear Regression -- Boston 지역 집값 예측
    
    </summary>
    
    
      <category term="【Exercise】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="회귀" scheme="https://hyemin-kim.github.io/tags/%ED%9A%8C%EA%B7%80/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn - (5) 비지도 학습 (Unsupervised Learning)</title>
    <link href="https://hyemin-kim.github.io/2020/08/06/S-Python-sklearn5/"/>
    <id>https://hyemin-kim.github.io/2020/08/06/S-Python-sklearn5/</id>
    <published>2020-08-06T04:57:29.000Z</published>
    <updated>2020-08-13T12:47:41.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="비지도-학습-unsupervised-learning"><a class="markdownIt-Anchor" href="#비지도-학습-unsupervised-learning"></a> 비지도 학습 (Unsupervised Learning)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EB%B9%84%EC%A7%80%EB%8F%84-%ED%95%99%EC%8A%B5%EC%9D%98-%EA%B0%9C%EC%9A%94"><strong>1. 비지도 학습의 개요</strong></a></li><li><a href="#2-%EC%B0%A8%EC%9B%90-%EC%B6%95%EC%86%8C"><strong>2. 차원 축소</strong></a><ul><li><a href="#2-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A1%9C%EB%93%9C-iris-%EB%8D%B0%EC%9D%B4%ED%84%B0">2-1. 데이터 로드 (iris 데이터)</a></li><li><a href="#2-2-pca-%EC%B0%A8%EC%9B%90-%EC%B6%95%EC%86%8C">2-2. PCA 차원 축소</a></li><li><a href="#2-3-lda-%EC%B0%A8%EC%9B%90-%EC%B6%95%EC%86%8C">2-3. LDA 차원 축소</a></li><li><a href="#2-4-svd-%ED%8A%B9%EC%9D%B4%EA%B0%92-%EB%B6%84%ED%95%B4">2-4. SVD (특이값 분해)</a></li></ul></li><li><a href="#3-%EA%B5%B0%EC%A7%91%ED%99%94"><strong>3. 군집화</strong></a><ul><li><a href="#3-1-k-means-clustering">3-1. K-Means Clustering</a></li><li><a href="#3-2-dbscan">3-2. DBSCAN</a></li><li><a href="#3-3-%EC%8B%A4%EB%A3%A8%EC%97%A3-%EC%8A%A4%EC%BD%94%EC%96%B4-%EA%B5%B0%EC%A7%91%ED%99%94-%ED%8F%89%EA%B0%80">3-3. 실루엣 스코어 (군집화 평가)</a></li></ul></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="1-비지도-학습의-개요"><a class="markdownIt-Anchor" href="#1-비지도-학습의-개요"></a> <strong>1. 비지도 학습의 개요</strong></h2><p>비지도 학습 (Unsupervised Learning)은 기계 학습의 일종으로, 데이터가 어떻게 구성되어 있는지를 알아내는 문제의 범주에 속한다. 이 방법은 지도 학습 (Supervised Learning) 혹은 강화 학습 (Reinforcement Learning)과는 달리 <strong>입력값에 대한 목표치가 주어지지 않는다</strong></p><ul><li><p>차원 축소: PCA, LDA, SVD</p></li><li><p>군집화: KMeans Clustering, DBSCAN</p></li><li><p>군집화 평가</p><br></li></ul><h2 id="2-차원-축소"><a class="markdownIt-Anchor" href="#2-차원-축소"></a> <strong>2. 차원 축소</strong></h2><ul><li>feature의 갯수를 줄이는 것을 뛰어 넘어, 특징을 추출하는 역할응 하기도 함</li><li>계산 비용을 감소하는 효과</li><li>전반적인 데이터에 대한 이해도를 높이는 효과</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><br>  <h3 id="2-1-데이터-로드-iris-데이터"><a class="markdownIt-Anchor" href="#2-1-데이터-로드-iris-데이터"></a> 2-1. 데이터 로드 (iris 데이터)</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris = datasets.load_iris()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = iris[<span class="string">'data'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[5.1, 3.5, 1.4, 0.2],       [4.9, 3. , 1.4, 0.2],       [4.7, 3.2, 1.3, 0.2],       [4.6, 3.1, 1.5, 0.2],       [5. , 3.6, 1.4, 0.2]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = iris[<span class="string">'feature_names'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'target'</span>] = iris[<span class="string">'target'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>  </tbody></table></div><br><h3 id="2-2-pca-차원-축소"><a class="markdownIt-Anchor" href="#2-2-pca-차원-축소"></a> 2-2. PCA 차원 축소</h3><blockquote><p>참고: <a href="https://excelsior-cjh.tistory.com/167" target="_blank" rel="noopener">PCA 원리 관련 블로그</a></p></blockquote><p>주성분 분석 (PCA, Principal Component Analysis) 는 선형 차원 축소 기법이다. 매우 인기 있게 사용되는 차원 축소 기법중 하나다.</p><p>PCA는 먼저 데이터에 가장 가까운 초평면(hyperplane)을 구한 다음, 데이터를 이 초평면에 투영(projection)시킨다. 주요 특징 중의 하나는 <strong>분산(variance)을 촤대한 보존</strong>한다는 점이다.</p><ul><li><p><strong>분산 보존</strong></p><p>PCA는 <strong>데이터의 분산이 최대</strong>가 되는 축을 찾는다. 즉, 원본 데이터셋과 투영된 데이터셋 간의 <strong>평균제곱거리</strong>를 <strong>최소화</strong>하는 축을 찾는다.</p></li><li><p><strong>PCA 실현 과정</strong></p><ol><li>학습 데이터셋에서 분산이 최대인 축(axis)을 찾는다</li><li>이렇게 찾은 첫 번째 축과 직교(orthogonal)하면서 분산이 최대인 두 번째 축을 찾는다</li><li>첫 번째 축과 두 번째 축에 직교하고 분산을 최대한 보존하는 세 번째 축을 찾는다</li><li><code>1~3</code>과 같은 방법으로 데이터셋의 차원(특성 수)만큼의 축을  찾는다</li></ol><p>이렇게 i-번째 축을 정의하는 **단위 벡터(unit vector)**를 i-번째 <strong>주성분</strong>(PC, Principle Component)이라고 한다.</p><br></li></ul><p><strong>&gt;&gt; sklearn에서 실현</strong></p><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html" target="_blank" rel="noopener">[sklearn.decomposition.<strong>PCA</strong>] Documnet</a></p><ul><li><p>n_components에 1보다 작은 값을 넣으면, 분산을 기준으로 차원 축소</p></li><li><p>n_components에 1보다 큰 값을 넣으면, 해당 값을 기준으로 feature를 축소</p><br></li></ul><p><strong>(1) 주성분 2개로 지정</strong> (n_components = 2)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모델 선언</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data scaling</span></span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># PCA 실행</span></span><br><span class="line">pca_data = pca.fit_transform(data_scaled)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_scaled[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[-0.90068117,  1.01900435, -1.34022653, -1.3154443 ],       [-1.14301691, -0.13197948, -1.34022653, -1.3154443 ],       [-1.38535265,  0.32841405, -1.39706395, -1.3154443 ],       [-1.50652052,  0.09821729, -1.2833891 , -1.3154443 ],       [-1.02184904,  1.24920112, -1.34022653, -1.3154443 ]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pca_data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[-2.26470281,  0.4800266 ],       [-2.08096115, -0.67413356],       [-2.36422905, -0.34190802],       [-2.29938422, -0.59739451],       [-2.38984217,  0.64683538]])</code></pre>  <br><p>주성분에 따른 데이터 시각화</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(pca_data[:, <span class="number">0</span>], pca_data[:, <span class="number">1</span>], c=df[<span class="string">'target'</span>]) <span class="comment"># c: color 기준</span></span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x201028bf148&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_39_1.png" alt="output_39_1"></p><br><p><strong>(2) 분산을 기준으로 차원축소</strong> (n_components &lt; 1)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pca2 = PCA(n_components=<span class="number">0.99</span>)</span><br><span class="line">pca_data2 = pca2.fit_transform(data_scaled)</span><br><span class="line">pca_data2[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[-2.26470281,  0.4800266 , -0.12770602],       [-2.08096115, -0.67413356, -0.23460885],       [-2.36422905, -0.34190802,  0.04420148],       [-2.29938422, -0.59739451,  0.09129011],       [-2.38984217,  0.64683538,  0.0157382 ]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)  <span class="comment"># Axe3D object</span></span><br><span class="line"></span><br><span class="line">sample_size = <span class="number">50</span></span><br><span class="line">ax.scatter(pca_data2[:,<span class="number">0</span>], pca_data2[:,<span class="number">1</span>], pca_data2[:,<span class="number">2</span>], alpha=<span class="number">0.6</span>, c=df[<span class="string">'target'</span>])</span><br><span class="line">plt.savefig(<span class="string">'./tmp.svg'</span>)</span><br><span class="line">plt.title(<span class="string">'ax.plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn5/output_43_0.png" alt="output_43_0"></p><br><h3 id="2-3-lda-차원-축소"><a class="markdownIt-Anchor" href="#2-3-lda-차원-축소"></a> 2-3. LDA 차원 축소</h3><blockquote><p>참고 블로그:</p><ol><li><a href="https://blog.naver.com/mo223772/222051769650" target="_blank" rel="noopener">차원 축소 - LDA(Linear Discriminant Analysis) 개요</a></li><li><a href="https://blog.naver.com/jaehong7719/221926671654" target="_blank" rel="noopener">머신러닝 기초9 - LDA (Linear Discriminant Analysis)</a></li></ol></blockquote><p>LDA (Linear Discriminant Analysis): 선형 판별 분석법 (PCA와 유사)</p><p>LDA는 클래스(Class)분리를 최대화하는 축을 찾기 위해 클래스 간 분산(between-class scatter)과 내분 분산(within-class scatter)의 비율을 최대화하는 방식으로 차원을 축소함.</p><p>즉, 클래스 간 분산은 최대한 크게 가져가고, 클래스 내부의 분산은 최대한 작게 가져가는 방식이다.</p><br>  <p><strong>&gt;&gt; sklearn에서 실현</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모델 선언</span></span><br><span class="line">lda = LinearDiscriminantAnalysis(n_components=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data scaling</span></span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDA 실행</span></span><br><span class="line">lda_data = lda.fit_transform(data_scaled, df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lda_data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[-8.06179978,  0.30042062],       [-7.12868772, -0.78666043],       [-7.48982797, -0.26538449],       [-6.81320057, -0.67063107],       [-8.13230933,  0.51446253]])</code></pre><br><p>시각화</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LDA</span></span><br><span class="line">plt.scatter(lda_data[:,<span class="number">0</span>], lda_data[:,<span class="number">1</span>], c=df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x20102cd5608&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_57_1.png" alt="output_57_1"></p><p>PCA 결과와 비교</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PCA</span></span><br><span class="line">plt.scatter(pca_data[:,<span class="number">0</span>], pca_data[:,<span class="number">1</span>], c=df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x20102ba6908&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_59_1.png" alt="output_59_1"></p><br><h3 id="2-4-svd-특이값-분해"><a class="markdownIt-Anchor" href="#2-4-svd-특이값-분해"></a> 2-4. SVD (특이값 분해)</h3><blockquote><p><a href="https://ko.wikipedia.org/wiki/%ED%8A%B9%EC%9D%B4%EA%B0%92_%EB%B6%84%ED%95%B4" target="_blank" rel="noopener">위키문서</a></p></blockquote><p>SVD (Singular Value Decomposition):</p><ul><li>특이값 분해 기법이다</li><li>PCA와 유사한 차원 축소 기법이다</li><li>scikit-learn 패키지에서는 truncated SVD (aka LSA)을 사용한다</li><li>상품의 추천 시스템에도 활용되어지는 알고리즘 (추천시스템)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> TruncatedSVD</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svd = TruncatedSVD(n_components = <span class="number">2</span>)</span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line">svd_data = svd.fit_transform(data_scaled)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svd_data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[-2.26470281,  0.4800266 ],       [-2.08096115, -0.67413356],       [-2.36422905, -0.34190802],       [-2.29938422, -0.59739451],       [-2.38984217,  0.64683538]])</code></pre><br>  <p>시각화</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SVD</span></span><br><span class="line">plt.scatter(svd_data[:,<span class="number">0</span>], svd_data[:,<span class="number">1</span>], c=df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x20102b2ed08&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_71_1.png" alt="output_71_1"></p><p>PCA &amp; LDA와 비교</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PCA</span></span><br><span class="line">plt.scatter(pca_data[:,<span class="number">0</span>], pca_data[:,<span class="number">1</span>], c=df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x20102ad7d88&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_73_1.png" alt="output_73_1"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LDA</span></span><br><span class="line">plt.scatter(lda_data[:,<span class="number">0</span>], lda_data[:,<span class="number">1</span>], c=df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x20102d43e08&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_74_1.png" alt="output_74_1"></p><br><br><h2 id="3-군집화"><a class="markdownIt-Anchor" href="#3-군집화"></a> <strong>3. 군집화</strong></h2><h3 id="3-1-k-means-clustering"><a class="markdownIt-Anchor" href="#3-1-k-means-clustering"></a> 3-1. K-Means Clustering</h3><blockquote><p><a href="https://ko.wikipedia.org/wiki/K-%ED%8F%89%EA%B7%A0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98" target="_blank" rel="noopener">위키문서</a></p></blockquote><p>군집화에서 가장 대중적으로 사용되는 알고리즘이다. centroid라는 중점을 기준으로 가강 가까운 포인트를 선택하는 군집화 기법이다</p><p><strong>원리:</strong> 주어진 데이터를 k개의 cluster로 묶는 방식, 거리 차이의 분산을 최소화하는 방식으로 동작.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://image.slidesharecdn.com/patternrecognitionbinoy-06-kmeansclustering-160317135729/95/pattern-recognition-binoy-k-means-clustering-13-638.jpg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn5/output_81_0.jpg" alt="output_81_0"></p><br><p><strong>사용되는 예제</strong></p><ul><li>스팸 문자 분류</li><li>뉴스 기사 분류</li></ul><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html" target="_blank" rel="noopener">[sklearn.cluster.<strong>KMeans</strong>] Document</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kmeans = KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line">cluster_data = kmeans.fit_transform(data_scaled)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster_data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[3.12119834, 0.21295824, 3.98940603],       [2.6755083 , 0.99604549, 4.01793312],       [2.97416665, 0.65198444, 4.19343668],       [2.88014429, 0.9034561 , 4.19784749],       [3.30022609, 0.40215457, 4.11157152]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kmeans.labels_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2,       0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0,       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2,       2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2,       2, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(kmeans.labels_)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x201043c7fc8&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_88_1.png" alt="output_88_1"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(df[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2010301bec8&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_89_1.png" alt="output_89_1"></p><br><p>Hyper-parameter Tuning</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kmeans</span><br></pre></td></tr></tbody></table></figure><pre><code>KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',       random_state=None, tol=0.0001, verbose=0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max_iter: maximum number of iterations for a single run</span></span><br><span class="line">kmeans2 = KMeans(n_clusters=<span class="number">3</span>, max_iter=<span class="number">500</span>)</span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line">cluster_data2 = kmeans2.fit_transform(data_scaled)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(kmeans2.labels_)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x20105525688&gt;</code></pre><p><img src="/images/S-Python-sklearn5/output_94_1.png" alt="output_94_1"></p><br><h3 id="3-2-dbscan"><a class="markdownIt-Anchor" href="#3-2-dbscan"></a> 3-2. DBSCAN</h3><p><strong>밀도 기반 클러스터링</strong><br>(DBSCAN: Dencity-Based Spatial Clustering of Applications with Noise)</p><ul><li>밀도가 높은 부분을 클러스터링 하는 방식</li><li>어느 점을 기준으로 반경 x내에 점이 n개 이상 있으면 하나의 군집으로 인식하는 방식</li><li>KMeans 에서는 n_cluster의 갯수를 반드시 지정해 주어야 하나, DBSCAN에서는 필요없음</li><li>기하학적인 clustering도 잘 찾아냄</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://image.slidesharecdn.com/pydatanyc2015-151119175854-lva1-app6891/95/pydata-nyc-2015-automatically-detecting-outliers-with-datadog-26-638.jpg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn5/output_98_0.jpg" alt="output_98_0"></p>  <br><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html" target="_blank" rel="noopener">[sklearn.cluster.<strong>DBSCAN</strong>] Document</a></p><p><strong>주의:</strong> 변환 시 <code>fit_transform()</code>대신 <strong><code>fit_predict()</code></strong> 를 쓴다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eps: The maximum distance between two samples for one to be considered as in the neighborhoood of the other</span></span><br><span class="line">dbscan = DBSCAN(eps=<span class="number">0.7</span>, min_samples=<span class="number">2</span>)</span><br><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line">dbscan_data = dbscan.fit_predict(data_scaled)</span><br><span class="line">dbscan_data</span><br></pre></td></tr></tbody></table></figure><pre><code>array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,        0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,        1,  1,  1,  1, -1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  2,  1,        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],      dtype=int64)</code></pre> <br>   <h3 id="3-3-실루엣-스코어-군집화-평가"><a class="markdownIt-Anchor" href="#3-3-실루엣-스코어-군집화-평가"></a> 3-3. 실루엣 스코어 (군집화 평가)</h3><p>클러스터링의 품질을 정량적으로 평가해 주는 지표</p><ul><li>1: 클러스터링의 품질이 좋다</li><li>0: 클러스터링의 품질이 안좋다 (클러스터링의 의미 없음)</li><li>음수: 잘못 분류됨</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_samples, silhouette_score</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data_scaled = StandardScaler().fit_transform(df.loc[:, <span class="string">'sepal length (cm)'</span> : <span class="string">'petal width (cm)'</span>])</span><br><span class="line">score = silhouette_score(data_scaled, kmeans.labels_)</span><br><span class="line">score</span><br></pre></td></tr></tbody></table></figure><pre><code>0.45994823920518635</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">samples = silhouette_samples(data_scaled, kmeans.labels_)</span><br><span class="line">samples[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([0.73419485, 0.56827391, 0.67754724, 0.62050159, 0.72847412])</code></pre><br><p><a href="https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html" target="_blank" rel="noopener">silhouette analysis 시각화 Document</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_silhouette</span><span class="params">(X, num_cluesters)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n_clusters <span class="keyword">in</span> num_cluesters:</span><br><span class="line">        <span class="comment"># Create a subplot with 1 row and 2 columns</span></span><br><span class="line">        fig, (ax1, ax2) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        fig.set_size_inches(<span class="number">18</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The 1st subplot is the silhouette plot</span></span><br><span class="line">        <span class="comment"># The silhouette coefficient can range from -1, 1 but in this example all</span></span><br><span class="line">        <span class="comment"># lie within [-0.1, 1]</span></span><br><span class="line">        ax1.set_xlim([<span class="number">-0.1</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="comment"># The (n_clusters+1)*10 is for inserting blank space between silhouette</span></span><br><span class="line">        <span class="comment"># plots of individual clusters, to demarcate them clearly.</span></span><br><span class="line">        ax1.set_ylim([<span class="number">0</span>, len(X) + (n_clusters + <span class="number">1</span>) * <span class="number">10</span>])</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Initialize the clusterer with n_clusters value and a random generator</span></span><br><span class="line">        <span class="comment"># seed of 10 for reproducibility.</span></span><br><span class="line">        clusterer = KMeans(n_clusters=n_clusters, random_state=<span class="number">10</span>)</span><br><span class="line">        cluster_labels = clusterer.fit_predict(X)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># The silhouette_score gives the average value for all the samples.</span></span><br><span class="line">        <span class="comment"># This gives a perspective into the density and separation of the formed</span></span><br><span class="line">        <span class="comment"># clusters</span></span><br><span class="line">        silhouette_avg = silhouette_score(X, cluster_labels)</span><br><span class="line">        print(<span class="string">"For n_clusters ="</span>, n_clusters,</span><br><span class="line">              <span class="string">"The average silhouette_score is :"</span>, silhouette_avg)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Compute the silhouette scores for each sample</span></span><br><span class="line">        sample_silhouette_values = silhouette_samples(X, cluster_labels)</span><br><span class="line">    </span><br><span class="line">        y_lower = <span class="number">10</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_clusters):</span><br><span class="line">            <span class="comment"># Aggregate the silhouette scores for samples belonging to</span></span><br><span class="line">            <span class="comment"># cluster i, and sort them</span></span><br><span class="line">            ith_cluster_silhouette_values = \</span><br><span class="line">                sample_silhouette_values[cluster_labels == i]</span><br><span class="line">    </span><br><span class="line">            ith_cluster_silhouette_values.sort()</span><br><span class="line">    </span><br><span class="line">            size_cluster_i = ith_cluster_silhouette_values.shape[<span class="number">0</span>]</span><br><span class="line">            y_upper = y_lower + size_cluster_i</span><br><span class="line">    </span><br><span class="line">            color = cm.nipy_spectral(float(i) / n_clusters)</span><br><span class="line">            ax1.fill_betweenx(np.arange(y_lower, y_upper),</span><br><span class="line">                              <span class="number">0</span>, ith_cluster_silhouette_values,</span><br><span class="line">                              facecolor=color, edgecolor=color, alpha=<span class="number">0.7</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># Label the silhouette plots with their cluster numbers at the middle</span></span><br><span class="line">            ax1.text(<span class="number">-0.05</span>, y_lower + <span class="number">0.5</span> * size_cluster_i, str(i))</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># Compute the new y_lower for next plot</span></span><br><span class="line">            y_lower = y_upper + <span class="number">10</span>  <span class="comment"># 10 for the 0 samples</span></span><br><span class="line">    </span><br><span class="line">        ax1.set_title(<span class="string">"The silhouette plot for the various clusters."</span>)</span><br><span class="line">        ax1.set_xlabel(<span class="string">"The silhouette coefficient values"</span>)</span><br><span class="line">        ax1.set_ylabel(<span class="string">"Cluster label"</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># The vertical line for average silhouette score of all the values</span></span><br><span class="line">        ax1.axvline(x=silhouette_avg, color=<span class="string">"red"</span>, linestyle=<span class="string">"--"</span>)</span><br><span class="line">    </span><br><span class="line">        ax1.set_yticks([])  <span class="comment"># Clear the yaxis labels / ticks</span></span><br><span class="line">        ax1.set_xticks([<span class="number">-0.1</span>, <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 2nd Plot showing the actual clusters formed</span></span><br><span class="line">        colors = cm.nipy_spectral(cluster_labels.astype(float) / n_clusters)</span><br><span class="line">        ax2.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], marker=<span class="string">'.'</span>, s=<span class="number">30</span>, lw=<span class="number">0</span>, alpha=<span class="number">0.7</span>,</span><br><span class="line">                    c=colors, edgecolor=<span class="string">'k'</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Labeling the clusters</span></span><br><span class="line">        centers = clusterer.cluster_centers_</span><br><span class="line">        <span class="comment"># Draw white circles at cluster centers</span></span><br><span class="line">        ax2.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>], marker=<span class="string">'o'</span>,</span><br><span class="line">                    c=<span class="string">"white"</span>, alpha=<span class="number">1</span>, s=<span class="number">200</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(centers):</span><br><span class="line">            ax2.scatter(c[<span class="number">0</span>], c[<span class="number">1</span>], marker=<span class="string">'$%d$'</span> % i, alpha=<span class="number">1</span>,</span><br><span class="line">                        s=<span class="number">50</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line">    </span><br><span class="line">        ax2.set_title(<span class="string">"The visualization of the clustered data."</span>)</span><br><span class="line">        ax2.set_xlabel(<span class="string">"Feature space for the 1st feature"</span>)</span><br><span class="line">        ax2.set_ylabel(<span class="string">"Feature space for the 2nd feature"</span>)</span><br><span class="line">    </span><br><span class="line">        plt.suptitle((<span class="string">"Silhouette analysis for KMeans clustering on sample data "</span></span><br><span class="line">                      <span class="string">"with n_clusters = %d"</span> % n_clusters),</span><br><span class="line">                     fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">    </span><br><span class="line">        plt.show()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_silhouette(data_scaled, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>For n_clusters = 2 The average silhouette_score is : 0.5817500491982808</code></pre><p><img src="/images/S-Python-sklearn5/output_112_1.png" alt="output_112_1"></p><pre><code>For n_clusters = 3 The average silhouette_score is : 0.45994823920518635</code></pre><p><img src="/images/S-Python-sklearn5/output_112_3.png" alt="output_112_3"></p><pre><code>For n_clusters = 4 The average silhouette_score is : 0.4188923398171004</code></pre><p><img src="/images/S-Python-sklearn5/output_112_5.png" alt="output_112_5"></p><pre><code>For n_clusters = 5 The average silhouette_score is : 0.34551099599809465</code></pre><p><img src="/images/S-Python-sklearn5/output_112_7.png" alt="output_112_7"></p><ul><li>빨간 점선은 평균 실루엣 계수를 의미함</li></ul><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      차원 축소 (PCA, LDA); 군집화 (K-Means Clusteirng, DBSCAN); 군집화 평가 (silhouette score)
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="비지도 학습" scheme="https://hyemin-kim.github.io/tags/%EB%B9%84%EC%A7%80%EB%8F%84-%ED%95%99%EC%8A%B5/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn - (4) 앙상블 (Ensemble)</title>
    <link href="https://hyemin-kim.github.io/2020/08/04/S-Python-sklearn4/"/>
    <id>https://hyemin-kim.github.io/2020/08/04/S-Python-sklearn4/</id>
    <published>2020-08-04T11:40:35.000Z</published>
    <updated>2020-08-04T12:31:24.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="앙상블-ensemble"><a class="markdownIt-Anchor" href="#앙상블-ensemble"></a> 앙상블 (Ensemble)</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B"><strong>0. 데이터 셋</strong></a><ul><li><a href="#0-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A1%9C%EB%93%9C">0-1. 데이터 로드</a></li><li><a href="#0-2-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0">0-2. 데이터프레임 만들기</a></li></ul></li><li><a href="#1-training-set-test-set-%EB%82%98%EB%88%84%EA%B8%B0"><strong>1. Training set / Test set 나누기</strong></a></li><li><a href="#2-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0"><strong>2. 평가 지표 만들기</strong></a><ul><li><a href="#2-1-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C">2-1. 평가 지표</a></li><li><a href="#2-2-%EB%AA%A8%EB%8D%B8-%EC%84%B1%EB%8A%A5-%ED%99%95%EC%9D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%A8%EC%88%98">2-2. 모델 성능 확인을 위한 함수</a></li></ul></li><li><a href="#3-%EB%8B%A8%EC%9D%BC-%ED%9A%8C%EA%B7%80-%EB%AA%A8%EB%8D%B8-%EC%A7%80%EB%82%9C-%EC%8B%9C%EA%B0%84"><strong>3. 단일 회귀 모델 (지난 시간)</strong></a><ul><li><a href="#1-linear-regression">(1)  Linear Regression</a></li><li><a href="#2-ridge">(2)  Ridge</a></li><li><a href="#3-lasso">(3)  LASSO</a></li><li><a href="#4-elasticnet">(4) ElasticNet</a></li><li><a href="#5-with-standard-scaling">(5) With Standard Scaling</a></li><li><a href="#6-polynomial-features">(6) Polynomial Features</a></li></ul></li><li><a href="#4-%EC%95%99%EC%83%81%EB%B8%94-ensemble-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98"><strong>4. 앙상블 (Ensemble)  알고리즘</strong></a><ul><li><a href="#4-1-%EB%B3%B4%ED%8C%85-voting">4-1. 보팅 (Voting)</a><ul><li><a href="#%ED%9A%8C%EA%B7%80-regression">&gt;&gt; 회귀 (Regression)</a></li><li><a href="#%EB%B6%84%EB%A5%98-classification">&gt;&gt; 분류 (Classification)</a></li></ul></li><li><a href="#4-2-%EB%B0%B0%EA%B9%85-bagging">4-2. 배깅 (Bagging)</a><ul><li><a href="#random-forest">&gt;&gt; Random Forest</a></li></ul></li><li><a href="#4-3-%EB%B6%80%EC%8A%A4%ED%8C%85-boosting">4-3. 부스팅 (Boosting)</a><ul><li><a href="#4-3-1-gradient-boost">4-3-1. Gradient Boost</a></li><li><a href="#4-3-2-xgboost">4-3-2. XGBoost</a></li><li><a href="#4-3-3-lightgbm">4-3-3. LightGBM</a></li></ul></li><li><a href="#4-4-%EC%8A%A4%ED%83%9C%ED%82%B9-stacking">4-4. 스태킹 (Stacking)</a></li><li><a href="#4-5-weighted-blending">4-5. Weighted Blending</a></li><li><a href="#4-6-%EC%95%99%EC%83%81%EB%B8%94-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EB%A6%AC">4-6. 앙상블 모델 정리</a></li></ul></li><li><a href="#5-cross-validation"><strong>5. Cross Validation</strong></a><ul><li><a href="#5-1-cross-validation-%EC%86%8C%EA%B0%9C">5-1. Cross Validation 소개</a></li><li><a href="#5-2-hyper-parameter-%ED%8A%9C%EB%8B%9D">5-2. Hyper-parameter 튜닝</a><ul><li><a href="#1-randomizedsearchcv">(1) RandomizedSearchCV</a></li><li><a href="#2-gridserchcv">(2) GridSerchCV</a></li></ul></li></ul></li></ul><p></p><br><p>머신러닝 앙상블이란 <strong>여러 개의 머신러닝 모델을 이용해 최적의 답을 찾아내는 기법</strong>이다.<br>(여러 모델을 이용하여 데이터를 학습하고, 모든 모델의 예측결과를 평균하여 예측)</p><br><p><strong>앙상블 기법의 종류</strong></p><ul><li>보팅 (Voting): 투표를 통해 결과 도출</li><li>배깅 (Bagging): 샘플 중복 생성을 통해 결과 도출</li><li>부스팅 (Boosting): 이전 오차를 보완하면서 가중치 부여</li><li>스태킹 (Stacking): 여러 모델을 기반으로 예측된 결과를 통해 meta 모델이 다시 한번 예측</li></ul><br><p><strong>참고자료 (블로그)</strong></p><ul><li><p><a href="https://blog.naver.com/winddori2002/221848433173" target="_blank" rel="noopener">보팅 (Voting)</a></p></li><li><p><a href="https://teddylee777.github.io/machine-learning/ensemble%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EC%99%80-%EC%A2%85%EB%A5%98-2" target="_blank" rel="noopener">배경 (Bagging)</a></p></li><li><p><a href="https://teddylee777.github.io/machine-learning/ensemble%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EC%99%80-%EC%A2%85%EB%A5%98-3" target="_blank" rel="noopener">부스팅 (Boosting)</a></p><br><br></li></ul><h2 id="0-데이터-셋"><a class="markdownIt-Anchor" href="#0-데이터-셋"></a> <strong>0. 데이터 셋</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>) <span class="comment"># If True, print floating point numbers instead of scientific notation</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br></pre></td></tr></tbody></table></figure> <br> <h3 id="0-1-데이터-로드"><a class="markdownIt-Anchor" href="#0-1-데이터-로드"></a> 0-1. 데이터 로드</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = load_boston()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="string">'DESCR'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>.. _boston_dataset:Boston house prices dataset---------------------------**Data Set Characteristics:**      :Number of Instances: 506     :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.    :Attribute Information (in order):        - CRIM     per capita crime rate by town        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.        - INDUS    proportion of non-retail business acres per town        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)        - NOX      nitric oxides concentration (parts per 10 million)        - RM       average number of rooms per dwelling        - AGE      proportion of owner-occupied units built prior to 1940        - DIS      weighted distances to five Boston employment centres        - RAD      index of accessibility to radial highways        - TAX      full-value property-tax rate per $10,000        - PTRATIO  pupil-teacher ratio by town        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town        - LSTAT    % lower status of the population        - MEDV     Median value of owner-occupied homes in $1000's    :Missing Attribute Values: None    :Creator: Harrison, D. and Rubinfeld, D.L.This is a copy of UCI ML housing dataset.https://archive.ics.uci.edu/ml/machine-learning-databases/housing/</code></pre><p>​</p><pre><code>This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonicprices and the demand for clean air', J. Environ. Economics &amp; Management,vol.5, 81-102, 1978.   Used in Belsley, Kuh &amp; Welsch, 'Regression diagnostics...', Wiley, 1980.   N.B. Various transformations are used in the table onpages 244-261 of the latter.The Boston house-price data has been used in many machine learning papers that address regressionproblems.        .. topic:: References   - Belsley, Kuh &amp; Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.</code></pre><p>​</p> <br> <h3 id="0-2-데이터프레임-만들기"><a class="markdownIt-Anchor" href="#0-2-데이터프레임-만들기"></a> 0-2. 데이터프레임 만들기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data[<span class="string">'data'</span>], columns = data[<span class="string">'feature_names'</span>])</span><br><span class="line">df[<span class="string">'MEDV'</span>] = data[<span class="string">'target'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>      <th>MEDV</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0.0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1.0</td>      <td>296.0</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>      <td>24.0</td>    </tr>    <tr>      <th>1</th>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>      <td>21.6</td>    </tr>    <tr>      <th>2</th>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>      <td>34.7</td>    </tr>    <tr>      <th>3</th>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>      <td>33.4</td>    </tr>    <tr>      <th>4</th>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>      <td>36.2</td>    </tr>  </tbody></table></div> <br> <p><strong>컬럼 소게</strong> (feature 13 + target 1):</p><ul><li><p><strong>CRIM</strong>: 범죄율</p></li><li><p><strong>ZN</strong>: 25,000 square feet 당 주거용 토지의 비율</p></li><li><p><strong>INDUS</strong>: 비소매(non-retail) 비즈니스 면적 비율</p></li><li><p><strong>CHAS</strong>: 찰스 강 더미 변수 (통로가 하천을 향하면 1; 그렇지 않으면 0)</p></li><li><p><strong>NOX</strong>: 산화 질소 농도 (천만 분의 1)</p></li><li><p><strong>RM</strong>:주거 당 평균 객실 수</p></li><li><p><strong>AGE</strong>: 1940 년 이전에 건축된 자가 소유 점유 비율</p></li><li><p><strong>DIS</strong>: 5 개의 보스턴 고용 센터까지의 가중 거리</p></li><li><p><strong>RAD</strong>: 고속도로 접근성 지수</p></li><li><p><strong>TAX</strong>: 10,000 달러 당 전체 가치 재산 세율</p></li><li><p><strong>PTRATIO</strong>  도시 별 학생-교사 비율</p></li><li><p><strong>B</strong>: 1000 (Bk-0.63) ^ 2 여기서 Bk는 도시 별 검정 비율입니다.</p></li><li><p><strong>LSTAT</strong>: 인구의 낮은 지위</p></li><li><p><strong>MEDV</strong>: 자가 주택의 중앙값 (1,000 달러 단위)</p><br></li></ul><h2 id="1-training-set-test-set-나누기"><a class="markdownIt-Anchor" href="#1-training-set-test-set-나누기"></a> <strong>1. Training set / Test set 나누기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(df.drop(<span class="string">'MEDV'</span>, <span class="number">1</span>), df[<span class="string">'MEDV'</span>], random_state=<span class="number">23</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((379, 13), (379,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((127, 13), (127,))</code></pre>  <br><h2 id="2-평가-지표-만들기"><a class="markdownIt-Anchor" href="#2-평가-지표-만들기"></a> <strong>2. 평가 지표 만들기</strong></h2><h3 id="2-1-평가-지표"><a class="markdownIt-Anchor" href="#2-1-평가-지표"></a> 2-1. 평가 지표</h3><p><strong>(1) MAE (Mean Absolute Error)</strong></p><p>MAE (평균 절대 오차): 에측값과 실제값의 차이의 <strong>절대값</strong>에 대하여 평균을 낸 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">MAE = \frac{1}{n} \sum_{i=1}^n \left\vert y_i - \widehat{y_i} \right\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span></p><p><strong>(2) MSE (Mean Squared Error)</strong></p><p>MSE (평균 제곱 오차): 예측값과 실제값의 차이의 <strong>제곱</strong>에 대하여 평균을 낸 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>S</mi><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">MSE = \frac{1}{n} \sum_{i=1}^n \left( y_i - \widehat{y_i} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>(3) RMSE (Root Mean Squared Error)</strong></p><p>RMSE (평균 제곱근 오차): 예측값과 실제값의 차이의 <strong>제곱</strong>에 대하여 평균을 낸 뒤 <strong>루트</strong>를 씌운 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>M</mi><mi>S</mi><mi>E</mi><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^n \left( y_i - \widehat{y_i} \right)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1568160000000005em;vertical-align:-1.277669em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791470000000006em;"><span class="svg-align" style="top:-5.116816em;"><span class="pstrut" style="height:5.116816em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8391470000000005em;"><span class="pstrut" style="height:5.116816em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.196816em;"><svg width="400em" height="3.196816em" viewBox="0 0 400000 3196" preserveAspectRatio="xMinYMin slice"><path d="M702 80H400000v40H742v3062l-4 4-4 4c-.667.7-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667 219 661 l218 661zM702 80H400000v40H742z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span></span></span></span></p>  <br><h3 id="2-2-모델-성능-확인을-위한-함수"><a class="markdownIt-Anchor" href="#2-2-모델-성능-확인을-위한-함수"></a> 2-2. 모델 성능 확인을 위한 함수</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sklearn 평가지표 활용</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, mean_squared_error</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">my_predictions = {}</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>, <span class="string">'khaki'</span>, <span class="string">'teal'</span>, <span class="string">'orchid'</span>, <span class="string">'sandybrown'</span>,</span><br><span class="line">          <span class="string">'greenyellow'</span>, <span class="string">'dodgerblue'</span>, <span class="string">'deepskyblue'</span>, <span class="string">'rosybrown'</span>, <span class="string">'firebrick'</span>,</span><br><span class="line">          <span class="string">'deeppink'</span>, <span class="string">'crimson'</span>, <span class="string">'salmon'</span>, <span class="string">'darkred'</span>, <span class="string">'olivedrab'</span>, <span class="string">'olive'</span>, </span><br><span class="line">          <span class="string">'forestgreen'</span>, <span class="string">'royalblue'</span>, <span class="string">'indigo'</span>, <span class="string">'navy'</span>, <span class="string">'mediumpurple'</span>, <span class="string">'chocolate'</span>,</span><br><span class="line">          <span class="string">'gold'</span>, <span class="string">'darkorange'</span>, <span class="string">'seagreen'</span>, <span class="string">'turquoise'</span>, <span class="string">'steelblue'</span>, <span class="string">'slategray'</span>, </span><br><span class="line">          <span class="string">'peru'</span>, <span class="string">'midnightblue'</span>, <span class="string">'slateblue'</span>, <span class="string">'dimgray'</span>, <span class="string">'cadetblue'</span>, <span class="string">'tomato'</span></span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># prediction plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_predictions</span><span class="params">(name_, actual, pred)</span>:</span></span><br><span class="line">    df = pd.DataFrame({<span class="string">'actual'</span>: y_test, <span class="string">'prediction'</span>: pred})</span><br><span class="line">    df = df.sort_values(by=<span class="string">'actual'</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">    plt.scatter(df.index, df[<span class="string">'prediction'</span>], marker=<span class="string">'x'</span>, color=<span class="string">'r'</span>)</span><br><span class="line">    plt.scatter(df.index, df[<span class="string">'actual'</span>], alpha=<span class="number">0.7</span>, marker=<span class="string">'o'</span>, color=<span class="string">'black'</span>)</span><br><span class="line">    plt.title(name_, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.legend([<span class="string">'prediction'</span>, <span class="string">'actual'</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># evaluation plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mse_eval</span><span class="params">(name_, actual, pred)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> predictions</span><br><span class="line">    <span class="keyword">global</span> colors</span><br><span class="line"></span><br><span class="line">    plot_predictions(name_, actual, pred)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(actual, pred)</span><br><span class="line">    my_predictions[name_] = mse</span><br><span class="line"></span><br><span class="line">    y_value = sorted(my_predictions.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    df = pd.DataFrame(y_value, columns=[<span class="string">'model'</span>, <span class="string">'mse'</span>])</span><br><span class="line">    print(df)</span><br><span class="line">    min_ = df[<span class="string">'mse'</span>].min() - <span class="number">10</span></span><br><span class="line">    max_ = df[<span class="string">'mse'</span>].max() + <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    length = len(df)</span><br><span class="line">    </span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, length))</span><br><span class="line">    ax = plt.subplot()</span><br><span class="line">    ax.set_yticks(np.arange(len(df)))</span><br><span class="line">    ax.set_yticklabels(df[<span class="string">'model'</span>], fontsize=<span class="number">15</span>)</span><br><span class="line">    bars = ax.barh(np.arange(len(df)), df[<span class="string">'mse'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(df[<span class="string">'mse'</span>]):</span><br><span class="line">        idx = np.random.choice(len(colors))</span><br><span class="line">        bars[i].set_color(colors[idx])</span><br><span class="line">        ax.text(v + <span class="number">2</span>, i, str(round(v, <span class="number">3</span>)), color=<span class="string">'k'</span>, fontsize=<span class="number">15</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">        </span><br><span class="line">    plt.title(<span class="string">'MSE Error'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">    plt.xlim(min_, max_)</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_model</span><span class="params">(name_)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> my_predictions</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">del</span> my_predictions[name_]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># coefficients visulization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_coef</span><span class="params">(columns, coef)</span>:</span></span><br><span class="line">    coef_df = pd.DataFrame(list(zip(columns, coef)))</span><br><span class="line">    coef_df.columns=[<span class="string">'feature'</span>, <span class="string">'coef'</span>]</span><br><span class="line">    coef_df = coef_df.sort_values(<span class="string">'coef'</span>, ascending=<span class="literal">False</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">9</span>, <span class="number">7</span>))</span><br><span class="line">    ax.barh(np.arange(len(coef_df)), coef_df[<span class="string">'coef'</span>])</span><br><span class="line">    idx = np.arange(len(coef_df))</span><br><span class="line">    ax.set_yticks(idx)</span><br><span class="line">    ax.set_yticklabels(coef_df[<span class="string">'feature'</span>])</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure><p><br> <br></p><h2 id="3-단일-회귀-모델-지난-시간"><a class="markdownIt-Anchor" href="#3-단일-회귀-모델-지난-시간"></a> <strong>3. 단일 회귀 모델 (지난 시간)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNet</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, MinMaxScaler, RobustScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br></pre></td></tr></tbody></table></figure>  <br><h3 id="1-linear-regression"><a class="markdownIt-Anchor" href="#1-linear-regression"></a> (1)  Linear Regression</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linear_reg = LinearRegression(n_jobs=<span class="number">-1</span>)</span><br><span class="line">linear_reg.fit(x_train, y_train)</span><br><span class="line">linear_pred = linear_reg.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'LinearRegression'</span>, y_test, linear_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_43_0.png" alt="output_43_0"></p><pre><code>              model        mse0  LinearRegression  22.770784</code></pre><p><img src="/images/S-Python-sklearn4/output_43_2.png" alt="output_43_2"></p><br><h3 id="2-ridge"><a class="markdownIt-Anchor" href="#2-ridge"></a> (2)  Ridge</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ridge = Ridge(alpha=<span class="number">1</span>)</span><br><span class="line">ridge.fit(x_train, y_train)</span><br><span class="line">ridge_pred = ridge.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Ridge(alpha=1)'</span>, y_test, ridge_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_46_0.png" alt="output_46_0"></p><pre><code>              model        mse0  LinearRegression  22.7707841    Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn4/output_46_2.png" alt="output_46_2"></p><br><h3 id="3-lasso"><a class="markdownIt-Anchor" href="#3-lasso"></a> (3)  LASSO</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lasso = Lasso(alpha=<span class="number">0.01</span>)</span><br><span class="line">lasso.fit(x_train, y_train)</span><br><span class="line">lasso_pred = lasso.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Lasso(alpha=0.01)'</span>, y_test, lasso_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_49_0.png" alt="output_49_0"></p><pre><code>               model        mse0   LinearRegression  22.7707841     Ridge(alpha=1)  22.6904112  Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn4/output_49_2.png" alt="output_49_2"></p><br><h3 id="4-elasticnet"><a class="markdownIt-Anchor" href="#4-elasticnet"></a> (4) ElasticNet</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elasticnet = ElasticNet(alpha=<span class="number">0.5</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">elasticnet.fit(x_train, y_train)</span><br><span class="line">elas_pred = elasticnet.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'ElasticNet(l1_ratio=0.2)'</span>, y_test, elas_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_52_0.png" alt="output_52_0"></p><pre><code>                      model        mse0  ElasticNet(l1_ratio=0.2)  24.4810691          LinearRegression  22.7707842            Ridge(alpha=1)  22.6904113         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn4/output_52_2.png" alt="output_52_2"></p><br><h3 id="5-with-standard-scaling"><a class="markdownIt-Anchor" href="#5-with-standard-scaling"></a> (5) With Standard Scaling</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">standard_elasticnet = make_pipeline(</span><br><span class="line">    StandardScaler(),</span><br><span class="line">    ElasticNet(alpha=<span class="number">0.5</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">elas_scaled_pred = standard_elasticnet.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Standard ElasticNet'</span>, y_test, elas_scaled_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_55_0.png" alt="output_55_0"></p><pre><code>                      model        mse0       Standard ElasticNet  26.0107561  ElasticNet(l1_ratio=0.2)  24.4810692          LinearRegression  22.7707843            Ridge(alpha=1)  22.6904114         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn4/output_55_2.png" alt="output_55_2"></p><br><h3 id="6-polynomial-features"><a class="markdownIt-Anchor" href="#6-polynomial-features"></a> (6) Polynomial Features</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2-Degree Polynomial Features + Standard Scaling</span></span><br><span class="line">poly_elasticnet = make_pipeline(</span><br><span class="line">    PolynomialFeatures(degree=<span class="number">2</span>, include_bias=<span class="literal">False</span>),</span><br><span class="line">    StandardScaler(),</span><br><span class="line">    ElasticNet(alpha=<span class="number">0.5</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">poly_pred = poly_elasticnet.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Poly ElasticNet'</span>, y_test, poly_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_58_0-1596543446470.png" alt="output_58_0"></p><pre><code>                      model        mse0       Standard ElasticNet  26.0107561  ElasticNet(l1_ratio=0.2)  24.4810692          LinearRegression  22.7707843            Ridge(alpha=1)  22.6904114         Lasso(alpha=0.01)  22.6356145           Poly ElasticNet  20.805986</code></pre><p><img src="/images/S-Python-sklearn4/output_58_2-1596543452273.png" alt="output_58_2"></p><br><br><h2 id="4-앙상블-ensemble-알고리즘"><a class="markdownIt-Anchor" href="#4-앙상블-ensemble-알고리즘"></a> <strong>4. 앙상블 (Ensemble)  알고리즘</strong></h2><p><a href="https://scikit-learn.org/stable/modules/classes.html?highlight=ensemble#module-sklearn.ensemble" target="_blank" rel="noopener">[sklearn.ensemble] Document</a></p><p><strong>앙상블 기법의 종류</strong></p><ul><li><p>보팅 (Voting): 투표를 통해 결과 도출</p></li><li><p>배깅 (Bagging): 샘플 중복 생성을 통해 결과 도출</p></li><li><p>부스팅 (Boosting): 이전 오차를 보완하면서 가중치 부여</p></li><li><p>스태킹 (Stacking): 여러 모델을 기반으로 예측된 결과를 통해 meta 모델이 다시 한번 예측</p><br></li></ul><h3 id="4-1-보팅-voting"><a class="markdownIt-Anchor" href="#4-1-보팅-voting"></a> 4-1. 보팅 (Voting)</h3><h4 id="회귀-regression"><a class="markdownIt-Anchor" href="#회귀-regression"></a> &gt;&gt; 회귀 (Regression)</h4><p>Voting은 단어 뜻 그대로 <strong>투표를 통해 최종 결과를 결정하는 방식</strong>이다. Voting과 Bagging은 모두 투표방식이지만, 다음과 같은 큰 차이점이 있다:</p><ul><li>Voting은 다른 알고리즘 model을 조합해서 사용함</li><li>Bagging은 같은 알고리즘 내에서 다른 sample 조합을 사용함</li></ul> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingRegressor</span><br></pre></td></tr></tbody></table></figure><p>반드시, <strong>Tuple 형태로 모델</strong>을 정의해야 한다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 보팅에 참여한 single models 지정</span></span><br><span class="line">single_models = [</span><br><span class="line">    (<span class="string">'linear_reg'</span>, linear_reg),</span><br><span class="line">    (<span class="string">'ridge'</span>, ridge),</span><br><span class="line">    (<span class="string">'lasso'</span>, lasso),</span><br><span class="line">    (<span class="string">'elasticnet'</span>, elasticnet),</span><br><span class="line">    (<span class="string">'standard_elasticnet'</span>, standard_elasticnet),</span><br><span class="line">    (<span class="string">'poly_elasticnet'</span>, poly_elasticnet)</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># voting regressor 만들기</span></span><br><span class="line">voting_regressor = VotingRegressor(single_models, n_jobs=<span class="number">-1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">voting_regressor.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>VotingRegressor(estimators=[('linear_reg',                             LinearRegression(copy_X=True, fit_intercept=True,                                              n_jobs=-1, normalize=False)),                            ('ridge',                             Ridge(alpha=1, copy_X=True, fit_intercept=True,                                   max_iter=None, normalize=False,                                   random_state=None, solver='auto',                                   tol=0.001)),                            ('lasso',                             Lasso(alpha=0.01, copy_X=True, fit_intercept=True,                                   max_iter=1000, normalize=False,                                   positive=False, pr...                                                                 interaction_only=False,                                                                 order='C')),                                             ('standardscaler',                                              StandardScaler(copy=True,                                                             with_mean=True,                                                             with_std=True)),                                             ('elasticnet',                                              ElasticNet(alpha=0.5, copy_X=True,                                                         fit_intercept=True,                                                         l1_ratio=0.2,                                                         max_iter=1000,                                                         normalize=False,                                                         positive=False,                                                         precompute=False,                                                         random_state=None,                                                         selection='cyclic',                                                         tol=0.0001,                                                         warm_start=False))],                                      verbose=False))],                n_jobs=-1, weights=None)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">voting_pred = voting_regressor.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Voting Ensemble'</span>, y_test, voting_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_74_0-1596543659301.png" alt="output_74_0"></p><pre><code>                      model        mse0       Standard ElasticNet  26.0107561  ElasticNet(l1_ratio=0.2)  24.4810692          LinearRegression  22.7707843            Ridge(alpha=1)  22.6904114         Lasso(alpha=0.01)  22.6356145           Voting Ensemble  22.0921586           Poly ElasticNet  20.805986</code></pre><p><img src="/images/S-Python-sklearn4/output_74_2-1596543665427.png" alt="output_74_2"></p><br><h4 id="분류-classification"><a class="markdownIt-Anchor" href="#분류-classification"></a> &gt;&gt; 분류 (Classification)</h4><p><a href="https://teddylee777.github.io/machine-learning/ensemble%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EC%99%80-%EC%A2%85%EB%A5%98-1" target="_blank" rel="noopener">참고 자료 (Blog)</a></p><p>분류기 모델을 만들때, Voting 앙상블은 1가지의 <strong>중요한 parameter</strong>가 있다:</p><ul><li><code>voting</code> = {‘hard’, ‘soft’}</li></ul><br><p>class를 0, 1로 분류 예측을 하는 이진 분류를 예로 들어 보자.</p><p><strong>(1) hard 로 설정한 경우</strong></p><p>Hard Voting 방식에서는 결과 값에 대한 다수 class를 사용한다.</p><blockquote><p>분류를 예측한 값이 1, 0, 0, 1, 1 이었다고 가정한다면 1이 3표, 0이 2표를 받았기 때문에 Hard Voting 방식에서는 1이 최종 값으로 예측을 하게 된다.</p></blockquote> <br> <p><strong>(2) soft 로 설정한 경우</strong></p><p>soft voting 방식은 각각의 확률의 평균 값을 계산한다음에 가장 확률이 높은 값으로 확정짓게 된다.</p><blockquote><p>가령 class 0이 나올 확률이 (0.4, 0.9, 0.9, 0.4, 0.4)이었고, class 1이 나올 확률이 (0.6, 0.1, 0.1, 0.6, 0.6) 이었다면,</p><ul><li>class 0이 나올 최종 확률은 (0.4+0.9+0.9+0.4+0.4) / 5 = 0.44,</li><li>class 1이 나올 최종 확률은 (0.6+0.1+0.1+0.6+0.6) / 5 = 0.4</li></ul><p>가 되기 때문에 앞선 Hard Voting의 결과와는 다른 결과 값이 최종으로 선출되게 된다.</p></blockquote><br>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression, RidgeClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">models = [</span><br><span class="line">    (<span class="string">'Logit'</span>, LogisticRegression()),</span><br><span class="line">    (<span class="string">'ridge'</span>, RidgeClassifier())</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>voting 옵션 지정</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vc = VotingClassifier(models, voting=<span class="string">'soft'</span>)</span><br></pre></td></tr></tbody></table></figure><br>  <h3 id="4-2-배깅-bagging"><a class="markdownIt-Anchor" href="#4-2-배깅-bagging"></a> 4-2. 배깅 (Bagging)</h3><p><a href="https://teddylee777.github.io/machine-learning/ensemble%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EC%99%80-%EC%A2%85%EB%A5%98-2" target="_blank" rel="noopener">참고 자료 (Blog)</a></p><p>Bagging은 <strong>Bootstrap Aggregating의 줄임말</strong>이다.</p><p>Bootstrap은 여러 개의 dataset을 중첩을 허용하게 하여 샘플링하여 분할하는 방식.</p><p>데이터 셋의 구성이 [1, 2, 3, 4, 5]로 되어 있다면,</p><ol><li>group 1 = [1, 2, 3]</li><li>group 2 = [1, 3, 4]</li><li>group 3 = [2, 3, 5]</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://teddylee777.github.io/images/2019-12-17/image-20191217015537872.png'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_94_0-1596543677837.png" alt="output_94_0"></p><br>  <p><strong>Voting VS Bagging</strong></p><ul><li><strong>Voting</strong>은 여러 알고리즘의 조합에 대한 앙상블</li><li><strong>Bagging</strong>은 하나의 단일 알고리즘에 대하여 여러 개의 샘플 조합으로 앙상블</li></ul><p><strong>대표적인 Bagging 앙상블</strong></p><ol><li><p>Random Forest</p></li><li><p>Bagging</p></li></ol>  <br> <h4 id="random-forest"><a class="markdownIt-Anchor" href="#random-forest"></a> &gt;&gt; Random Forest</h4><ul><li>Decision Tree 기반 Bagging 앙상블</li><li>굉장히 인기있는 앙상블 모델</li><li>사용성이 쉽고, 성능도 우수함</li></ul><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html" target="_blank" rel="noopener">[sklearn.ensemble.<strong>RandomForestRegressor</strong>] Document</a><br><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html" target="_blank" rel="noopener">[sklearn.ensemble.<strong>RandomForestClassifier</strong>] Document</a></p>  <br><ul><li><strong>회귀 (Regression)</strong></li></ul><p><strong>Hyper-parameter의 default value로 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rfr = RandomForestRegressor(random_state=<span class="number">1</span>)</span><br><span class="line">rfr.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',                      max_depth=None, max_features='auto', max_leaf_nodes=None,                      max_samples=None, min_impurity_decrease=0.0,                      min_impurity_split=None, min_samples_leaf=1,                      min_samples_split=2, min_weight_fraction_leaf=0.0,                      n_estimators=100, n_jobs=None, oob_score=False,                      random_state=1, verbose=0, warm_start=False)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rfr_pred = rfr.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'RandomForest Ensemble'</span>, y_test, rfr_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_107_0-1596543686370.png" alt="output_107_0"></p><pre><code>                      model        mse0       Standard ElasticNet  26.0107561  ElasticNet(l1_ratio=0.2)  24.4810692          LinearRegression  22.7707843            Ridge(alpha=1)  22.6904114         Lasso(alpha=0.01)  22.6356145           Voting Ensemble  22.0921586           Poly ElasticNet  20.8059867     RandomForest Ensemble  13.781191</code></pre><p><img src="/images/S-Python-sklearn4/output_107_2-1596543692042.png" alt="output_107_2"></p><br><p><strong>주요 Hyper-parameter</strong></p><ul><li><strong>random_state:</strong> random seed 고정 값</li><li><strong>n_jobs:</strong> CPU 사용 갯수</li><li><strong>max_depth:</strong> 깊어질 수 있는 최대 깊이. 과대적합 방지용</li><li><strong>n_estimators:</strong> 암상블하는 트리의 갯수</li><li><strong>max_features:</strong> best split을 판단할 때 최대로 사용할 feature의 갯수 {‘auto’, ‘sqrt’, ‘log2’}. 과대적합 방지용</li><li><strong>min_samples_split:</strong> 트리가 분할할 때 최소 샘플의 갯수. default=2. 과대적합 방지용</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://teddylee777.github.io/images/2020-01-09/decistion-tree.png'</span>, width=<span class="number">600</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-sklearn4/output_110_0-1596543700142.png" alt="output_110_0" style="zoom: 50%;"> <br> <p><strong>With Hyper-parameter Tuning</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rfr_t = RandomForestRegressor(random_state=<span class="number">1</span>, n_estimators=<span class="number">500</span>, max_depth=<span class="number">7</span>, max_features=<span class="string">'sqrt'</span>)</span><br><span class="line">rfr_t.fit(x_train, y_train)</span><br><span class="line">rfr_t_pred = rfr_t.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'RandomForest Ensemble w/ Tuning'</span>, y_test, rfr_t_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_113_0-1596543713401.png" alt="output_113_0"></p><pre><code>                             model        mse0              Standard ElasticNet  26.0107561         ElasticNet(l1_ratio=0.2)  24.4810692                 LinearRegression  22.7707843                   Ridge(alpha=1)  22.6904114                Lasso(alpha=0.01)  22.6356145                  Voting Ensemble  22.0921586                  Poly ElasticNet  20.8059867            RandomForest Ensemble  13.7811918  RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_113_2-1596543719396.png" alt="output_113_2"></p><br><h3 id="4-3-부스팅-boosting"><a class="markdownIt-Anchor" href="#4-3-부스팅-boosting"></a> 4-3. 부스팅 (Boosting)</h3><p><a href="https://teddylee777.github.io/machine-learning/ensemble%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EC%99%80-%EC%A2%85%EB%A5%98-3" target="_blank" rel="noopener">참고 자료 (Blog)</a></p><p>악한 학습기를 순차적으로 학습을 하되, 이전 학습에 대하여 잘멋 예측된 데이터에 <strong>가중치를 부여해 오차를 보완</strong>해 나가는 방식이다.</p><p><strong>장점</strong></p><ul><li>성능이 매우 우수하다 (LightGBM, XGBoost)</li></ul><p><strong>단점</strong></p><ul><li>부스팅 알고리즘의 특성상 계속 약점(오분류/잔차)을 보완하려고 하기 때문에 <strong>잘못된 레이블링이나 아웃라이어에 필요 이상으로 민감</strong>할 수 있다</li><li>다른 앙상블 대비 <strong>학습 시간이 오래걸린다는 단점</strong>이 존재</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://keras.io/img/graph-kaggle-1.jpeg'</span>, width=<span class="number">800</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_120_0-1596543725618.jpg" alt="output_120_0"></p>  <br><p><strong>대표적인 Boosting 앙상블</strong></p><ol><li><p>AdaBoost</p></li><li><p>GradientBoost</p></li><li><p>LightGBM (LGBM)</p></li><li><p>XGBoost</p></li></ol>  <br> <h4 id="4-3-1-gradient-boost"><a class="markdownIt-Anchor" href="#4-3-1-gradient-boost"></a> 4-3-1. Gradient Boost</h4><ul><li><strong>장점:</strong> 성능이 우수함</li><li><strong>단점:</strong> 학습 시간이 너무 오래 걸린다</li></ul><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html?highlight=gradient%20boost#sklearn.ensemble.GradientBoostingRegressor" target="_blank" rel="noopener">[sklearn.ensemble.<strong>GradientBoostingRegressor</strong>] Document</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor, GradientBoostingClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default value로 학습</span></span><br><span class="line">gbr = GradientBoostingRegressor(random_state=<span class="number">1</span>)</span><br><span class="line">gbr.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',                          init=None, learning_rate=0.1, loss='ls', max_depth=3,                          max_features=None, max_leaf_nodes=None,                          min_impurity_decrease=0.0, min_impurity_split=None,                          min_samples_leaf=1, min_samples_split=2,                          min_weight_fraction_leaf=0.0, n_estimators=100,                          n_iter_no_change=None, presort='deprecated',                          random_state=1, subsample=1.0, tol=0.0001,                          validation_fraction=0.1, verbose=0, warm_start=False)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gbr_pred = gbr.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'GradientBoost Ensemble'</span>, y_test, gbr_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_129_0-1596543733348.png" alt="output_129_0"></p><pre><code>                             model        mse0              Standard ElasticNet  26.0107561         ElasticNet(l1_ratio=0.2)  24.4810692                 LinearRegression  22.7707843                   Ridge(alpha=1)  22.6904114                Lasso(alpha=0.01)  22.6356145                  Voting Ensemble  22.0921586                  Poly ElasticNet  20.8059867            RandomForest Ensemble  13.7811918           GradientBoost Ensemble  13.4518779  RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_129_2-1596543738508.png" alt="output_129_2"></p><br><p><strong>주요 Hyper-parameter</strong></p><ul><li><strong>random_state:</strong> random seed 고정 값</li><li><strong>n_jobs:</strong> CPU 사용 갯수</li><li><strong>learning rate:</strong> 학습율. 너무 큰 학습율은 성능을 떨어뜨리고, 너무 작은 학습율은 학습이 느리다. 적절한 값을 찾아야함. default=0.1 (n_estimators와 같이 튜닝해야 함)</li><li><strong>n_estimators:</strong> 부스팅 스테이지 수. default=100<br>(Random Forest 트리의 갯수 설정과 비슷)</li><li><strong>subsample:</strong> 샘플 사용 비율 (max_features와 비슷). 과대적합 방지용</li><li><strong>min_samples_split:</strong> 노드 분할시 최소 샘플의 갯수. default=2. 과대적합 방지용</li></ul><blockquote><p>There’s a trade-off between <font color="blue"><em>learning_rate</em></font> and <font color="blue"><em>n_estimators</em></font>.<br>둘의 곱을 유지하는 것이 좋다</p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with hyper-parameter tuning</span></span><br><span class="line"><span class="comment"># learning_rate=0.01 (without tuning n_estimators together)</span></span><br><span class="line">gbr_t = GradientBoostingRegressor(random_state=<span class="number">1</span>, learning_rate=<span class="number">0.01</span>)</span><br><span class="line">gbr_t.fit(x_train, y_train)</span><br><span class="line">gbr_t_pred = gbr_t.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'GradientBoost Ensemble w/ tuning (lr=0.01)'</span>, y_test, gbr_t_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_133_0-1596543744823.png" alt="output_133_0"></p><pre><code>                                         model        mse0                          Standard ElasticNet  26.0107561   GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                     ElasticNet(l1_ratio=0.2)  24.4810693                             LinearRegression  22.7707844                               Ridge(alpha=1)  22.6904115                            Lasso(alpha=0.01)  22.6356146                              Voting Ensemble  22.0921587                              Poly ElasticNet  20.8059868                        RandomForest Ensemble  13.7811919                       GradientBoost Ensemble  13.45187710             RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_133_2-1596543750011.png" alt="output_133_2"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuning: learning_rate=0.01, n_estimators=1000</span></span><br><span class="line">gbr_t2 = GradientBoostingRegressor(random_state=<span class="number">1</span>, learning_rate=<span class="number">0.01</span>, n_estimators=<span class="number">1000</span>)</span><br><span class="line">gbr_t2.fit(x_train, y_train)</span><br><span class="line">gbr_t2_pred = gbr_t2.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'GradientBoost Ensemble w/ tuning (lr=0.01, est=1000)'</span>, y_test, gbr_t2_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_135_0-1596543755501.png" alt="output_135_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                               RandomForest Ensemble  13.7811919                              GradientBoost Ensemble  13.45187710  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247211                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_135_2-1596543760559.png" alt="output_135_2"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuning: learning_rate=0.01, n_estimators=1000, subsample=0.8</span></span><br><span class="line">gbr_t3 = GradientBoostingRegressor(random_state=<span class="number">42</span>, learning_rate=<span class="number">0.01</span>, n_estimators=<span class="number">1000</span>, subsample=<span class="number">0.7</span>)</span><br><span class="line">gbr_t3.fit(x_train, y_train)</span><br><span class="line">gbr_t3_pred = gbr_t3.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'GradientBoost Ensemble w/ tuning (lr=0.01, est=1000, subsample=0.7)'</span>, y_test, gbr_t3_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_137_0-1596543766188.png" alt="output_137_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                               RandomForest Ensemble  13.7811919                              GradientBoost Ensemble  13.45187710  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247211  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771712                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_137_2-1596543771241.png" alt="output_137_2"></p><br><h4 id="4-3-2-xgboost"><a class="markdownIt-Anchor" href="#4-3-2-xgboost"></a> 4-3-2. XGBoost</h4><p>e<strong>X</strong>treme <strong>G</strong>radient <strong>B</strong>oosting</p><p><a href="https://xgboost.readthedocs.io/en/latest/" target="_blank" rel="noopener">[XGBoost] Document</a></p><p><strong>주요 특징</strong></p><ul><li><p>scikit-learn 패키지 아님</p></li><li><p>성능이 우수함</p></li><li><p>GBM보다는 빠르고 성능도 향상됨</p></li><li><p>여전히 학습 속도가 느림</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xgboost</span><br></pre></td></tr></tbody></table></figure><pre><code>Requirement already satisfied: xgboost in d:\anaconda\lib\site-packages (1.1.1)Requirement already satisfied: scipy in d:\anaconda\lib\site-packages (from xgboost) (1.4.1)Requirement already satisfied: numpy in d:\anaconda\lib\site-packages (from xgboost) (1.18.1)Note: you may need to restart the kernel to use updated packages.</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor, XGBClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default value로 학습</span></span><br><span class="line">xgb = XGBRegressor(random_state=<span class="number">1</span>)</span><br><span class="line">xgb.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,             importance_type='gain', interaction_constraints='',             learning_rate=0.300000012, max_delta_step=0, max_depth=6,             min_child_weight=1, missing=nan, monotone_constraints='()',             n_estimators=100, n_jobs=0, num_parallel_tree=1,             objective='reg:squarederror', random_state=1, reg_alpha=0,             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',             validate_parameters=1, verbosity=None)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xgb_pred = xgb.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'XGBoost'</span>, y_test, xgb_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_146_0-1596543778583.png" alt="output_146_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                             XGBoost  13.8414549                               RandomForest Ensemble  13.78119110                             GradientBoost Ensemble  13.45187711  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247212  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771713                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_146_2-1596543783973.png" alt="output_146_2"></p><br><p><strong>주요 Hyper-parameter</strong></p><ul><li><p><strong>random_state:</strong> random seed 고정 값</p></li><li><p><strong>n_jobs:</strong> CPU 사용 갯수</p></li><li><p><strong>learning_rate:</strong> 학습율. 너무 큰 학습율은 성능을 떨어뜨리고, 너무 작은 학습율은 학습이 느리다. 적절한 값을 찾아야함. n_estimators와 같이 튜닝. default=0.1</p></li><li><p><strong>n_estimators:</strong> 부스팅 스테이지 수. (랜덤포레스트 트리의 갯수 설정과 비슷한 개념). default=100</p></li><li><p><strong>max_depth:</strong> 트리의 깊이. 과대적합 방지용. default=3.</p></li><li><p><strong>subsample:</strong> 샘플 사용 비율. 과대적합 방지용. default=1.0</p></li><li><p><strong>max_features:</strong> 최대로 사용할 feature의 비율. 과대적합 방지용. default=1.0</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with hyeper-parameter tuning</span></span><br><span class="line">xgb_t = XGBRegressor(random_state=<span class="number">1</span>, learning_rate=<span class="number">0.01</span>, n_estimators=<span class="number">1000</span>, subsample=<span class="number">0.7</span>, max_features=<span class="number">0.8</span>, max_depth=<span class="number">7</span>)</span><br><span class="line">xgb_t.fit(x_train, y_train)</span><br><span class="line">xgb_t_pred = xgb_t.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'XGBoost w/ Tuning'</span>, y_test, xgb_t_pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>[16:55:00] WARNING: C:\Users\Administrator\workspace\xgboost-win64_release_1.1.0\src\learner.cc:480: Parameters: { max_features } might not be used.  This may not be accurate due to some parameters are only used in language bindings but  passed down to XGBoost core.  Or some parameters are not used but slip through this  verification. Please open an issue if you find above cases.</code></pre><p>​<br>​</p><p><img src="/images/S-Python-sklearn4/output_150_1-1596543791859.png" alt="output_150_1"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                             XGBoost  13.8414549                               RandomForest Ensemble  13.78119110                             GradientBoost Ensemble  13.45187711  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247212  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771713                                  XGBoost w/ Tuning  11.98760214                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_150_3-1596543797426.png" alt="output_150_3"></p><br><h4 id="4-3-3-lightgbm"><a class="markdownIt-Anchor" href="#4-3-3-lightgbm"></a> 4-3-3. LightGBM</h4><p><a href="https://lightgbm.readthedocs.io/en/latest/" target="_blank" rel="noopener">[LightGBM] Document</a></p><p><strong>주요 특징</strong></p><ul><li><p>scikit-learn 패키지가 아님</p></li><li><p>성능이 우수함</p></li><li><p>속도도 매우 빠름</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lightgbm</span><br></pre></td></tr></tbody></table></figure><pre><code>Requirement already satisfied: lightgbm in d:\anaconda\lib\site-packages (2.3.1)Requirement already satisfied: scipy in d:\anaconda\lib\site-packages (from lightgbm) (1.4.1)Requirement already satisfied: numpy in d:\anaconda\lib\site-packages (from lightgbm) (1.18.1)Requirement already satisfied: scikit-learn in d:\anaconda\lib\site-packages (from lightgbm) (0.22.1)Requirement already satisfied: joblib&gt;=0.11 in d:\anaconda\lib\site-packages (from scikit-learn-&gt;lightgbm) (0.14.1)Note: you may need to restart the kernel to use updated packages.</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lightgbm <span class="keyword">import</span> LGBMRegressor, LGBMClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default value 로 학습</span></span><br><span class="line">lgbm = LGBMRegressor(random_state=<span class="number">1</span>)</span><br><span class="line">lgbm.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,              importance_type='split', learning_rate=0.1, max_depth=-1,              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,              n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,              random_state=1, reg_alpha=0.0, reg_lambda=0.0, silent=True,              subsample=1.0, subsample_for_bin=200000, subsample_freq=0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lgbm_pred = lgbm.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'LightGBM'</span>, y_test, lgbm_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_158_0-1596543804030.png" alt="output_158_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                             XGBoost  13.8414549                               RandomForest Ensemble  13.78119110                             GradientBoost Ensemble  13.45187711  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247212                                           LightGBM  12.88217013  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771714                                  XGBoost w/ Tuning  11.98760215                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_158_2-1596543812633.png" alt="output_158_2"></p><br><p><strong>주요 Hyperparameter</strong></p><ul><li><p><strong>random_state:</strong> random seed 고정 값</p></li><li><p><strong>n_jobs:</strong> CPU 사용 갯수</p></li><li><p><strong>learning_rate:</strong> 학습율. 너무 큰 학습율은 성능을 떨어뜨리고, 너무 작은 학습율은 학습이 느리다. 적절한 값을 찾아야함. n_estimators와 같이 튜닝. default=0.1</p></li><li><p><strong>n_estimators:</strong> 부스팅 스테이지 수. (랜덤포레스트 트리의 갯수 설정과 비슷한 개념). default=100</p></li><li><p><strong>max_depth:</strong> 트리의 깊이. 과대적합 방지용. default=3.</p></li><li><p><strong>colsample_bytree:</strong> 샘플 사용 비율 (max_features와 비슷한 개념). 과대적합 방지용. default=1.0</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with hyper-parameter tuning</span></span><br><span class="line">lgbm_t = LGBMRegressor(random_state=<span class="number">1</span>, learning_rate=<span class="number">0.01</span>, n_estimators=<span class="number">2000</span>, colsample_bytree=<span class="number">0.9</span>, subsample=<span class="number">0.7</span>, max_depth=<span class="number">5</span>)</span><br><span class="line">lgbm_t.fit(x_train, y_train)</span><br><span class="line">lgbm_t_pred = lgbm_t.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'LightGBM w/ Tuning'</span>, y_test, lgbm_t_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_162_0-1596543872792.png" alt="output_162_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                             XGBoost  13.8414549                               RandomForest Ensemble  13.78119110                             GradientBoost Ensemble  13.45187711  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247212                                           LightGBM  12.88217013  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771714                                 LightGBM w/ Tuning  12.20004015                                  XGBoost w/ Tuning  11.98760216                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_162_2-1596543881929.png" alt="output_162_2"></p><br><h3 id="4-4-스태킹-stacking"><a class="markdownIt-Anchor" href="#4-4-스태킹-stacking"></a> 4-4. 스태킹 (Stacking)</h3><p>개별 모델이 예측한 데이터를 기반으로 <strong>final_estimators</strong> 종합하여 예측을 수행</p><ul><li><p>성능을 극으로 끌오올릴 때 활용하기도 함</p></li><li><p>과대적합을 유발할 수 있다. (특히, 데이터셋이 적은 경우)</p><br></li></ul><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingRegressor.html" target="_blank" rel="noopener">[sklearn.ensemble.<strong>StackingRegressor</strong>] Document</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> StackingRegressor</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stack_models = [</span><br><span class="line">    (<span class="string">'elasticnet'</span>, poly_elasticnet),</span><br><span class="line">    (<span class="string">'randomforest'</span>, rfr_t),</span><br><span class="line">    (<span class="string">'lgbm'</span>, lgbm_t)</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack_reg = StackingRegressor(stack_models, final_estimator=xgb, n_jobs=<span class="number">-1</span>)</span><br><span class="line">stack_reg.fit(x_train, y_train)</span><br><span class="line">stack_pred = stack_reg.predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'Stacking Ensemble'</span>, y_test, stack_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_171_0-1596543891772.png" alt="output_171_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                   Stacking Ensemble  16.9060909                                             XGBoost  13.84145410                              RandomForest Ensemble  13.78119111                             GradientBoost Ensemble  13.45187712  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247213                                           LightGBM  12.88217014  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771715                                 LightGBM w/ Tuning  12.20004016                                  XGBoost w/ Tuning  11.98760217                    RandomForest Ensemble w/ Tuning  11.481491</code></pre><p><img src="/images/S-Python-sklearn4/output_171_2-1596543909420.png" alt="output_171_2"></p><br><h3 id="4-5-weighted-blending"><a class="markdownIt-Anchor" href="#4-5-weighted-blending"></a> 4-5. Weighted Blending</h3><p>각 모델의 <strong>예측값</strong>에 대하여 weight를 곱해혀 최종 output 산출</p><ul><li><p>모델에 대한 가중치를 조절하여, 최종 output을 산출함</p></li><li><p><strong>가중치의 합은 1.0</strong>이 되도록 설정</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final_outputs = {</span><br><span class="line">    <span class="string">'randomforest'</span>: rfr_t_pred,</span><br><span class="line">    <span class="string">'xgboost'</span>: xgb_t_pred,</span><br><span class="line">    <span class="string">'lgbm'</span>: lgbm_t_pred</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final_prediction=\</span><br><span class="line">final_outputs[<span class="string">'randomforest'</span>] * <span class="number">0.5</span>\</span><br><span class="line">+final_outputs[<span class="string">'xgboost'</span>] * <span class="number">0.3</span>\</span><br><span class="line">+final_outputs[<span class="string">'lgbm'</span>] * <span class="number">0.2</span>\</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mse_eval(<span class="string">'Weighted Blending'</span>, y_test, final_prediction)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_178_0-1596543918172.png" alt="output_178_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                   Stacking Ensemble  16.9060909                                             XGBoost  13.84145410                              RandomForest Ensemble  13.78119111                             GradientBoost Ensemble  13.45187712  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247213                                           LightGBM  12.88217014  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771715                                 LightGBM w/ Tuning  12.20004016                                  XGBoost w/ Tuning  11.98760217                    RandomForest Ensemble w/ Tuning  11.48149118                                  Weighted Blending  10.585610</code></pre><p><img src="/images/S-Python-sklearn4/output_178_2-1596543958921.png" alt="output_178_2"></p><br><h3 id="4-6-앙상블-모델-정리"><a class="markdownIt-Anchor" href="#4-6-앙상블-모델-정리"></a> 4-6. 앙상블 모델 정리</h3><ol><li><p>앙상블은 대체적으로 단일 모델 대비 성능이 좋다</p></li><li><p>앙상블을 앙상블하는 기법인 Stacking과 Weighted Blending도 참고해 볼만 하다</p></li><li><p>앙상블 모델은 적절한 <strong>Hyper-parameter Tuning</strong>이 중요하다</p></li><li><p>앙상블 모델은 대체적으로 학습시간이 더 오래 걸린다</p></li><li><p>따라서, 모델 튜닝을 하는 데에 시간이 오래 소유된다</p><br></li></ol>  <br><h2 id="5-cross-validation"><a class="markdownIt-Anchor" href="#5-cross-validation"></a> <strong>5. Cross Validation</strong></h2><h3 id="5-1-cross-validation-소개"><a class="markdownIt-Anchor" href="#5-1-cross-validation-소개"></a> 5-1. Cross Validation 소개</h3><p><a href="https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation" target="_blank" rel="noopener">Cross Validation 알아보기</a></p><p><a href="https://3months.tistory.com/321" target="_blank" rel="noopener">참고 자료: 딥러닝 모델의 K-겹 교차검증 (K-fold Cross Validation)</a></p><p>전에 진행했던 실습에서도 보였듯이, Hyper-parameter의 값은 모델의 성능을 좌우한다. 그러므로 예측 모델의 성능을 높이기 위해, Hyper-parameter Tuning이 매우 중요하다.</p><ul><li><p>이를 실현하기 위해 저희는 Training data을 다시 Training set과 Validation set으로 나눈다. Trainging set에서 Hyper-parameter값을 바뀌가면서 모델 학습하고, Validation set에서 모델의 성능을 평가하여, 모델 성능을 제일 높일 수 있는 Hyper-parameter값을 선택한다</p></li><li><p>하지만, 데이터의 일부만 Validation set으로 사용해 모델 성능을 평가하게 되면, 훈련된 모델이 Test set에 대한 성능 평가의 신뢰성이 떨어질 수 있다. 이를 방지하기 위해 **K-fold Cross Validation (K-겹 교차검증)**을 많이 활용한다</p><ul><li>K겹 교차 검증은 모든 데이터가 최소 한 번은 validation set으로 쓰이도록 한다<br>(아래의 그림을 보면, 데이터를 5개로 쪼개 매번 validation set을 바꿔나가는 것을 볼 수 있다)</li><li>K번 검증을 통해 구한 K 개의 평가지표 값을 평균 내어 모델 성능을 평가한다</li></ul></li></ul><p><img src="/images/S-Python-sklearn4/grid_search_cross_validation.png" alt="CV"></p><br><p>[예시]</p><ul><li><p>Estimation 1일 때,<br>Training set: [2, 3, 4, 5] / Validation set: [1]</p></li><li><p>Estimation 2일 때,<br>Training set: [1, 3, 4, 5] / Validation set: [2]</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n_splits = <span class="number">5</span></span><br><span class="line">kfold = KFold(n_splits=n_splits, random_state=<span class="number">1</span>, shuffle = <span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>      <th>MEDV</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0.0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1.0</td>      <td>296.0</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>      <td>24.0</td>    </tr>    <tr>      <th>1</th>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>      <td>21.6</td>    </tr>    <tr>      <th>2</th>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>      <td>34.7</td>    </tr>    <tr>      <th>3</th>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>      <td>33.4</td>    </tr>    <tr>      <th>4</th>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>      <td>36.2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = np.array(df.drop(<span class="string">'MEDV'</span>, <span class="number">1</span>))</span><br><span class="line">Y = np.array(df[<span class="string">'MEDV'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lgbm_fold = LGBMRegressor(random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">total_error = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> train_index, test_index <span class="keyword">in</span> kfold.split(X):</span><br><span class="line">    x_train_fold, x_test_fold = X[train_index], X[test_index]</span><br><span class="line">    y_train_fold, y_test_fold = Y[train_index], Y[test_index]</span><br><span class="line">    lgbm_fold_pred = lgbm_fold.fit(x_train_fold, y_train_fold).predict(x_test_fold)</span><br><span class="line">    error = mean_squared_error(y_test_fold, lgbm_fold_pred)</span><br><span class="line">    print(<span class="string">'Fold = {}, prediction score = {:.2f}'</span>.format(i, error))</span><br><span class="line">    total_error += error</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(<span class="string">'---'</span>*<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'Average Error: %s'</span> % (total_error / n_splits))</span><br></pre></td></tr></tbody></table></figure><pre><code>Fold = 1, prediction score = 9.76Fold = 2, prediction score = 20.58Fold = 3, prediction score = 6.95Fold = 4, prediction score = 12.18Fold = 5, prediction score = 10.87------------------------------Average Error: 12.06743160435072</code></pre><br><h3 id="5-2-hyper-parameter-튜닝"><a class="markdownIt-Anchor" href="#5-2-hyper-parameter-튜닝"></a> 5-2. Hyper-parameter 튜닝</h3><p><strong>Hyper-parameter 튜닝</strong> 시 경우의 수가 너무 많으므로 우리는 <strong>자동화</strong>할 틸요가 있다</p><p>sklearn 패키지에서 자주 사용되는 hyper-parameter 튜닝을 돕는 클래스는 다음 2가지가 있다:</p><ol><li><strong>RandomizedSerchCV</strong></li><li><strong>GridSerchCV</strong></li></ol><p><strong>적용하는 방법</strong></p><ol><li><p>사용할 Search 방법을 선택한다</p></li><li><p>hyper-parameter 도메인(값의 범위)을 설정한다 (<code>max_depth</code>, <code>n_estimators</code>… 등등)</p></li><li><p>학습을 시킨 후, 기다린다</p></li><li><p>도출된 결과 값을 모델에 적용하고 성능을 비교한다</p><br></li></ol><h4 id="1-randomizedsearchcv"><a class="markdownIt-Anchor" href="#1-randomizedsearchcv"></a> (1) RandomizedSearchCV</h4><ul><li><p>모든 매개 변수 값이 시도되는 것이 아니라 지정된 분포에서 고정 된 수의 매개 변수 설정이 샘플링된다.</p></li><li><p>시도 된 매개 변수 설정의 수는 <code>n_iter</code>에 의해 제공됨.</p><br></li></ul><p><strong>주요 Hyper-parameter (LGBM)</strong></p><ul><li><strong>random_state:</strong> random seed 고정 값</li><li><strong>n_jobs:</strong> CPU 사용 갯수</li><li><strong>learning_rate:</strong> 학습율. 너무 큰 학습율은 성능을 떨어뜨리고, 너무 작은 학습율은 학습이 느리다. 적절한 값을 찾아야함. n_estimators와 같이 튜닝. default=0.1</li><li><strong>n_estimators:</strong> 부스팅 스테이지 수. (랜덤포레스트 트리의 갯수 설정과 비슷한 개념). default=100</li><li><strong>max_depth:</strong> 트리의 깊이. 과대적합 방지용. default=3.</li><li><strong>colsample_bytree:</strong> 샘플 사용 비율 (max_features와 비슷한 개념). 과대적합 방지용. default=1.0</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">params = {</span><br><span class="line">    <span class="string">'learning_rate'</span>: [<span class="number">0.005</span>, <span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.05</span>],</span><br><span class="line">    <span class="string">'n_estimators'</span>: [<span class="number">500</span>, <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>],</span><br><span class="line">    <span class="string">'max_depth'</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">    <span class="string">'colsample_bytree'</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">    <span class="string">'subsample'</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>조절하여, 총 몇 회의 시도를 진행할 것인자 정의한다  </span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(회수가 늘어나면, 더 좋은 parameter를 찾을 확률은 올라가지만, 그만큼 시간이 오래걸린다.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">rcv_lgbm = RandomizedSearchCV(LGBMRegressor(), params, random_state=1, cv=5, n_iter=100, scoring='neg_mean_squared_error')</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcv_lgbm.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>RandomizedSearchCV(cv=5, error_score=nan,                   estimator=LGBMRegressor(boosting_type='gbdt',                                           class_weight=None,                                           colsample_bytree=1.0,                                           importance_type='split',                                           learning_rate=0.1, max_depth=-1,                                           min_child_samples=20,                                           min_child_weight=0.001,                                           min_split_gain=0.0, n_estimators=100,                                           n_jobs=-1, num_leaves=31,                                           objective=None, random_state=None,                                           reg_alpha=0.0, reg_lambda=0.0,                                           silen...                                           subsample_freq=0),                   iid='deprecated', n_iter=100, n_jobs=None,                   param_distributions={'colsample_bytree': [0.8, 0.9, 1.0],                                        'learning_rate': [0.005, 0.01, 0.03,                                                          0.05],                                        'max_depth': [3, 5, 7],                                        'n_estimators': [500, 1000, 2000, 3000],                                        'subsample': [0.7, 0.8, 0.9, 1.0]},                   pre_dispatch='2*n_jobs', random_state=1, refit=True,                   return_train_score=False, scoring='neg_mean_squared_error',                   verbose=0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcv_lgbm.best_score_</span><br></pre></td></tr></tbody></table></figure><pre><code>-11.132039701508374</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcv_lgbm.best_params_</span><br></pre></td></tr></tbody></table></figure><pre><code>{'subsample': 0.8, 'n_estimators': 1000, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.9}</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lgbm_best = LGBMRegressor(learning_rate=<span class="number">0.05</span>, n_estimators=<span class="number">1000</span>, subsample=<span class="number">0.8</span>, max_depth=<span class="number">3</span>, colsample_bytree=<span class="number">0.9</span>)</span><br><span class="line">lgbm_best_pred = lgbm_best.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'RandomSearch LGBM'</span>, y_test, lgbm_best_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_216_0-1596543976320.png" alt="output_216_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                   Stacking Ensemble  16.9060909                                             XGBoost  13.84145410                              RandomForest Ensemble  13.78119111                             GradientBoost Ensemble  13.45187712  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247213                                           LightGBM  12.88217014                                  RandomSearch LGBM  12.66191715  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771716                                 LightGBM w/ Tuning  12.20004017                                  XGBoost w/ Tuning  11.98760218                    RandomForest Ensemble w/ Tuning  11.48149119                                  Weighted Blending  10.585610</code></pre><p><img src="/images/S-Python-sklearn4/output_216_2-1596543983232.png" alt="output_216_2"></p><br><h4 id="2-gridserchcv"><a class="markdownIt-Anchor" href="#2-gridserchcv"></a> (2) GridSerchCV</h4><ul><li>모든 매개 변수 값에 대하여 <strong>완전 탐색</strong>을 시도한다</li><li>따라서, 최적화할 parameter가 많다면, <strong>시간이 매우 오래</strong>걸린다</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">params = {</span><br><span class="line">    <span class="string">'learning_rate'</span>: [<span class="number">0.04</span>, <span class="number">0.05</span>, <span class="number">0.06</span>],</span><br><span class="line">    <span class="string">'n_estimators'</span>: [<span class="number">800</span>, <span class="number">1000</span>, <span class="number">1200</span>],</span><br><span class="line">    <span class="string">'max_depth'</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    <span class="string">'colsample_bytree'</span>: [<span class="number">0.8</span>, <span class="number">0.85</span>, <span class="number">0.9</span>],</span><br><span class="line">    <span class="string">'subsample'</span>: [<span class="number">0.8</span>, <span class="number">0.85</span>, <span class="number">0.9</span>],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_search = GridSearchCV(LGBMRegressor(), params, cv=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, scoring=<span class="string">'neg_mean_squared_error'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_search.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>GridSearchCV(cv=5, error_score=nan,             estimator=LGBMRegressor(boosting_type='gbdt', class_weight=None,                                     colsample_bytree=1.0,                                     importance_type='split', learning_rate=0.1,                                     max_depth=-1, min_child_samples=20,                                     min_child_weight=0.001, min_split_gain=0.0,                                     n_estimators=100, n_jobs=-1, num_leaves=31,                                     objective=None, random_state=None,                                     reg_alpha=0.0, reg_lambda=0.0, silent=True,                                     subsample=1.0, subsample_for_bin=200000,                                     subsample_freq=0),             iid='deprecated', n_jobs=-1,             param_grid={'colsample_bytree': [0.8, 0.85, 0.9],                         'learning_rate': [0.04, 0.05, 0.06],                         'max_depth': [3, 4, 5],                         'n_estimators': [800, 1000, 1200],                         'subsample': [0.8, 0.85, 0.9]},             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,             scoring='neg_mean_squared_error', verbose=0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_search.best_score_</span><br></pre></td></tr></tbody></table></figure><pre><code>-11.10039780445118</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_search.best_params_</span><br></pre></td></tr></tbody></table></figure><pre><code>{'colsample_bytree': 0.9, 'learning_rate': 0.05, 'max_depth': 3, 'n_estimators': 800, 'subsample': 0.8}</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lgbm_best = LGBMRegressor(learning_rate=<span class="number">0.05</span>, n_estimators=<span class="number">800</span>, subsample=<span class="number">0.8</span>, max_depth=<span class="number">3</span>, colsample_bytree=<span class="number">0.9</span>)</span><br><span class="line">lgbm_best_pred = lgbm_best.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'GridSearch LGBM'</span>, y_test, lgbm_best_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn4/output_226_0-1596543990796.png" alt="output_226_0"></p><pre><code>                                                model        mse0                                 Standard ElasticNet  26.0107561          GradientBoost Ensemble w/ tuning (lr=0.01)  24.5994412                            ElasticNet(l1_ratio=0.2)  24.4810693                                    LinearRegression  22.7707844                                      Ridge(alpha=1)  22.6904115                                   Lasso(alpha=0.01)  22.6356146                                     Voting Ensemble  22.0921587                                     Poly ElasticNet  20.8059868                                   Stacking Ensemble  16.9060909                                             XGBoost  13.84145410                              RandomForest Ensemble  13.78119111                             GradientBoost Ensemble  13.45187712  GradientBoost Ensemble w/ tuning (lr=0.01, est...  13.00247213                                           LightGBM  12.88217014                                    GridSearch LGBM  12.79417215                                  RandomSearch LGBM  12.66191716  GradientBoost Ensemble w/ tuning (lr=0.01, est...  12.60771717                                 LightGBM w/ Tuning  12.20004018                                  XGBoost w/ Tuning  11.98760219                    RandomForest Ensemble w/ Tuning  11.48149120                                  Weighted Blending  10.585610</code></pre><p><img src="/images/S-Python-sklearn4/output_226_2-1596543997347.png" alt="output_226_2"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Voting, Bagging, Boosting, Stacking, Cross Validation
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="앙상블" scheme="https://hyemin-kim.github.io/tags/%EC%95%99%EC%83%81%EB%B8%94/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn - (3) 회귀 (Regression)</title>
    <link href="https://hyemin-kim.github.io/2020/07/29/S-Python-sklearn3/"/>
    <id>https://hyemin-kim.github.io/2020/07/29/S-Python-sklearn3/</id>
    <published>2020-07-29T09:53:05.000Z</published>
    <updated>2020-07-29T10:16:41.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="회귀-regression-예측"><a class="markdownIt-Anchor" href="#회귀-regression-예측"></a> 회귀 (Regression) 예측</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B"><strong>0. 데이터 셋</strong></a><ul><li><a href="#0-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A1%9C%EB%93%9C">0-1. 데이터 로드</a></li><li><a href="#0-2-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0">0-2. 데이터프레임 만들기</a></li></ul></li><li><a href="#1-training-set-test-set-%EB%82%98%EB%88%84%EA%B8%B0"><strong>1. Training set / Test set 나누기</strong></a></li><li><a href="#2-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0"><strong>2. 평가 지표 만들기</strong></a><ul><li><a href="#2-1-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C-%EA%B3%84%EC%82%B0%EC%8B%9D">2-1. 평가 지표 계산식</a></li><li><a href="#2-2-%EC%BD%94%EB%94%A9%EC%9C%BC%EB%A1%9C-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0">2-2. 코딩으로 평가 지표 만들어 보기</a></li><li><a href="#2-3-sklearn%EC%9D%98-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0">2-3. sklearn의 평가 지표 활용하기</a></li><li><a href="#2-4-%EB%AA%A8%EB%8D%B8-%EC%84%B1%EB%8A%A5-%ED%99%95%EC%9D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%A8%EC%88%98">2-4. 모델 성능 확인을 위한 함수</a></li></ul></li><li><a href="#3-%ED%9A%8C%EA%B7%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98"><strong>3. 회귀 알고리즘</strong></a><ul><li><a href="#3-1-linear-regression">3-1. Linear Regression</a></li><li><a href="#3-2-ridge-lasso-elasticnet">3-2. Ridge &amp; LASSO &amp; ElasticNet</a><ul><li><a href="#1-%EA%B0%9C%EB%85%90">(1) 개념</a></li><li><a href="#2-%EC%8B%A4%EC%8A%B5">(2) 실습</a></li></ul></li></ul></li><li><a href="#4-scaling"><strong>4. Scaling</strong></a><ul><li><a href="#4-1-scaler-%EC%86%8C%EA%B0%9C">4-1. Scaler 소개</a></li><li><a href="#4-2-scaling-%ED%9B%84-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%ED%99%9C%EC%9A%A9">4-2. Scaling 후 모델 학습 – 파이프라인 활용</a></li></ul></li><li><a href="#5-polynomial-features"><strong>5. Polynomial Features</strong></a></li></ul><p></p><br><blockquote><p><a href="https://scikit-learn.org/stable/supervised_learning.html#supervised-learning" target="_blank" rel="noopener">[Supervised Learning] Document</a></p></blockquote><p><strong>특성:</strong> 수치형 값을 예측 (Y의 값이 연속형 수치로 표현)</p><p><strong>예시:</strong></p><ul><li><p>주택 가격 예측</p></li><li><p>매출앵 예측</p><br></li></ul><h2 id="0-데이터-셋"><a class="markdownIt-Anchor" href="#0-데이터-셋"></a> <strong>0. 데이터 셋</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>) <span class="comment"># If True, print floating point numbers instead of scientific notation</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br></pre></td></tr></tbody></table></figure><p>[<a href="https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_boston.html#sklearn.datasets.load_boston" target="_blank" rel="noopener">Boston Dataset</a>]</p> <br> <h3 id="0-1-데이터-로드"><a class="markdownIt-Anchor" href="#0-1-데이터-로드"></a> 0-1. 데이터 로드</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = load_boston()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="string">'DESCR'</span>])  <span class="comment"># data description</span></span><br></pre></td></tr></tbody></table></figure><pre><code>.. _boston_dataset:Boston house prices dataset---------------------------**Data Set Characteristics:**      :Number of Instances: 506     :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.    :Attribute Information (in order):        - CRIM     per capita crime rate by town        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.        - INDUS    proportion of non-retail business acres per town        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)        - NOX      nitric oxides concentration (parts per 10 million)        - RM       average number of rooms per dwelling        - AGE      proportion of owner-occupied units built prior to 1940        - DIS      weighted distances to five Boston employment centres        - RAD      index of accessibility to radial highways        - TAX      full-value property-tax rate per $10,000        - PTRATIO  pupil-teacher ratio by town        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town        - LSTAT    % lower status of the population        - MEDV     Median value of owner-occupied homes in $1000's    :Missing Attribute Values: None    :Creator: Harrison, D. and Rubinfeld, D.L.This is a copy of UCI ML housing dataset.https://archive.ics.uci.edu/ml/machine-learning-databases/housing/</code></pre><p>​</p><pre><code>This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonicprices and the demand for clean air', J. Environ. Economics &amp; Management,vol.5, 81-102, 1978.   Used in Belsley, Kuh &amp; Welsch, 'Regression diagnostics...', Wiley, 1980.   N.B. Various transformations are used in the table onpages 244-261 of the latter.The Boston house-price data has been used in many machine learning papers that address regressionproblems.        .. topic:: References   - Belsley, Kuh &amp; Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.</code></pre><p>​</p>  <br><h3 id="0-2-데이터프레임-만들기"><a class="markdownIt-Anchor" href="#0-2-데이터프레임-만들기"></a> 0-2. 데이터프레임 만들기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1. features (X)</span></span><br><span class="line"><span class="comment"># data['data'] - feature data; data['feature_names'] - feature column names</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data[<span class="string">'data'</span>], columns = data[<span class="string">'feature_names'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2. target (y) 추가 </span></span><br><span class="line">df[<span class="string">'MEDV'</span>] = data[<span class="string">'target'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>      <th>MEDV</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0.0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1.0</td>      <td>296.0</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>      <td>24.0</td>    </tr>    <tr>      <th>1</th>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>      <td>21.6</td>    </tr>    <tr>      <th>2</th>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>      <td>34.7</td>    </tr>    <tr>      <th>3</th>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>      <td>33.4</td>    </tr>    <tr>      <th>4</th>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>      <td>36.2</td>    </tr>  </tbody></table></div><br>  <p><strong>컬럼 소게</strong> (feature 13 + target 1):</p><ul><li><p><strong>CRIM</strong>: 범죄율</p></li><li><p><strong>ZN</strong>: 25,000 square feet 당 주거용 토지의 비율</p></li><li><p><strong>INDUS</strong>: 비소매(non-retail) 비즈니스 면적 비율</p></li><li><p><strong>CHAS</strong>: 찰스 강 더미 변수 (통로가 하천을 향하면 1; 그렇지 않으면 0)</p></li><li><p><strong>NOX</strong>: 산화 질소 농도 (천만 분의 1)</p></li><li><p><strong>RM</strong>:주거 당 평균 객실 수</p></li><li><p><strong>AGE</strong>: 1940 년 이전에 건축된 자가 소유 점유 비율</p></li><li><p><strong>DIS</strong>: 5 개의 보스턴 고용 센터까지의 가중 거리</p></li><li><p><strong>RAD</strong>: 고속도로 접근성 지수</p></li><li><p><strong>TAX</strong>: 10,000 달러 당 전체 가치 재산 세율</p></li><li><p><strong>PTRATIO</strong>  도시 별 학생-교사 비율</p></li><li><p><strong>B</strong>: 1000 (Bk-0.63) ^ 2 여기서 Bk는 도시 별 검정 비율입니다.</p></li><li><p><strong>LSTAT</strong>: 인구의 낮은 지위</p></li><li><p><strong>MEDV</strong>: 자가 주택의 중앙값 (1,000 달러 단위)</p><br><br></li></ul><h2 id="1-training-set-test-set-나누기"><a class="markdownIt-Anchor" href="#1-training-set-test-set-나누기"></a> <strong>1. Training set / Test set 나누기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(df.drop(<span class="string">'MEDV'</span>, <span class="number">1</span>), df[<span class="string">'MEDV'</span>], random_state=<span class="number">23</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((379, 13), (379,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((127, 13), (127,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>112</th>      <td>0.12329</td>      <td>0.0</td>      <td>10.01</td>      <td>0.0</td>      <td>0.547</td>      <td>5.913</td>      <td>92.9</td>      <td>2.3534</td>      <td>6.0</td>      <td>432.0</td>      <td>17.8</td>      <td>394.95</td>      <td>16.21</td>    </tr>    <tr>      <th>301</th>      <td>0.03537</td>      <td>34.0</td>      <td>6.09</td>      <td>0.0</td>      <td>0.433</td>      <td>6.590</td>      <td>40.4</td>      <td>5.4917</td>      <td>7.0</td>      <td>329.0</td>      <td>16.1</td>      <td>395.75</td>      <td>9.50</td>    </tr>    <tr>      <th>401</th>      <td>14.23620</td>      <td>0.0</td>      <td>18.10</td>      <td>0.0</td>      <td>0.693</td>      <td>6.343</td>      <td>100.0</td>      <td>1.5741</td>      <td>24.0</td>      <td>666.0</td>      <td>20.2</td>      <td>396.90</td>      <td>20.32</td>    </tr>    <tr>      <th>177</th>      <td>0.05425</td>      <td>0.0</td>      <td>4.05</td>      <td>0.0</td>      <td>0.510</td>      <td>6.315</td>      <td>73.4</td>      <td>3.3175</td>      <td>5.0</td>      <td>296.0</td>      <td>16.6</td>      <td>395.60</td>      <td>6.29</td>    </tr>    <tr>      <th>69</th>      <td>0.12816</td>      <td>12.5</td>      <td>6.07</td>      <td>0.0</td>      <td>0.409</td>      <td>5.885</td>      <td>33.0</td>      <td>6.4980</td>      <td>4.0</td>      <td>345.0</td>      <td>18.9</td>      <td>396.90</td>      <td>8.79</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_train.head()</span><br></pre></td></tr></tbody></table></figure><pre><code>112    18.8301    22.0401     7.2177    24.669     20.9Name: MEDV, dtype: float64</code></pre><br>  <br><h2 id="2-평가-지표-만들기"><a class="markdownIt-Anchor" href="#2-평가-지표-만들기"></a> <strong>2. 평가 지표 만들기</strong></h2><h3 id="2-1-평가-지표-계산식"><a class="markdownIt-Anchor" href="#2-1-평가-지표-계산식"></a> 2-1. 평가 지표 계산식</h3><p><strong>(1) MAE (Mean Absolute Error)</strong></p><p>MAE (평균 절대 오차): 에측값과 실제값의 차이의 <strong>절대값</strong>에 대하여 평균을 낸 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">MAE = \frac{1}{n} \sum_{i=1}^n \left\vert y_i - \widehat{y_i} \right\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span></p><p><strong>(2) MSE (Mean Squared Error)</strong></p><p>MSE (평균 제곱 오차): 예측값과 실제값의 차이의 <strong>제곱</strong>에 대하여 평균을 낸 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>S</mi><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">MSE = \frac{1}{n} \sum_{i=1}^n \left( y_i - \widehat{y_i} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>(3) RMSE (Root Mean Squared Error)</strong></p><p>RMSE (평균 제곱근 오차): 예측값과 실제값의 차이의 <strong>제곱</strong>에 대하여 평균을 낸 뒤 <strong>루트</strong>를 씌운 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>M</mi><mi>S</mi><mi>E</mi><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="true">^</mo></mover><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^n \left( y_i - \widehat{y_i} \right)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1568160000000005em;vertical-align:-1.277669em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791470000000006em;"><span class="svg-align" style="top:-5.116816em;"><span class="pstrut" style="height:5.116816em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width="100%" height="0.24em" viewBox="0 0 1062 239" preserveAspectRatio="none"><path d="M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8391470000000005em;"><span class="pstrut" style="height:5.116816em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.196816em;"><svg width="400em" height="3.196816em" viewBox="0 0 400000 3196" preserveAspectRatio="xMinYMin slice"><path d="M702 80H400000v40H742v3062l-4 4-4 4c-.667.7-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667 219 661 l218 661zM702 80H400000v40H742z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span></span></span></span></p>  <br><h3 id="2-2-코딩으로-평가-지표-만들어-보기"><a class="markdownIt-Anchor" href="#2-2-코딩으로-평가-지표-만들어-보기"></a> 2-2. 코딩으로 평가 지표 만들어 보기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">actual = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">pred = np.array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MAE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_mae</span><span class="params">(actual, pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.abs(actual - pred).mean()</span><br><span class="line"></span><br><span class="line">my_mae(actual, pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>2.0</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_mse</span><span class="params">(actual, pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ((actual - pred)**<span class="number">2</span>).mean()</span><br><span class="line"></span><br><span class="line">my_mse(actual, pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>4.0</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RMSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_rmse</span><span class="params">(actual, pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(my_mse(actual, pred))</span><br><span class="line"></span><br><span class="line">my_rmse(actual, pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>2.0</code></pre><br>  <h3 id="2-3-sklearn의-평가-지표-활용하기"><a class="markdownIt-Anchor" href="#2-3-sklearn의-평가-지표-활용하기"></a> 2-3. sklearn의 평가 지표 활용하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, mean_squared_error</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_absolute_error.html" target="_blank" rel="noopener">[sklearn.metrics.<strong>mean_absolute_error</strong>]</a><br><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html" target="_blank" rel="noopener">[sklearn.metrics.<strong>mean_squared_error</strong>]</a></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MAE (my_mae VS sklearn_mae)</span></span><br><span class="line">my_mae(actual, pred), mean_absolute_error(actual, pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>(2.0, 2.0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE (my_mse VS sklearn_mse)</span></span><br><span class="line">my_mse(actual, pred), mean_squared_error(actual, pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>(4.0, 4.0)</code></pre> <br> <h3 id="2-4-모델-성능-확인을-위한-함수"><a class="markdownIt-Anchor" href="#2-4-모델-성능-확인을-위한-함수"></a> 2-4. 모델 성능 확인을 위한 함수</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">my_predictions = {}</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>, <span class="string">'khaki'</span>, <span class="string">'teal'</span>, <span class="string">'orchid'</span>, <span class="string">'sandybrown'</span>,</span><br><span class="line">          <span class="string">'greenyellow'</span>, <span class="string">'dodgerblue'</span>, <span class="string">'deepskyblue'</span>, <span class="string">'rosybrown'</span>, <span class="string">'firebrick'</span>,</span><br><span class="line">          <span class="string">'deeppink'</span>, <span class="string">'crimson'</span>, <span class="string">'salmon'</span>, <span class="string">'darkred'</span>, <span class="string">'olivedrab'</span>, <span class="string">'olive'</span>, </span><br><span class="line">          <span class="string">'forestgreen'</span>, <span class="string">'royalblue'</span>, <span class="string">'indigo'</span>, <span class="string">'navy'</span>, <span class="string">'mediumpurple'</span>, <span class="string">'chocolate'</span>,</span><br><span class="line">          <span class="string">'gold'</span>, <span class="string">'darkorange'</span>, <span class="string">'seagreen'</span>, <span class="string">'turquoise'</span>, <span class="string">'steelblue'</span>, <span class="string">'slategray'</span>, </span><br><span class="line">          <span class="string">'peru'</span>, <span class="string">'midnightblue'</span>, <span class="string">'slateblue'</span>, <span class="string">'dimgray'</span>, <span class="string">'cadetblue'</span>, <span class="string">'tomato'</span></span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># prediction plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_predictions</span><span class="params">(name_, actual, pred)</span>:</span></span><br><span class="line">    df = pd.DataFrame({<span class="string">'actual'</span>: y_test, <span class="string">'prediction'</span>: pred})</span><br><span class="line">    df = df.sort_values(by=<span class="string">'actual'</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">    plt.scatter(df.index, df[<span class="string">'prediction'</span>], marker=<span class="string">'x'</span>, color=<span class="string">'r'</span>)</span><br><span class="line">    plt.scatter(df.index, df[<span class="string">'actual'</span>], alpha=<span class="number">0.7</span>, marker=<span class="string">'o'</span>, color=<span class="string">'black'</span>)</span><br><span class="line">    plt.title(name_, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.legend([<span class="string">'prediction'</span>, <span class="string">'actual'</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># evaluation plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mse_eval</span><span class="params">(name_, actual, pred)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> predictions</span><br><span class="line">    <span class="keyword">global</span> colors</span><br><span class="line"></span><br><span class="line">    plot_predictions(name_, actual, pred)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(actual, pred)</span><br><span class="line">    my_predictions[name_] = mse</span><br><span class="line"></span><br><span class="line">    y_value = sorted(my_predictions.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    df = pd.DataFrame(y_value, columns=[<span class="string">'model'</span>, <span class="string">'mse'</span>])</span><br><span class="line">    print(df)</span><br><span class="line">    min_ = df[<span class="string">'mse'</span>].min() - <span class="number">10</span></span><br><span class="line">    max_ = df[<span class="string">'mse'</span>].max() + <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    length = len(df)</span><br><span class="line">    </span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, length))</span><br><span class="line">    ax = plt.subplot()</span><br><span class="line">    ax.set_yticks(np.arange(len(df)))</span><br><span class="line">    ax.set_yticklabels(df[<span class="string">'model'</span>], fontsize=<span class="number">15</span>)</span><br><span class="line">    bars = ax.barh(np.arange(len(df)), df[<span class="string">'mse'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(df[<span class="string">'mse'</span>]):</span><br><span class="line">        idx = np.random.choice(len(colors))</span><br><span class="line">        bars[i].set_color(colors[idx])</span><br><span class="line">        ax.text(v + <span class="number">2</span>, i, str(round(v, <span class="number">3</span>)), color=<span class="string">'k'</span>, fontsize=<span class="number">15</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">        </span><br><span class="line">    plt.title(<span class="string">'MSE Error'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">    plt.xlim(min_, max_)</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_model</span><span class="params">(name_)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> my_predictions</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">del</span> my_predictions[name_]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure>  <br>  <br><h2 id="3-회귀-알고리즘"><a class="markdownIt-Anchor" href="#3-회귀-알고리즘"></a> <strong>3. 회귀 알고리즘</strong></h2><h3 id="3-1-linear-regression"><a class="markdownIt-Anchor" href="#3-1-linear-regression"></a> 3-1. Linear Regression</h3><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html" target="_blank" rel="noopener">[sklearn.linear_model.<strong>LinearRegression</strong>] Document</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression(n_jobs=<span class="number">-1</span>)  <span class="comment"># n_jobs: CPU코어의 사용</span></span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line">pred = model.predict(x_test)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mse_eval(<span class="string">'LinearRegression'</span>, y_test, pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_59_0.png" alt="output_59_0"></p><pre><code>              model        mse0  LinearRegression  22.770784</code></pre><p><img src="/images/S-Python-sklearn3/output_59_2.png" alt="output_59_2"></p><br><h3 id="3-2-ridge-lasso-elasticnet"><a class="markdownIt-Anchor" href="#3-2-ridge-lasso-elasticnet"></a> 3-2. Ridge &amp; LASSO &amp; ElasticNet</h3><h4 id="1-개념"><a class="markdownIt-Anchor" href="#1-개념"></a> (1) 개념</h4><p><a href="https://medium.com/mighty-data-science-bootcamp/linear-regression-ridge-lasso-elastic-net-fb8115c0a635" target="_blank" rel="noopener">참고</a></p><p><strong>규제(Regularization):</strong> 학습이 과적합 되는 것을 방지하고자 일종의 <strong>penalty</strong>를 부여하는 것.<br>[원리] penalty를 부여하여 가중치(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>)를 축소함으로써 학습 모델의 예측 variance를 감소 시키는 것</p><br><p><strong>&gt;&gt; L2 규제 &amp; Ridge (릿지)</strong></p><ul><li><p><strong>L2 규제 (L2 Regularization):</strong>  각 <font color="blue">가중치 제곱의 합</font>에 규제 강도 (Regularization Strength) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 를 곱한다</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mn>2</mn><mtext>&nbsp;</mtext><mi mathvariant="normal">규</mi><mi mathvariant="normal">제</mi><mo>=</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>β</mi><mi>j</mi><mn>2</mn></msubsup><mo>=</mo><mi>λ</mi><mtext>&nbsp;</mtext><mo stretchy="false">∥</mo><mi>β</mi><msubsup><mo stretchy="false">∥</mo><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">L2 \ 규제 = \lambda \sum_{j=1}^p \beta_j^2 = \lambda\  \lVert \beta \rVert_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord hangul_fallback">규</span><span class="mord hangul_fallback">제</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1122820000000004em;vertical-align:-1.4137769999999998em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mspace">&nbsp;</span><span class="mopen">∥</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mn>2</mn></msub><mtext>&nbsp;</mtext><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo>:</mo><mo stretchy="false">∥</mo><mi>β</mi><msub><mo stretchy="false">∥</mo><mn>2</mn></msub><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>β</mi><mi>j</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">l_2 \ norm:  \lVert \beta \rVert_2 = \sqrt{\sum_{j=1}^p \beta_j^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∥</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.3400320000000003em;vertical-align:-1.4137769999999998em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9262550000000005em;"><span class="svg-align" style="top:-5.300032em;"><span class="pstrut" style="height:5.300032em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.795908em;"><span style="top:-2.4231360000000004em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8862550000000002em;"><span class="pstrut" style="height:5.300032em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.3800320000000004em;"><svg width="400em" height="3.3800320000000004em" viewBox="0 0 400000 3380" preserveAspectRatio="xMinYMin slice"><path d="M702 80H400000v40H742v3246l-4 4-4 4c-.667.7-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667 219 661 l218 661zM702 80H400000v40H742z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><strong>Ridge:</strong> Loss Function에 L2 규제를 더한 값을 최소화 시키는 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><msub><mi>β</mi><mi>j</mi></msub></munder><mtext>&nbsp;</mtext><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>β</mi><mn>0</mn></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msub><mi>β</mi><mi>j</mi></msub><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>λ</mi><mtext>&nbsp;</mtext><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>β</mi><mi>j</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow><mo>=</mo><munder><mo><mi>min</mi><mo>⁡</mo></mo><msub><mi>β</mi><mi>j</mi></msub></munder><mtext>&nbsp;</mtext><mrow><mo fence="true">[</mo><mi>R</mi><mi>S</mi><mi>S</mi><mo>+</mo><mi>λ</mi><mtext>&nbsp;</mtext><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>β</mi><mi>j</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\min_{\beta_j} \ \left[ \sum_{i=1}^n \left( y_i-\beta_0-\sum_{j=1}^p\beta_jx_{ij} \right) + \lambda\ \sum_{j=1}^p\beta_j^2 \right]= \min_{\beta_j} \ \left[ RSS + \lambda\ \sum_{j=1}^p\beta_j^2 \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.047892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9494279999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.047892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9494279999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 를 크게 하면 가중치(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>) 가 더 많이 감소되고(규제를 중요시 함), <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 를 작게 하면 가중치(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>) 가 증가한다(규제를 중요시하지 않음)</p><br></li></ul><p><strong>&gt;&gt; L1 규제 &amp; LASSO (라쏘)</strong></p><ul><li><p><strong>L1 규제 (L1 Regularization):</strong> 각 <font color="blue">가중치 절대값의 합</font>에 규제 강도 (Regularization Strength) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 를 곱한다</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mn>1</mn><mtext>&nbsp;</mtext><mi mathvariant="normal">규</mi><mi mathvariant="normal">제</mi><mo>=</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>β</mi><mi>j</mi></msub><mo fence="true">∣</mo></mrow><mo>=</mo><mi>λ</mi><mtext>&nbsp;</mtext><mo stretchy="false">∥</mo><mi>β</mi><msub><mo stretchy="false">∥</mo><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">L1\ 규제 = \lambda \sum_{j=1}^p \left| \beta_j \right| = \lambda \ \lVert \beta \rVert_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord">1</span><span class="mspace">&nbsp;</span><span class="mord hangul_fallback">규</span><span class="mord hangul_fallback">제</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1122820000000004em;vertical-align:-1.4137769999999998em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mspace">&nbsp;</span><span class="mopen">∥</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mn>1</mn><mtext>&nbsp;</mtext><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo>:</mo><mo stretchy="false">∥</mo><mi>β</mi><msub><mo stretchy="false">∥</mo><mn>1</mn></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>β</mi><mi>j</mi></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">l1\ norm: \lVert \beta \rVert_1 = \sum_{j=1}^p \left| \beta_j \right|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∥</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1122820000000004em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span></p></li><li><p><strong>LASSO:</strong> Loss Function에 L1 규제를 더한 값을 최소화 시키는 것</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><msub><mi>β</mi><mi>j</mi></msub></munder><mtext>&nbsp;</mtext><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>β</mi><mn>0</mn></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msub><mi>β</mi><mi>j</mi></msub><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>β</mi><mi>j</mi></msub><mo fence="true">∣</mo></mrow><mo fence="true">]</mo></mrow><mo>=</mo><munder><mo><mi>min</mi><mo>⁡</mo></mo><msub><mi>β</mi><mi>j</mi></msub></munder><mtext>&nbsp;</mtext><mrow><mo fence="true">[</mo><mi>R</mi><mi>S</mi><mi>S</mi><mo>+</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>β</mi><mi>j</mi></msub><mo fence="true">∣</mo></mrow><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\min_{\beta_j} \ \left[ \sum_{i=1}^n \left( y_i-\beta_0-\sum_{j=1}^p\beta_jx_{ij} \right) + \lambda \sum_{j=1}^p \left| \beta_j \right| \right]= \min_{\beta_j} \ \left[ RSS + \lambda \sum_{j=1}^p \left| \beta_j \right| \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.047892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9494279999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.047892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9494279999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985050000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></span></p></li><li><p>어떤 가중치(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>) 는 실제로 0이 된다. 즉, 모델에서 완전히 제외되는 특성이 생기는 것이다</p><br></li></ul><p><strong>&gt;&gt; ElasticNet</strong></p><p><strong>l1_ratio (default=0.5)</strong></p><ul><li><p>l1_ratio = 0 (L2 규제만 사용)</p></li><li><p>l1_ratio = 1 (L1 규제만 사용)</p></li><li><p>0 &lt; l1_ratio &lt;1 (L1 and L2 규제 혼합사용)</p><br></li></ul><h4 id="2-실습"><a class="markdownIt-Anchor" href="#2-실습"></a> (2) 실습</h4><p><strong>&gt;&gt; Ridge</strong>   <a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html" target="_blank" rel="noopener">[Document]</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>예측 결과 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda (규제강도) 범위 설정</span></span><br><span class="line">alphas = [<span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모델 학습</span></span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    ridge = Ridge(alpha = alpha)</span><br><span class="line">    ridge.fit(x_train, y_train)</span><br><span class="line">    ridge_pred = ridge.predict(x_test)</span><br><span class="line">    mse_eval(<span class="string">'Ridge(alpha={})'</span>.format(alpha), y_test, ridge_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_75_0.png" alt="output_75_0"></p><pre><code>              model        mse0  Ridge(alpha=100)  23.4874531  LinearRegression  22.770784</code></pre><p><img src="/images/S-Python-sklearn3/output_75_2.png" alt="output_75_2"></p><p><img src="/images/S-Python-sklearn3/output_75_3.png" alt="output_75_3"></p><pre><code>              model        mse0  Ridge(alpha=100)  23.4874531   Ridge(alpha=10)  22.7931192  LinearRegression  22.770784</code></pre><p><img src="/images/S-Python-sklearn3/output_75_5.png" alt="output_75_5"></p><p><img src="/images/S-Python-sklearn3/output_75_6.png" alt="output_75_6"></p><pre><code>              model        mse0  Ridge(alpha=100)  23.4874531   Ridge(alpha=10)  22.7931192  LinearRegression  22.7707843    Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_75_8.png" alt="output_75_8"></p><p><img src="/images/S-Python-sklearn3/output_75_9.png" alt="output_75_9"></p><pre><code>              model        mse0  Ridge(alpha=100)  23.4874531   Ridge(alpha=10)  22.7931192  LinearRegression  22.7707843  Ridge(alpha=0.1)  22.7181264    Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_75_11.png" alt="output_75_11"></p><p><img src="/images/S-Python-sklearn3/output_75_12.png" alt="output_75_12"></p><pre><code>               model        mse0   Ridge(alpha=100)  23.4874531    Ridge(alpha=10)  22.7931192   LinearRegression  22.7707843  Ridge(alpha=0.01)  22.7642544   Ridge(alpha=0.1)  22.7181265     Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_75_14.png" alt="output_75_14"></p><p><img src="/images/S-Python-sklearn3/output_75_15.png" alt="output_75_15"></p><pre><code>                model        mse0    Ridge(alpha=100)  23.4874531     Ridge(alpha=10)  22.7931192    LinearRegression  22.7707843  Ridge(alpha=0.001)  22.7701174   Ridge(alpha=0.01)  22.7642545    Ridge(alpha=0.1)  22.7181266      Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_75_17.png" alt="output_75_17"></p><br><ul><li><strong>coefficents 값 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',       'PTRATIO', 'B', 'LSTAT'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ridge.coef_  <span class="comment"># for the last alpha in 'alphas'</span></span><br></pre></td></tr></tbody></table></figure><pre><code>array([ -0.09608448,   0.04753482,   0.0259022 ,   3.24479273,       -18.89579975,   4.06725732,   0.0020486 ,  -1.46883742,         0.28149275,  -0.0094656 ,  -0.87454099,   0.01240815,        -0.52406249])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coefficients visulization</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_coef</span><span class="params">(columns, coef)</span>:</span></span><br><span class="line">    coef_df = pd.DataFrame(list(zip(columns, coef)))</span><br><span class="line">    coef_df.columns=[<span class="string">'feature'</span>, <span class="string">'coef'</span>]</span><br><span class="line">    coef_df = coef_df.sort_values(<span class="string">'coef'</span>, ascending=<span class="literal">False</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">9</span>, <span class="number">7</span>))</span><br><span class="line">    ax.barh(np.arange(len(coef_df)), coef_df[<span class="string">'coef'</span>])</span><br><span class="line">    idx = np.arange(len(coef_df))</span><br><span class="line">    ax.set_yticks(idx)</span><br><span class="line">    ax.set_yticklabels(coef_df[<span class="string">'feature'</span>])</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, ridge.coef_)   <span class="comment"># alpha = 0.001</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_81_0.png" alt="output_81_0"></p><br><ul><li><strong>alpha 값에 따른 coef의 차이</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ridge_1 = Ridge(alpha=<span class="number">1</span>)</span><br><span class="line">ridge_1.fit(x_train, y_train)</span><br><span class="line">ridge_pred_1 = ridge_1.predict(x_test)</span><br><span class="line"></span><br><span class="line">ridge_100 = Ridge(alpha=<span class="number">100</span>)</span><br><span class="line">ridge_100.fit(x_train, y_train)</span><br><span class="line">ridge_pred_100 = ridge_100.predict(x_test)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, ridge_1.coef_)   <span class="comment"># alpha = 1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_85_0.png" alt="output_85_0"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, ridge_100.coef_)   <span class="comment"># alpha = 100</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_86_0.png" alt="output_86_0"></p><br><p><strong>&gt;&gt; LASSO</strong> <a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html" target="_blank" rel="noopener">[Document]</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>예측 결과 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda (규제강도) 범위 설정</span></span><br><span class="line">alphas = [<span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모델 학습</span></span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    lasso = Lasso(alpha=alpha)</span><br><span class="line">    lasso.fit(x_train, y_train)</span><br><span class="line">    lasso_pred = lasso.predict(x_test)</span><br><span class="line">    mse_eval(<span class="string">'Lasso(alpha={})'</span>.format(alpha), y_test, lasso_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_92_0.png" alt="output_92_0"></p><pre><code>                model        mse0    Lasso(alpha=100)  63.3488181    Ridge(alpha=100)  23.4874532     Ridge(alpha=10)  22.7931193    LinearRegression  22.7707844  Ridge(alpha=0.001)  22.7701175   Ridge(alpha=0.01)  22.7642546    Ridge(alpha=0.1)  22.7181267      Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_92_2.png" alt="output_92_2"></p><p><img src="/images/S-Python-sklearn3/output_92_3.png" alt="output_92_3"></p><pre><code>                model        mse0    Lasso(alpha=100)  63.3488181     Lasso(alpha=10)  42.4366222    Ridge(alpha=100)  23.4874533     Ridge(alpha=10)  22.7931194    LinearRegression  22.7707845  Ridge(alpha=0.001)  22.7701176   Ridge(alpha=0.01)  22.7642547    Ridge(alpha=0.1)  22.7181268      Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_92_5.png" alt="output_92_5"></p><p><img src="/images/S-Python-sklearn3/output_92_6.png" alt="output_92_6"></p><pre><code>                model        mse0    Lasso(alpha=100)  63.3488181     Lasso(alpha=10)  42.4366222      Lasso(alpha=1)  27.4936723    Ridge(alpha=100)  23.4874534     Ridge(alpha=10)  22.7931195    LinearRegression  22.7707846  Ridge(alpha=0.001)  22.7701177   Ridge(alpha=0.01)  22.7642548    Ridge(alpha=0.1)  22.7181269      Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_92_8.png" alt="output_92_8"></p><p><img src="/images/S-Python-sklearn3/output_92_9.png" alt="output_92_9"></p><pre><code>                 model        mse0     Lasso(alpha=100)  63.3488181      Lasso(alpha=10)  42.4366222       Lasso(alpha=1)  27.4936723     Ridge(alpha=100)  23.4874534     Lasso(alpha=0.1)  22.9797085      Ridge(alpha=10)  22.7931196     LinearRegression  22.7707847   Ridge(alpha=0.001)  22.7701178    Ridge(alpha=0.01)  22.7642549     Ridge(alpha=0.1)  22.71812610      Ridge(alpha=1)  22.690411</code></pre><p><img src="/images/S-Python-sklearn3/output_92_11.png" alt="output_92_11"></p><p><img src="/images/S-Python-sklearn3/output_92_12.png" alt="output_92_12"></p><pre><code>                 model        mse0     Lasso(alpha=100)  63.3488181      Lasso(alpha=10)  42.4366222       Lasso(alpha=1)  27.4936723     Ridge(alpha=100)  23.4874534     Lasso(alpha=0.1)  22.9797085      Ridge(alpha=10)  22.7931196     LinearRegression  22.7707847   Ridge(alpha=0.001)  22.7701178    Ridge(alpha=0.01)  22.7642549     Ridge(alpha=0.1)  22.71812610      Ridge(alpha=1)  22.69041111   Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_92_14.png" alt="output_92_14"></p><p><img src="/images/S-Python-sklearn3/output_92_15.png" alt="output_92_15"></p><pre><code>                 model        mse0     Lasso(alpha=100)  63.3488181      Lasso(alpha=10)  42.4366222       Lasso(alpha=1)  27.4936723     Ridge(alpha=100)  23.4874534     Lasso(alpha=0.1)  22.9797085      Ridge(alpha=10)  22.7931196     LinearRegression  22.7707847   Ridge(alpha=0.001)  22.7701178    Ridge(alpha=0.01)  22.7642549   Lasso(alpha=0.001)  22.75301710    Ridge(alpha=0.1)  22.71812611      Ridge(alpha=1)  22.69041112   Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_92_17.png" alt="output_92_17"></p><br><ul><li><strong>coefficients 값 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alpha = 0.01</span></span><br><span class="line">lasso_01 = Lasso(alpha=<span class="number">0.01</span>)</span><br><span class="line">lasso_01.fit(x_train, y_train)</span><br><span class="line">lasso_pred_01 = lasso_01.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># alpha = 100</span></span><br><span class="line">lasso_100 = Lasso(alpha=<span class="number">100</span>)</span><br><span class="line">lasso_100.fit(x_train, y_train)</span><br><span class="line">lasso_pred_100 = lasso_100.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><p>[alpha = 0.01]</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',       'PTRATIO', 'B', 'LSTAT'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lasso_01.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([ -0.09427142,   0.04759954,   0.01255668,   3.08256139,       -15.36800113,   4.07373679,  -0.00100439,  -1.40819927,         0.27152905,  -0.0097157 ,  -0.84377679,   0.01249204,        -0.52790174])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, lasso_01.coef_)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_100_0.png" alt="output_100_0"></p><br><p>[alpha = 100]</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',       'PTRATIO', 'B', 'LSTAT'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lasso_100.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([-0.        ,  0.        , -0.        ,  0.        , -0.        ,        0.        , -0.        ,  0.        , -0.        , -0.02078349,       -0.        ,  0.00644409, -0.        ])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, lasso_100.coef_)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_105_0.png" alt="output_105_0"></p><br><p><strong>&gt;&gt; ElasticNet</strong>  <a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html" target="_blank" rel="noopener">[Document]</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNet</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>예측 결과 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ratios = [<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.8</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alpha = 0.5 로 고정</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ratio <span class="keyword">in</span> ratios:</span><br><span class="line">    elasticnet = ElasticNet(alpha=<span class="number">0.1</span>, l1_ratio=ratio)</span><br><span class="line">    elasticnet.fit(x_train, y_train)</span><br><span class="line">    elas_pred = elasticnet.predict(x_test)</span><br><span class="line">    mse_eval(<span class="string">'ElasticNet(l1_ratio={})'</span>.format(ratio), y_test, elas_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_111_0.png" alt="output_111_0"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534           Lasso(alpha=0.1)  22.9797085            Ridge(alpha=10)  22.7931196           LinearRegression  22.7707847         Ridge(alpha=0.001)  22.7701178          Ridge(alpha=0.01)  22.7642549         Lasso(alpha=0.001)  22.75301710  ElasticNet(l1_ratio=0.2)  22.74901811          Ridge(alpha=0.1)  22.71812612            Ridge(alpha=1)  22.69041113         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_111_2.png" alt="output_111_2"></p><p><img src="/images/S-Python-sklearn3/output_111_3.png" alt="output_111_3"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534           Lasso(alpha=0.1)  22.9797085            Ridge(alpha=10)  22.7931196   ElasticNet(l1_ratio=0.5)  22.7872697           LinearRegression  22.7707848         Ridge(alpha=0.001)  22.7701179          Ridge(alpha=0.01)  22.76425410        Lasso(alpha=0.001)  22.75301711  ElasticNet(l1_ratio=0.2)  22.74901812          Ridge(alpha=0.1)  22.71812613            Ridge(alpha=1)  22.69041114         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_111_5.png" alt="output_111_5"></p><p><img src="/images/S-Python-sklearn3/output_111_6.png" alt="output_111_6"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534           Lasso(alpha=0.1)  22.9797085   ElasticNet(l1_ratio=0.8)  22.8656286            Ridge(alpha=10)  22.7931197   ElasticNet(l1_ratio=0.5)  22.7872698           LinearRegression  22.7707849         Ridge(alpha=0.001)  22.77011710         Ridge(alpha=0.01)  22.76425411        Lasso(alpha=0.001)  22.75301712  ElasticNet(l1_ratio=0.2)  22.74901813          Ridge(alpha=0.1)  22.71812614            Ridge(alpha=1)  22.69041115         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_111_8.png" alt="output_111_8"></p><br><ul><li><strong>coefficients 값 확인</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ㅣ1_ratio = 0.2</span></span><br><span class="line">elasticnet_2 = ElasticNet(alpha = <span class="number">0.1</span>, l1_ratio = <span class="number">0.2</span>)</span><br><span class="line">elasticnet_2.fit(x_train, y_train)</span><br><span class="line">elast_pred_2 = elasticnet_2.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1_ratio = 0.8</span></span><br><span class="line">elasticnet_8 = ElasticNet(alpha=<span class="number">0.1</span>, l1_ratio = <span class="number">0.8</span>)</span><br><span class="line">elasticnet_8.fit(x_train, y_train)</span><br><span class="line">elast_pred_8 = elasticnet_8.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><p>[ l1_ratio = 0.2 ]</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',       'PTRATIO', 'B', 'LSTAT'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticnet_2.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([-0.09297585,  0.05293361, -0.03950412,  1.30126199, -0.41996826,        3.15838796, -0.00644646, -1.15290012,  0.25973467, -0.01231233,       -0.77186571,  0.01201684, -0.60780037])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, elasticnet_2.coef_)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_119_0.png" alt="output_119_0"></p><br><p>[ l1_ratio = 0.8 ]</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',       'PTRATIO', 'B', 'LSTAT'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticnet_8.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([-0.08797633,  0.05035601, -0.03058513,  1.51071961, -0.        ,        3.70247373, -0.01017259, -1.12431077,  0.24389841, -0.01189981,       -0.73481448,  0.01259147, -0.573733  ])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_coef(x_train.columns, elasticnet_8.coef_)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_124_0.png" alt="output_124_0"></p><br><br><h2 id="4-scaling"><a class="markdownIt-Anchor" href="#4-scaling"></a> <strong>4. Scaling</strong></h2><h3 id="4-1-scaler-소개"><a class="markdownIt-Anchor" href="#4-1-scaler-소개"></a> 4-1. Scaler 소개</h3><ul><li><p>StandardScaler</p></li><li><p>MinMaxScaler</p></li><li><p>RobustScaler</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, MinMaxScaler, RobustScaler</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>      <td>379.000000</td>    </tr>    <tr>      <th>mean</th>      <td>3.512192</td>      <td>11.779683</td>      <td>10.995013</td>      <td>0.076517</td>      <td>0.548712</td>      <td>6.266953</td>      <td>67.223483</td>      <td>3.917811</td>      <td>9.282322</td>      <td>404.680739</td>      <td>18.448549</td>      <td>357.048100</td>      <td>12.633773</td>    </tr>    <tr>      <th>std</th>      <td>8.338717</td>      <td>23.492842</td>      <td>6.792065</td>      <td>0.266175</td>      <td>0.115006</td>      <td>0.681796</td>      <td>28.563787</td>      <td>2.084167</td>      <td>8.583051</td>      <td>166.813256</td>      <td>2.154917</td>      <td>92.745266</td>      <td>7.259213</td>    </tr>    <tr>      <th>min</th>      <td>0.006320</td>      <td>0.000000</td>      <td>0.460000</td>      <td>0.000000</td>      <td>0.385000</td>      <td>3.561000</td>      <td>2.900000</td>      <td>1.129600</td>      <td>1.000000</td>      <td>188.000000</td>      <td>12.600000</td>      <td>2.520000</td>      <td>1.730000</td>    </tr>    <tr>      <th>25%</th>      <td>0.078910</td>      <td>0.000000</td>      <td>5.190000</td>      <td>0.000000</td>      <td>0.445000</td>      <td>5.876500</td>      <td>42.250000</td>      <td>2.150900</td>      <td>4.000000</td>      <td>278.000000</td>      <td>17.150000</td>      <td>375.425000</td>      <td>6.910000</td>    </tr>    <tr>      <th>50%</th>      <td>0.228760</td>      <td>0.000000</td>      <td>9.690000</td>      <td>0.000000</td>      <td>0.532000</td>      <td>6.208000</td>      <td>74.400000</td>      <td>3.414500</td>      <td>5.000000</td>      <td>330.000000</td>      <td>19.000000</td>      <td>392.110000</td>      <td>11.380000</td>    </tr>    <tr>      <th>75%</th>      <td>2.756855</td>      <td>19.000000</td>      <td>18.100000</td>      <td>0.000000</td>      <td>0.624000</td>      <td>6.611000</td>      <td>93.850000</td>      <td>5.400900</td>      <td>8.000000</td>      <td>666.000000</td>      <td>20.200000</td>      <td>396.260000</td>      <td>16.580000</td>    </tr>    <tr>      <th>max</th>      <td>73.534100</td>      <td>100.000000</td>      <td>27.740000</td>      <td>1.000000</td>      <td>0.871000</td>      <td>8.398000</td>      <td>100.000000</td>      <td>10.585700</td>      <td>24.000000</td>      <td>711.000000</td>      <td>22.000000</td>      <td>396.900000</td>      <td>37.970000</td>    </tr>  </tbody></table></div></div> <br> <p><strong>&gt;&gt; StandardScaler</strong></p><p>평균(mean)을 0, 표준편차(std)를 1로 만들어 주는 scaler</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std_scaler = StandardScaler()</span><br><span class="line">std_scaled = std_scaler.fit_transform(x_train)</span><br><span class="line">round(pd.DataFrame(std_scaled).describe(), <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>10</th>      <th>11</th>      <th>12</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>    </tr>    <tr>      <th>mean</th>      <td>-0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>-0.00</td>      <td>-0.00</td>      <td>-0.00</td>      <td>-0.00</td>      <td>0.00</td>      <td>-0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>    </tr>    <tr>      <th>std</th>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>    </tr>    <tr>      <th>min</th>      <td>-0.42</td>      <td>-0.50</td>      <td>-1.55</td>      <td>-0.29</td>      <td>-1.43</td>      <td>-3.97</td>      <td>-2.25</td>      <td>-1.34</td>      <td>-0.97</td>      <td>-1.30</td>      <td>-2.72</td>      <td>-3.83</td>      <td>-1.50</td>    </tr>    <tr>      <th>25%</th>      <td>-0.41</td>      <td>-0.50</td>      <td>-0.86</td>      <td>-0.29</td>      <td>-0.90</td>      <td>-0.57</td>      <td>-0.88</td>      <td>-0.85</td>      <td>-0.62</td>      <td>-0.76</td>      <td>-0.60</td>      <td>0.20</td>      <td>-0.79</td>    </tr>    <tr>      <th>50%</th>      <td>-0.39</td>      <td>-0.50</td>      <td>-0.19</td>      <td>-0.29</td>      <td>-0.15</td>      <td>-0.09</td>      <td>0.25</td>      <td>-0.24</td>      <td>-0.50</td>      <td>-0.45</td>      <td>0.26</td>      <td>0.38</td>      <td>-0.17</td>    </tr>    <tr>      <th>75%</th>      <td>-0.09</td>      <td>0.31</td>      <td>1.05</td>      <td>-0.29</td>      <td>0.66</td>      <td>0.51</td>      <td>0.93</td>      <td>0.71</td>      <td>-0.15</td>      <td>1.57</td>      <td>0.81</td>      <td>0.42</td>      <td>0.54</td>    </tr>    <tr>      <th>max</th>      <td>8.41</td>      <td>3.76</td>      <td>2.47</td>      <td>3.47</td>      <td>2.81</td>      <td>3.13</td>      <td>1.15</td>      <td>3.20</td>      <td>1.72</td>      <td>1.84</td>      <td>1.65</td>      <td>0.43</td>      <td>3.49</td>    </tr>  </tbody></table></div><br>  <p><strong>&gt;&gt; MinMaxScaler</strong></p><p>min값과 max값을 0~1사이로 정규화 (Normalize)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minmax_scaler = MinMaxScaler()</span><br><span class="line">minmax_scaled = minmax_scaler.fit_transform(x_train)</span><br><span class="line">round(pd.DataFrame(minmax_scaled).describe(), <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>10</th>      <th>11</th>      <th>12</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>      <td>379.00</td>    </tr>    <tr>      <th>mean</th>      <td>0.05</td>      <td>0.12</td>      <td>0.39</td>      <td>0.08</td>      <td>0.34</td>      <td>0.56</td>      <td>0.66</td>      <td>0.29</td>      <td>0.36</td>      <td>0.41</td>      <td>0.62</td>      <td>0.90</td>      <td>0.30</td>    </tr>    <tr>      <th>std</th>      <td>0.11</td>      <td>0.23</td>      <td>0.25</td>      <td>0.27</td>      <td>0.24</td>      <td>0.14</td>      <td>0.29</td>      <td>0.22</td>      <td>0.37</td>      <td>0.32</td>      <td>0.23</td>      <td>0.24</td>      <td>0.20</td>    </tr>    <tr>      <th>min</th>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>      <td>0.00</td>    </tr>    <tr>      <th>25%</th>      <td>0.00</td>      <td>0.00</td>      <td>0.17</td>      <td>0.00</td>      <td>0.12</td>      <td>0.48</td>      <td>0.41</td>      <td>0.11</td>      <td>0.13</td>      <td>0.17</td>      <td>0.48</td>      <td>0.95</td>      <td>0.14</td>    </tr>    <tr>      <th>50%</th>      <td>0.00</td>      <td>0.00</td>      <td>0.34</td>      <td>0.00</td>      <td>0.30</td>      <td>0.55</td>      <td>0.74</td>      <td>0.24</td>      <td>0.17</td>      <td>0.27</td>      <td>0.68</td>      <td>0.99</td>      <td>0.27</td>    </tr>    <tr>      <th>75%</th>      <td>0.04</td>      <td>0.19</td>      <td>0.65</td>      <td>0.00</td>      <td>0.49</td>      <td>0.63</td>      <td>0.94</td>      <td>0.45</td>      <td>0.30</td>      <td>0.91</td>      <td>0.81</td>      <td>1.00</td>      <td>0.41</td>    </tr>    <tr>      <th>max</th>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>      <td>1.00</td>    </tr>  </tbody></table></div><br>  <p><strong>&gt;&gt; RobustScaler</strong></p><p>중앙값(median)이 0, IQR(interquartile rage)이 1이 되도록 변환<br><strong>outlier 처리에 유용</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robust_scaler = RobustScaler()</span><br><span class="line">robust_scaled = robust_scaler.fit_transform(x_train)</span><br><span class="line">round(pd.DataFrame(robust_scaled).median(), <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>0     0.01     0.02     0.03     0.04     0.05     0.06     0.07     0.08     0.09     0.010    0.011    0.012    0.0dtype: float64</code></pre>  <br><h3 id="4-2-scaling-후-모델-학습-파이프라인-활용"><a class="markdownIt-Anchor" href="#4-2-scaling-후-모델-학습-파이프라인-활용"></a> 4-2. Scaling 후 모델 학습 – 파이프라인 활용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticnet(alpha=0.1, l1_ratio=0.2) &lt; without standard scaling &gt;</span></span><br><span class="line">elasticnet_no_scale = ElasticNet(alpha=<span class="number">0.1</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">no_scale_pred = elasticnet_no_scale.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'No Standard ElasticNet'</span>, y_test, no_scale_pred)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># elasticnet(alpha=0.1, l1_ratio=0.2) &lt; with standard scaling &gt;</span></span><br><span class="line">elasticnet_pipeline = make_pipeline(</span><br><span class="line">    StandardScaler(),</span><br><span class="line">    ElasticNet(alpha=<span class="number">0.1</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">with_scale_pred = elasticnet_pipeline.fit(x_train, y_train).predict(x_test)</span><br><span class="line">mse_eval(<span class="string">'With Standard ElasticNet'</span>, y_test, with_scale_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_148_0.png" alt="output_148_0"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534           Lasso(alpha=0.1)  22.9797085   ElasticNet(l1_ratio=0.8)  22.8656286            Ridge(alpha=10)  22.7931197   ElasticNet(l1_ratio=0.5)  22.7872698           LinearRegression  22.7707849         Ridge(alpha=0.001)  22.77011710         Ridge(alpha=0.01)  22.76425411        Lasso(alpha=0.001)  22.75301712  ElasticNet(l1_ratio=0.2)  22.74901813    No Standard ElasticNet  22.74901814          Ridge(alpha=0.1)  22.71812615            Ridge(alpha=1)  22.69041116         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_148_2.png" alt="output_148_2"></p><p><img src="/images/S-Python-sklearn3/output_148_3.png" alt="output_148_3"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534   With Standard ElasticNet  23.2301645           Lasso(alpha=0.1)  22.9797086   ElasticNet(l1_ratio=0.8)  22.8656287            Ridge(alpha=10)  22.7931198   ElasticNet(l1_ratio=0.5)  22.7872699           LinearRegression  22.77078410        Ridge(alpha=0.001)  22.77011711         Ridge(alpha=0.01)  22.76425412        Lasso(alpha=0.001)  22.75301713  ElasticNet(l1_ratio=0.2)  22.74901814    No Standard ElasticNet  22.74901815          Ridge(alpha=0.1)  22.71812616            Ridge(alpha=1)  22.69041117         Lasso(alpha=0.01)  22.635614</code></pre><p><img src="/images/S-Python-sklearn3/output_148_5.png" alt="output_148_5"></p><br><br><h2 id="5-polynomial-features"><a class="markdownIt-Anchor" href="#5-polynomial-features"></a> <strong>5. Polynomial Features</strong></h2><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html?highlight=poly%20feature#sklearn.preprocessing.PolynomialFeatures" target="_blank" rel="noopener">[Document]</a></p><p>다항식의 계수간 상호작용을 통해 <strong>새로운 feature를 생성</strong>한다.<br>예를 들면, [a, b] 2개의 feature가 존재한다고 가정하고,<br>degree=2로 설정한다면, polynomial features 는 [1, a, b, a^2, ab, b^2]가 돤다</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br></pre></td></tr></tbody></table></figure><p><strong>Polynomial Features 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poly = PolynomialFeatures(degree=<span class="number">2</span>, include_bias=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poly_features = poly.fit_transform(x_train)[<span class="number">0</span>]</span><br><span class="line">poly_features</span><br></pre></td></tr></tbody></table></figure><pre><code>array([     0.12329   ,      0.        ,     10.01      ,      0.        ,            0.547     ,      5.913     ,     92.9       ,      2.3534    ,            6.        ,    432.        ,     17.8       ,    394.95      ,           16.21      ,      0.01520042,      0.        ,      1.2341329 ,            0.        ,      0.06743963,      0.72901377,     11.453641  ,            0.29015069,      0.73974   ,     53.26128   ,      2.194562  ,           48.6933855 ,      1.9985309 ,      0.        ,      0.        ,            0.        ,      0.        ,      0.        ,      0.        ,            0.        ,      0.        ,      0.        ,      0.        ,            0.        ,      0.        ,    100.2001    ,      0.        ,            5.47547   ,     59.18913   ,    929.929     ,     23.557534  ,           60.06      ,   4324.32      ,    178.178     ,   3953.4495    ,          162.2621    ,      0.        ,      0.        ,      0.        ,            0.        ,      0.        ,      0.        ,      0.        ,            0.        ,      0.        ,      0.        ,      0.299209  ,            3.234411  ,     50.8163    ,      1.2873098 ,      3.282     ,          236.304     ,      9.7366    ,    216.03765   ,      8.86687   ,           34.963569  ,    549.3177    ,     13.9156542 ,     35.478     ,         2554.416     ,    105.2514    ,   2335.33935   ,     95.84973   ,         8630.41      ,    218.63086   ,    557.4       ,  40132.8       ,         1653.62      ,  36690.855     ,   1505.909     ,      5.53849156,           14.1204    ,   1016.6688    ,     41.89052   ,    929.47533   ,           38.148614  ,     36.        ,   2592.        ,    106.8       ,         2369.7       ,     97.26      , 186624.        ,   7689.6       ,       170618.4       ,   7002.72      ,    316.84      ,   7030.11      ,          288.538     , 155985.5025    ,   6402.1395    ,    262.7641    ])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.iloc[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>CRIM         0.12329ZN           0.00000INDUS       10.01000CHAS         0.00000NOX          0.54700RM           5.91300AGE         92.90000DIS          2.35340RAD          6.00000TAX        432.00000PTRATIO     17.80000B          394.95000LSTAT       16.21000Name: 112, dtype: float64</code></pre>  <br><p><strong>Polynomial Features + Standard Scaling 후 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">poly_pipeline = make_pipeline(</span><br><span class="line">    PolynomialFeatures(degree=<span class="number">2</span>, include_bias=<span class="literal">False</span>),</span><br><span class="line">    StandardScaler(),</span><br><span class="line">    ElasticNet(alpha=<span class="number">0.1</span>, l1_ratio=<span class="number">0.2</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poly_pred = poly_pipeline.fit(x_train, y_train).predict(x_test)</span><br></pre></td></tr></tbody></table></figure><pre><code>D:\Anaconda\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 32.61172784964583, tolerance: 3.2374824854881266  positive)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mse_eval(<span class="string">'Poly ElasticNet'</span>, y_test, poly_pred)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn3/output_163_0.png" alt="output_163_0"></p><pre><code>                       model        mse0           Lasso(alpha=100)  63.3488181            Lasso(alpha=10)  42.4366222             Lasso(alpha=1)  27.4936723           Ridge(alpha=100)  23.4874534   With Standard ElasticNet  23.2301645           Lasso(alpha=0.1)  22.9797086   ElasticNet(l1_ratio=0.8)  22.8656287            Ridge(alpha=10)  22.7931198   ElasticNet(l1_ratio=0.5)  22.7872699           LinearRegression  22.77078410        Ridge(alpha=0.001)  22.77011711         Ridge(alpha=0.01)  22.76425412        Lasso(alpha=0.001)  22.75301713  ElasticNet(l1_ratio=0.2)  22.74901814    No Standard ElasticNet  22.74901815          Ridge(alpha=0.1)  22.71812616            Ridge(alpha=1)  22.69041117         Lasso(alpha=0.01)  22.63561418           Poly ElasticNet  17.526214</code></pre><p><img src="/images/S-Python-sklearn3/output_163_2.png" alt="output_163_2"></p><p>2차 Polynomial Features 추가 후 학습된 모델의 성능이 많이 향상 된것을 확인할 수 있다</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Linear Regression, Ridge, LASSO, ElasticNet, Scaling, Polynomial Features
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="회귀" scheme="https://hyemin-kim.github.io/tags/%ED%9A%8C%EA%B7%80/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn - (2) 분류 (Classification)</title>
    <link href="https://hyemin-kim.github.io/2020/07/26/S-Python-sklearn2/"/>
    <id>https://hyemin-kim.github.io/2020/07/26/S-Python-sklearn2/</id>
    <published>2020-07-26T11:23:49.000Z</published>
    <updated>2020-07-30T07:54:02.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="분류-classification"><a class="markdownIt-Anchor" href="#분류-classification"></a> <strong>분류 (Classification)</strong></h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B"><strong>0. 데이터 셋</strong></a><ul><li><a href="#0-1-iris-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B">0-1. iris 데이터 셋</a></li><li><a href="#0-2-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0">0-2. 데이터프레임 만들기</a></li><li><a href="#0-3-%EC%8B%9C%EA%B0%81%ED%99%94%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0">0-3. 시각화로 데이터셋 파악하기</a></li></ul></li><li><a href="#1-training-set-validation-set-%EB%82%98%EB%88%84%EA%B8%B0"><strong>1. training set / validation set 나누기</strong></a></li><li><a href="#2-%ED%95%98%EC%9D%B4%ED%8D%BC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-hyper-parameter-%ED%8A%9C%EB%8B%9D"><strong>2. 하이퍼 파라미터 (hyper-parameter) 튜닝</strong></a></li><li><a href="#3-%EB%B6%84%EB%A5%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98"><strong>3. 분류 알고리즘</strong></a><ul><li><a href="#3-1-logistic-regression">3-1. Logistic Regression</a></li><li><a href="#3-2-sgd-sgdclassifier">3-2. SGD (SGDClassifier)</a></li><li><a href="#3-3-knn-kneighborsclassifier">3-3. KNN (KNeighborsClassifier)</a></li><li><a href="#3-4-svm-svc">3-4. SVM (SVC)</a></li><li><a href="#3-5-decision-tree-decisiontreeclassifier">3-5. Decision Tree (DecisionTreeClassifier)</a><ul><li><a href="#1-decision-tree-%EC%9D%98%EC%82%AC-%EA%B2%B0%EC%A0%95-%EB%82%98%EB%AC%B4-%EB%82%98%EB%AC%B4-%EA%B0%80%EC%A7%80%EC%B9%98%EA%B8%B0%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%86%8C%EA%B7%B8%EB%A3%B9%EC%9C%BC%EB%A1%9C-%EB%82%98%EB%88%84%EC%96%B4-%ED%8C%90%EB%B3%84%ED%95%98%EB%8A%94%EA%B2%83">1. Decision Tree (의사 결정 나무): 나무 가지치기를 통해 소그룹으로 나누어 판별하는것</a></li><li><a href="#2-decision-tree-%EB%B6%84%EB%A5%98-%EA%B2%B0%EA%B3%BC-%EC%8B%9C%EA%B0%81%ED%99%94">2. Decision Tree 분류 결과 시각화</a></li><li><a href="#3-%EA%B0%80%EC%A7%80-%EC%B9%98%EA%B8%B0-pruning">3. 가지 치기 (pruning)</a></li></ul></li></ul></li><li><a href="#4-%EB%AA%A8%EB%8D%B8-%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C"><strong>4. 모델 성능 평가 지표</strong></a><ul><li><a href="#4-1-%EC%98%A4%EC%B0%A8-%ED%96%89%EB%A0%AC-confusion-matrix">4-1. 오차 행렬 (Confusion Matrix)</a></li><li><a href="#4-2-%EC%A0%95%ED%99%95%EB%8F%84-accuracy">4-2. 정확도 (Accuracy)</a></li><li><a href="#4-3-%EC%A0%95%EB%B0%80%EB%8F%84-precision">4-3. 정밀도 (Precision)</a></li><li><a href="#4-4-%EB%AF%BC%EA%B0%90%EB%8F%84-sensitivity-%EC%9E%AC%ED%98%84%EC%9C%A8-recall">4-4. 민감도 (Sensitivity)  /  재현율 (Recall)</a></li><li><a href="#4-5-%ED%8A%B9%EC%9D%B4%EB%8F%84-specificity">4-5. 특이도 (Specificity)</a></li><li><a href="#4-6-f1-score">4-6. F1 Score</a></li><li></li></ul></li></ul><p></p> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>) <span class="comment"># 불필요한 경고 출력을 방지함</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="0-데이터-셋"><a class="markdownIt-Anchor" href="#0-데이터-셋"></a> <strong>0. 데이터 셋</strong></h2><p><a href="https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets" target="_blank" rel="noopener">sklearn.dataset</a> 에서 제공해주는 다양한 샘플 데이터를 활용한다</p><p>여기서는 iris 데이터 셋을 활용한다</p> <br> <h3 id="0-1-iris-데이터-셋"><a class="markdownIt-Anchor" href="#0-1-iris-데이터-셋"></a> 0-1. iris 데이터 셋</h3><p><strong>Mission:</strong> 꽃 종류 분류하기</p><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris" target="_blank" rel="noopener">iris 데이터 셋</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iris 데이터 셋 로드</span></span><br><span class="line">iris = load_iris()</span><br></pre></td></tr></tbody></table></figure> <br><p><strong>iris 데이터 셋 구성 (key values):</strong></p><ul><li><p><code>DESCR</code>: 데이터 셋의 정보를 보여줌</p></li><li><p><code>data</code>: feature data</p></li><li><p><code>feature_names</code>: feature data의 컬럼 이름</p></li><li><p><code>target</code>: label data (수치형)</p></li><li><p><code>target_names</code>: label data의 value 이름 (문자형)</p> <br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터 셋 정보 확인하기</span></span><br><span class="line">print(iris[<span class="string">'DESCR'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>.. _iris_dataset:Iris plants dataset--------------------**Data Set Characteristics:**    :Number of Instances: 150 (50 in each of three classes)    :Number of Attributes: 4 numeric, predictive attributes and the class    :Attribute Information:        - sepal length in cm        - sepal width in cm        - petal length in cm        - petal width in cm        - class:                - Iris-Setosa                - Iris-Versicolour                - Iris-Virginica                    :Summary Statistics:    ============== ==== ==== ======= ===== ====================                    Min  Max   Mean    SD   Class Correlation    ============== ==== ==== ======= ===== ====================    sepal length:   4.3  7.9   5.84   0.83    0.7826    sepal width:    2.0  4.4   3.05   0.43   -0.4194    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)    ============== ==== ==== ======= ===== ====================    :Missing Attribute Values: None    :Class Distribution: 33.3% for each of 3 classes.    :Creator: R.A. Fisher    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)    :Date: July, 1988The famous Iris database, first used by Sir R.A. Fisher. The dataset is takenfrom Fisher's paper. Note that it's the same as in R, but not as in the UCIMachine Learning Repository, which has two wrong data points.This is perhaps the best known database to be found in thepattern recognition literature.  Fisher's paper is a classic in the field andis referenced frequently to this day.  (See Duda &amp; Hart, for example.)  Thedata set contains 3 classes of 50 instances each, where each class refers to atype of iris plant.  One class is linearly separable from the other 2; thelatter are NOT linearly separable from each other... topic:: References   - Fisher, R.A. "The use of multiple measurements in taxonomic problems"     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to     Mathematical Statistics" (John Wiley, NY, 1950).   - Duda, R.O., &amp; Hart, P.E. (1973) Pattern Classification and Scene Analysis.     (Q327.D83) John Wiley &amp; Sons.  ISBN 0-471-22361-1.  See page 218.   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System     Structure and Classification Rule for Recognition in Partially Exposed     Environments".  IEEE Transactions on Pattern Analysis and Machine     Intelligence, Vol. PAMI-2, No. 1, 67-71.   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions     on Information Theory, May 1972, 431-433.   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II     conceptual clustering system finds 3 classes in the data.   - Many, many more ...</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data 불러오기</span></span><br><span class="line">data = iris[<span class="string">'data'</span>]</span><br><span class="line">data[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[5.1, 3.5, 1.4, 0.2],       [4.9, 3. , 1.4, 0.2],       [4.7, 3.2, 1.3, 0.2],       [4.6, 3.1, 1.5, 0.2],       [5. , 3.6, 1.4, 0.2]])</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feature names 확인하기</span></span><br><span class="line">feature_names = iris[<span class="string">'feature_names'</span>]</span><br><span class="line">feature_names</span><br></pre></td></tr></tbody></table></figure><pre><code>['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']</code></pre><p><strong>[해석]</strong> sepal: 꽃 받침;  petal: 꽃잎</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># label data 확인하기</span></span><br><span class="line">target = iris[<span class="string">'target'</span>]</span><br><span class="line">target[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([0, 0, 0, 0, 0])</code></pre> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target names 확인하기</span></span><br><span class="line">iris[<span class="string">'target_names'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array(['setosa', 'versicolor', 'virginica'], dtype='&lt;U10')</code></pre><br><h3 id="0-2-데이터프레임-만들기"><a class="markdownIt-Anchor" href="#0-2-데이터프레임-만들기"></a> 0-2. 데이터프레임 만들기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feature data 먼저 생성하기</span></span><br><span class="line">df_iris = pd.DataFrame(data, columns = feature_names)</span><br><span class="line">df_iris.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target column 추가하기</span></span><br><span class="line">df_iris[<span class="string">'target'</span>] = target</span><br><span class="line">df_iris.head()  <span class="comment"># 최종 dataframe</span></span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>  </tbody></table></div><br>  <h3 id="0-3-시각화로-데이터셋-파악하기"><a class="markdownIt-Anchor" href="#0-3-시각화로-데이터셋-파악하기"></a> 0-3. 시각화로 데이터셋 파악하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></tbody></table></figure> <br> <p><strong>1. Sepal data로 보는 꽃 종류</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_iris.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',       'petal width (cm)', 'target'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(<span class="string">'sepal width (cm)'</span>, <span class="string">'sepal length (cm)'</span>, hue=<span class="string">'target'</span>, palette=<span class="string">'muted'</span>, data=df_iris)</span><br><span class="line">plt.title(<span class="string">'Sepal'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_32_0.png" alt="png"></p><br><p><strong>2. petal data로 보는 꽃 종류</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(<span class="string">'petal width (cm)'</span>, <span class="string">'petal length (cm)'</span>, hue=<span class="string">'target'</span>, palette=<span class="string">'muted'</span>, data=df_iris)</span><br><span class="line">plt.title(<span class="string">'Petal'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_35_0.png" alt="png"></p><br><p><strong>3. 3D plot로 보는 꽃 종류 (PCA 이용)</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">ax = Axes3D(fig, elev=<span class="number">-150</span>, azim=<span class="number">110</span>)</span><br><span class="line">X_reduced = PCA(n_components=<span class="number">3</span>).fit_transform(df_iris.drop(<span class="string">'target'</span>, <span class="number">1</span>))</span><br><span class="line">ax.scatter(X_reduced[:, <span class="number">0</span>], X_reduced[:, <span class="number">1</span>], X_reduced[:, <span class="number">2</span>], c=df_iris[<span class="string">'target'</span>],</span><br><span class="line">           cmap=plt.cm.Set1, edgecolor=<span class="string">'k'</span>, s=<span class="number">40</span>)</span><br><span class="line">ax.set_title(<span class="string">"Iris 3D"</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">"x"</span>)</span><br><span class="line">ax.w_xaxis.set_ticklabels([])</span><br><span class="line">ax.set_ylabel(<span class="string">"y"</span>)</span><br><span class="line">ax.w_yaxis.set_ticklabels([])</span><br><span class="line">ax.set_zlabel(<span class="string">"z"</span>)</span><br><span class="line">ax.w_zaxis.set_ticklabels([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_38_0.png" alt="png"></p><br><br><h2 id="1-training-set-validation-set-나누기"><a class="markdownIt-Anchor" href="#1-training-set-validation-set-나누기"></a> <strong>1. training set / validation set 나누기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(df_iris.drop(<span class="string">'target'</span>, <span class="number">1</span>), df_iris[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((112, 4), (112,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_valid.shape, y_valid.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((38, 4), (38,))</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1cb7aaaeec8&gt;</code></pre><p><img src="/images/S-Python-sklearn2/output_46_1.png" alt="png"></p><p>'target’값이 0, 1, 2인 데이터가 Original dataset으로 부터 랜덤으로 뽑히기 때문에 <strong>비율의 차이가 존재</strong>할 수 있다. 따라서 기계학습할 때 <strong>sample size가 큰 데이터 위주로 학습</strong>하여 모델의 <strong>예측성능이 떨어질</strong> 수 있다. (위 상황에서, 학습된 머신러닝 모델이 sample size가 큰 target=1인 경우를 좀 더 잘 예측하고, target=2에 대한 예측도가 떨어질 수 있다)</p><p>이를 방지하기 위해 우리는 <strong><code>stratify</code>옵션</strong>을 이용하여 label의 class 분포를 균등하게 배분한다.</p> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(df_iris.drop(<span class="string">'target'</span>, <span class="number">1</span>), df_iris[<span class="string">'target'</span>], stratify=df_iris[<span class="string">'target'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1cb7b17b508&gt;</code></pre><p><img src="/images/S-Python-sklearn2/output_50_1.png" alt="png"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((112, 4), (112,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_valid.shape, y_valid.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((38, 4), (38,))</code></pre><br>  <br><h2 id="2-하이퍼-파라미터-hyper-parameter-튜닝"><a class="markdownIt-Anchor" href="#2-하이퍼-파라미터-hyper-parameter-튜닝"></a> <strong>2. 하이퍼 파라미터 (hyper-parameter) 튜닝</strong></h2><p>모델 학습할 때 설정 한 옵션들은 **하이퍼 파라미터 (hyper-parameter)**라고 한다. 설정한 값에 따라 모델 성능도 달라질 수 있다.</p><p>각 알고리즘 별, hyper-parameter의 종류가 매우 다양하다. 다음 두 가지 parameter는 기본적으로 설정해주는 것이 좋다:</p><ul><li><p>random_state: sampling seed 설정 (항상 동일하게 sampling 하기)</p></li><li><p>n_jobs=-1: CPU를 모두 사용 (학습속도가 빠름)</p><br></li></ul><h2 id="3-분류-알고리즘"><a class="markdownIt-Anchor" href="#3-분류-알고리즘"></a> <strong>3. 분류 알고리즘</strong></h2><h3 id="3-1-logistic-regression"><a class="markdownIt-Anchor" href="#3-1-logistic-regression"></a> 3-1. Logistic Regression</h3><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html?highlight=logistic%20regression#sklearn.linear_model.LogisticRegression" target="_blank" rel="noopener">[sklearn.linear_model.<strong>LogisticRegression</strong>] Document</a></p></blockquote><p>Logistic Regression, SVM(Support Vector Machine)과 같은 알고리즘은 <strong>이진(Binary Class) 분류만 가능</strong>한다. (2개의 클래스 판별만 가능한다.)</p><p>하지만, <strong>3개 이상의 클래스에 대한 판별</strong> **[다중 클래스(Multi-Class) 분류]**을 진행하는 경우, 다음과 같은 전략으로 판별한다.</p><ul><li><p><strong>one-vs-one (OvO)</strong>:   K 개의 클래스가 존재할 때, 이 중 2개의 클래스 조합을 선택하여  <font color="blue">K(K−1)/2 개</font>의 이진 클래스 분류 문제를 풀고 이진판별을 통해 가장 많은 판별값을 얻은 클래스를 선택하는 방법이다.</p></li><li><p><strong>one-vs-rest (OvR)</strong>: K 개의 클래스가 존재할 때, 클래스들을 “k번째 클래스(one)” &amp; "나머지(rest)"로 나누어서 <font color="blue">K개</font>의 개별 이진 분류 문제를 푼다. 즉, 각각의 클래스에 대해 표본이 속하는지(y=1) 속하지 않는지(y=0)의 이진 분류 문제를 푸는 것이다. OvO와 달리 클래스 수만큼의 이진 분류 문제를 풀면 된다.</p></li></ul><p>대부분 <strong>OvsR 전략을 선호</strong>합니다.</p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></tbody></table></figure><p><strong>step 1: 모델 선언</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(random_state=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>step 2: 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,                   intercept_scaling=1, l1_ratio=None, max_iter=100,                   multi_class='auto', n_jobs=None, penalty='l2',                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,                   warm_start=False)</code></pre><p><strong>step 3: 예측</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = lr.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([0, 1, 2, 2, 0])</code></pre><p><strong>step 4: 평가</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prediction == y_valid).mean()  <span class="comment"># 정확도</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0.9473684210526315</code></pre> <br> <h3 id="3-2-sgd-sgdclassifier"><a class="markdownIt-Anchor" href="#3-2-sgd-sgdclassifier"></a> 3-2. SGD (SGDClassifier)</h3><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html" target="_blank" rel="noopener">[sklearn.linear_model.<strong>SGDClassifier</strong>] Document</a></p></blockquote><p><strong>stochastic gradient descent (SGD):</strong> 확률적 경사 하강법</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 출처: https://machinelearningnotepad.wordpress.com/</span></span><br><span class="line">Image(<span class="string">'https://machinelearningnotepad.files.wordpress.com/2018/04/yk1mk.png'</span>, width=<span class="number">500</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-sklearn2/output_80_0.png" alt="png" style="zoom: 33%;"><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br></pre></td></tr></tbody></table></figure><p><strong>step 1: 모델 선언</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd = SGDClassifier(random_state=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>step 2: 모델 학습</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>SGDClassifier(alpha=0.0001, average=False, class_weight=None,              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,              l1_ratio=0.15, learning_rate='optimal', loss='hinge',              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',              power_t=0.5, random_state=0, shuffle=True, tol=0.001,              validation_fraction=0.1, verbose=0, warm_start=False)</code></pre><p><strong>step 3: 예측</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = sgd.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><p><strong>step 4: 평가</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prediction == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9473684210526315</code></pre> <br> <p><strong>Change hyper-parameter values:</strong></p><p>e.g.: penalty = ‘l1’, random_state = 1, n_jobs = -1</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd2 = SGDClassifier(penalty=<span class="string">'l1'</span>, random_state=<span class="number">1</span>, n_jobs=<span class="number">-1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd2.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>SGDClassifier(alpha=0.0001, average=False, class_weight=None,              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,              l1_ratio=0.15, learning_rate='optimal', loss='hinge',              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',              power_t=0.5, random_state=1, shuffle=True, tol=0.001,              validation_fraction=0.1, verbose=0, warm_start=False)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction2 = sgd2.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prediction2 == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>1.0</code></pre> <br> <h3 id="3-3-knn-kneighborsclassifier"><a class="markdownIt-Anchor" href="#3-3-knn-kneighborsclassifier"></a> 3-3. KNN (KNeighborsClassifier)</h3><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html" target="_blank" rel="noopener">[sklearn.neighbors.<strong>KNeighborsClassifier</strong>] Document</a></p></blockquote><p><strong>KNN (K Nearest Neighbors):</strong> K 최근접 이웃 알고리즘</p><p>새로운 데이터의 분류 결과가 K 개 최근접 이웃의 클래스에 의해서 결정되며, 데이터는 가장 많이 할당되는 클래스로 분류하게 된다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 출처: 데이터 캠프</span></span><br><span class="line">Image(<span class="string">'https://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1531424125/KNN_final_a1mrv9.png'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_102_0.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 모델 선언</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 모델 학습</span></span><br><span class="line">knn.fit(x_train, y_train)  <span class="comment"># default: n_neighbors=5</span></span><br></pre></td></tr></tbody></table></figure><pre><code>KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,                     weights='uniform')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 예측</span></span><br><span class="line">prediction = knn.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 평가</span></span><br><span class="line">(prediction == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9210526315789473</code></pre>  <br><p>n_neighnors를 9개로 설정하여 다시 예측해본다:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knn2 = KNeighborsClassifier(n_neighbors=<span class="number">9</span>)</span><br><span class="line">knn2.fit(x_train, y_train)</span><br><span class="line">knn2_pred = knn2.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(knn2_pred == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9473684210526315</code></pre><br>  <h3 id="3-4-svm-svc"><a class="markdownIt-Anchor" href="#3-4-svm-svc"></a> 3-4. SVM (SVC)</h3><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC" target="_blank" rel="noopener">[sklearn.svm.<strong>SVC</strong>] Document</a></p></blockquote><ul><li>새로운 데이터가 어느 카테고리에 속할지 판단하는 비확률적 이진 선형 분류 모델을 만듦.</li><li>경계로 표현되는 데이터들 중 가장 큰 폭을 가진 경계를 찾는 알고리즘.</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://csstudy.files.wordpress.com/2011/03/screen-shot-2011-02-28-at-5-53-26-pm.png'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_117_0.png" alt="png"></p><br><p>SVM은 Logistic Regression과 같이 이진 분류만 가능하다. (2개의 클래스 판별만 가능)<br>3개 이상의 클래스인 경우: <strong>OvsR 전략</strong> 사용</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC  <span class="comment"># SVC: Support Vector Classification</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svc = SVC(random_state=<span class="number">0</span>)</span><br><span class="line">svc.fit(x_train, y_train)</span><br><span class="line">svc_pred = svc.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc  <span class="comment"># hyper-parameter 확인</span></span><br></pre></td></tr></tbody></table></figure><pre><code>SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,    verbose=False)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(svc_pred == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9473684210526315</code></pre><br><p>각 클래스 별 확률값을 return해주는 <code>decision_function()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc.decision_function(x_valid)[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[ 2.22273426,  1.18194657, -0.25426485],       [-0.22060229,  2.23192595,  0.91725911],       [-0.23638817,  1.18969144,  2.17593611],       [-0.23457057,  1.07146337,  2.22588253],       [ 2.22808358,  1.16872302, -0.25381783]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc_pred[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>array([0, 1, 2, 2, 0])</code></pre><p><strong>확률값이 제일 높은 클래스</strong>로 분류(예측) 된 것을 확인하실 수 있다</p><br>  <h3 id="3-5-decision-tree-decisiontreeclassifier"><a class="markdownIt-Anchor" href="#3-5-decision-tree-decisiontreeclassifier"></a> 3-5. Decision Tree (DecisionTreeClassifier)</h3><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html?highlight=decision%20tree#sklearn.tree.DecisionTreeClassifier" target="_blank" rel="noopener">[sklearn.tree.<strong>DecisionTreeClassifier</strong>] Document</a></p></blockquote><h4 id="1-decision-tree-의사-결정-나무-나무-가지치기를-통해-소그룹으로-나누어-판별하는것"><a class="markdownIt-Anchor" href="#1-decision-tree-의사-결정-나무-나무-가지치기를-통해-소그룹으로-나누어-판별하는것"></a> 1. Decision Tree (의사 결정 나무): 나무 가지치기를 통해 소그룹으로 나누어 판별하는것</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image(<span class="string">'https://www.researchgate.net/profile/Ludmila_Aleksejeva/publication/293194222/figure/fig1/AS:669028842487827@1536520314657/Decision-tree-for-Iris-dataset.png'</span>, width=<span class="number">500</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-sklearn2/output_132_0.png" alt="png" style="zoom: 67%;"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt = DecisionTreeClassifier(random_state=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure><pre><code>DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',                       max_depth=None, max_features=None, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=2,                       min_weight_fraction_leaf=0.0, presort='deprecated',                       random_state=0, splitter='best')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt_pred = dt.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(dt_pred == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9210526315789473</code></pre><br>  <h4 id="2-decision-tree-분류-결과-시각화"><a class="markdownIt-Anchor" href="#2-decision-tree-분류-결과-시각화"></a> 2. Decision Tree 분류 결과 시각화</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>방법 1:</strong> <code>pydot</code>을 사용하여 "<em>dot</em> 파일"을 "<em>png</em> 이미지"로 전환 (<a href="https://niceman.tistory.com/169" target="_blank" rel="noopener">참고</a>)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pydot</span><br></pre></td></tr></tbody></table></figure><pre><code>Collecting pydotNote: you may need to restart the kernel to use updated packages.  Downloading pydot-1.4.1-py2.py3-none-any.whl (19 kB)Requirement already satisfied: pyparsing&gt;=2.1.4 in d:\anaconda\lib\site-packages (from pydot) (2.4.6)Installing collected packages: pydotSuccessfully installed pydot-1.4.1</code></pre><p>​    <br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 참고: https://niceman.tistory.com/169</span></span><br><span class="line"><span class="keyword">import</span> pydot</span><br><span class="line"></span><br><span class="line"><span class="comment"># .dot결과 생성</span></span><br><span class="line">export_graphviz(dt, out_file=<span class="string">'tree.dot'</span>, feature_names=feature_names, class_names=np.unique(iris[<span class="string">'target_names'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Encoding</span></span><br><span class="line">(graph,) = pydot.graph_from_dot_file(<span class="string">'tree.dot'</span>, encoding=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .dot파일을 .png이미지로 저장</span></span><br><span class="line">graph.write_png(<span class="string">'tree.png'</span>)</span><br><span class="line"></span><br><span class="line">Image(filename = <span class="string">'tree.png'</span>, width=<span class="number">600</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-sklearn2/output_144_0.png" alt="png" style="zoom: 80%;">  <br> <br><p><strong>방법 2:</strong> <code>graphviz.Source</code>이용 (<a href="https://www.kaggle.com/praanj/titanic-decision-tree-complete-evaluation" target="_blank" rel="noopener">참고</a>)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U graphviz</span><br></pre></td></tr></tbody></table></figure><pre><code>Requirement already up-to-date: graphviz in d:\anaconda\lib\site-packages (0.14.1)Note: you may need to restart the kernel to use updated packages.</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 참고: https://www.kaggle.com/vaishvik25/titanic-eda-fe-3-model-decision-tree-viz</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier, export_graphviz</span><br><span class="line"></span><br><span class="line">tree_dot = export_graphviz(dt,out_file=<span class="literal">None</span>, feature_names=feature_names, class_names=np.unique(iris[<span class="string">'target_names'</span>]))</span><br><span class="line">tree = graphviz.Source(tree_dot)</span><br><span class="line">tree</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-sklearn2/output_149_0.svg" alt="svg" style="zoom: 80%;"> <br><p><strong>gini계수:</strong> 불순도를 의미함. gini계수가 높을 수록 엔트로피(Entropy)가 큼. 즉, 클래스가 혼잡하게 섞여 있음.</p>  <br><h4 id="3-가지-치기-pruning"><a class="markdownIt-Anchor" href="#3-가지-치기-pruning"></a> 3. 가지 치기 (pruning)</h4><p>Overfitting을 방지하기 위해 적당히 가지 치기를 진행한다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 수동으로 max_depth 설정</span></span><br><span class="line">dt2 = DecisionTreeClassifier(max_depth=<span class="number">2</span>)</span><br><span class="line">dt2.fit(x_train, y_train)</span><br><span class="line">dt2_pred = dt2.predict(x_valid)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(dt2_pred == y_valid).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9210526315789473</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tree2_dot = export_graphviz(dt2,out_file=<span class="literal">None</span>, feature_names=feature_names, class_names=np.unique(iris[<span class="string">'target_names'</span>]))</span><br><span class="line">tree2 = graphviz.Source(tree2_dot)</span><br><span class="line">tree2</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_156_0.svg" alt="svg"></p>  <br>  <br><h2 id="4-모델-성능-평가-지표"><a class="markdownIt-Anchor" href="#4-모델-성능-평가-지표"></a> <strong>4. 모델 성능 평가 지표</strong></h2><blockquote><p>참고자료: <a href="https://sumniya.tistory.com/26" target="_blank" rel="noopener">분류성능평가지표 - Precision(정밀도), Recall(재현율) and Accuracy(정확도)</a></p></blockquote><h3 id="4-1-오차-행렬-confusion-matrix"><a class="markdownIt-Anchor" href="#4-1-오차-행렬-confusion-matrix"></a> 4-1. 오차 행렬 (Confusion Matrix)</h3><img src="/images/S-Python-sklearn2/a9psOK.png" alt="confusion_matrix" style="zoom: 67%;">  <br><h3 id="4-2-정확도-accuracy"><a class="markdownIt-Anchor" href="#4-2-정확도-accuracy"></a> 4-2. 정확도 (Accuracy)</h3><p><strong>정확도 (Accuracy):</strong> 모델이 샘플을 올바르게 예측하는 비율</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>c</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Accuracy = \frac{TP+TN}{TP+FP+TN+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p> <br> <p><strong>!!정확도의 함정!!</strong></p><p>정확도는 모델의 성능을 가장 지관적으로 나타낼 수 있는 평가 지표다. 하지만, 만약 Actual positive sample과 Actual negative sample의 비율이 차이가 많이 나면 <strong>정확도의 함정</strong>에 빠질 수 있다.</p><p>즉, <em><strong>모두 positive / negative로 예측</strong></em> 했을 때 모델의 정확도가 매우 높은 경우다. 이 경우에 <font color="blue"><strong>예측 정확도가 높지만, 모델의 예측 성능이 좋다라고 말할 수는 없다.</strong></font></p>  <br><p>유방암 환자 데이터셋을 이용하여 한번 이해해 볼게요.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cancer = load_breast_cancer(유방암 환자 데이터셋)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cancer[<span class="string">'DESCR'</span>])  <span class="comment"># describe</span></span><br></pre></td></tr></tbody></table></figure><pre><code>.. _breast_cancer_dataset:Breast cancer wisconsin (diagnostic) dataset--------------------------------------------**Data Set Characteristics:**    :Number of Instances: 569    :Number of Attributes: 30 numeric, predictive attributes and the class    :Attribute Information:        - radius (mean of distances from center to points on the perimeter)        - texture (standard deviation of gray-scale values)        - perimeter        - area        - smoothness (local variation in radius lengths)        - compactness (perimeter^2 / area - 1.0)        - concavity (severity of concave portions of the contour)        - concave points (number of concave portions of the contour)        - symmetry         - fractal dimension ("coastline approximation" - 1)        The mean, standard error, and "worst" or largest (mean of the three        largest values) of these features were computed for each image,        resulting in 30 features.  For instance, field 3 is Mean Radius, field        13 is Radius SE, field 23 is Worst Radius.        - class:                - WDBC-Malignant                - WDBC-Benign    :Summary Statistics:    ===================================== ====== ======                                           Min    Max    ===================================== ====== ======    radius (mean):                        6.981  28.11    texture (mean):                       9.71   39.28    perimeter (mean):                     43.79  188.5    area (mean):                          143.5  2501.0    smoothness (mean):                    0.053  0.163    compactness (mean):                   0.019  0.345    concavity (mean):                     0.0    0.427    concave points (mean):                0.0    0.201    symmetry (mean):                      0.106  0.304    fractal dimension (mean):             0.05   0.097    radius (standard error):              0.112  2.873    texture (standard error):             0.36   4.885    perimeter (standard error):           0.757  21.98    area (standard error):                6.802  542.2    smoothness (standard error):          0.002  0.031    compactness (standard error):         0.002  0.135    concavity (standard error):           0.0    0.396    concave points (standard error):      0.0    0.053    symmetry (standard error):            0.008  0.079    fractal dimension (standard error):   0.001  0.03    radius (worst):                       7.93   36.04    texture (worst):                      12.02  49.54    perimeter (worst):                    50.41  251.2    area (worst):                         185.2  4254.0    smoothness (worst):                   0.071  0.223    compactness (worst):                  0.027  1.058    concavity (worst):                    0.0    1.252    concave points (worst):               0.0    0.291    symmetry (worst):                     0.156  0.664    fractal dimension (worst):            0.055  0.208    ===================================== ====== ======    :Missing Attribute Values: None    :Class Distribution: 212 - Malignant, 357 - Benign    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian    :Donor: Nick Street    :Date: November, 1995This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.https://goo.gl/U2Uwz2Features are computed from a digitized image of a fine needleaspirate (FNA) of a breast mass.  They describecharacteristics of the cell nuclei present in the image.Separating plane described above was obtained usingMultisurface Method-Tree (MSM-T) [K. P. Bennett, "Decision TreeConstruction Via Linear Programming." Proceedings of the 4thMidwest Artificial Intelligence and Cognitive Science Society,pp. 97-101, 1992], a classification method which uses linearprogramming to construct a decision tree.  Relevant featureswere selected using an exhaustive search in the space of 1-4features and 1-3 separating planes.The actual linear program used to obtain the separating planein the 3-dimensional space is that described in:[K. P. Bennett and O. L. Mangasarian: "Robust LinearProgramming Discrimination of Two Linearly Inseparable Sets",Optimization Methods and Software 1, 1992, 23-34].This database is also available through the UW CS ftp server:ftp ftp.cs.wisc.educd math-prog/cpo-dataset/machine-learn/WDBC/.. topic:: References   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction      for breast tumor diagnosis. IS&amp;T/SPIE 1993 International Symposium on      Electronic Imaging: Science and Technology, volume 1905, pages 861-870,     San Jose, CA, 1993.   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and      prognosis via linear programming. Operations Research, 43(4), pages 570-577,      July-August 1995.   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994)      163-171.</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = cancer[<span class="string">'data'</span>]</span><br><span class="line">target = cancer[<span class="string">'target'</span>]</span><br><span class="line">feature_names = cancer[<span class="string">'feature_names'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터 프레임 생성</span></span><br><span class="line">df = pd.DataFrame(data = data, columns = feature_names)</span><br><span class="line">df[<span class="string">'target'</span>] = target</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>mean radius</th>      <th>mean texture</th>      <th>mean perimeter</th>      <th>mean area</th>      <th>mean smoothness</th>      <th>mean compactness</th>      <th>mean concavity</th>      <th>mean concave points</th>      <th>mean symmetry</th>      <th>mean fractal dimension</th>      <th>...</th>      <th>worst texture</th>      <th>worst perimeter</th>      <th>worst area</th>      <th>worst smoothness</th>      <th>worst compactness</th>      <th>worst concavity</th>      <th>worst concave points</th>      <th>worst symmetry</th>      <th>worst fractal dimension</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>17.99</td>      <td>10.38</td>      <td>122.80</td>      <td>1001.0</td>      <td>0.11840</td>      <td>0.27760</td>      <td>0.3001</td>      <td>0.14710</td>      <td>0.2419</td>      <td>0.07871</td>      <td>...</td>      <td>17.33</td>      <td>184.60</td>      <td>2019.0</td>      <td>0.1622</td>      <td>0.6656</td>      <td>0.7119</td>      <td>0.2654</td>      <td>0.4601</td>      <td>0.11890</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>20.57</td>      <td>17.77</td>      <td>132.90</td>      <td>1326.0</td>      <td>0.08474</td>      <td>0.07864</td>      <td>0.0869</td>      <td>0.07017</td>      <td>0.1812</td>      <td>0.05667</td>      <td>...</td>      <td>23.41</td>      <td>158.80</td>      <td>1956.0</td>      <td>0.1238</td>      <td>0.1866</td>      <td>0.2416</td>      <td>0.1860</td>      <td>0.2750</td>      <td>0.08902</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>19.69</td>      <td>21.25</td>      <td>130.00</td>      <td>1203.0</td>      <td>0.10960</td>      <td>0.15990</td>      <td>0.1974</td>      <td>0.12790</td>      <td>0.2069</td>      <td>0.05999</td>      <td>...</td>      <td>25.53</td>      <td>152.50</td>      <td>1709.0</td>      <td>0.1444</td>      <td>0.4245</td>      <td>0.4504</td>      <td>0.2430</td>      <td>0.3613</td>      <td>0.08758</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>11.42</td>      <td>20.38</td>      <td>77.58</td>      <td>386.1</td>      <td>0.14250</td>      <td>0.28390</td>      <td>0.2414</td>      <td>0.10520</td>      <td>0.2597</td>      <td>0.09744</td>      <td>...</td>      <td>26.50</td>      <td>98.87</td>      <td>567.7</td>      <td>0.2098</td>      <td>0.8663</td>      <td>0.6869</td>      <td>0.2575</td>      <td>0.6638</td>      <td>0.17300</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>20.29</td>      <td>14.34</td>      <td>135.10</td>      <td>1297.0</td>      <td>0.10030</td>      <td>0.13280</td>      <td>0.1980</td>      <td>0.10430</td>      <td>0.1809</td>      <td>0.05883</td>      <td>...</td>      <td>16.67</td>      <td>152.20</td>      <td>1575.0</td>      <td>0.1374</td>      <td>0.2050</td>      <td>0.4000</td>      <td>0.1625</td>      <td>0.2364</td>      <td>0.07678</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 31 columns</p></div></div><br><p><strong>target:</strong> 0: Malignant (악성종양);  1: Benign (양성종양)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pos = df.loc[df[<span class="string">'target'</span>] == <span class="number">1</span>] <span class="comment"># 앙성 sample</span></span><br><span class="line">neg = df.loc[df[<span class="string">'target'</span>] == <span class="number">0</span>] <span class="comment"># 음성 sample</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pos.shape, neg.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((357, 31), (212, 31))</code></pre><br><p><strong>시범용 sample data를 생성:</strong> 양성 환자 357 + 음성 환자 5</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample = pd.concat([pos, neg[:<span class="number">5</span>]], sort=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(sample.drop(<span class="string">'target'</span>,<span class="number">1</span>), sample[<span class="string">'target'</span>], random_state=<span class="number">42</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((271, 30), (271,))</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_test.shape, y_test.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((91, 30), (91,))</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모델 정의 및 학습</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line">model_pred = model.predict(x_test)</span><br></pre></td></tr></tbody></table></figure>  <br><ul><li>Confusion Matrix</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confusion_matrix(y_test, model_pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[ 1,  0],       [ 2, 88]], dtype=int64)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.heatmap(confusion_matrix(y_test, model_pred), annot=<span class="literal">True</span>, cmap=<span class="string">'Reds'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Predict'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Actual'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-sklearn2/output_192_0.png" alt="png"></p><br><ul><li>정확도 (Accuracy)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logistic 모델 정확도</span></span><br><span class="line">(model_pred == y_test).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.978021978021978</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모두 양성으로 예측한 경우</span></span><br><span class="line">my_pred = np.ones(shape=y_test.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정확도</span></span><br><span class="line">(my_pred == y_test).mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.989010989010989</code></pre><p>정확도만 놓고 본다면, 무조건 양성 환자로 예측하는 분류기가 성능이 더 좋다. 하지만 <strong>무조건 양성 환자로 예측해서 예측율이 98.9%로 말하는 의사는</strong> 당영히 자질이 좋은 의사라고 볼 수 없다</p><p>정확도(Accuracy)만 보고 분류기의 성능을 판별하는 것은 위와 같은 오류에 빠질 수 있다. 이를 보완하기 위해 다음과 같은 지표들도 같이 활용하게 된다</p>  <br><h3 id="4-3-정밀도-precision"><a class="markdownIt-Anchor" href="#4-3-정밀도-precision"></a> 4-3. 정밀도 (Precision)</h3><p><strong>정밀도 (Precision):</strong> 양성 예측의 정확도. 즉, Positive Prediction 중에서 올바르게 예측되는 비율</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Precision=\frac{TP}{TP+FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">precision_score(y_test, model_pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>1.0</code></pre><br><h3 id="4-4-민감도-sensitivity-재현율-recall"><a class="markdownIt-Anchor" href="#4-4-민감도-sensitivity-재현율-recall"></a> 4-4. 민감도 (Sensitivity)  /  재현율 (Recall)</h3><p><strong>민감도 (Sensitivity) / 재현율 (Recall):</strong><br>분류기가 양성 샘플에 대한 식별력을 나타남. 즉, Positive Condition 중에서 올바르게 예측되는 비율. True Positive Rate (TPR) 이라고도 불린다.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Sensitivity / Recall = \frac{TP}{TP+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recall_score(y_test, model_pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9777777777777777</code></pre>  <br><h3 id="4-5-특이도-specificity"><a class="markdownIt-Anchor" href="#4-5-특이도-specificity"></a> 4-5. 특이도 (Specificity)</h3><p><strong>특이도 (Specificity):</strong> 분류기가 음성 샘플에 대한 식별력을 나타남. 즉, Negative Condition 중에서 올바르게 예측되는 비율. True Negative Rate (TNR) 이라고도 불린다.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>N</mi></mrow><mrow><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Specificity = \frac{TN}{TN+FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><br>  <h3 id="4-6-f1-score"><a class="markdownIt-Anchor" href="#4-6-f1-score"></a> 4-6. F1 Score</h3><p><strong>F1 Score:</strong> 정밀도(Precision)와 재현율(Recall)의 조화 평균을 나타나는 지표임.<br>데이터 label이 불균형 구조일 때, 모델의 성능을 정확하게 평가할 수 있으며, 성능을 하나의 숫자로 표현할 수 있다.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mn>1</mn><mtext>&nbsp;</mtext><mi>S</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mfrac><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>∗</mo><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi></mrow><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>+</mo><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mfrac><mrow><mi>F</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow><mn>2</mn></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">F1\ Score = 2*\frac{Precision * Recall}{Precision + Recall}=\frac{TP}{TP+\frac{FN+FP}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">1</span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4676609999999997em;vertical-align:-1.1073309999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.2376690000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1073309999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1_score(y_test, model_pred)</span><br></pre></td></tr></tbody></table></figure><pre><code>0.9887640449438202</code></pre><br><br><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Logistic Regression, SGD, KNN, SVM, Decision Tree, 분류 모델 성능 평가 (confusion matrix)
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
      <category term="분류" scheme="https://hyemin-kim.github.io/tags/%EB%B6%84%EB%A5%98/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn - (1) 전처리</title>
    <link href="https://hyemin-kim.github.io/2020/07/17/S-Python-sklearn1/"/>
    <id>https://hyemin-kim.github.io/2020/07/17/S-Python-sklearn1/</id>
    <published>2020-07-17T07:37:50.000Z</published>
    <updated>2020-07-17T09:02:10.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="전처리-pre-processing"><a class="markdownIt-Anchor" href="#전처리-pre-processing"></a> <strong>전처리 (Pre-Processing)</strong></h1><p></p><ul class="markdownIt-TOC"><li><a href="#%EA%B0%9C%EC%9A%94"><strong>개요</strong></a><ul><li><a href="#1-%EC%A0%84%EC%B2%98%EB%A6%AC%EC%9D%98-%EC%A0%95%EC%9D%98">1. 전처리의 정의</a></li><li><a href="#2-%EC%A0%84%EC%B2%98%EB%A6%AC%EC%9D%98-%EC%A2%85%EB%A5%98">2. 전처리의 종류</a></li></ul></li><li><a href="#%EC%8B%A4%EC%8A%B5-titanic"><strong>실습 – Titanic</strong></a><ul><li><a href="#0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B-%ED%8C%8C%EC%95%85">0. 데이터 셋 파악</a></li><li><a href="#1-train-validation-%EC%85%8B-%EB%82%98%EB%88%84%EA%B8%B0">1. train / validation 셋 나누기</a></li><li><a href="#2-%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%B2%98%EB%A6%AC">2. 결측치 처리</a><ul><li><a href="#2-0-%EA%B2%B0%EC%B8%A1%EC%B9%98-%ED%99%95%EC%9D%B8">2-0. 결측치 확인</a></li><li><a href="#2-1-numerical-column%EC%9D%98-%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%B2%98%EB%A6%AC">2-1. Numerical Column의 결측치 처리</a></li><li><a href="#2-2-categorical-column%EC%9D%98-%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%B2%98%EB%A6%AC">2-2. Categorical Column의 결측치 처리</a></li></ul></li><li><a href="#3-label-encoding-%EB%AC%B8%EC%9E%90categorivcal%EB%A5%BC-%EC%88%98%EC%B9%98numerical%EB%A1%9C-%EB%B3%80%ED%99%98">3. Label Encoding: 문자(categorivcal)를 수치(numerical)로 변환</a></li><li><a href="#4-%EC%9B%90-%ED%95%AB-%EC%9D%B8%EC%BD%94%EB%94%A9-one-hot-encoding">4. 원 핫 인코딩 (One Hot Encoding)</a></li><li><a href="#5-normalize-%EC%A0%95%EA%B7%9C%ED%99%94">5. Normalize (정규화)</a></li><li><a href="#6-standard-scaling-%ED%91%9C%EC%A4%80%ED%99%94">6. Standard Scaling (표준화)</a></li></ul></li></ul><p></p><br><h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> <strong>개요</strong></h2><h3 id="1-전처리의-정의"><a class="markdownIt-Anchor" href="#1-전처리의-정의"></a> 1. 전처리의 정의</h3><p><strong>데이터 전처리</strong>는 데이터 분석에 적합하게 데이터를 <strong>가공/ 변경/ 처리/ 클리닝</strong>하는 과정이다</p>  <br><h3 id="2-전처리의-종류"><a class="markdownIt-Anchor" href="#2-전처리의-종류"></a> 2. 전처리의 종류</h3><ol><li><p><strong>결측치</strong> - Imputer</p></li><li><p><strong>이상치</strong></p></li><li><p><strong>정규화 (Normalization)</strong></p><ul><li>0~1사이의 분포로 조정</li><li><font size="4"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_{new} = \frac{x-x_{min}}{x_{max}-x_{min}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.263531em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8184309999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></font></li></ul></li><li><p><strong>표준화 (Standardization)</strong></p><ul><li>평균을 0, 표준편차를 1로 맞춤</li><li><font size="4"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac></mrow><annotation encoding="application/x-tex">x_{new} = \frac{x-\mu}{\sigma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.199439em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></font></li></ul></li><li><p><strong>샘플링 (over/under sampling)</strong></p></li><li><p><strong>피처 공학 (Feature Engineering)</strong></p><ul><li>feature 생성/ 연산</li><li>구간 생성, 스케일 변경</li></ul></li></ol><p><br>  <br></p><h2 id="실습-titanic"><a class="markdownIt-Anchor" href="#실습-titanic"></a> <strong>실습 – Titanic</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">'test.csv'</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><h3 id="0-데이터-셋-파악"><a class="markdownIt-Anchor" href="#0-데이터-셋-파악"></a> 0. 데이터 셋 파악</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div></div><br><ul><li><p>PassengerId: 승객 아이디</p></li><li><p>Survived: 생존 여부, 1: 생존, 0: 사망</p></li><li><p>Pclass: 등급</p></li><li><p>Name: 성함</p></li><li><p>Sex: 성별</p></li><li><p>Age: 나이</p></li><li><p>SibSp: 형제, 자매, 배우자 수</p></li><li><p>Parch: 부모, 자식 수</p></li><li><p>Ticket: 티켓번호</p></li><li><p>Fare: 요즘</p></li><li><p>Cabin: 좌석번호</p></li><li><p>Embarked: 탑승 항구</p><br><br></li></ul><h3 id="1-train-validation-셋-나누기"><a class="markdownIt-Anchor" href="#1-train-validation-셋-나누기"></a> 1. train / validation 셋 나누기</h3><p><strong>STEP 1. feature &amp; label 정의하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feature = [</span><br><span class="line">    <span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'Fare'</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">label = [</span><br><span class="line">    <span class="string">'Survived'</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[feature].head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>7.2500</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>71.2833</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>7.9250</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>53.1000</td>    </tr>    <tr>      <th>4</th>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>8.0500</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[label].head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>0</td>    </tr>  </tbody></table></div><br><p><strong>STEP 2. 적절한 비율로 train / validation set 나누기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em><strong>reference:</strong></em> <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" target="_blank" rel="noopener">&lt; train_test_split &gt; Document</a></p></blockquote><blockquote><p><strong>train_test_split</strong> ( <em>X, y, test_size=…, random_state=…, shuffle=True</em> )</p><ul><li><strong>test_size:</strong> validation set에 할당할 비율 (20% -&gt; 0.2)</li><li><strong>random_state:</strong> random seed 설정</li><li><strong>shuffle:</strong> 기본 True: shuffle the data before splitting</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(train[feature], train[label], test_size=<span class="number">0.2</span>, random_state=<span class="number">30</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape, y_train.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((712, 4), (712, 1))</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_valid.shape, y_valid.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>((179, 4), (179, 1))</code></pre><p><br> <br></p><h3 id="2-결측치-처리"><a class="markdownIt-Anchor" href="#2-결측치-처리"></a> 2. 결측치 처리</h3><h4 id="2-0-결측치-확인"><a class="markdownIt-Anchor" href="#2-0-결측치-확인"></a> 2-0. 결측치 확인</h4><p><strong>방법 1.</strong> pandas의 <code>info()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><br><p><strong>방법 2.</strong> pandas의 <code>isnull()</code><br>합계를 구하는 sum()을 통해 한 눈에 확인할 수 있다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>PassengerId      0Survived         0Pclass           0Name             0Sex              0Age            177SibSp            0Parch            0Ticket           0Fare             0Cabin          687Embarked         2dtype: int64</code></pre><p>개별 column의 결측치 확인하기</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Age'</span>].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>177</code></pre><br>  <h4 id="2-1-numerical-column의-결측치-처리"><a class="markdownIt-Anchor" href="#2-1-numerical-column의-결측치-처리"></a> 2-1. Numerical Column의 결측치 처리</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><br><p><strong>1. Pandas의 <font color="blue">"fillna()"</font>를 사용</strong>: 1개의 column을 처리할 때</p><p><strong>a. 숫자"0"으로 채우기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Age'</span>].fillna(<span class="number">0</span>).describe()</span><br></pre></td></tr></tbody></table></figure><pre><code>count    891.000000mean      23.799293std       17.596074min        0.00000025%        6.00000050%       24.00000075%       35.000000max       80.000000Name: Age, dtype: float64</code></pre> <br> <p><strong>b. 통계값(평균)으로 채우기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Age'</span>].fillna(train[<span class="string">'Age'</span>].mean()).describe()</span><br></pre></td></tr></tbody></table></figure><pre><code>count    891.000000mean      29.699118std       13.002015min        0.42000025%       22.00000050%       29.69911875%       35.000000max       80.000000Name: Age, dtype: float64</code></pre> <br> <p><strong>2. sklearn의 <font color="blue">"SimpleImputer"</font>를 사용</strong>: 2개 이상의 column을 한 번에 처리할 때</p><blockquote><p><em><strong>reference:</strong></em></p><ol><li><a href="https://scikit-learn.org/stable/modules/impute.html" target="_blank" rel="noopener">Impute 도큐먼트</a></li><li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html" target="_blank" rel="noopener">SimplrImputer 도큐먼트</a></li></ol></blockquote><blockquote><p><strong>SimpleImputer</strong>( <em>*, missing_values=nan, strategy=‘mean’, fill_value=None, verbose=0, copy=True, add_indicator=False</em> )</p><ul><li>strategy: “mean” / “median” / “most_frequent” / “constant”</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>a. 숫자"0"으로 채우기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 1. imputer 만들기</span></span><br><span class="line">imputer = SimpleImputer(strategy=<span class="string">'constant'</span>, fill_value=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 2. fit() 을 통해 결측치에 대한 학습을 진행하기</span></span><br><span class="line">imputer.fit(train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]])</span><br></pre></td></tr></tbody></table></figure><pre><code>SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,              strategy='constant', verbose=0)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 3. transform() 을 통해 실제 결측치에 대해 처리하기</span></span><br><span class="line">result = imputer.transform(train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]])</span><br><span class="line">result</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[22.,  3.],       [38.,  1.],       [26.,  3.],       ...,       [ 0.,  3.],       [26.,  1.],       [32.,  3.]])</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 4. 처리 결과를 original data에 대입</span></span><br><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]] = result</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Age       0Pclass    0dtype: int64</code></pre><br>  <p><strong>fit_transform()</strong> 은 fit()과 transform()을 한 번에 해주는 합수다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Age       177Pclass      0dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 1. imputer 만들기</span></span><br><span class="line">imputer = SimpleImputer(strategy=<span class="string">'constant'</span>, fill_value=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 2. fit and transform</span></span><br><span class="line">result = imputer.fit_transform(train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 3. 결과 대입</span></span><br><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]] = result</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Age       0Pclass    0dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Age</th>      <th>Pclass</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>23.799293</td>      <td>2.308642</td>    </tr>    <tr>      <th>std</th>      <td>17.596074</td>      <td>0.836071</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>    </tr>    <tr>      <th>25%</th>      <td>6.000000</td>      <td>2.000000</td>    </tr>    <tr>      <th>50%</th>      <td>24.000000</td>      <td>3.000000</td>    </tr>    <tr>      <th>75%</th>      <td>35.000000</td>      <td>3.000000</td>    </tr>    <tr>      <th>max</th>      <td>80.000000</td>      <td>3.000000</td>    </tr>  </tbody></table></div> <br> <p><strong>b. 통계값(평균)으로 채우기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Age       177Pclass      0dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imputer = SimpleImputer(strategy=<span class="string">'mean'</span>)</span><br><span class="line">result = imputer.fit_transform(train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]])</span><br><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]] = result</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Age       0Pclass    0dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Age'</span>, <span class="string">'Pclass'</span>]].describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Age</th>      <th>Pclass</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>29.699118</td>      <td>2.308642</td>    </tr>    <tr>      <th>std</th>      <td>13.002015</td>      <td>0.836071</td>    </tr>    <tr>      <th>min</th>      <td>0.420000</td>      <td>1.000000</td>    </tr>    <tr>      <th>25%</th>      <td>22.000000</td>      <td>2.000000</td>    </tr>    <tr>      <th>50%</th>      <td>29.699118</td>      <td>3.000000</td>    </tr>    <tr>      <th>75%</th>      <td>35.000000</td>      <td>3.000000</td>    </tr>    <tr>      <th>max</th>      <td>80.000000</td>      <td>3.000000</td>    </tr>  </tbody></table></div><br><h4 id="2-2-categorical-column의-결측치-처리"><a class="markdownIt-Anchor" href="#2-2-categorical-column의-결측치-처리"></a> 2-2. Categorical Column의 결측치 처리</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><br><p><strong>1. Pandas의 <font color="blue">"fillna()"</font>를 사용</strong>: 1개의 column을 처리할 때</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>0      S1      C2      S3      S4      S      ..886    S887    S888    S889    C890    QName: Embarked, Length: 891, dtype: object</code></pre><br><p><strong>2. sklearn의 <font color="blue">"SimpleImputer"</font>를 사용</strong>: 2개 이상의 column을 한 번에 처리할 때</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imputer = SimpleImputer(strategy = <span class="string">'most_frequent'</span>)</span><br><span class="line">result = imputer.fit_transform(train[[<span class="string">'Embarked'</span>, <span class="string">'Cabin'</span>]])</span><br><span class="line">train[[<span class="string">'Embarked'</span>, <span class="string">'Cabin'</span>]] = result</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[[<span class="string">'Embarked'</span>, <span class="string">'Cabin'</span>]].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>Embarked    0Cabin       0dtype: int64</code></pre><p><br>  <br></p><h3 id="3-label-encoding-문자categorivcal를-수치numerical로-변환"><a class="markdownIt-Anchor" href="#3-label-encoding-문자categorivcal를-수치numerical로-변환"></a> 3. Label Encoding: 문자(categorivcal)를 수치(numerical)로 변환</h3><p>기계학습을 위해서 모든 <strong>문자</strong>로된 데이터는 <strong>수치로 변환</strong>해야 한다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line">train.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Sex'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0        male1      female2      female3      female4        male        ...  886      male887    female888    female889      male890      maleName: Sex, Length: 891, dtype: object</code></pre><br><p><strong>방법 1: convert함수를 직접 정의하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Sex'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>male      577female    314Name: Sex, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 1. 함수 정의</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">'female'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">'male'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STEP 2. 함수 apply</span></span><br><span class="line">train[<span class="string">'Sex'</span>].apply(convert)</span><br></pre></td></tr></tbody></table></figure><pre><code>0      01      12      13      14      0      ..886    0887    1888    1889    0890    0Name: Sex, Length: 891, dtype: int64</code></pre>  <br><p><strong>방법 2: sklearn의 <font color="blue">“LabelEncoder”</font> 사용</strong></p><ul><li>변환 규칙: value name의 <strong>alphabet 순서대로</strong> 0, 1, 2… 숫자를 부여</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Sex'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>male      577female    314Name: Sex, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">le = LabelEncoder()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Sex_num'</span>] = le.fit_transform(train[<span class="string">'Sex'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Sex_num'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>1    5770    314Name: Sex_num, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class 확인</span></span><br><span class="line">le.classes_</span><br></pre></td></tr></tbody></table></figure><pre><code>array(['female', 'male'], dtype=object)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자 -&gt; 문자</span></span><br><span class="line">le.inverse_transform([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>array(['female', 'male', 'male', 'female', 'female', 'male', 'male'],      dtype=object)</code></pre><br>  <p>NaN 값이 포함되어 있으면, <code>LabeEncoder</code>가 정상 동작하지 않음</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0      S1      C2      S3      S4      S      ..886    S887    S888    S889    C890    QName: Embarked, Length: 891, dtype: object</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>S    644C    168Q     77Name: Embarked, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">le.fit_transform(train[<span class="string">'Embarked'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)D:\Anaconda\lib\site-packages\sklearn\preprocessing\_label.py in _encode(values, uniques, encode, check_unknown)    111         try:--&gt; 112             res = _encode_python(values, uniques, encode)    113         except TypeError:D:\Anaconda\lib\site-packages\sklearn\preprocessing\_label.py in _encode_python(values, uniques, encode)     59     if uniques is None:---&gt; 60         uniques = sorted(set(values))     61         uniques = np.array(uniques, dtype=values.dtype)TypeError: '&lt;' not supported between instances of 'float' and 'str'</code></pre><p>​</p><pre><code>During handling of the above exception, another exception occurred:TypeError                                 Traceback (most recent call last)&lt;ipython-input-38-86525b1fc929&gt; in &lt;module&gt;----&gt; 1 le.fit_transform(train['Embarked'])D:\Anaconda\lib\site-packages\sklearn\preprocessing\_label.py in fit_transform(self, y)    250         """    251         y = column_or_1d(y, warn=True)--&gt; 252         self.classes_, y = _encode(y, encode=True)    253         return y    254 D:\Anaconda\lib\site-packages\sklearn\preprocessing\_label.py in _encode(values, uniques, encode, check_unknown)    112             res = _encode_python(values, uniques, encode)    113         except TypeError:--&gt; 114             raise TypeError("argument must be a string or number")    115         return res    116     else:TypeError: argument must be a string or number</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>] = train[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>] = le.fit_transform(train[<span class="string">'Embarked'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0      21      02      23      24      2      ..886    2887    2888    2889    0890    1Name: Embarked, Length: 891, dtype: int32</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>2    6460    1681     77Name: Embarked, dtype: int64</code></pre>  <br>  <br><h3 id="4-원-핫-인코딩-one-hot-encoding"><a class="markdownIt-Anchor" href="#4-원-핫-인코딩-one-hot-encoding"></a> 4. 원 핫 인코딩 (One Hot Encoding)</h3><blockquote><p><strong>pd.get_dummies</strong> ( <em>df_name</em> [ <em>‘col_name’</em> ] )</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'train.csv'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><br><p><strong>"Embarked"를 살펴보기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unique Value 확인하기</span></span><br><span class="line">train[<span class="string">'Embarked'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>S    644C    168Q     77Name: Embarked, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NA 채우기</span></span><br><span class="line">train[<span class="string">'Embarked'</span>] = train[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line">train[<span class="string">'Embarked'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>S    646C    168Q     77Name: Embarked, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Label Encoding (문자 to 숫자)</span></span><br><span class="line">train[<span class="string">'Embarked_num'</span>] = LabelEncoder().fit_transform(train[<span class="string">'Embarked'</span>])</span><br><span class="line">train[<span class="string">'Embarked_num'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>2    6460    1681     77Name: Embarked_num, dtype: int64</code></pre><br><p>Embarked는 탑승 항구의 이니셜을 나타낸다. 우리는 <code>LabelEncoder</code>를 통해서 값을 수치형으로 변환해주었다, 하지만 이대로 데이터를 기계학습 시키면, 기계는 데이터 안에서 관계를 학습한다.</p><p>예를 들면, ‘S’= 2, ‘Q’= 1 이라고 되어 있는데, <code>Q</code>+<code>Q</code>=<code>S</code>가 된다라고 학습해버린다</p><p>그렇기 때문에, 우리는 <font color="blue">각 unique value를 별도의 column으로 분리하고, 값에 해당하는 column는 <strong>True (1)</strong>, 나머지 column는 <strong>False (0)</strong> 를 갖게 한다</font>.이것이 바로 <strong>원 핫 인코딩</strong> 이다.</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked'</span>][:<span class="number">6</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    S1    C2    S3    S4    S5    QName: Embarked, dtype: object</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'Embarked_num'</span>][:<span class="number">6</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    21    02    23    24    25    1Name: Embarked_num, dtype: int32</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_hot = pd.get_dummies(train[<span class="string">'Embarked_num'</span>][:<span class="number">6</span>])</span><br><span class="line">one_hot</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_hot.columns = [<span class="string">'C'</span>, <span class="string">'Q'</span>, <span class="string">'S'</span>]</span><br><span class="line">one_hot</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>Q</th>      <th>S</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><br><p><strong>원핫인코딩</strong>은 카테고리의 특성을(계절, 항구, 성별, 종류…) 가지는 column에 대해서 적용한다</p><p><br>  <br></p><h3 id="5-normalize-정규화"><a class="markdownIt-Anchor" href="#5-normalize-정규화"></a> 5. Normalize (정규화)</h3><p><strong>정규화:</strong> column간에 다른 min,max 값을 가지는 경우, 정규화를 통해 min / max 의 척도를 맞추어 주는 작업이다</p><blockquote><p>sklearn.preprocessing  --&gt;  MinMaxScaler()</p></blockquote>  <br><p><strong>예: 영화평점</strong></p><ul><li>네이버 영화평점 (0점 ~ 10점): [2, 4, 6, 8, 10]</li><li>넷플릭스 영화평점 (0점 ~ 5점): [1, 2, 3, 4, 5]</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movie = {<span class="string">'naver'</span>: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">         <span class="string">'netflix'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movie = pd.DataFrame(data=movie)</span><br><span class="line">movie</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>naver</th>      <th>netflix</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>8</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>10</td>      <td>5</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min_max_scaler = MinMaxScaler()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min_max_movie = min_max_scaler.fit_transform(movie)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(min_max_movie, columns = [<span class="string">'naver'</span>, <span class="string">'netfllix'</span>])</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>naver</th>      <th>netfllix</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.00</td>      <td>0.00</td>    </tr>    <tr>      <th>1</th>      <td>0.25</td>      <td>0.25</td>    </tr>    <tr>      <th>2</th>      <td>0.50</td>      <td>0.50</td>    </tr>    <tr>      <th>3</th>      <td>0.75</td>      <td>0.75</td>    </tr>    <tr>      <th>4</th>      <td>1.00</td>      <td>1.00</td>    </tr>  </tbody></table></div><br>  <br><h3 id="6-standard-scaling-표준화"><a class="markdownIt-Anchor" href="#6-standard-scaling-표준화"></a> 6. Standard Scaling (표준화)</h3><p><strong>표준화:</strong> 평균이 0, 표준편차가 1이 되도록 변환해주는 작업</p><blockquote><p>sklearn.preprocessing  --&gt;  StandardScaler()</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">standard_scaler = StandardScaler()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 샘플데이터 생성</span></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x[<span class="number">9</span>] = <span class="number">1000</span>   <span class="comment"># oulier 추가</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.mean(), x.std()</span><br></pre></td></tr></tbody></table></figure><pre><code>(103.6, 298.8100399919654)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 원본 데이터 표준화하기</span></span><br><span class="line">scaled = standard_scaler.fit_transform(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scaled.mean(), scaled.std()</span><br></pre></td></tr></tbody></table></figure><pre><code>(4.4408920985006264e-17, 1.0)</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(scaled.mean(), <span class="number">2</span>), scaled.std()  <span class="comment"># mean값 반올림</span></span><br></pre></td></tr></tbody></table></figure><pre><code>(0.0, 1.0)</code></pre><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;전처리-pre-processing&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#전처리-pre-processing&quot;&gt;&lt;/a&gt; &lt;strong&gt;전처리 (Pre-Processing)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;&lt;
      
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="전처리" scheme="https://hyemin-kim.github.io/tags/%EC%A0%84%EC%B2%98%EB%A6%AC/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; sklearn -(0) sklearn 개요</title>
    <link href="https://hyemin-kim.github.io/2020/07/17/S-Python-sklearn0/"/>
    <id>https://hyemin-kim.github.io/2020/07/17/S-Python-sklearn0/</id>
    <published>2020-07-17T07:36:59.000Z</published>
    <updated>2020-07-17T08:23:44.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scikit-learn-개요"><a class="markdownIt-Anchor" href="#scikit-learn-개요"></a> <strong>scikit-learn 개요</strong></h1><p></p><ul class="markdownIt-TOC"><li><a href="#install-package"><strong>Install Package</strong></a></li><li><a href="#import-functions-from-sub-packages"><strong>Import Functions from Sub-packages</strong></a></li><li><a href="#3-steps-to-fit-model-and-do-prediction"><strong>3 Steps to Fit Model and Do Prediction</strong></a></li></ul><p></p><br><blockquote><p><a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">&lt; scikit-learn &gt; Homepage</a></p></blockquote><p>scikit-learn 패키지는 지도학습, 비지도학습 등 대부분의 머신러닝 알고리즘을 제공하고 있으며, Python에서 머신러닝을 수행할 때 굉장히 많이 쓰이는 패키지 중의 하나다</p><p><img src="/images/S-Python-sklearn0/NzXkk9.png" alt="sk_learn"></p>  <br><h2 id="install-package"><a class="markdownIt-Anchor" href="#install-package"></a> <strong>Install Package</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U scikit-learn  <span class="comment"># -U: Update</span></span><br></pre></td></tr></tbody></table></figure><pre><code>Note: you may need to restart the kernel to use updated packages.</code></pre><p>​</p><pre><code>Usage:     D:\Anaconda\python.exe -m pip install [options] &lt;requirement specifier&gt; [package-index-options] ...  D:\Anaconda\python.exe -m pip install [options] -r &lt;requirements file&gt; [package-index-options] ...  D:\Anaconda\python.exe -m pip install [options] [-e] &lt;vcs project url&gt; ...  D:\Anaconda\python.exe -m pip install [options] [-e] &lt;local project path&gt; ...  D:\Anaconda\python.exe -m pip install [options] &lt;archive url/path&gt; ...no such option: -:</code></pre><br><h2 id="import-functions-from-sub-packages"><a class="markdownIt-Anchor" href="#import-functions-from-sub-packages"></a> <strong>Import Functions from Sub-packages</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="3-steps-to-fit-model-and-do-prediction"><a class="markdownIt-Anchor" href="#3-steps-to-fit-model-and-do-prediction"></a> <strong>3 Steps to Fit Model and Do Prediction</strong></h2><p><strong>STEP 1. 모델 정의</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>STEP 2. 학습 (Fit in Training set)</strong></p><ul><li>명령어:  <em>model_name</em> <font color="red">.fit</font></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(x_train, y_train)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>STEP 3. 예측 (Predict in Test set)</strong></p><ul><li>명령어: <em>model_name</em> <font color="red">.predict</font></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = model.predict(x_test)</span><br></pre></td></tr></tbody></table></figure><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scikit-learn-개요&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#scikit-learn-개요&quot;&gt;&lt;/a&gt; &lt;strong&gt;scikit-learn 개요&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;m
      
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="sklearn" scheme="https://hyemin-kim.github.io/tags/sklearn/"/>
    
      <category term="Machine Learning" scheme="https://hyemin-kim.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Seaborn - (2) 통계 기반의 시각화</title>
    <link href="https://hyemin-kim.github.io/2020/07/03/S-Python-Seaborn2/"/>
    <id>https://hyemin-kim.github.io/2020/07/03/S-Python-Seaborn2/</id>
    <published>2020-07-03T10:18:20.000Z</published>
    <updated>2020-07-03T13:19:50.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="통계-기반의-시각화"><a class="markdownIt-Anchor" href="#통계-기반의-시각화"></a> 통계 기반의 시각화</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%ED%86%B5%EA%B3%84-%EA%B8%B0%EB%B0%98%EC%9D%98-%EC%8B%9C%EA%B0%81%ED%99%94%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%B4%EC%A3%BC%EB%8A%94-seaborn"><strong>0. 통계 기반의 시각화를 제공해주는 Seaborn</strong></a></li><li><a href="#1-countplot"><strong>1. countplot</strong></a><ul><li><a href="#1-1-%EC%84%B8%EB%A1%9C%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0">1-1. 세로로 그리기</a></li><li><a href="#1-2-%EA%B0%80%EB%A1%9C%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0">1-2. 가로로 그리기</a></li><li><a href="#1-3-%EC%83%89%EC%83%81-%ED%8C%94%EB%A0%88%ED%8A%B8-%EC%84%A4%EC%A0%95">1-3. 색상 팔레트 설정</a></li></ul></li><li><a href="#2-distplot"><strong>2. distplot</strong></a><ul><li><a href="#2-1-%EA%B8%B0%EB%B3%B8-displot">2-1. 기본 displot</a></li><li><a href="#2-2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-series%EC%9D%BC-%EA%B2%BD%EC%9A%B0">2-2. 데이터가 Series일 경우</a></li><li><a href="#2-3-rugplot">2-3. rugplot</a></li><li><a href="#2-4-kde-kernel-density">2-4. kde (kernel density)</a></li><li><a href="#2-5-%EA%B0%80%EB%A1%9C%EB%A1%9C-%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0">2-5. 가로로 표현하기</a></li><li><a href="#2-6-%EC%BB%AC%EB%9F%AC-%EB%B0%94%EA%BE%B8%EA%B8%B0">2-6. 컬러 바꾸기</a></li></ul></li><li><a href="#3-heatmap"><strong>3. heatmap</strong></a><ul><li><a href="#3-1-%EA%B8%B0%EB%B3%B8-heatmap">3-1. 기본 heatmap</a></li><li><a href="#3-2-pivot-table%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B7%B8%EB%A6%AC%EA%B8%B0">3-2. pivot table을 활용하여 그리기</a></li><li><a href="#3-3-correlation%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84%EB%A5%BC-%EC%8B%9C%EA%B0%81%ED%99%94">3-3. correlation(상관관계)를 시각화</a></li></ul></li><li><a href="#4-pairplot"><strong>4. pairplot</strong></a><ul><li><a href="#4-1-%EA%B8%B0%EB%B3%B8-pairplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">4-1. 기본 pairplot 그리기</a></li><li><a href="#4-2-hue-%EC%98%B5%EC%85%98%EC%9C%BC%EB%A1%9C-%ED%8A%B9%EC%84%B1-%EA%B5%AC%EB%B6%84">4-2. hue 옵션으로 특성 구분</a></li><li><a href="#4-3-%EC%BB%AC%EB%9F%AC-%ED%8C%94%EB%A0%88%ED%8A%B8-%EC%A0%81%EC%9A%A9">4-3. 컬러 팔레트 적용</a></li><li><a href="#4-4-%EC%82%AC%EC%9D%B4%EC%A6%88-%EC%A0%81%EC%9A%A9">4-4. 사이즈 적용</a></li></ul></li><li><a href="#5-violinplot"><strong>5. violinplot</strong></a><ul><li><a href="#5-1-%EA%B8%B0%EB%B3%B8-violinplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">5-1. 기본 violinplot 그리기</a></li><li><a href="#5-2-%EB%B9%84%EA%B5%90-%EB%B6%84%ED%8F%AC-%ED%99%95%EC%9D%B8">5-2. 비교 분포 확인</a></li><li><a href="#5-3-%EA%B0%80%EB%A1%9C%EB%A1%9C-%EB%89%98%EC%9D%B8-violinplot">5-3. 가로로 뉘인 violinplot</a></li><li><a href="#5-4-hue-%EC%98%B5%EC%85%98%EC%9C%BC%EB%A1%9C-%EB%B6%84%ED%8F%AC-%EB%B9%84%EA%B5%90">5-4. hue 옵션으로 분포 비교</a></li></ul></li><li><a href="#6-lmplot"><strong>6. lmplot</strong></a><ul><li><a href="#6-1-%EA%B8%B0%EB%B3%B8-lmplot">6-1. 기본 lmplot</a></li><li><a href="#6-2-hue-%EC%98%B5%EC%85%98%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EC%A4%91-%EC%84%A0%ED%98%95%EA%B4%80%EA%B3%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0">6-2. hue 옵션으로 다중 선형관계 그리기</a></li><li><a href="#6-3-col-%EC%98%B5%EC%85%98%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EC%97%AC-%EA%B7%B8%EB%9E%98%ED%94%84%EB%A5%BC-%EB%B3%84%EB%8F%84%EB%A1%9C-%EA%B7%B8%EB%A0%A4%EB%B3%BC-%EC%88%98-%EC%9E%88%EB%8B%A4">6-3. col 옵션을 추가하여 그래프를 별도로 그려볼 수 있다</a></li></ul></li><li><a href="#7-relplot"><strong>7. relplot</strong></a><ul><li><a href="#7-1-%EA%B8%B0%EB%B3%B8-relplot">7-1. 기본 relplot</a></li><li><a href="#7-2-col-%EC%98%B5%EC%85%98%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%9E%98%ED%94%84-%EB%B6%84%ED%95%A0">7-2. col 옵션으로 그래프 분할</a></li><li><a href="#7-3-row%EC%99%80-column%EC%97%90-%ED%91%9C%EA%B8%B0%ED%95%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-column-%EC%84%A0%ED%83%9D">7-3. row와 column에 표기할 데이터 column 선택</a></li><li><a href="#7-4-%EC%BB%AC%EB%9F%AC-%ED%8C%94%EB%A0%88%ED%8A%B8-%EC%A0%81%EC%9A%A9">7-4. 컬러 팔레트 적용</a></li></ul></li><li><a href="#8-jointplot"><strong>8. jointplot</strong></a><ul><li><a href="#8-1-%EA%B8%B0%EB%B3%B8-jointplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">8-1. 기본 jointplot 그리기</a></li><li><a href="#8-2-%EC%84%A0%ED%98%95%EA%B4%80%EA%B3%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-regression-%EB%9D%BC%EC%9D%B8-%EA%B7%B8%EB%A6%AC%EA%B8%B0">8-2. 선형관계를 표현하는 regression 라인 그리기</a></li><li><a href="#8-3-hex-%EB%B0%80%EB%8F%84-%EB%B3%B4%EA%B8%B0">8-3. hex 밀도 보기</a></li><li><a href="#8-4-%EB%93%B1%EA%B3%A0%EC%84%A0-%EB%AA%A8%EC%96%91%EC%9C%BC%EB%A1%9C-%EB%B0%80%EC%A7%91%EB%8F%84-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0">8-4. 등고선 모양으로 밀집도 확인하기</a></li></ul></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = (<span class="number">9</span>, <span class="number">6</span>)  <span class="comment"># figure size 설정</span></span><br><span class="line">plt.rcParams[<span class="string">"font.size"</span>] = <span class="number">14</span>  <span class="comment"># fontsize 설정</span></span><br></pre></td></tr></tbody></table></figure> <br> <h2 id="0-통계-기반의-시각화를-제공해주는-seaborn"><a class="markdownIt-Anchor" href="#0-통계-기반의-시각화를-제공해주는-seaborn"></a> <strong>0. 통계 기반의 시각화를 제공해주는 Seaborn</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/api.html" target="_blank" rel="noopener">Seaborn 공식 도큐먼트</a></p></blockquote><p>seaborn 라이브러리가  매력적인 이유는 바로 <strong>통계 차트</strong>다.</p><p>이번 실습에서는 seaborn의 다양한 통계 차트 중 대표적인 차트 몇 개를 뽑아서 다뤄볼 예정이다.</p><p>그럼 먼저 실습에 사용되는 Dataset을 한번 살펴볼게요.</p> <br> <p><strong>Dataset — "Titanic"</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">titanic = sns.load_dataset(<span class="string">'titanic'</span>)</span><br><span class="line">titanic</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>sex</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>      <th>embarked</th>      <th>class</th>      <th>who</th>      <th>adult_male</th>      <th>deck</th>      <th>embark_town</th>      <th>alive</th>      <th>alone</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Cherbourg</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>Third</td>      <td>woman</td>      <td>False</td>      <td>NaN</td>      <td>Southampton</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Southampton</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>True</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>886</th>      <td>0</td>      <td>2</td>      <td>male</td>      <td>27.0</td>      <td>0</td>      <td>0</td>      <td>13.0000</td>      <td>S</td>      <td>Second</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>True</td>    </tr>    <tr>      <th>887</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>19.0</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>S</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>B</td>      <td>Southampton</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>888</th>      <td>0</td>      <td>3</td>      <td>female</td>      <td>NaN</td>      <td>1</td>      <td>2</td>      <td>23.4500</td>      <td>S</td>      <td>Third</td>      <td>woman</td>      <td>False</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>False</td>    </tr>    <tr>      <th>889</th>      <td>1</td>      <td>1</td>      <td>male</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>30.0000</td>      <td>C</td>      <td>First</td>      <td>man</td>      <td>True</td>      <td>C</td>      <td>Cherbourg</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>890</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>32.0</td>      <td>0</td>      <td>0</td>      <td>7.7500</td>      <td>Q</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Queenstown</td>      <td>no</td>      <td>True</td>    </tr>  </tbody></table></div><p>891 rows × 15 columns</p></div><br><ul><li><p>survived: 생존여부</p></li><li><p>pclass: 좌석등급 (숫자)</p></li><li><p>sex: 성별</p></li><li><p>age: 나이</p></li><li><p>sibsp: 형제자매 + 배우자 숫자</p></li><li><p>parch: 부모 + 자식 숫자</p></li><li><p>fare: 요금</p></li><li><p>embarked: 탑승 항구</p></li><li><p>class: 좌석등급 (영문)</p></li><li><p>who: 사람 구분</p></li><li><p>deck: 데크</p></li><li><p>embark_town: 탑승 항구 (영문)</p></li><li><p>alive: 생존여부 (영문)</p></li><li><p>alone: 혼자인지 여부</p><br></li></ul><p><strong>Dataset — "tips"</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">tips</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>239</th>      <td>29.03</td>      <td>5.92</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>240</th>      <td>27.18</td>      <td>2.00</td>      <td>Female</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>241</th>      <td>22.67</td>      <td>2.00</td>      <td>Male</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>242</th>      <td>17.82</td>      <td>1.75</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>243</th>      <td>18.78</td>      <td>3.00</td>      <td>Female</td>      <td>No</td>      <td>Thur</td>      <td>Dinner</td>      <td>2</td>    </tr>  </tbody></table><p>244 rows × 7 columns</p></div><br><ul><li><p>total_bill: 총 합계 요금표</p></li><li><p>tip: 팁</p></li><li><p>sex: 성별</p></li><li><p>smoker: 흡연자 여부</p></li><li><p>day: 요일</p></li><li><p>time: 식사 시간</p></li><li><p>size: 식사 인원</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 배경 설정</span></span><br><span class="line">sns.set(style=<span class="string">'darkgrid'</span>)</span><br></pre></td></tr></tbody></table></figure><br>  <h2 id="1-countplot"><a class="markdownIt-Anchor" href="#1-countplot"></a> <strong>1. countplot</strong></h2><p>항목별 갯수를 세어주는 <code>countplot</code></p><ul><li>해당 column을 구성하고 있는 value들을 자동으로 구분하여 보여준다</li></ul><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.countplot.html" target="_blank" rel="noopener">&lt;sns.countplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.countplot</strong> ( <em>x=None, y=None, hue=None, data=None, color=None, palette=None</em> )</p></blockquote> <br> <h3 id="1-1-세로로-그리기"><a class="markdownIt-Anchor" href="#1-1-세로로-그리기"></a> 1-1. 세로로 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=<span class="string">'class'</span>, hue=<span class="string">'who'</span>, data=titanic)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_26_0.png" alt="png"></p><br><h3 id="1-2-가로로-그리기"><a class="markdownIt-Anchor" href="#1-2-가로로-그리기"></a> 1-2. 가로로 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(y=<span class="string">'class'</span>, hue=<span class="string">'who'</span>, data=titanic)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_29_0.png" alt="png"></p><br><h3 id="1-3-색상-팔레트-설정"><a class="markdownIt-Anchor" href="#1-3-색상-팔레트-설정"></a> 1-3. 색상 팔레트 설정</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=<span class="string">'class'</span>, hue=<span class="string">'who'</span>, palette=<span class="string">'copper'</span>, data= titanic)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_32_0.png" alt="png"></p><br><br><h2 id="2-distplot"><a class="markdownIt-Anchor" href="#2-distplot"></a> <strong>2. distplot</strong></h2><p>matplotlib의 <code>hist</code>그래프와 <code>kdeplot</code>을 통합한 그래프다.<br><strong>분포</strong>와 <strong>밀도</strong>를 확인할 수 있음</p><br><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.distplot.html?highlight=distplot#seaborn.distplot" target="_blank" rel="noopener">&lt;sns.distplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.displot</strong> ( <em>a, hist=True, kde=True, rug=False, vertical=False, color=None</em> )</p><ul><li>hist: histogram</li><li>kde: kernel density estimate</li><li>rug: rugplot</li><li>vertical: If True, observed values are on y-axis</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 샘플 데이터 생성</span></span><br><span class="line">x = np.random.randn(<span class="number">100</span>)</span><br><span class="line">x</span><br></pre></td></tr></tbody></table></figure><pre><code>array([-3.39765920e-01, -1.48664049e+00, -5.57926444e-01,  3.25206560e-01,       -7.46665762e-01, -3.10926812e-01, -2.14536012e+00,  1.25905620e+00,       -2.07806423e-01,  5.56377038e-01, -2.20574498e+00, -1.15138577e-01,       -3.32417471e-01,  1.13927613e-01, -7.29559442e-01, -1.31243715e+00,       -8.27477111e-01, -1.24455099e+00, -5.44035731e-02, -1.85399773e+00,       -1.62571613e+00,  3.89312791e-01,  1.26815698e+00, -7.43355761e-01,       -1.34113997e+00,  2.67291801e-02, -4.74142344e-01, -1.07662894e+00,       -2.35607451e+00,  1.90337236e-01, -1.18577255e+00, -1.23238300e+00,        9.39298755e-01, -2.69078751e-01, -3.50418097e-01,  1.92109121e+00,       -1.46520490e-01,  3.90810577e-01, -6.60511307e-01, -1.46288431e+00,        1.26314685e+00,  2.38384651e-01,  8.03730080e-01,  2.83340226e-01,       -1.24219159e+00, -1.50458389e+00, -1.60213592e-01,  3.97086657e-01,        1.27321390e-01, -1.13722876e+00, -1.48448425e+00,  1.36136226e+00,       -2.34669327e-01, -1.32679409e+00,  1.59032718e+00,  7.53779845e-01,       -7.48815568e-01,  7.34822673e-03,  5.57358372e-01,  1.78429993e+00,       -1.50510591e+00, -3.87983571e-01, -7.57372493e-01,  6.25354827e-01,        1.44857563e-01,  7.78608476e-01, -6.61441801e-02, -1.24836018e+00,        1.77522984e+00,  1.60497019e-01, -1.18893624e+00,  1.93951152e+00,       -9.34504796e-01,  1.82000588e+00, -1.91594654e+00, -1.13118210e+00,       -4.13371342e-01, -5.07021131e-01,  1.57792370e+00, -2.52509848e+00,        1.86695906e-01, -1.18412859e+00,  1.49572473e-01, -3.53669860e-01,        1.38877682e+00,  2.53212949e-02,  7.79387552e-01, -7.41508306e-01,        4.10007279e-01,  1.96517288e-02, -5.69215198e-01,  1.45113980e+00,       -8.80722624e-01,  1.35468793e+00, -1.67677998e-03, -1.14952039e+00,        8.90718244e-01, -4.10411520e-01,  6.17620908e-01,  2.96993057e-01])</code></pre><br><h3 id="2-1-기본-displot"><a class="markdownIt-Anchor" href="#2-1-기본-displot"></a> 2-1. 기본 displot</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x)  <span class="comment"># x: numpy array</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_43_0.png" alt="png"></p><br><h3 id="2-2-데이터가-series일-경우"><a class="markdownIt-Anchor" href="#2-2-데이터가-series일-경우"></a> 2-2. 데이터가 Series일 경우</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = pd.Series(x, name=<span class="string">'x variable'</span>)</span><br><span class="line">x</span><br></pre></td></tr></tbody></table></figure><pre><code>0    -0.3397661    -1.4866402    -0.5579263     0.3252074    -0.746666        ...   95   -1.14952096    0.89071897   -0.41041298    0.61762199    0.296993Name: x variable, Length: 100, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x)  <span class="comment"># x: Series</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_47_0.png" alt="png"></p><p>x가 Seires일 때는:  그래프에서 x label이 자동으로 Series 이름(column name) 으로 나타남</p><br>  <h3 id="2-3-rugplot"><a class="markdownIt-Anchor" href="#2-3-rugplot"></a> 2-3. rugplot</h3><p>데이터 위치를 x축 위에 <strong>작은 선분(rug)으로 나타내어</strong> 데이터들의 위치 밒 분포를 보여준다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, rug=<span class="literal">True</span>, hist=<span class="literal">False</span>, kde=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_52_0.png" alt="png"></p><br><h3 id="2-4-kde-kernel-density"><a class="markdownIt-Anchor" href="#2-4-kde-kernel-density"></a> 2-4. kde (kernel density)</h3><p>kde 는 histogram보다 <strong>부드러운 형태의 분포 곧선</strong>을 보여주는 방법</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, rug=<span class="literal">False</span>, hist=<span class="literal">False</span>, kde=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_56_0.png" alt="png"></p><br><h3 id="2-5-가로로-표현하기"><a class="markdownIt-Anchor" href="#2-5-가로로-표현하기"></a> 2-5. 가로로 표현하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, vertical=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_59_0.png" alt="png"></p><br><h3 id="2-6-컬러-바꾸기"><a class="markdownIt-Anchor" href="#2-6-컬러-바꾸기"></a> 2-6. 컬러 바꾸기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, color=<span class="string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_62_0.png" alt="png"></p><br><br><h2 id="3-heatmap"><a class="markdownIt-Anchor" href="#3-heatmap"></a> <strong>3. heatmap</strong></h2><p>색상으로 표현할 수 있는 다양한 정보를 <strong>일정한 이미지위에 열분포 형태의 비쥬얼한 그래픽</strong>으로 출력하는 것이 특정이다</p><p><strong>주로 활용되는 경우:</strong></p><ol><li>pivot table의 데이터를 시각화할 때</li><li>데이터의 상관관계를 살펴볼 때</li></ol><br><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.heatmap.html?highlight=heatmap#seaborn.heatmap" target="_blank" rel="noopener"> &lt;sns.heatmap&gt; Document</a></p></blockquote><blockquote><p><strong>sns.heatmap</strong> ( <em>data, annot=None, cmap=None</em> )</p><ul><li>annot: If True, write the data value in each cell</li></ul></blockquote>  <br><h3 id="3-1-기본-heatmap"><a class="markdownIt-Anchor" href="#3-1-기본-heatmap"></a> 3-1. 기본 heatmap</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniform_data = np.random.rand(<span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">sns.heatmap(uniform_data, annot=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_72_0.png" alt="png"></p><p>컬러가 진할수록 숫자가 0에 가깝고, 연할수록 1에 가깝다</p>  <br><h3 id="3-2-pivot-table을-활용하여-그리기"><a class="markdownIt-Anchor" href="#3-2-pivot-table을-활용하여-그리기"></a> 3-2. pivot table을 활용하여 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>239</th>      <td>29.03</td>      <td>5.92</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>240</th>      <td>27.18</td>      <td>2.00</td>      <td>Female</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>241</th>      <td>22.67</td>      <td>2.00</td>      <td>Male</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>242</th>      <td>17.82</td>      <td>1.75</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>243</th>      <td>18.78</td>      <td>3.00</td>      <td>Female</td>      <td>No</td>      <td>Thur</td>      <td>Dinner</td>      <td>2</td>    </tr>  </tbody></table><p>244 rows × 7 columns</p></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pivot = tips.pivot_table(index=<span class="string">'day'</span>, columns=<span class="string">'size'</span>, values=<span class="string">'tip'</span>)</span><br><span class="line">pivot</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th>size</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>    </tr>    <tr>      <th>day</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Thur</th>      <td>1.83</td>      <td>2.442500</td>      <td>2.692500</td>      <td>4.218000</td>      <td>5.000000</td>      <td>5.3</td>    </tr>    <tr>      <th>Fri</th>      <td>1.92</td>      <td>2.644375</td>      <td>3.000000</td>      <td>4.730000</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>Sat</th>      <td>1.00</td>      <td>2.517547</td>      <td>3.797778</td>      <td>4.123846</td>      <td>3.000000</td>      <td>NaN</td>    </tr>    <tr>      <th>Sun</th>      <td>NaN</td>      <td>2.816923</td>      <td>3.120667</td>      <td>4.087778</td>      <td>4.046667</td>      <td>5.0</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.heatmap(pivot, cmap=<span class="string">'Blues'</span>, annot=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_78_0.png" alt="png"></p><br><h3 id="3-3-correlation상관관계를-시각화"><a class="markdownIt-Anchor" href="#3-3-correlation상관관계를-시각화"></a> 3-3. correlation(상관관계)를 시각화</h3><p><strong>corr()</strong> 함수는 데이터의 상관관계를 보여줌</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.corr()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>      <th>adult_male</th>      <th>alone</th>    </tr>  </thead>  <tbody>    <tr>      <th>survived</th>      <td>1.000000</td>      <td>-0.338481</td>      <td>-0.077221</td>      <td>-0.035322</td>      <td>0.081629</td>      <td>0.257307</td>      <td>-0.557080</td>      <td>-0.203367</td>    </tr>    <tr>      <th>pclass</th>      <td>-0.338481</td>      <td>1.000000</td>      <td>-0.369226</td>      <td>0.083081</td>      <td>0.018443</td>      <td>-0.549500</td>      <td>0.094035</td>      <td>0.135207</td>    </tr>    <tr>      <th>age</th>      <td>-0.077221</td>      <td>-0.369226</td>      <td>1.000000</td>      <td>-0.308247</td>      <td>-0.189119</td>      <td>0.096067</td>      <td>0.280328</td>      <td>0.198270</td>    </tr>    <tr>      <th>sibsp</th>      <td>-0.035322</td>      <td>0.083081</td>      <td>-0.308247</td>      <td>1.000000</td>      <td>0.414838</td>      <td>0.159651</td>      <td>-0.253586</td>      <td>-0.584471</td>    </tr>    <tr>      <th>parch</th>      <td>0.081629</td>      <td>0.018443</td>      <td>-0.189119</td>      <td>0.414838</td>      <td>1.000000</td>      <td>0.216225</td>      <td>-0.349943</td>      <td>-0.583398</td>    </tr>    <tr>      <th>fare</th>      <td>0.257307</td>      <td>-0.549500</td>      <td>0.096067</td>      <td>0.159651</td>      <td>0.216225</td>      <td>1.000000</td>      <td>-0.182024</td>      <td>-0.271832</td>    </tr>    <tr>      <th>adult_male</th>      <td>-0.557080</td>      <td>0.094035</td>      <td>0.280328</td>      <td>-0.253586</td>      <td>-0.349943</td>      <td>-0.182024</td>      <td>1.000000</td>      <td>0.404744</td>    </tr>    <tr>      <th>alone</th>      <td>-0.203367</td>      <td>0.135207</td>      <td>0.198270</td>      <td>-0.584471</td>      <td>-0.583398</td>      <td>-0.271832</td>      <td>0.404744</td>      <td>1.000000</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.heatmap(titanic.corr(), annot=<span class="literal">True</span>, cmap=<span class="string">'YlGnBu'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_83_0.png" alt="png"></p><br><br><h2 id="4-pairplot"><a class="markdownIt-Anchor" href="#4-pairplot"></a> <strong>4. pairplot</strong></h2><p>pairplot은 grid 형태로 각 <strong>집합의 조합에 대해 히스토그램과 분포도</strong>를 그린다.<br>(숫자형 column에 대해서만 그려줌)</p><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.pairplot.html?highlight=pairplot#seaborn.pairplot" target="_blank" rel="noopener">&lt;sns.pairplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.pairplot</strong> ( <em>data, hue=None, palette=None, height=2.5</em> )</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>  </tbody></table></div><br><h3 id="4-1-기본-pairplot-그리기"><a class="markdownIt-Anchor" href="#4-1-기본-pairplot-그리기"></a> 4-1. 기본 pairplot 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_94_0.png" alt="png"></p><br><h3 id="4-2-hue-옵션으로-특성-구분"><a class="markdownIt-Anchor" href="#4-2-hue-옵션으로-특성-구분"></a> 4-2. hue 옵션으로 특성 구분</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips, hue=<span class="string">'size'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_97_0.png" alt="png"></p><br><h3 id="4-3-컬러-팔레트-적용"><a class="markdownIt-Anchor" href="#4-3-컬러-팔레트-적용"></a> 4-3. 컬러 팔레트 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips, hue=<span class="string">'size'</span>, palette=<span class="string">'rainbow'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_100_0.png" alt="png"></p><br><h3 id="4-4-사이즈-적용"><a class="markdownIt-Anchor" href="#4-4-사이즈-적용"></a> 4-4. 사이즈 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips, hue=<span class="string">'size'</span>, palette=<span class="string">'rainbow'</span>, height=<span class="number">4</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_103_0.png" alt="png"></p><br><br><h2 id="5-violinplot"><a class="markdownIt-Anchor" href="#5-violinplot"></a> <strong>5. violinplot</strong></h2><p>마이올린처럼 생긴 violinplot다.</p><p>column에 대한 <strong>데이터의 비교 분포도</strong>를 확인할 수 있다.</p><ul><li>곡선형 부분 (뚱뚱한 부분)은 데이터의 분포를 나타냄</li><li>양쪽 끝 뾰족한 부분은 데이터의 최소값과 최대값을 나타냄</li></ul><br><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.violinplot.html" target="_blank" rel="noopener">&lt;sns.violinplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.violinplot</strong> ( <em>x=None. y=None, hue=None, data=None, split=False</em> )</p><ul><li><strong>split:</strong> When using hue nesting with a variable that takes two levels, setting split to True will draw half of a violin for each level. This can make it easier to directly compare the distributions.</li></ul></blockquote> <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>  </tbody></table></div><br><h3 id="5-1-기본-violinplot-그리기"><a class="markdownIt-Anchor" href="#5-1-기본-violinplot-그리기"></a> 5-1. 기본 violinplot 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=tips[<span class="string">'total_bill'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_113_0.png" alt="png"></p><br><h3 id="5-2-비교-분포-확인"><a class="markdownIt-Anchor" href="#5-2-비교-분포-확인"></a> 5-2. 비교 분포 확인</h3><p>x, y축을 지정해줌으로써 바이올린을 분할하여 <strong>비교 분포</strong>를 볼 수 있다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=<span class="string">'day'</span>, y=<span class="string">'total_bill'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_117_0.png" alt="png"></p><br><h3 id="5-3-가로로-뉘인-violinplot"><a class="markdownIt-Anchor" href="#5-3-가로로-뉘인-violinplot"></a> 5-3. 가로로 뉘인 violinplot</h3><ul><li>x축, y축 변경</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(y=<span class="string">'day'</span>, x=<span class="string">'total_bill'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_120_0.png" alt="png"></p><br><h3 id="5-4-hue-옵션으로-분포-비교"><a class="markdownIt-Anchor" href="#5-4-hue-옵션으로-분포-비교"></a> 5-4. hue 옵션으로 분포 비교</h3><p>사실 hue옵션을 사용하지 않으면 바이올린이 대칭이기 때문에 분포의 큰 의미는 없다.<br>하지만, hue옵션을 주면, <strong>단일 column에 대한 바이올린 모양의 비교</strong>를 할 수 있다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=<span class="string">'day'</span>, y=<span class="string">'total_bill'</span>, hue=<span class="string">'smoker'</span>, data=tips, palette=<span class="string">'muted'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_124_0.png" alt="png"></p><br><p><strong>split 옵션으로 바이올린을 합쳐서 볼 수 있다</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=<span class="string">'day'</span>, y=<span class="string">'total_bill'</span>, hue=<span class="string">'smoker'</span>, data=tips, palette=<span class="string">'muted'</span>, split=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_127_0.png" alt="png"></p><p>violinplot은 이런 경우에 많이 활용된다</p><p><br> <br></p><h2 id="6-lmplot"><a class="markdownIt-Anchor" href="#6-lmplot"></a> <strong>6. lmplot</strong></h2><p>lmport (<em>initial: 소문자 L</em>) 은 column간의 <strong>선형관계를 확인하기에 용이한 차트</strong>임.<br>또한, <strong>outlier</strong>도 같이 짐작해 볼 수 있다.</p><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.lmplot.html" target="_blank" rel="noopener">&lt;sns.lmplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.lmplot</strong> ( <em>x, y, data, hue=None, col=None, col_wrap=None, row=None, height=5</em> )</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>  </tbody></table></div><br><h3 id="6-1-기본-lmplot"><a class="markdownIt-Anchor" href="#6-1-기본-lmplot"></a> 6-1. 기본 lmplot</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, data=tips, height=<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_138_0.png" alt="png"></p><br><h3 id="6-2-hue-옵션으로-다중-선형관계-그리기"><a class="markdownIt-Anchor" href="#6-2-hue-옵션으로-다중-선형관계-그리기"></a> 6-2. hue 옵션으로 다중 선형관계 그리기</h3><p>아래의 그래프를 통하여 비흡연자가, 흡연자 대비 좀 더 <strong>가파른 선형관계</strong>를 가지는 것을 볼 수 있다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, hue=<span class="string">'smoker'</span>, data=tips, height=<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_142_0.png" alt="png"></p><br><h3 id="6-3-col-옵션을-추가하여-그래프를-별도로-그려볼-수-있다"><a class="markdownIt-Anchor" href="#6-3-col-옵션을-추가하여-그래프를-별도로-그려볼-수-있다"></a> 6-3. col 옵션을 추가하여 그래프를 별도로 그려볼 수 있다</h3><p>또한, <code>col_wrap</code>으로 한 줄에 표기할 column의 갯수를 명시할 수 있다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, hue=<span class="string">'smoker'</span>, col=<span class="string">'day'</span>, col_wrap=<span class="number">2</span>, data=tips, height=<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_146_0.png" alt="png"></p><br><br><h2 id="7-relplot"><a class="markdownIt-Anchor" href="#7-relplot"></a> <strong>7. relplot</strong></h2><p>두 column간 상관관계를 보지만 <code>lmport</code>처럼 선형관계를 따로 그려주지 않다</p><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.relplot.html?highlight=relplot#seaborn.relplot" target="_blank" rel="noopener">&lt;sns.replot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.relplot</strong> ( <em>x, y, data, hue=None, col=None, row=None, height=5, palette=None</em> )</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>  </tbody></table></div><br>  <h3 id="7-1-기본-relplot"><a class="markdownIt-Anchor" href="#7-1-기본-relplot"></a> 7-1. 기본 relplot</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, hue=<span class="string">'day'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_157_0.png" alt="png"></p><br><h3 id="7-2-col-옵션으로-그래프-분할"><a class="markdownIt-Anchor" href="#7-2-col-옵션으로-그래프-분할"></a> 7-2. col 옵션으로 그래프 분할</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, hue=<span class="string">'day'</span>, col=<span class="string">'time'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_160_0.png" alt="png"></p><br><h3 id="7-3-row와-column에-표기할-데이터-column-선택"><a class="markdownIt-Anchor" href="#7-3-row와-column에-표기할-데이터-column-선택"></a> 7-3. row와 column에 표기할 데이터 column 선택</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>,hue=<span class="string">'day'</span>, col=<span class="string">'time'</span>, row=<span class="string">'sex'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_163_0.png" alt="png"></p><br><h3 id="7-4-컬러-팔레트-적용"><a class="markdownIt-Anchor" href="#7-4-컬러-팔레트-적용"></a> 7-4. 컬러 팔레트 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, hue=<span class="string">'day'</span>, col=<span class="string">'time'</span>, row=<span class="string">'sex'</span>, data=tips, palette=<span class="string">'CMRmap_r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_166_0.png" alt="png"></p><br><br><h2 id="8-jointplot"><a class="markdownIt-Anchor" href="#8-jointplot"></a> <strong>8. jointplot</strong></h2><p>jointplot은 scatter(산점도)와 histogram(분포)을 동시에 그려줌.(숫자형 데이터만)</p><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.jointplot.html?highlight=jointplot#seaborn.jointplot" target="_blank" rel="noopener">&lt;sns.jointplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.jointplot</strong> ( <em>x, y, data=None, kind=‘scatter’, height=6</em> )</p><ul><li><strong>kind</strong>: kind of plot to draw. {‘scatter’, ‘reg’, ‘resid’, ‘kde’, ‘hex’}</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>  </tbody></table></div><br>  <h3 id="8-1-기본-jointplot-그리기"><a class="markdownIt-Anchor" href="#8-1-기본-jointplot-그리기"></a> 8-1. 기본 jointplot 그리기</h3><p><strong>default 로 "scatter plot"을 그린다  (kind=‘scatter’)</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(x=<span class="string">'total_bill'</span>, y=<span class="string">'tip'</span>, data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_178_0.png" alt="png"></p><br><h3 id="8-2-선형관계를-표현하는-regression-라인-그리기"><a class="markdownIt-Anchor" href="#8-2-선형관계를-표현하는-regression-라인-그리기"></a> 8-2. 선형관계를 표현하는 regression 라인 그리기</h3><p><strong>옵션: kind='reg’</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">'total_bill'</span>, <span class="string">'tip'</span>, data=tips, kind=<span class="string">'reg'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_182_0.png" alt="png"></p><br><h3 id="8-3-hex-밀도-보기"><a class="markdownIt-Anchor" href="#8-3-hex-밀도-보기"></a> 8-3. hex 밀도 보기</h3><p><strong>옵션: kind='hex’</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">'total_bill'</span>, <span class="string">'tip'</span>, data=tips, kind=<span class="string">'hex'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_186_0.png" alt="png"></p><br><h3 id="8-4-등고선-모양으로-밀집도-확인하기"><a class="markdownIt-Anchor" href="#8-4-등고선-모양으로-밀집도-확인하기"></a> 8-4. 등고선 모양으로 밀집도 확인하기</h3><p><strong>kind=‘kde’</strong> 옵션으로 데이터의 밀집도를 보다 부드러운 선으로 확인할 수 있다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">iris</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>145</th>      <td>6.7</td>      <td>3.0</td>      <td>5.2</td>      <td>2.3</td>      <td>virginica</td>    </tr>    <tr>      <th>146</th>      <td>6.3</td>      <td>2.5</td>      <td>5.0</td>      <td>1.9</td>      <td>virginica</td>    </tr>    <tr>      <th>147</th>      <td>6.5</td>      <td>3.0</td>      <td>5.2</td>      <td>2.0</td>      <td>virginica</td>    </tr>    <tr>      <th>148</th>      <td>6.2</td>      <td>3.4</td>      <td>5.4</td>      <td>2.3</td>      <td>virginica</td>    </tr>    <tr>      <th>149</th>      <td>5.9</td>      <td>3.0</td>      <td>5.1</td>      <td>1.8</td>      <td>virginica</td>    </tr>  </tbody></table><p>150 rows × 5 columns</p></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(<span class="string">'sepal_width'</span>, <span class="string">'petal_length'</span>, data=iris, kind=<span class="string">'kde'</span>, color=<span class="string">'g'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn2/output_192_0.png" alt="png"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      countplot, distplot, heatmap, pairplot, violinplot, lmplot, relplot, jointplot
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="시각화" scheme="https://hyemin-kim.github.io/tags/%EC%8B%9C%EA%B0%81%ED%99%94/"/>
    
      <category term="Seaborn" scheme="https://hyemin-kim.github.io/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Seaborn - (1) Seaborn을 활용한 다양한 그래프 그리기</title>
    <link href="https://hyemin-kim.github.io/2020/07/03/S-Python-Seaborn1/"/>
    <id>https://hyemin-kim.github.io/2020/07/03/S-Python-Seaborn1/</id>
    <published>2020-07-03T10:14:58.000Z</published>
    <updated>2020-08-12T05:28:21.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seaborn을-활용한-다양한-그래프-그리기"><a class="markdownIt-Anchor" href="#seaborn을-활용한-다양한-그래프-그리기"></a> Seaborn을 활용한 다양한 그래프 그리기</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-seaborn-%EA%B0%9C%EC%9A%94"><strong>0. Seaborn 개요</strong></a><ul><li><a href="#0-1-seaborn-%EC%97%90%EC%84%9C%EB%A7%8C-%EC%A0%9C%EA%B3%B5%EB%90%98%EB%8A%94-%ED%86%B5%EA%B3%84-%EA%B8%B0%EB%B0%98-plot">0-1. seaborn 에서만 제공되는 통계 기반 plot</a></li><li><a href="#0-2-%EC%95%84%EB%A6%84%EB%8B%A4%EC%9A%B4-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81">0-2. 아름다운 스타일링</a></li><li><a href="#0-3-%EC%BB%AC%EB%9F%AC-%ED%8C%94%EB%A0%88%ED%8A%B8">0-3. 컬러 팔레트</a></li><li><a href="#0-4-pandas-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%84%EA%B3%BC-%EB%86%92%EC%9D%80-%ED%98%B8%ED%99%98%EC%84%B1">0-4. pandas 데이터프레임과 높은 호환성</a></li></ul></li><li><a href="#1-scatterplot"><strong>1. Scatterplot</strong></a><ul><li><a href="#1-1-x-y-color-area-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0">1-1. x, y, color, area 설정하기</a></li><li><a href="#1-2-cmap%EA%B3%BC-alpha">1-2. cmap과 alpha</a></li></ul></li><li><a href="#2-barplot-barhplot"><strong>2. Barplot, Barhplot</strong></a><ul><li><a href="#2-1-%EA%B8%B0%EB%B3%B8-barplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-1. 기본 Barplot 그리기</a></li><li><a href="#2-2-%EA%B8%B0%EB%B3%B8-barhplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-2. 기본 Barhplot 그리기</a></li><li><a href="#2-3-barplot%EC%97%90%EC%84%9C-%EB%B9%84%EA%B5%90-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-3. Barplot에서 비교 그래프 그리기</a></li></ul></li><li><a href="#3-line-plot"><strong>3. Line Plot</strong></a><ul><li><a href="#3-1-%EA%B8%B0%EB%B3%B8-lineplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">3-1. 기본 lineplot 그리기</a></li><li><a href="#3-2-2%EA%B0%9C-%EC%9D%B4%EC%83%81%EC%9D%98-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0">3-2. 2개 이상의 그래프 그리기</a></li><li><a href="#3-3-%EB%A7%88%EC%BB%A4-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81">3-3. 마커 스타일링</a></li><li><a href="#3-4-%EB%9D%BC%EC%9D%B8-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0">3-4. 라인 스타일 변경하기</a></li></ul></li><li><a href="#4-areaplot-filled-area"><strong>4. Areaplot (Filled Area)</strong></a></li><li><a href="#5histogram"><strong>5.Histogram</strong></a><ul><li><a href="#5-1-%EA%B8%B0%EB%B3%B8-histogram-%EA%B7%B8%EB%A6%AC%EA%B8%B0">5-1. 기본 Histogram 그리기</a></li><li><a href="#5-2-%EB%8B%A4%EC%A4%91-histogram-%EA%B7%B8%EB%A6%AC%EA%B8%B0">5-2. 다중 Histogram 그리기</a></li></ul></li><li><a href="#6-pie-chart"><strong>6. Pie Chart</strong></a></li><li><a href="#7-box-plot"><strong>7. Box Plot</strong></a><ul><li><a href="#7-1-%EA%B8%B0%EB%B3%B8-%EB%B0%95%EC%8A%A4%ED%94%8C%EB%A1%AF-%EC%83%9D%EC%84%B1">7-1. 기본 박스플롯 생성</a></li><li><a href="#7-2-%EB%8B%A4%EC%A4%91-%EB%B0%95%EC%8A%A4%ED%94%8C%EB%A1%AF-%EC%83%9D%EC%84%B1">7-2. 다중 박스플롯 생성</a></li><li><a href="#7-3-box-plot-%EC%B6%95-%EB%B0%94%EA%BE%B8%EA%B8%B0">7-3. Box Plot 축 바꾸기</a></li><li><a href="#7-4-outlier-%EB%A7%88%EC%BB%A4-%EC%8B%AC%EB%B3%BC%EA%B3%BC-%EC%BB%AC%EB%9F%AC-%EB%B3%80%EA%B2%BD">7-4. Outlier 마커 심볼과 컬러 변경</a></li></ul></li></ul><p></p><br><blockquote><p><em><strong>reference:</strong></em></p><ul><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">pyplot 공식 도튜먼트 살펴보기</a></li><li><a href="https://seaborn.pydata.org/" target="_blank" rel="noopener">seaborn 공식 도큐먼트 살펴보기</a></li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># seaborn</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = (<span class="number">9</span>, <span class="number">6</span>)  <span class="comment"># figure size 설정</span></span><br><span class="line">plt.rcParams[<span class="string">"font.size"</span>] = <span class="number">14</span>  <span class="comment"># fontsize 설정</span></span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="0-seaborn-개요"><a class="markdownIt-Anchor" href="#0-seaborn-개요"></a> <strong>0. Seaborn 개요</strong></h2><p>seaborn은 matplotlib을 더 사용하게 쉽게 해주는 라이브러리다.<br>matplotlib으로 대부분의 시각화는 가능하지만, 다음과 같은 이유로 많은 사람들이 <code>seaborn</code>을 선호한다.</p><blockquote><p><strong>비교:</strong> <a href="https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib2/">matplotlib을 활용한 다양한 그래프 그리기</a></p></blockquote> <br> <h3 id="0-1-seaborn-에서만-제공되는-통계-기반-plot"><a class="markdownIt-Anchor" href="#0-1-seaborn-에서만-제공되는-통계-기반-plot"></a> 0-1. seaborn 에서만 제공되는 통계 기반 plot</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>(1) violinplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips)</span><br><span class="line">plt.title(<span class="string">'violin plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_14_0.png" alt="png"></p><br><p><strong>(2) countplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(tips[<span class="string">'day'</span>])</span><br><span class="line">plt.title(<span class="string">'countplot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_17_0.png" alt="png"></p><br><p><strong>(3) relplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'tip'</span>, y=<span class="string">'total_bill'</span>, data=tips)</span><br><span class="line">plt.title(<span class="string">'relplot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_20_0.png" alt="png"></p><br><p><strong>(4) lmplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">'tip'</span>, y=<span class="string">'total_bill'</span>, data=tips)</span><br><span class="line">plt.title(<span class="string">'lmplot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_23_0.png" alt="png"></p><br><p><strong>(5) heatmap</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'heatmap'</span>)</span><br><span class="line">sns.heatmap(tips.corr(), annot=<span class="literal">True</span>, linewidths=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_26_0.png" alt="png"></p><br><h3 id="0-2-아름다운-스타일링"><a class="markdownIt-Anchor" href="#0-2-아름다운-스타일링"></a> 0-2. 아름다운 스타일링</h3><p><strong>(1) default color의 예쁜 조합</strong></p><p>seaborn의 최대 장점 중의 하나가 아름다운 컬러팔레트다.<br>스타일링에 크게 신경 쓰지 않아도 default 컬러가 예쁘게 조합해준다.</p><br><p><strong>matplotlib VS seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(tips[<span class="string">'day'</span>], tips[<span class="string">'total_bill'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_32_0.png" alt="png"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"colorblind"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_33_0.png" alt="png"></p><br><p><strong>(2) 그래프 배경 설정</strong></p><p>그래프의 배경 (grid 스타일)을 설정할 수 있음.</p><blockquote><p><strong>sns.set_style(’…’)</strong></p><ul><li>whitegrid: white background + grid</li><li>darkgrid: dark background + grid</li><li>white: white background (without grid)</li><li>dark: dark background (without grid)</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"colorblind"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_38_0.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'white'</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"colorblind"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_39_0.png" alt="png"></p><br><h3 id="0-3-컬러-팔레트"><a class="markdownIt-Anchor" href="#0-3-컬러-팔레트"></a> 0-3. 컬러 팔레트</h3><p>자세한 컬러팔레트는 <a href="https://chrisalbon.com/python/data_visualization/seaborn_color_palettes/" target="_blank" rel="noopener">공식 도큐먼트</a>를 참고</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.light_palette((<span class="number">210</span>, <span class="number">90</span>, <span class="number">60</span>), input=<span class="string">"husl"</span>))</span><br><span class="line">sns.palplot(sns.dark_palette(<span class="string">"muted purple"</span>, input=<span class="string">"xkcd"</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">"BrBG"</span>, <span class="number">10</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">"BrBG_r"</span>, <span class="number">10</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">"coolwarm"</span>, <span class="number">10</span>))</span><br><span class="line">sns.palplot(sns.diverging_palette(<span class="number">255</span>, <span class="number">133</span>, l=<span class="number">60</span>, n=<span class="number">10</span>, center=<span class="string">"dark"</span>))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_43_0.png" alt="png"></p><p><img src="/images/S-Python-Seaborn1/output_43_1.png" alt="png"></p><p><img src="/images/S-Python-Seaborn1/output_43_2.png" alt="png"></p><p><img src="/images/S-Python-Seaborn1/output_43_3.png" alt="png"></p><p><img src="/images/S-Python-Seaborn1/output_43_4.png" alt="png"></p><p><img src="/images/S-Python-Seaborn1/output_43_5.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">"tip"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">'coolwarm'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5bf62888&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_44_1.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">"tip"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">'Reds'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba59e40988&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_45_1.png" alt="png"></p><br><h3 id="0-4-pandas-데이터프레임과-높은-호환성"><a class="markdownIt-Anchor" href="#0-4-pandas-데이터프레임과-높은-호환성"></a> 0-4. pandas 데이터프레임과 높은 호환성</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>sex</th>      <th>smoker</th>      <th>day</th>      <th>time</th>      <th>size</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>16.99</td>      <td>1.01</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>10.34</td>      <td>1.66</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>21.01</td>      <td>3.50</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>23.68</td>      <td>3.31</td>      <td>Male</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>24.59</td>      <td>3.61</td>      <td>Female</td>      <td>No</td>      <td>Sun</td>      <td>Dinner</td>      <td>4</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>239</th>      <td>29.03</td>      <td>5.92</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>3</td>    </tr>    <tr>      <th>240</th>      <td>27.18</td>      <td>2.00</td>      <td>Female</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>241</th>      <td>22.67</td>      <td>2.00</td>      <td>Male</td>      <td>Yes</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>242</th>      <td>17.82</td>      <td>1.75</td>      <td>Male</td>      <td>No</td>      <td>Sat</td>      <td>Dinner</td>      <td>2</td>    </tr>    <tr>      <th>243</th>      <td>18.78</td>      <td>3.00</td>      <td>Female</td>      <td>No</td>      <td>Thur</td>      <td>Dinner</td>      <td>2</td>    </tr>  </tbody></table><p>244 rows × 7 columns</p></div>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.catplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>,</span><br><span class="line">            data=tips, </span><br><span class="line">            kind=<span class="string">"bar"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_50_0.png" alt="png"></p><br><ul><li><code>hue</code>옵션: bar를 새로운 기준으로 분할</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sns.catplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>,</span><br><span class="line">            hue=<span class="string">"smoker"</span>, </span><br><span class="line">            data=tips, </span><br><span class="line">            kind=<span class="string">"bar"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_53_0.png" alt="png"></p><br><ul><li><code>col</code> / <code>row</code> 옵션: 그래프 자체를 새로운 기준으로 분할</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.catplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>,</span><br><span class="line">            hue=<span class="string">"smoker"</span>, </span><br><span class="line">            col=<span class="string">"time"</span>,</span><br><span class="line">            data=tips, </span><br><span class="line">            kind=<span class="string">"bar"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_56_0.png" alt="png"></p><br><ul><li><p>xtick, ytick, xlabel, ylabel을 알아서 생성해 줌</p></li><li><p>legend까지 자동으로 생성해 줌</p></li><li><p>뿐만 아니라, 신뢰 구간도 알아서 계산하여 생성함</p><br></li></ul><h2 id="1-scatterplot"><a class="markdownIt-Anchor" href="#1-scatterplot"></a> <strong>1. Scatterplot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.scatterplot.html" target="_blank" rel="noopener">&lt;sns.scatterplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.scatterplot</strong> ( <em>x, y, size=None, sizes=None, hue=None, palette=None, color=‘auto’, alpha=‘auto’…</em> )</p><ul><li><code>sizes</code> 옵션: size의 선택범위를 설정. (사아즈의 min, max를 설정)</li><li><code>hue</code> 옵션: 컬러의 구별 기준이 되는 grouping variable 설정</li><li><code>color</code> 옵션: cmap에 컬러를 지정하면, 컬러 값을 모두 같게 가겨갈 수 있음</li><li><code>alpha</code> 옵션: 투명도 (0~1)</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><h3 id="1-1-x-y-color-area-설정하기"><a class="markdownIt-Anchor" href="#1-1-x-y-color-area-설정하기"></a> 1-1. x, y, color, area 설정하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터 생성</span></span><br><span class="line">x = np.random.rand(<span class="number">50</span>)</span><br><span class="line">y = np.random.rand(<span class="number">50</span>)</span><br><span class="line">colors = np.arange(<span class="number">50</span>)</span><br><span class="line">area = x * y * <span class="number">1000</span></span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y, s=area, c=colors)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_69_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(x, y, size=area, sizes=(area.min(), area.max()), hue=area, palette=<span class="string">'coolwarm'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_72_0.png" alt="png"></p><br><p><strong>[Tip]</strong> Palette 이름이 생각안나면: palette 값을 임의로 주고 실행하여 오류 경고창에 정확한 palette 이름을 보여줌</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(x, y, size=area, sizes=(area.min(), area.max()), hue=area, palette=<span class="string">'coolwarm111'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)D:\Anaconda\lib\site-packages\seaborn\relational.py in numeric_to_palette(self, data, order, palette, norm)    248             try:--&gt; 249                 cmap = mpl.cm.get_cmap(palette)    250             except (ValueError, TypeError):D:\Anaconda\lib\site-packages\matplotlib\cm.py in get_cmap(name, lut)    182             "Colormap %s is not recognized. Possible values are: %s"--&gt; 183             % (name, ', '.join(sorted(cmap_d))))    184 ValueError: Colormap coolwarm111 is not recognized. Possible values are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r</code></pre>  <br><h3 id="1-2-cmap과-alpha"><a class="markdownIt-Anchor" href="#1-2-cmap과-alpha"></a> 1-2. cmap과 alpha</h3><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.scatter(x, y, s=area, c=<span class="string">'blue'</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=0.1'</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=0.5'</span>)</span><br><span class="line">plt.scatter(x, y, s=area, c=<span class="string">'red'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=1.0'</span>)</span><br><span class="line">plt.scatter(x, y, s=area, c=<span class="string">'green'</span>, alpha=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_79_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">sns.scatterplot(x, y, size=area, sizes=(area.min(), area.max()), color=<span class="string">'blue'</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=0.1'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=0.5'</span>)</span><br><span class="line">sns.scatterplot(x, y, size=area, sizes=(area.min(), area.max()), color=<span class="string">'red'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.title(<span class="string">'alpha=1.0'</span>)</span><br><span class="line">sns.scatterplot(x, y, size=area, sizes=(area.min(), area.max()), color=<span class="string">'green'</span>, alpha=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_82_0.png" alt="png"></p><br><br><h2 id="2-barplot-barhplot"><a class="markdownIt-Anchor" href="#2-barplot-barhplot"></a> <strong>2. Barplot, Barhplot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.barplot.html" target="_blank" rel="noopener">&lt;sns.barplot&gt; Document</a></p></blockquote><blockquote><p><strong>sns.boxplot</strong> ( <em>x, y, hue=None, data=None, alpha=‘auto’, palette=None / color=None</em> )</p></blockquote><br> <h3 id="2-1-기본-barplot-그리기"><a class="markdownIt-Anchor" href="#2-1-기본-barplot-그리기"></a> 2-1. 기본 Barplot 그리기</h3><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(x, y, alpha = <span class="number">0.7</span>, color = <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_91_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">sns.barplot(x, y, alpha=<span class="number">0.8</span>, palette=<span class="string">'YlGnBu'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_94_0.png" alt="png"></p><br><h3 id="2-2-기본-barhplot-그리기"><a class="markdownIt-Anchor" href="#2-2-기본-barhplot-그리기"></a> 2-2. 기본 Barhplot 그리기</h3><p><strong>(1) matplotlib</strong></p><blockquote><ul><li><strong>plt.barh</strong> 함수 사용</li><li>bar 함수에서 <strong>xticks / ylabel 로 설정</strong>했던 부분이 barh 함수에서 <strong>yticks / xlabel 로 변경함</strong></li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">plt.barh(x, y, alpha = <span class="number">0.7</span>, color = <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(x)</span><br><span class="line">plt.xlabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_99_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><blockquote><ul><li>sns.barplot 함수를 그대로 사용</li><li>barplot함수 안에 x와 y의 위치를 교환<br>xticks설정이 변경 불필요;<br>하지만 ylabel설정은 xlable로 변경 필요</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">sns.barplot(y, x, alpha=<span class="number">0.9</span>, palette=<span class="string">"YlOrRd"</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Grades'</span>)</span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_102_0.png" alt="png"></p><br><h3 id="2-3-barplot에서-비교-그래프-그리기"><a class="markdownIt-Anchor" href="#2-3-barplot에서-비교-그래프-그리기"></a> 2-3. Barplot에서 비교 그래프 그리기</h3><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x_label = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">x = np.arange(len(x_label))  <span class="comment"># x = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">y_1 = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line">y_2 = [<span class="number">80</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 지정</span></span><br><span class="line">width = <span class="number">0.35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subplots 생성</span></span><br><span class="line">fig, axes = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 설정</span></span><br><span class="line">axes.bar(x - width/<span class="number">2</span>, y_1, width, alpha = <span class="number">0.5</span>)</span><br><span class="line">axes.bar(x + width/<span class="number">2</span>, y_2, width, alpha = <span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks &amp; label 설정</span></span><br><span class="line">plt.xticks(x)</span><br><span class="line">axes.set_xticklabels(x_label)</span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend([<span class="string">'John'</span>, <span class="string">'Peter'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_106_0.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">x_label = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">x = np.arange(len(x_label))  <span class="comment"># x = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">y_1 = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line">y_2 = [<span class="number">80</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 지정</span></span><br><span class="line">width = <span class="number">0.35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subplots 생성</span></span><br><span class="line">fig, axes = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 설정</span></span><br><span class="line">axes.barh(x - width/<span class="number">2</span>, y_1, width, alpha = <span class="number">0.5</span>, color = <span class="string">"green"</span>)</span><br><span class="line">axes.barh(x + width/<span class="number">2</span>, y_2, width, alpha = <span class="number">0.5</span>, color = <span class="string">"blue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks &amp; label 설정</span></span><br><span class="line">plt.yticks(x)</span><br><span class="line">axes.set_yticklabels(x_label)</span><br><span class="line">plt.xlabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend([<span class="string">'John'</span>, <span class="string">'Peter'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_107_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><p>Seaborn에서는 위의 <code>matplotlib</code>과 조금 다른 방식을 취한다.<br>seaborn에서 <code>hue</code>옵션으로 매우 쉽게 비교 <strong>barplot</strong>을 그릴 수 있음.</p><blockquote><p><strong>sns.barplot</strong> ( <em>x, y, hue=…, data=…, palette=…</em> )</p></blockquote><br><p><strong>실전 tip.</strong></p><ul><li><p>그래프를 임의로 그려야 하는 경우 -&gt; <code>matplotlib</code></p></li><li><p>DataFrame을 가지고 그리는 경우 -&gt; <code>seaborn</code></p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">titanic = sns.load_dataset(<span class="string">'titanic'</span>)</span><br><span class="line">titanic.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table style="width = 100%;">  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>sex</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>      <th>embarked</th>      <th>class</th>      <th>who</th>      <th>adult_male</th>      <th>deck</th>      <th>embark_town</th>      <th>alive</th>      <th>alone</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Cherbourg</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>Third</td>      <td>woman</td>      <td>False</td>      <td>NaN</td>      <td>Southampton</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Southampton</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>True</td>    </tr>  </tbody></table></div></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">'sex'</span>, y=<span class="string">'survived'</span>, hue=<span class="string">'pclass'</span>, data=titanic, palette=<span class="string">'muted'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_115_0.png" alt="png"></p><br><br><h2 id="3-line-plot"><a class="markdownIt-Anchor" href="#3-line-plot"></a> <strong>3. Line Plot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.lineplot.html" target="_blank" rel="noopener">&lt;sns.lineplot&gt; Document</a></p></blockquote><br><blockquote><p><strong>sns.lineplot</strong> ( <em>x, y, label=…, color=None, alpha=‘auto’, marker=None, linestyle=None</em> )</p><ul><li>기본 옵션은 matplotlib의 <code>plt.plot</code>과 비슷</li><li>함수만 <code>plt.plot</code>에서 <code>sns.lineplot</code>로 바꾸면 됨</li><li>plt.legend() 명령어 따로 쓸 필요없음</li><li>배경이 whitegrid / darkgrid 로 설정되어 있을 시 plt.grid() 명령어 불필요</li></ul></blockquote><br>  <h3 id="3-1-기본-lineplot-그리기"><a class="markdownIt-Anchor" href="#3-1-기본-lineplot-그리기"></a> 3-1. 기본 lineplot 그리기</h3><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">1</span> + np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line">plt.title(<span class="string">'sin graph'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_124_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sns.lineplot(x, y)  <span class="comment"># 함수만 변경하면 됨 (plt.plot -&gt; sns.lineplot)</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line">plt.title(<span class="string">'sin graph'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_127_0.png" alt="png"></p><br><h3 id="3-2-2개-이상의-그래프-그리기"><a class="markdownIt-Anchor" href="#3-2-2개-이상의-그래프-그리기"></a> 3-2. 2개 이상의 그래프 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span> + np.cos(x)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x, y_1,label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, alpha = <span class="number">0.3</span>)  <span class="comment"># label 설정값을 legend에 나타날 수 있음</span></span><br><span class="line">sns.lineplot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, alpha = <span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"x value"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y value"</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"sin and cos graph"</span>, fontsize = <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_130_0.png" alt="png"></p><br><h3 id="3-3-마커-스타일링"><a class="markdownIt-Anchor" href="#3-3-마커-스타일링"></a> 3-3. 마커 스타일링</h3><ul><li>marker: 마커 옵션</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span>+ np.cos(x)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x, y_1, label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, alpha=<span class="number">0.3</span>, marker=<span class="string">'o'</span>)</span><br><span class="line">sns.lineplot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, alpha=<span class="number">0.7</span>, marker=<span class="string">'+'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin and cos graph'</span>, fontsize = <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_134_0.png" alt="png"></p><br><h3 id="3-4-라인-스타일-변경하기"><a class="markdownIt-Anchor" href="#3-4-라인-스타일-변경하기"></a> 3-4. 라인 스타일 변경하기</h3><ul><li>linestyle: 라인 스타일 변경하기</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span>+ np.cos(x)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x, y_1, label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, linestyle=<span class="string">':'</span>)</span><br><span class="line">sns.lineplot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, linestyle=<span class="string">'-.'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin and cos graph'</span>, fontsize = <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_138_0.png" alt="png"></p><br><br><h2 id="4-areaplot-filled-area"><a class="markdownIt-Anchor" href="#4-areaplot-filled-area"></a> <strong>4. Areaplot (Filled Area)</strong></h2><blockquote><p>Seaborn에서는 <strong>areaplot을 지원하지 않음</strong><br>matplotlib을 활용하여 구현해야 함</p></blockquote><br>  <h2 id="5histogram"><a class="markdownIt-Anchor" href="#5histogram"></a> <strong>5.Histogram</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.distplot.html" target="_blank" rel="noopener">&lt;sns.distplot&gt; Document</a></p></blockquote><br><blockquote><p><strong>sns.distplot</strong> ( <em>x, bins=None, hist=True, kde=True, vertical=False</em> )</p><ul><li><strong>bins:</strong> hist bins 갯수 설정</li><li><strong>hist:</strong> Whether to plot a (normed) histogram</li><li><strong>kde:</strong> Whether to plot a gaussian kernel density estimate</li><li><strong>vertical:</strong> If True, observed values are on y-axis</li></ul></blockquote>  <br><h3 id="5-1-기본-histogram-그리기"><a class="markdownIt-Anchor" href="#5-1-기본-histogram-그리기"></a> 5-1. 기본 Histogram 그리기</h3><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">plt.hist(x, bins=bins)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_150_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><p><strong>Histogram + Density Function</strong> <font color="blue">(<em>default</em>)</font></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">sns.distplot(x, bins=bins)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5cc800c8&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_154_1.png" alt="png"></p><br><p><strong>Histogram Only</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, bins=bins, hist=<span class="literal">True</span>, kde=<span class="literal">False</span>, color=<span class="string">'g'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5cd09788&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_157_1.png" alt="png"></p><br><p><strong>Density Function Only</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, bins=bins, hist=<span class="literal">False</span>, kde=<span class="literal">True</span>, color=<span class="string">'g'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5c7cc208&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_160_1.png" alt="png"></p><br><p><strong>수평 그래프</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, bins=bins, vertical=<span class="literal">True</span>, color=<span class="string">'r'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5c250108&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_163_1.png" alt="png"></p><br><h3 id="5-2-다중-histogram-그리기"><a class="markdownIt-Anchor" href="#5-2-다중-histogram-그리기"></a> 5-2. 다중 Histogram 그리기</h3><p>matplotlib 에서의 방법을 사용</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, </span><br><span class="line">                        sharey = <span class="literal">True</span>,</span><br><span class="line">                        tight_layout = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.set_size_inches(<span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].hist(x, bins = bins)</span><br><span class="line">axes[<span class="number">1</span>].hist(x, bins = bins*<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">2</span>].hist(x, bins = bins*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_167_0.png" alt="png"></p><br><br><h2 id="6-pie-chart"><a class="markdownIt-Anchor" href="#6-pie-chart"></a> <strong>6. Pie Chart</strong></h2><blockquote><p>Seaborn에서는 <strong>pie plot을 지원하지 않음</strong><br>matplotlib을 활용하여 구현해야 함</p></blockquote>  <br><h2 id="7-box-plot"><a class="markdownIt-Anchor" href="#7-box-plot"></a> <strong>7. Box Plot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://seaborn.pydata.org/generated/seaborn.boxplot.html" target="_blank" rel="noopener">&lt;sns.boxplot&gt; Document</a></p></blockquote><br><blockquote><p><strong>sns.baxplot</strong> ( <em>x=None, y=None, hue=None, data=None, orient=None, width=0.8</em> )</p><ul><li><strong>hue:</strong> 비교 그래프를 그릴 때 나눔 기준이 되는 Variable 설정</li><li><strong>orient:</strong> “v” / “h”.  Orientation of the plot (vertical or horizontal)</li><li><strong>width:</strong> box의 넓이</li></ul></blockquote><br>  <h3 id="7-1-기본-박스플롯-생성"><a class="markdownIt-Anchor" href="#7-1-기본-박스플롯-생성"></a> 7-1. 기본 박스플롯 생성</h3><p><strong>샘플 데이터 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DGP</span></span><br><span class="line">spread = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center = np.ones(<span class="number">25</span>) * <span class="number">50</span></span><br><span class="line">flier_high = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data = np.concatenate((spread, center, flier_high, flier_low))</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_182_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(data, orient=<span class="string">'v'</span>, width=<span class="number">0.2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_185_0.png" alt="png"></p><br><h3 id="7-2-다중-박스플롯-생성"><a class="markdownIt-Anchor" href="#7-2-다중-박스플롯-생성"></a> 7-2. 다중 박스플롯 생성</h3><p>seaborn에서는  <code>hue</code>옵션으로 매우 쉽게 <strong>비교 boxplot</strong>을 그릴 수 있으며 주로 DataFrame을 가지고 그릴 때 활용한다.</p><p>barplot과 마찬가지로, 용도에 따라 적절한 library를 사용한다</p><br><p><strong>실전 Tip.</strong></p><ul><li><p>그래프를 임의로 그려야 하는 경우 -&gt; <code>matplotlit</code></p></li><li><p>DataFrame을 가지고 그리는 경우 -&gt; <code>seaborn</code></p><br></li></ul><p><strong>(1) matplotlib</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DGP</span></span><br><span class="line">spread1 = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center1 = np.ones(<span class="number">25</span>) * <span class="number">50</span></span><br><span class="line">flier_high1 = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low1 = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data1 = np.concatenate((spread1, center1, flier_high1, flier_low1))</span><br><span class="line"></span><br><span class="line">spread2 = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center2 = np.ones(<span class="number">25</span>) * <span class="number">40</span></span><br><span class="line">flier_high2 = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low2 = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data2 = np.concatenate((spread2, center2, flier_high2, flier_low2))</span><br><span class="line"></span><br><span class="line">data1.shape = (<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">data2.shape = (<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data = [data1, data2, data2[::<span class="number">2</span>, <span class="number">0</span>]]</span><br></pre></td></tr></tbody></table></figure>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_194_0.png" alt="png"></p><br><p><strong>(2) seaborn</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">titanic = sns.load_dataset(<span class="string">'titanic'</span>)</span><br><span class="line">titanic.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><div style="overflow:auto"><table style="width = 100%;">  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>sex</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>      <th>embarked</th>      <th>class</th>      <th>who</th>      <th>adult_male</th>      <th>deck</th>      <th>embark_town</th>      <th>alive</th>      <th>alone</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Cherbourg</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>Third</td>      <td>woman</td>      <td>False</td>      <td>NaN</td>      <td>Southampton</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Southampton</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>True</td>    </tr>  </tbody></table></div></div> <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x=<span class="string">'pclass'</span>, y=<span class="string">'age'</span>, hue=<span class="string">'survived'</span>, data=titanic)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_199_0.png" alt="png"></p><br><h3 id="7-3-box-plot-축-바꾸기"><a class="markdownIt-Anchor" href="#7-3-box-plot-축-바꾸기"></a> 7-3. Box Plot 축 바꾸기</h3><p><strong>(1) 단일 boxplot</strong></p><ul><li>orient옵션: orient = "h"로 설정</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DGP</span></span><br><span class="line">spread = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center = np.ones(<span class="number">25</span>) * <span class="number">50</span></span><br><span class="line">flier_high = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data = np.concatenate((spread, center, flier_high, flier_low))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(data, orient=<span class="string">'h'</span>, width=<span class="number">0.3</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ba5e866188&gt;</code></pre><p><img src="/images/S-Python-Seaborn1/output_205_1.png" alt="png"></p><br><p><strong>(2) 다중 boxplot</strong></p><ol><li>x, y 변수 교환</li><li>orient = “h”</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(y=<span class="string">'pclass'</span>, x=<span class="string">'age'</span>, hue=<span class="string">'survived'</span>, data=titanic, orient=<span class="string">'h'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_209_0.png" alt="png"></p><br><h3 id="7-4-outlier-마커-심볼과-컬러-변경"><a class="markdownIt-Anchor" href="#7-4-outlier-마커-심볼과-컬러-변경"></a> 7-4. Outlier 마커 심볼과 컬러 변경</h3><ul><li><strong>flierprops = …</strong> 옵션 사용  <font color="blue">(matplotlib과 동일)</font></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outlier_marker = dict(markerfacecolor=<span class="string">'r'</span>, marker=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Changed Outlier Symbols'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">sns.boxplot(data, orient=<span class="string">'v'</span>, width=<span class="number">0.2</span>, flierprops=outlier_marker)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Seaborn1/output_213_0.png" alt="png"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      matplotlib 차트들을 seaborn에서 구현하기 (scatterplot, barplot, lineplot, histogram, boxplot)
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="시각화" scheme="https://hyemin-kim.github.io/tags/%EC%8B%9C%EA%B0%81%ED%99%94/"/>
    
      <category term="Seaborn" scheme="https://hyemin-kim.github.io/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Matplotlib - (2) 다양한 그래프 그리기</title>
    <link href="https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib2/"/>
    <id>https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib2/</id>
    <published>2020-06-28T05:12:32.000Z</published>
    <updated>2020-07-03T12:52:46.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matplotlib을-활용한-다양한-그래프-그리기"><a class="markdownIt-Anchor" href="#matplotlib을-활용한-다양한-그래프-그리기"></a> matplotlib을 활용한 다양한 그래프 그리기</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-scatterplot"><strong>1. Scatterplot</strong></a><ul><li><a href="#1-1-x-y-colors-area-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0">1-1. x, y, colors, area 설정하기</a></li><li><a href="#1-2-cmap%EA%B3%BC-alpha">1-2. cmap과 alpha</a></li></ul></li><li><a href="#2-barplot-barhplot"><strong>2. Barplot, Barhplot</strong></a><ul><li><a href="#2-1-%EA%B8%B0%EB%B3%B8-barplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-1. 기본 barplot 그리기</a></li><li><a href="#2-2-%EA%B8%B0%EB%B3%B8-barhplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-2. 기본 Barhplot 그리기</a></li><li><a href="#2-3-barplot%EC%97%90%EC%84%9C-%EB%B9%84%EA%B5%90-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0">2-3. Barplot에서 비교 그래프 그리기</a></li></ul></li><li><a href="#3-line-plot"><strong>3. Line Plot</strong></a><ul><li><a href="#3-1-%EA%B8%B0%EB%B3%B8-lineplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">3-1. 기본 lineplot 그리기</a></li><li><a href="#3-2-2%EA%B0%9C-%EC%9D%B4%EC%83%81%EC%9D%98-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0">3-2. 2개 이상의 그래프 그리기</a></li><li><a href="#3-3-%EB%A7%88%EC%BB%A4-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81">3-3. 마커 스타일링</a></li><li><a href="#3-4-%EB%9D%BC%EC%9D%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81">3-4. 라인 스타일링</a></li></ul></li><li><a href="#4-areaplot-filled-area"><strong>4. Areaplot (Filled Area)</strong></a><ul><li><a href="#4-1-%EA%B8%B0%EB%B3%B8-areaplot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">4-1. 기본 areaplot 그리기</a></li><li><a href="#4-2-%EA%B2%BD%EA%B3%84%EC%84%A0%EC%9D%84-%EA%B5%B5%EA%B2%8C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-area%EB%8A%94-%EC%98%85%EA%B2%8C-%EA%B7%B8%EB%A6%AC%EB%8A%94-%ED%9A%A8%EA%B3%BC-%EC%A0%81%EC%9A%A9">4-2. 경계선을 굵게 그리고 area는 옅게 그리는 효과 적용</a></li><li><a href="#4-3-%EC%97%AC%EB%9F%AC-%EA%B7%B8%EB%9E%98%ED%94%84%EB%A5%BC-%EA%B2%B9%EC%B3%90%EC%84%9C-%ED%91%9C%ED%98%84">4-3. 여러 그래프를 겹쳐서 표현</a></li></ul></li><li><a href="#5-histogram"><strong>5. Histogram</strong></a><ul><li><a href="#5-1-%EA%B8%B0%EB%B3%B8-histogram-%EA%B7%B8%EB%A6%AC%EA%B8%B0">5-1. 기본 Histogram 그리기</a></li><li><a href="#5-2-%EB%8B%A4%EC%A4%91-histogram-%EA%B7%B8%EB%A6%AC%EA%B8%B0">5-2. 다중 Histogram 그리기</a></li><li><a href="#5-3-y%EC%B6%95%EC%97%90-density-%ED%91%9C%EA%B8%B0">5-3. Y축에 Density 표기</a></li></ul></li><li><a href="#6-pie-chart"><strong>6. Pie Chart</strong></a></li><li><a href="#7-box-plot"><strong>7. Box Plot</strong></a><ul><li><a href="#7-1-%EA%B8%B0%EB%B3%B8-%EB%B0%95%EC%8A%A4%ED%94%8C%EB%A1%AF-%EC%83%9D%EC%84%B1">7-1. 기본 박스플롯 생성</a></li><li><a href="#7-2-%EB%8B%A4%EC%A4%91-%EB%B0%95%EC%8A%A4%ED%94%8C%EB%A1%AF-%EC%83%9D%EC%84%B1">7-2. 다중 박스플롯 생성</a></li><li><a href="#7-3-box-plot-%EC%B6%95-%EB%B0%94%EA%BE%B8%EA%B8%B0">7-3. Box Plot 축 바꾸기</a></li><li><a href="#7-4-outlier-%EB%A7%88%EC%BB%A4-%EC%8B%AC%EB%B3%BC%EA%B3%BC-%EC%BB%AC%EB%9F%AC-%EB%B3%80%EA%B2%BD">7-4. Outlier 마커 심볼과 컬러 변경</a></li></ul></li><li><a href="#8-3d-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B7%B8%EB%A6%AC%EA%B8%B0"><strong>8. 3D 그래프 그리기</strong></a><ul><li><a href="#8-1-%EB%B0%91%EA%B7%B8%EB%A6%BC-%EA%B7%B8%EB%A6%AC%EA%B8%B0-canvas">8-1. 밑그림 그리기 (canvas)</a></li><li><a href="#8-2-3d-plot-%EA%B7%B8%EB%A6%AC%EA%B8%B0">8-2. 3D plot 그리기</a></li><li><a href="#8-3-3d-scatter-%EA%B7%B8%EB%A6%AC%EA%B8%B0">8-3. 3d-scatter 그리기</a></li><li><a href="#8-4-contour3d-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%93%B1%EA%B3%A0%EC%84%A0">8-4. contour3D 그리기 (등고선)</a></li></ul></li><li><a href="#9-imshow"><strong>9. imshow</strong></a></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = (<span class="number">9</span>, <span class="number">6</span>)  <span class="comment"># figure size 설정</span></span><br><span class="line">plt.rcParams[<span class="string">"font.size"</span>] = <span class="number">14</span>  <span class="comment"># fontsize 설정</span></span><br></pre></td></tr></tbody></table></figure> <br><h2 id="1-scatterplot"><a class="markdownIt-Anchor" href="#1-scatterplot"></a> <strong>1. Scatterplot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.scatter.html" target="_blank" rel="noopener">&lt;plt.scatter&gt; Document</a></p></blockquote><blockquote><p><strong>plt.scatter</strong>( <em>x, y, s=None, c=None, cmap=None, alpha=None</em> )</p><ul><li><strong>s:</strong> marker size</li><li><strong>c:</strong> color</li><li><strong>cmap:</strong> colormap</li><li><strong>alpha:</strong> between 0 and 1</li></ul></blockquote>  <br><p><strong>Data 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0~1 사이의 random value 50 개 생성</span></span><br><span class="line">np.random.rand(<span class="number">50</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>array([0.65532609, 0.19008877, 0.72343673, 0.63981883, 0.07531076,       0.67080518, 0.93282479, 0.04750706, 0.81240348, 0.40032198,       0.59662026, 0.25797641, 0.37315105, 0.6266855 , 0.50732916,       0.55803591, 0.63610033, 0.88673444, 0.99751021, 0.03723629,       0.07695327, 0.44247   , 0.5245731 , 0.41263818, 0.8009583 ,       0.57238283, 0.58647938, 0.9882001 , 0.88993497, 0.5396632 ,       0.24683042, 0.0838774 , 0.0826096 , 0.89701004, 0.78305308,       0.21027637, 0.93441558, 0.05756907, 0.6299839 , 0.05833447,       0.24247082, 0.9057054 , 0.1585265 , 0.45569918, 0.85597115,       0.43875418, 0.96962923, 0.17476189, 0.68713067, 0.832518  ])</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 부터 50 개의 value 생성</span></span><br><span class="line">np.arange(<span class="number">50</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])</code></pre> <br> <h3 id="1-1-x-y-colors-area-설정하기"><a class="markdownIt-Anchor" href="#1-1-x-y-colors-area-설정하기"></a> 1-1. x, y, colors, area 설정하기</h3><blockquote><p><strong>plt.scatter</strong> ( <em>x, y, s = , c =</em> )</p><ul><li><strong>s</strong>: 점의 넓이. area 값이 커지면 넓이도 커진다</li><li><strong>c</strong>: 임의 값을 color 값으로 변환</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.rand(<span class="number">50</span>)</span><br><span class="line">y = np.random.rand(<span class="number">50</span>)</span><br><span class="line">colors = np.arange(<span class="number">50</span>)</span><br><span class="line">area = x * y * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s = area, c = colors)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_16_0.png" alt="png"></p><br><h3 id="1-2-cmap과-alpha"><a class="markdownIt-Anchor" href="#1-2-cmap과-alpha"></a> 1-2. cmap과 alpha</h3><blockquote><ul><li>cmap에 컬러를 지정하면, 컬러 값을 모두 같게 가져갈 수도 있다</li><li>alpha값은 투명도를 나타내며 0~1 사이의 값을 지정해 둘 수 있으며, 0에 가까울 수록 투명한 값을 가진다</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span> ,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.scatter(x, y, s = area, cmap = <span class="string">'blue'</span>, alpha = <span class="number">0.1</span>)</span><br><span class="line">plt.title(<span class="string">'alpha = 0.1'</span>)</span><br><span class="line">  </span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.scatter(x, y, s = area, cmap = <span class="string">'blue'</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line">plt.title(<span class="string">'alpha = 0.5'</span>)</span><br><span class="line">    </span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">plt.scatter(x, y, s = area, cmap = <span class="string">'blue'</span>, alpha = <span class="number">1.0</span>)</span><br><span class="line">plt.title(<span class="string">'alpha = 1.0'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_20_0.png" alt="png"></p><br><br><h2 id="2-barplot-barhplot"><a class="markdownIt-Anchor" href="#2-barplot-barhplot"></a> <strong>2. Barplot, Barhplot</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.bar.html" target="_blank" rel="noopener">&lt;plt.bar&gt;  Document</a></p></blockquote><blockquote><p><strong>plt.bar</strong>(<em>x, height, width = 0.8, align = ‘center’, alpha = …, color = …</em> )</p><ul><li><strong>x:</strong> The x coordinates of the bars</li><li><strong>height:</strong> The height(s) of the bars</li><li><strong>width:</strong> The width(s) of the bars (default: 0.8)</li><li><strong>align:</strong> Alignment of the bars to the x coordinates:<br>{‘center’, ‘edge’}</li></ul></blockquote><br><h3 id="2-1-기본-barplot-그리기"><a class="markdownIt-Anchor" href="#2-1-기본-barplot-그리기"></a> 2-1. 기본 barplot 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수직 barplot</span></span><br><span class="line">plt.bar(x, y, alpha = <span class="number">0.7</span>, color = <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y label</span></span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_28_0.png" alt="png"></p><br><p>문자열이 겹히는 현상 발생했다. 이를 해결하는 방법은 2가지다:</p><ol><li><p>문자열 화전:  plt.xtick(rotation = …)</p></li><li><p>barh(수평바 그래프) 사용</p></li></ol>  <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수직 barplot</span></span><br><span class="line">plt.bar(x, y, alpha = <span class="number">0.7</span>, color = <span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x ticks</span></span><br><span class="line">plt.xticks(rotation = <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y label</span></span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_32_0.png" alt="png"></p><br><h3 id="2-2-기본-barhplot-그리기"><a class="markdownIt-Anchor" href="#2-2-기본-barhplot-그리기"></a> 2-2. 기본 Barhplot 그리기</h3><p>barh 함수에서는 <strong>xticks / ylabel 로 설정</strong>했던 부분을 <strong>yticks / xlabel 로 변경함</strong></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">y = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수직 barplot</span></span><br><span class="line">plt.barh(x, y, alpha = <span class="number">0.7</span>, color = <span class="string">'green'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y ticks</span></span><br><span class="line"><span class="comment"># plt.yticks(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x label</span></span><br><span class="line">plt.xlabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_36_0.png" alt="png"></p><br><h3 id="2-3-barplot에서-비교-그래프-그리기"><a class="markdownIt-Anchor" href="#2-3-barplot에서-비교-그래프-그리기"></a> 2-3. Barplot에서 비교 그래프 그리기</h3><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py" target="_blank" rel="noopener">Grouped bar chart with labels</a></p></blockquote><p><strong>(1) barplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x_label = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">x = np.arange(len(x_label))  <span class="comment"># x = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">y_1 = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line">y_2 = [<span class="number">80</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 지정</span></span><br><span class="line">width = <span class="number">0.35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subplots 생성</span></span><br><span class="line">fig, axes = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 설정</span></span><br><span class="line">axes.bar(x - width/<span class="number">2</span>, y_1, width, alpha = <span class="number">0.5</span>)</span><br><span class="line">axes.bar(x + width/<span class="number">2</span>, y_2, width, alpha = <span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks &amp; label 설정</span></span><br><span class="line">plt.xticks(x)</span><br><span class="line">axes.set_xticklabels(x_label)</span><br><span class="line">plt.ylabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend([<span class="string">'John'</span>, <span class="string">'Peter'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_41_0.png" alt="png"></p><br><p><strong>(2) barhplot</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">x_label = [<span class="string">'Math'</span>, <span class="string">'Programming'</span>, <span class="string">'Data Science'</span>, <span class="string">'Art'</span>, <span class="string">'English'</span>, <span class="string">'Physics'</span>]</span><br><span class="line">x = np.arange(len(x_label))  <span class="comment"># x = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">y_1 = [<span class="number">90</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">40</span>]</span><br><span class="line">y_2 = [<span class="number">80</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 지정</span></span><br><span class="line">width = <span class="number">0.35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subplots 생성</span></span><br><span class="line">fig, axes = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 넓이 설정</span></span><br><span class="line">axes.barh(x - width/<span class="number">2</span>, y_1, width, alpha = <span class="number">0.5</span>, color = <span class="string">"green"</span>)</span><br><span class="line">axes.barh(x + width/<span class="number">2</span>, y_2, width, alpha = <span class="number">0.5</span>, color = <span class="string">"blue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks &amp; label 설정</span></span><br><span class="line">plt.yticks(x)</span><br><span class="line">axes.set_yticklabels(x_label)</span><br><span class="line">plt.xlabel(<span class="string">'Grades'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">'Subjects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend([<span class="string">'John'</span>, <span class="string">'Peter'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_44_0.png" alt="png"></p><br><br><h2 id="3-line-plot"><a class="markdownIt-Anchor" href="#3-line-plot"></a> <strong>3. Line Plot</strong></h2><blockquote><p><strong>plt.plot</strong> ( <em>x, y, label=…, color=…, alpha=…, marker=…, linestyle=…</em>)</p></blockquote><h3 id="3-1-기본-lineplot-그리기"><a class="markdownIt-Anchor" href="#3-1-기본-lineplot-그리기"></a> 3-1. 기본 lineplot 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">1</span> + np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line">plt.title(<span class="string">'sin graph'</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_50_0.png" alt="png"></p><br><h3 id="3-2-2개-이상의-그래프-그리기"><a class="markdownIt-Anchor" href="#3-2-2개-이상의-그래프-그리기"></a> 3-2. 2개 이상의 그래프 그리기</h3><ul><li>label: line 이름 (legend에 나타남)</li><li>color: 컬러 옵션</li><li>alpha: 투명도 옵션</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span> + np.cos(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_1,label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, alpha = <span class="number">0.3</span>)  <span class="comment"># label 설정값을 legend에 나타날 수 있음</span></span><br><span class="line">plt.plot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, alpha = <span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"x value"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y value"</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"sin and cos graph"</span>, fontsize = <span class="number">18</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_54_0.png" alt="png"></p><br><h3 id="3-3-마커-스타일링"><a class="markdownIt-Anchor" href="#3-3-마커-스타일링"></a> 3-3. 마커 스타일링</h3><ul><li>marker: 마커 옵션</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span>+ np.cos(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_1, label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, alpha=<span class="number">0.3</span>, marker=<span class="string">'o'</span>)</span><br><span class="line">plt.plot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, alpha=<span class="number">0.7</span>, marker=<span class="string">'+'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin and cos graph'</span>, fontsize = <span class="number">18</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_58_0.png" alt="png"></p><br><h3 id="3-4-라인-스타일링"><a class="markdownIt-Anchor" href="#3-4-라인-스타일링"></a> 3-4. 라인 스타일링</h3><ul><li>linestyle: 라인 스타일 변경 옵션</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y_1 = <span class="number">1</span> + np.sin(x)</span><br><span class="line">y_2 = <span class="number">1</span>+ np.cos(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_1, label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, linestyle=<span class="string">':'</span>)</span><br><span class="line">plt.plot(x, y_2, label=<span class="string">'1+cos'</span>, color=<span class="string">'red'</span>, linestyle=<span class="string">'-.'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y value'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin and cos graph'</span>, fontsize = <span class="number">18</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_62_0.png" alt="png"></p><br><br><h2 id="4-areaplot-filled-area"><a class="markdownIt-Anchor" href="#4-areaplot-filled-area"></a> <strong>4. Areaplot (Filled Area)</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.fill_between.html" target="_blank" rel="noopener">&lt;plt.fill_between&gt; Document</a></p></blockquote><blockquote><p><strong>plt.fill_between</strong> (<em>x, y, color=…, alpha=…</em>)</p></blockquote><h3 id="4-1-기본-areaplot-그리기"><a class="markdownIt-Anchor" href="#4-1-기본-areaplot-그리기"></a> 4-1. 기본 areaplot 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = np.random.randint(low=<span class="number">5</span>, high=<span class="number">10</span>, size=<span class="number">20</span>)</span><br><span class="line">y</span><br></pre></td></tr></tbody></table></figure><pre><code>array([8, 8, 7, 6, 5, 8, 6, 9, 8, 8, 5, 5, 6, 6, 5, 5, 6, 8, 9, 5])</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">21</span>)</span><br><span class="line">y = np.random.randint(low=<span class="number">5</span>, high=<span class="number">10</span>, size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill_between으로 색칠하기</span></span><br><span class="line">plt.fill_between(x, y, color = <span class="string">"green"</span>, alpha = <span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_72_0.png" alt="png"></p><br><h3 id="4-2-경계선을-굵게-그리고-area는-옅게-그리는-효과-적용"><a class="markdownIt-Anchor" href="#4-2-경계선을-굵게-그리고-area는-옅게-그리는-효과-적용"></a> 4-2. 경계선을 굵게 그리고 area는 옅게 그리는 효과 적용</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.fill_between(x, y, color=<span class="string">'green'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.plot(x, y, color=<span class="string">'green'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_75_0.png" alt="png"></p><br><h3 id="4-3-여러-그래프를-겹쳐서-표현"><a class="markdownIt-Anchor" href="#4-3-여러-그래프를-겹쳐서-표현"></a> 4-3. 여러 그래프를 겹쳐서 표현</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.05</span>)</span><br><span class="line">y_1 = np.cos(x) + <span class="number">1</span></span><br><span class="line">y_2 = np.sin(x) + <span class="number">1</span></span><br><span class="line">y_3 = y_1 * y_2 / np.pi</span><br><span class="line"></span><br><span class="line">plt.fill_between(x, y_1, label=<span class="string">'1+cos'</span>, color=<span class="string">'green'</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">plt.fill_between(x, y_2, label=<span class="string">'1+sin'</span>, color=<span class="string">'blue'</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.fill_between(x, y_3, label=<span class="string">'sin*cos/pi'</span>, color=<span class="string">'red'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_78_0.png" alt="png"></p><p>많이 겹치는 부분이 어디인지 확인하고 싶을 때 많이 활용됨</p><p><br> <br></p><h2 id="5-histogram"><a class="markdownIt-Anchor" href="#5-histogram"></a> <strong>5. Histogram</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.hist.html" target="_blank" rel="noopener">&lt;plt.hist&gt; Document</a></p></blockquote><blockquote><p><strong>plt.hist</strong> (x, bins = …)</p></blockquote><h3 id="5-1-기본-histogram-그리기"><a class="markdownIt-Anchor" href="#5-1-기본-histogram-그리기"></a> 5-1. 기본 Histogram 그리기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">plt.hist(x, bins = bins)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_87_0.png" alt="png"></p><br><h3 id="5-2-다중-histogram-그리기"><a class="markdownIt-Anchor" href="#5-2-다중-histogram-그리기"></a> 5-2. 다중 Histogram 그리기</h3><blockquote><p><strong>fig, axs = plt.subplots</strong> (<em>row, column, sharey = True, tight_layout = True</em>)<br><strong>axes[i].hist</strong> ( <em>x, bins = …</em>)</p><ul><li><strong>sharey:</strong> 다중 그래프가 같은 y축을 share</li><li><strong>tight_layout:</strong> graph의 패딩을 자동으로 조절해주어 fit한 graph를 생성</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, </span><br><span class="line">                        sharey = <span class="literal">True</span>,</span><br><span class="line">                        tight_layout = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.set_size_inches(<span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].hist(x, bins = bins)</span><br><span class="line">axes[<span class="number">1</span>].hist(x, bins = bins*<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">2</span>].hist(x, bins = bins*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_91_0.png" alt="png"></p><br><h3 id="5-3-y축에-density-표기"><a class="markdownIt-Anchor" href="#5-3-y축에-density-표기"></a> 5-3. Y축에 Density 표기</h3><ul><li><strong>pdf(확률 밀도 함수):</strong> density = True</li><li><strong>cdf(누적 확률 함수):</strong> density = True, cumulatice = True</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100000</span></span><br><span class="line">bins = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, tight_layout = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.set_size_inches(<span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># density=True 값을 통하여 Y축에 density를 표기할 수 있다</span></span><br><span class="line">axes[<span class="number">0</span>].hist(x, bins = bins, density = <span class="literal">True</span>, cumulative = <span class="literal">True</span>)  <span class="comment">#cdf: 누적확률함수</span></span><br><span class="line">axes[<span class="number">1</span>].hist(x, bins = bins, density = <span class="literal">True</span>)  <span class="comment"># pdf: 확률밀도함수</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_95_0.png" alt="png"></p><br><br><h2 id="6-pie-chart"><a class="markdownIt-Anchor" href="#6-pie-chart"></a> <strong>6. Pie Chart</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pie.html" target="_blank" rel="noopener">&lt;plt.pie&gt; Document</a></p></blockquote><blockquote><p><strong>plt.pie</strong>( <em>x, explode=None, labels=None, colors=None, autopct=None, shadow=False, startangle=None,…</em>)</p></blockquote><p><strong>pie chart 옵션</strong></p><ul><li>explode: 파이에서 툭 튀어져 나온 비율</li><li>autopct: 퍼센트 자동으로 표기</li><li>shadow: 그림자 표시</li><li>startangle: 파이를 그리기 시작할 각도</li></ul><p><strong>리턴을 받는 인자</strong></p><ul><li><p>texts: label에 대한 텍스트 효과</p></li><li><p>autotexts: 파이 위에 그려지는 텍스트 효과</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">labels = [<span class="string">'Samsung'</span>, <span class="string">'Huawei'</span>, <span class="string">'Apple'</span>, <span class="string">'Xiaomi'</span>, <span class="string">'Oppo'</span>, <span class="string">'Etc'</span>]</span><br><span class="line">sizes = [<span class="number">20.4</span>, <span class="number">15.8</span>, <span class="number">10.5</span>, <span class="number">9</span>, <span class="number">7.6</span>, <span class="number">36.7</span>]</span><br><span class="line">explode = (<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># text, autotext 인자를 활용하여 텍스트 스타일링을 적용한다</span></span><br><span class="line">patches, texts, autotexts = plt.pie(sizes,</span><br><span class="line">                                    explode = explode,</span><br><span class="line">                                    labels = labels,</span><br><span class="line">                                    autopct = <span class="string">"%1.1f%%"</span>,</span><br><span class="line">                                    shadow = <span class="literal">True</span>,</span><br><span class="line">                                    startangle=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Smartphone Pie'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># label 텍스트에 대한 스타일 적용</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line">    t.set_fontsize(<span class="number">12</span>)</span><br><span class="line">    t.set_color(<span class="string">'gray'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># pie 위의 텍스트에 대한 스타일 적용</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> autotexts:</span><br><span class="line">    t.set_fontsize(<span class="number">18</span>)</span><br><span class="line">    t.set_color(<span class="string">'white'</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_103_0.png" alt="png"></p><br><br><h2 id="7-box-plot"><a class="markdownIt-Anchor" href="#7-box-plot"></a> <strong>7. Box Plot</strong></h2><img src="/images/S-Python-Matplotlib2/R800x0" alt="box plot 해석" style="zoom:80%;"><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.boxplot.html" target="_blank" rel="noopener">&lt;plt.boxplot&gt; Document</a></p></blockquote><blockquote><p><strong>plt.boxplot</strong> (<em>data, vert=True, flierprops = …</em>)</p><ul><li><strong>vert:</strong> boxplot 축 바꾸기 (If True: 수직 boxplot; If not: 수평 boxplot)</li><li><strong>flierprops:</strong> oulier marker 설정 (Symbol &amp; Color)</li></ul></blockquote>  <br><p><strong>샘플 데이터 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Data Generation Process (DGP)</span></span><br><span class="line">spread = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center = np.ones(<span class="number">25</span>) * <span class="number">50</span></span><br><span class="line">flier_high = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data = np.concatenate((spread, center, flier_high, flier_low))</span><br></pre></td></tr></tbody></table></figure>  <br><h3 id="7-1-기본-박스플롯-생성"><a class="markdownIt-Anchor" href="#7-1-기본-박스플롯-생성"></a> 7-1. 기본 박스플롯 생성</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(data)</span><br><span class="line">plt.tight_layout</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_115_0.png" alt="png"></p><br><h3 id="7-2-다중-박스플롯-생성"><a class="markdownIt-Anchor" href="#7-2-다중-박스플롯-생성"></a> 7-2. 다중 박스플롯 생성</h3><blockquote><ul><li>다중 그래프 생성을 위해서는 data 자체가 <strong>2차원으로 구성</strong>되어 있어야 한다</li><li>row와 column으로 구성된 DataFrame에서 Column은 x축에 Row는 Y축에 구성되어 있음</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DGP</span></span><br><span class="line">spread1 = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center1 = np.ones(<span class="number">25</span>) * <span class="number">50</span></span><br><span class="line">flier_high1 = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low1 = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data1 = np.concatenate((spread1, center1, flier_high1, flier_low1))</span><br><span class="line"></span><br><span class="line">spread2 = np.random.rand(<span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">center2 = np.ones(<span class="number">25</span>) * <span class="number">40</span></span><br><span class="line">flier_high2 = np.random.rand(<span class="number">10</span>) * <span class="number">100</span> + <span class="number">100</span></span><br><span class="line">flier_low2 = np.random.rand(<span class="number">10</span>) * <span class="number">-100</span></span><br><span class="line">data2 = np.concatenate((spread2, center2, flier_high2, flier_low2))</span><br><span class="line"></span><br><span class="line">data1.shape = (<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">data2.shape = (<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data = [data1, data2, data2[::<span class="number">2</span>, <span class="number">0</span>]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_120_0.png" alt="png"></p><br><h3 id="7-3-box-plot-축-바꾸기"><a class="markdownIt-Anchor" href="#7-3-box-plot-축-바꾸기"></a> 7-3. Box Plot 축 바꾸기</h3><ul><li><strong>vert = False</strong> 옵션을 사용</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(data, vert = <span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">'Horizontal Box Plot'</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_124_0.png" alt="png"></p><br><h3 id="7-4-outlier-마커-심볼과-컬러-변경"><a class="markdownIt-Anchor" href="#7-4-outlier-마커-심볼과-컬러-변경"></a> 7-4. Outlier 마커 심볼과 컬러 변경</h3><ul><li><strong>flierprops = …</strong> 옵션 사용</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outlier_marker = dict(markerfacecolor = <span class="string">'r'</span>, marker = <span class="string">'D'</span>)  <span class="comment"># red diamond</span></span><br><span class="line"></span><br><span class="line">plt.boxplot(data, flierprops = outlier_marker)</span><br><span class="line">plt.title(<span class="string">'Change Outlier Symbols'</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_128_0.png" alt="png"></p><br><br><h2 id="8-3d-그래프-그리기"><a class="markdownIt-Anchor" href="#8-3d-그래프-그리기"></a> <strong>8. 3D 그래프 그리기</strong></h2><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#contour-plots" target="_blank" rel="noopener">mplot3d tutorial</a></p></blockquote><p>3D 로 그래프를 그리기 위해서는 <code>mplot3d</code>를 추가로 import 해야 함</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br></pre></td></tr></tbody></table></figure>  <br><h3 id="8-1-밑그림-그리기-canvas"><a class="markdownIt-Anchor" href="#8-1-밑그림-그리기-canvas"></a> 8-1. 밑그림 그리기 (canvas)</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection = <span class="string">'3d'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_137_0.png" alt="png"></p><br><h3 id="8-2-3d-plot-그리기"><a class="markdownIt-Anchor" href="#8-2-3d-plot-그리기"></a> 8-2. 3D plot 그리기</h3><blockquote><p><em>Axes</em> = plt.axes(projection = ‘3d’)</p><ul><li><em>Axes</em> <strong>.plot</strong> (<em>x, y, z, color=…, alpha=…, marker=…</em>)</li><li><em>Axes</em> <strong>.plot3D</strong> (<em>x, y, z, color=…, alpha=…, marker=…</em>)</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projection = 3d로 설정</span></span><br><span class="line">ax = plt.axes(projection = <span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y, z 데이터 생성</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)</span><br><span class="line">y = np.cos(z)</span><br><span class="line"></span><br><span class="line">ax.plot(x, y, z, <span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_142_0.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projection = 3d로 설정</span></span><br><span class="line">ax = plt.axes(projection = <span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y, z 데이터 생성</span></span><br><span class="line">sample_size = <span class="number">100</span></span><br><span class="line">x = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, sample_size)) <span class="comment"># cumsum: 누적 합</span></span><br><span class="line">y = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, sample_size))</span><br><span class="line">z = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, sample_size))</span><br><span class="line"></span><br><span class="line">ax.plot3D(x, y, z, alpha=<span class="number">0.6</span>, marker=<span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'ax.plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_144_0.png" alt="png"></p><br><h3 id="8-3-3d-scatter-그리기"><a class="markdownIt-Anchor" href="#8-3-3d-scatter-그리기"></a> 8-3. 3d-scatter 그리기</h3><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.scatter.html" target="_blank" rel="noopener">&lt;Axes.scatter&gt; Document</a></p></blockquote><blockquote><p><em>Axes</em> = fig.add_subplot(111, projection=‘3d’) <font color="blue"># Axe3D object</font></p><p><em>Axes</em> <strong>.scatter</strong>( <em>x, y, z, s=None, c=None, marker=None, cmap=None, alpha=None, …</em>)</p><ul><li><strong>s:</strong> marker size</li><li><strong>c:</strong> marker color</li></ul></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>) <span class="comment"># Axe3D object</span></span><br><span class="line"></span><br><span class="line">sample_size = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">x = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">5</span>, sample_size))</span><br><span class="line">y = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">5</span>, sample_size))</span><br><span class="line">z = np.cumsum(np.random.normal(<span class="number">0</span>, <span class="number">5</span>, sample_size))</span><br><span class="line"></span><br><span class="line">ax.scatter(x, y, z, c=z, s=<span class="number">20</span>, alpha=<span class="number">0.5</span>, cmap=<span class="string">'Greens'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'ax.scatter'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_148_0.png" alt="png"></p><p>컬러가 찐한 부분에 데이터가 더 많이 몰려있음</p>  <br><h3 id="8-4-contour3d-그리기-등고선"><a class="markdownIt-Anchor" href="#8-4-contour3d-그리기-등고선"></a> 8-4. contour3D 그리기 (등고선)</h3><blockquote><p><em>Axes</em> = plt.axes(projection=‘3d’)<br><em>Axes</em> <strong>.contour3D</strong> (<em>x, y, z</em> )</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">x, y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line">z = np.sin(np.sqrt(x**<span class="number">2</span> + y**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">ax = plt.axes(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">ax.contour3D(x, y, z, <span class="number">20</span>, cmap=<span class="string">'Reds'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"ax.contour3D"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_153_0.png" alt="png"></p><br><br><h2 id="9-imshow"><a class="markdownIt-Anchor" href="#9-imshow"></a> <strong>9. imshow</strong></h2><p>이미지 데이터가 numpy array에서는 숫자형식으로 표현됨<br>명령어<code>imshow</code>는 이 컬러숫자들을 이미지로 변환하여 보여줌</p>  <br><p>예제: <code>sklearn.datasets</code>안의 <code>load_digits</code>데이터</p><ul><li><p><code>load_digits</code> 는 0~16 값을 가지는 array로 이루어져 있다</p></li><li><p>1개의 array는 8 X 8 배열 안에 표현되어 있다</p></li><li><p>숫자는 0~9까지 이루어져있다</p><br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.images[:<span class="number">10</span>]  <span class="comment"># 앞에 10개 image를 뽑아서 저장함</span></span><br><span class="line">X[<span class="number">0</span>]  <span class="comment"># 첫번째 image의 컬러숫자를 살펴보자</span></span><br></pre></td></tr></tbody></table></figure><pre><code>array([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],       [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],       [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],       [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],       [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],       [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],       [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],       [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]])</code></pre><br><p>지금 한 위치에 숫자 하나밖에 없어서 컬러는 흑백으로 나옴.<br>숫자가 클수록 black에 가깝고, 작을수록 white에 가까움</p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">5</span>, sharex=<span class="literal">True</span>, figsize=(<span class="number">12</span>, <span class="number">6</span>), sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    axes[i//<span class="number">5</span>][i%<span class="number">5</span>].imshow(X[i], cmap=<span class="string">'Blues'</span>)</span><br><span class="line">    axes[i//<span class="number">5</span>][i%<span class="number">5</span>].set_title(str(i), fontsize=<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib2/output_164_0.png" alt="png"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      scatterplot, barplot, line plot, areaplot, histogram, pie chart, box plot, 3D plot, imshow
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Matplotlib" scheme="https://hyemin-kim.github.io/tags/Matplotlib/"/>
    
      <category term="시각화" scheme="https://hyemin-kim.github.io/tags/%EC%8B%9C%EA%B0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Matplotlib - (1) 기본 canvas 그리기 및 스타일링</title>
    <link href="https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib1/"/>
    <id>https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib1/</id>
    <published>2020-06-28T05:12:24.000Z</published>
    <updated>2020-07-03T12:27:12.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="기본적인-canvas-그리기-및-스타일링"><a class="markdownIt-Anchor" href="#기본적인-canvas-그리기-및-스타일링"></a> 기본적인 canvas 그리기 및 스타일링</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EB%B0%91-%EA%B7%B8%EB%A6%BC-%EA%B7%B8%EB%A6%AC%EA%B8%B0"><strong>1. 밑 그림 그리기</strong></a><ul><li><a href="#1-1-%EB%8B%A8%EC%9D%BC-%EA%B7%B8%EB%9E%98%ED%94%84-single-graph">1-1. 단일 그래프 (single graph)</a></li><li><a href="#1-2-%EB%8B%A4%EC%A4%91-%EA%B7%B8%EB%9E%98%ED%94%84-multiple-graphs">1-2. 다중 그래프 (multiple graphs)</a></li><li><a href="#1-3-%EA%B7%B8%EB%9E%98%ED%94%84-%EB%B0%B0%EC%97%B4-subplot-subplots">1-3. 그래프 배열 (subplot / subplots)</a></li></ul></li><li><a href="#2-%EC%A3%BC%EC%9A%94-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%98%B5%EC%85%98"><strong>2. 주요 스타일 옵션</strong></a><ul><li><a href="#2-1-%ED%83%80%EC%9D%B4%ED%8B%80">2-1. 타이틀</a></li><li><a href="#2-2-x-y%EC%B6%95-label-%EC%84%A4%EC%A0%95">2-2. X, Y축 Label 설정</a></li><li><a href="#2-3-x-y%EC%B6%95-tick-%EC%A1%B0%EC%A0%95-rotation">2-3. X, Y축 Tick 조정 (rotation)</a></li><li><a href="#2-4-%EB%B2%94%EB%A1%80-legend-%EC%84%A4%EC%A0%95">2-4. 범례 (Legend) 설정</a></li><li><a href="#2-5-x%EC%99%80-y%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90limit-%EC%84%A4%EC%A0%95">2-5. X와 Y의 한계점(Limit) 설정</a></li><li><a href="#2-6-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%84%B8%EB%B6%80-%EC%84%A4%EC%A0%95-%EB%A7%88%EC%BB%A4-%EB%9D%BC%EC%9D%B8-%EC%BB%AC%EB%9F%AC">2-6. 스타일 세부 설정 - 마커, 라인, 컬러</a></li><li><a href="#2-7-%EA%B7%B8%EB%A6%AC%EB%93%9C-grid-%EC%84%A4%EC%A0%95">2-7. 그리드 (grid) 설정</a></li></ul></li></ul><p></p><br><blockquote><p><em><strong>reference:</strong></em> <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">pyplot 공식 Document 살펴보기</a></p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.rcParams["figure.figsize"] = (12, 9)  # figure size 설정</span></span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="1-밑-그림-그리기"><a class="markdownIt-Anchor" href="#1-밑-그림-그리기"></a> <strong>1. 밑 그림 그리기</strong></h2><h3 id="1-1-단일-그래프-single-graph"><a class="markdownIt-Anchor" href="#1-1-단일-그래프-single-graph"></a> 1-1. 단일 그래프 (single graph)</h3><blockquote><p><strong>plt.plot</strong>(<em>df_name</em>)<br><strong>plt.show()</strong></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## data 생성</span></span><br><span class="line">data = np.arange(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## plot</span></span><br><span class="line">plt.plot(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 그래프만 보여주는 코드 (타 실행 결과 생략하고 그래프만 보여줌)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_10_0.png" alt="png"></p><br><h3 id="1-2-다중-그래프-multiple-graphs"><a class="markdownIt-Anchor" href="#1-2-다중-그래프-multiple-graphs"></a> 1-2. 다중 그래프 (multiple graphs)</h3><blockquote><ul><li><strong>여러 그래프를 같은 canvas 안에 그리기:</strong><br>명령어 <code>plt.plot(df_name)</code> 를 연속 사용</li><li><strong>새 그래프를 새로운 canvas 안에 그리기:</strong><br>세 그래프를 그리기 전에 <code>plt.figure()</code>명령어를 추가</li></ul></blockquote><br><p><strong>(1) 1개의 canvas 안에 다중 그래프 그리기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data1 = np.arange(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line">data2 = np.arange(<span class="number">51</span>, <span class="number">101</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.plot(data1)</span><br><span class="line">plt.plot(data2)</span><br><span class="line">plt.plot(data2 + <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_15_0.png" alt="png"></p><br><p><strong>(2) 새로운 canvas에서 새 그래프를 그리기</strong></p><ul><li>figure()는 새로운 그래프 canvas를 생성한다</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data1 = np.arange(<span class="number">100</span>, <span class="number">201</span>)</span><br><span class="line">data2 = np.arange(<span class="number">200</span>, <span class="number">301</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(data)</span><br><span class="line"></span><br><span class="line">plt.figure()   <span class="comment"># figure() 명령어를 추가</span></span><br><span class="line">plt.plot(data2)</span><br><span class="line">plt.plot(data2 + <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_19_0.png" alt="png"></p><p><img src="/images/S-Python-Matplotlib1/output_19_1.png" alt="png"></p><br><h3 id="1-3-그래프-배열-subplot-subplots"><a class="markdownIt-Anchor" href="#1-3-그래프-배열-subplot-subplots"></a> 1-3. 그래프 배열 (subplot / subplots)</h3><blockquote><p>여러 개 plot을 지정된 행,열수에 따라 배열해주기:</p><ul><li>plt.subplot(row, column, index)   <font color="blue"># 각 plot의 좌표 설정</font></li><li>plt.subplots(행의 갯수, 열의 갯수)  <font color="blue"># 행,열수 설정</font></li></ul></blockquote>  <br><p><strong>(1) subplot (plot의 좌표를 설정하기)</strong></p><p>이 방법은 <strong>그래프마다 설정</strong>해줘야 함</p><blockquote><p><strong>plt.subplot</strong>(row, column, index)  <font color="blue"># 콤마를 제거해도 됨</font></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data1 = np.arange(<span class="number">100</span>, <span class="number">201</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(data1)</span><br><span class="line"></span><br><span class="line">data2 = np.arange(<span class="number">200</span>, <span class="number">301</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(data2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_27_0.png" alt="png"></p><br><p>위의 코드와 동일하나, "콤마"를 제거한 상태</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data1 = np.arange(<span class="number">100</span>, <span class="number">201</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)   <span class="comment"># 콤마를 생략함: 211 -&gt; row : 2, col: 1, index : 1</span></span><br><span class="line">plt.plot(data1)</span><br><span class="line"></span><br><span class="line">data2 = np.arange(<span class="number">200</span>, <span class="number">301</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)   <span class="comment"># 콤마를 생략함</span></span><br><span class="line">plt.plot(data2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_30_0.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data1 = np.arange(<span class="number">100</span>, <span class="number">201</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(data1)</span><br><span class="line"></span><br><span class="line">data2 = np.arange(<span class="number">200</span>, <span class="number">301</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(data2)</span><br><span class="line"></span><br><span class="line">data3 = np.arange(<span class="number">300</span>, <span class="number">401</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(data3)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_32_0.png" alt="png"></p><br><p><strong>(2) subplots (배열 기준인 행,열수를 지정하기)</strong></p><p>subplot와 다르게 <strong>subplots()명령어는 한번만 설정</strong>해주면 됨</p><blockquote><p><strong>plt.subplots</strong>(행의 갯수, 열의 갯수)</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = np.arange(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 밑 그림</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot</span></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].plot(data)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].plot(data * data)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">2</span>].plot(data ** <span class="number">3</span>)  <span class="comment"># data^3</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].plot(data % <span class="number">10</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].plot(-data)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">2</span>].plot(data // <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_37_0.png" alt="png"></p><br><br><h2 id="2-주요-스타일-옵션"><a class="markdownIt-Anchor" href="#2-주요-스타일-옵션"></a> <strong>2. 주요 스타일 옵션</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출처: matplotlib.org</span></span><br><span class="line">Image(<span class="string">'https://matplotlib.org/_images/anatomy.png'</span>)</span><br></pre></td></tr></tbody></table></figure><img src="/images/S-Python-Matplotlib1/output_41_0.png" alt="png" style="zoom:67%;"><br>  <h3 id="2-1-타이틀"><a class="markdownIt-Anchor" href="#2-1-타이틀"></a> 2-1. 타이틀</h3><blockquote><ul><li><strong>타이틀 추가:</strong> plt.title("…")</li><li><strong>타이틀 fontsize 설정:</strong>  plt.title("…",  fontsize = … )</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"이것은 타이틀 입니다"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0.5, 1.0, '이것은 타이틀 입니다')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_46_1.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"타이틀 fontsize를 키웁니다"</span>, fontsize = <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0.5, 1.0, '타이틀 fontsize를 키웁니다')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_48_1.png" alt="png"></p><br><h3 id="2-2-x-y축-label-설정"><a class="markdownIt-Anchor" href="#2-2-x-y축-label-설정"></a> 2-2. X, Y축 Label 설정</h3><blockquote><ul><li><strong>plt.xlabel</strong> ( “<em>x_name</em>”, fontsize = …)</li><li><strong>plt.ylabel</strong> ( “<em>y_name</em>”, fontsize = …)</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 설정</span></span><br><span class="line">plt.title(<span class="string">"Label 설정 예제"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">"X축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y축"</span>, fontsize = <span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_52_1.png" alt="png"></p><br><h3 id="2-3-x-y축-tick-조정-rotation"><a class="markdownIt-Anchor" href="#2-3-x-y축-tick-조정-rotation"></a> 2-3. X, Y축 Tick 조정 (rotation)</h3><p>Tick은 X, Y축에 위치한 눈금을 말한다<br>rotation 명령어를 통해 Tick의 각도를 조절할 수 있다</p><blockquote><ul><li><strong>plt.xticks</strong> ( <em>rotation = …</em> )</li><li><strong>plt.yticks</strong> ( <em>rotation = …</em> )<br>Rotation 각도는 <font color="blue">역시개방향 회전각도</font>를 말한다</li></ul></blockquote> <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)**<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.log(np.arange(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">"X, Y축 Tick 조정"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축, Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">"X축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X tick, Y tick rotation 조정</span></span><br><span class="line">plt.xticks(rotation = <span class="number">90</span>)</span><br><span class="line">plt.yticks(rotation = <span class="number">30</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>D:\Anaconda\lib\site-packages\ipykernel_launcher.py:3: RuntimeWarning: divide by zero encountered in log  This is separate from the ipykernel package so we can avoid doing imports until(array([-10.,   0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90.]), &lt;a list of 11 Text yticklabel objects&gt;)</code></pre><br><p><img src="/images/S-Python-Matplotlib1/output_58_2.png" alt="png"></p><br><h3 id="2-4-범례-legend-설정"><a class="markdownIt-Anchor" href="#2-4-범례-legend-설정"></a> 2-4. 범례 (Legend) 설정</h3><blockquote><p><strong>plt.legend</strong> ( [ “<em>name1</em>” , “<em>name2</em>” , … ], fontsize = …)</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)**<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.log(np.arange(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">"범례(Legend) 설정"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축, Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">"X축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X tick, Y tick rotation 조정</span></span><br><span class="line">plt.xticks(rotation = <span class="number">90</span>)</span><br><span class="line">plt.yticks(rotation = <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend 설정</span></span><br><span class="line">plt.legend([<span class="string">"2x"</span>, <span class="string">"x^2"</span>, <span class="string">"logx"</span>], fontsize = <span class="number">14</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>D:\Anaconda\lib\site-packages\ipykernel_launcher.py:3: RuntimeWarning: divide by zero encountered in log  This is separate from the ipykernel package so we can avoid doing imports until&lt;matplotlib.legend.Legend at 0x173a5712888&gt;</code></pre><p><img src="/images/S-Python-Matplotlib1/output_63_2.png" alt="png"></p><br><h3 id="2-5-x와-y의-한계점limit-설정"><a class="markdownIt-Anchor" href="#2-5-x와-y의-한계점limit-설정"></a> 2-5. X와 Y의 한계점(Limit) 설정</h3><blockquote><ul><li><strong>plt.xlim</strong> ( <em>a, b</em> )</li><li><strong>plt.ylim</strong> ( <em>c, d</em> )</li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)**<span class="number">2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.log(np.arange(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">"X축, Y축 Limit 설정"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축, Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">"X축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y축"</span>, fontsize = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X tick, Y tick rotation 조정</span></span><br><span class="line">plt.xticks(rotation = <span class="number">90</span>)</span><br><span class="line">plt.yticks(rotation = <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend 설정</span></span><br><span class="line">plt.legend([<span class="string">"2x"</span>, <span class="string">"x^2"</span>, <span class="string">"logx"</span>], fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y limit 설정</span></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>D:\Anaconda\lib\site-packages\ipykernel_launcher.py:3: RuntimeWarning: divide by zero encountered in log  This is separate from the ipykernel package so we can avoid doing imports until(0, 20)</code></pre><p><img src="/images/S-Python-Matplotlib1/output_68_2.png" alt="png"></p><br><h3 id="2-6-스타일-세부-설정-마커-라인-컬러"><a class="markdownIt-Anchor" href="#2-6-스타일-세부-설정-마커-라인-컬러"></a> 2-6. 스타일 세부 설정 - 마커, 라인, 컬러</h3><blockquote><p><em><strong>reference:</strong></em>  <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">세부 Document 확인하기</a></p></blockquote><p>스타일 세부 설정은 마커, 선의 동류 설정, 드리고 컬러가 있으며, 문다열로 세부설정을 하게 된다</p>  <br><p><strong>(1) marker의 종류</strong></p><ul><li>‘.’point marker</li><li>‘,’pixel marker</li><li>‘o’circle marker</li><li>‘v’triangle_down marker</li><li>‘^’triangle_up marker</li><li>‘&lt;’triangle_left marker</li><li>‘&gt;’triangle_right marker</li><li>‘1’tri_down marker</li><li>‘2’tri_up marker</li><li>‘3’tri_left marker</li><li>‘4’tri_right marker</li><li>'s ’square marker</li><li>‘p’pentagon marker</li><li>‘*’star marker</li><li>‘h’hexagon1 marker</li><li>‘H’hexagon2 marker</li><li>‘+’plus marker</li><li>‘x’x marker</li><li>‘D’diamond marker</li><li>‘d’thin_diamond marker</li><li>‘|’vline marker</li><li>‘_’hline marker</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># marker 스타일 설정</span></span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, marker=<span class="string">'o'</span>, markersize=<span class="number">5</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, marker=<span class="string">'v'</span>, markersize=<span class="number">10</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, marker=<span class="string">'+'</span>, markersize=<span class="number">15</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, marker=<span class="string">'*'</span>, markersize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'마커 스타일 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_75_1.png" alt="png"></p><br><p><strong>(2) line의 종류</strong></p><ul><li>‘-’ solid line style</li><li>‘–’ dashed line style</li><li>‘-.’ dash-dot line style</li><li>‘:’ dotted line style</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># line 스타일 설정</span></span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, marker=<span class="string">'o'</span>, linestyle=<span class="string">''</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, marker=<span class="string">'o'</span>, linestyle=<span class="string">'-'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, marker=<span class="string">'v'</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, marker=<span class="string">'+'</span>, linestyle=<span class="string">'-.'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">40</span>, marker=<span class="string">'*'</span>, linestyle=<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'다양한 선의 종류 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_78_1.png" alt="png"></p><br><p><strong>(3) color의 종류</strong></p><ul><li>‘b’blue</li><li>‘g’green</li><li>‘r’red</li><li>‘c’cyan</li><li>‘m’magenta</li><li>‘y’yellow</li><li>‘k’black</li><li>‘w’white</li><li>more choices: <a href="https://matplotlib.org/api/colors_api.html#module-matplotlib.colors" target="_blank" rel="noopener">matplotlib.colors</a>   <em>(e.g. “purple”, “#008000”)</em></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># color 설정</span></span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, marker=<span class="string">'o'</span>, linestyle=<span class="string">'-'</span>, color=<span class="string">'b'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, marker=<span class="string">'v'</span>, linestyle=<span class="string">'--'</span>, color=<span class="string">'c'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, marker=<span class="string">'+'</span>, linestyle=<span class="string">'-.'</span>, color=<span class="string">'y'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, marker=<span class="string">'*'</span>, linestyle=<span class="string">':'</span>, color=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'색상 설정 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_81_1.png" alt="png"></p><br><p><strong>(4) Format: '[marker][line][color]'</strong></p><p>example:</p><ul><li>‘b’    # blue markers with default shape</li><li>‘or’   # red circles</li><li>‘-g’   # green solid line</li><li>‘–’   # dashed line with default color</li><li>‘^k:’  # black triangle_up markers connected by a dotted line</li></ul><p>Each of them is optional. If not provided, the value from the style cycle is used. Exception: If line is given, but no marker, the data will be a line without markers.</p><br>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "marker + line + color" format 설정</span></span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, <span class="string">"o-r"</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, <span class="string">'v--b'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, <span class="string">'+y'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, <span class="string">':k'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'marker/line + color 설정 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_87_1.png" alt="png"></p><br><p><strong>(5) 색상 투명도 설정</strong></p><ul><li>alpha = … (0.0 ~ 1.0)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># color 투명도 설정</span></span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, color=<span class="string">'b'</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, color=<span class="string">'b'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, color=<span class="string">'b'</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, color=<span class="string">'b'</span>, alpha=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'투명도 (alpha) 설정 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>Text(0, 0.5, 'Y축')</code></pre><p><img src="/images/S-Python-Matplotlib1/output_90_1.png" alt="png"></p><br><h3 id="2-7-그리드-grid-설정"><a class="markdownIt-Anchor" href="#2-7-그리드-grid-설정"></a> 2-7. 그리드 (grid) 설정</h3><blockquote><p><strong>그리드 (grid) 추가:</strong> plt.grid()</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span>, marker=<span class="string">'o'</span>, linestyle=<span class="string">'-'</span>, color=<span class="string">'b'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">10</span>, marker=<span class="string">'v'</span>, linestyle=<span class="string">'--'</span>, color=<span class="string">'c'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">20</span>, marker=<span class="string">'+'</span>, linestyle=<span class="string">'-.'</span>, color=<span class="string">'y'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">10</span>), np.arange(<span class="number">10</span>)*<span class="number">2</span> - <span class="number">30</span>, marker=<span class="string">'*'</span>, linestyle=<span class="string">':'</span>, color=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 타이틀 &amp; font 설정</span></span><br><span class="line">plt.title(<span class="string">'그리드 설정 예제'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X축 &amp; Y축 Label 설정</span></span><br><span class="line">plt.xlabel(<span class="string">'X축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y축'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># grid 옵션 추가</span></span><br><span class="line">plt.grid()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/S-Python-Matplotlib1/output_94_0.png" alt="png"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;기본적인-canvas-그리기-및-스타일링&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본적인-canvas-그리기-및-스타일링&quot;&gt;&lt;/a&gt; 기본적인 canvas 그리기 및 스타일링&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul clas
      
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Matplotlib" scheme="https://hyemin-kim.github.io/tags/Matplotlib/"/>
    
      <category term="시각화" scheme="https://hyemin-kim.github.io/tags/%EC%8B%9C%EA%B0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Matplotlib 개요</title>
    <link href="https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib0/"/>
    <id>https://hyemin-kim.github.io/2020/06/28/S-Python-Matplotlib0/</id>
    <published>2020-06-28T05:11:58.000Z</published>
    <updated>2020-06-28T05:42:20.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="시각화-library-matplotlib-개요"><a class="markdownIt-Anchor" href="#시각화-library-matplotlib-개요"></a> 시각화 library  – [matplotlib] 개요</h1><p></p><ul class="markdownIt-TOC"><li><a href="#matplotlib-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B0%98-%EC%8B%9C%EA%B0%81%ED%99%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC"><strong><strong>matplotlib:</strong> 파이썬 기반 시각화 라이브러리</strong></a><ul><li><a href="#1-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0">1. 불러오기</a></li><li><a href="#2-matplotlib-%EC%A3%BC%EC%9A%94-%EC%9E%A5%EC%A0%90">2. matplotlib 주요 장점</a></li><li><a href="#3-matplotlib-%EC%A3%BC%EC%9A%94-%EB%8B%A8%EC%A0%90">3. matplotlib 주요 단점</a></li><li><a href="#4-matplotlib-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8">4. matplotlib 웹사이트</a></li></ul></li></ul><p></p><br><h2 id="matplotlib-파이썬-기반-시각화-라이브러리"><a class="markdownIt-Anchor" href="#matplotlib-파이썬-기반-시각화-라이브러리"></a> <strong><strong>matplotlib:</strong> 파이썬 기반 시각화 라이브러리</strong></h2>  <br><h3 id="1-불러오기"><a class="markdownIt-Anchor" href="#1-불러오기"></a> 1. 불러오기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># alias 설정</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>pandas도 matplotlib을 내장</p><br></li></ul><h3 id="2-matplotlib-주요-장점"><a class="markdownIt-Anchor" href="#2-matplotlib-주요-장점"></a> 2. matplotlib 주요 장점</h3><ul><li><p>파이썬 표준 시각화 도구라고 불릴 만큼 다양한 기능 지원</p></li><li><p>세부 옵션을 통하여 아름다운 스타일링 가능</p></li><li><p>보다 다양한 그래프를 그릴 수 있음</p></li><li><p>pandas와 연동이 용이함</p><br></li></ul><h3 id="3-matplotlib-주요-단점"><a class="markdownIt-Anchor" href="#3-matplotlib-주요-단점"></a> 3. matplotlib 주요 단점</h3><ul><li><p>한글에 대한 완벽한 지원 X</p><ul><li>한글 사용시 추가설정 필요<br>(설정방법은 <a href="https://hyemin-kim.github.io/2020/06/25/S-Python-Pandas-visual/"> [Python &gt;&gt; Pandas 시각화] </a> 안의 [0.준비 - 한글폰트 깨짐현상 해결]을 참조)</li></ul></li><li><p>세부 기능이 많으나, 사용성이 복잡하다고 느낄 수 있음</p><br></li></ul><h3 id="4-matplotlib-웹사이트"><a class="markdownIt-Anchor" href="#4-matplotlib-웹사이트"></a> 4. matplotlib 웹사이트</h3><p><a href="http://matplotlib.org/" target="_blank" rel="noopener">http://matplotlib.org/</a></p><p>여거시 matplotlib의 Documents, Samples 들을 볼 수 있음</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      matplotlib - 파이썬 기반 시각화 라이브러리
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Matplotlib" scheme="https://hyemin-kim.github.io/tags/Matplotlib/"/>
    
      <category term="사각화" scheme="https://hyemin-kim.github.io/tags/%EC%82%AC%EA%B0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Pandas 시각화</title>
    <link href="https://hyemin-kim.github.io/2020/06/25/S-Python-Pandas-visual/"/>
    <id>https://hyemin-kim.github.io/2020/06/25/S-Python-Pandas-visual/</id>
    <published>2020-06-25T05:09:37.000Z</published>
    <updated>2020-06-25T05:28:17.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas-데이터-시각화"><a class="markdownIt-Anchor" href="#pandas-데이터-시각화"></a> Pandas - 데이터 시각화</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EC%A4%80%EB%B9%84-%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8-%EA%B9%A8%EC%A7%90%ED%98%84%EC%83%81-%ED%95%B4%EA%B2%B0"><strong>0. 준비 – 한글폰트 깨짐현상 해결</strong></a></li><li><a href="#1-plot-%EA%B7%B8%EB%9E%98%ED%94%84"><strong>1. Plot 그래프</strong></a><ul><li><a href="#line-%EA%B7%B8%EB%9E%98%ED%94%84">line 그래프</a></li><li><a href="#bar-%EA%B7%B8%EB%9E%98%ED%94%84">bar 그래프</a></li><li><a href="#%ED%9E%88%EC%8A%A4%ED%86%A0%EA%B7%B8%EB%9E%A8-hist">히스토그램 (hist)</a></li><li><a href="#%EC%BB%A4%EB%84%90-%EB%B0%80%EB%8F%84-%EA%B7%B8%EB%9E%98%ED%94%84-kde">커널 밀도 그래프 (kde)</a></li><li><a href="#%EA%B3%A0%EB%B0%80%EB%8F%84-%EC%82%B0%EC%A0%90%EB%8F%84-%EA%B7%B8%EB%9E%98%ED%94%84-hexbin">고밀도 산점도 그래프 (hexbin)</a></li><li><a href="#%EB%B0%95%EC%8A%A4-%ED%94%8C%EB%A1%AF-box">박스 플롯 (box)</a></li><li><a href="#area-plot">area plot</a></li><li><a href="#%ED%8C%8C%EC%9D%B4-%EA%B7%B8%EB%9E%98%ED%94%84-pie-plot">파이 그래프 (pie plot)</a></li><li><a href="#%EC%82%B0%EC%A0%90%EB%8F%84-%EA%B7%B8%EB%9E%98%ED%94%84-scatter-plot">산점도 그래프 (scatter plot)</a></li></ul></li></ul><p></p>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"house_price_clean.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역</th>      <th>규모</th>      <th>연도</th>      <th>월</th>      <th>분양가</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>4</th>      <td>인천</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>3488</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>3288</th>      <td>경남</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3065</td>    </tr>    <tr>      <th>3289</th>      <td>경남</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3247</td>    </tr>    <tr>      <th>3290</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>3291</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>3292</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>3293 rows × 5 columns</p></div><br>  <br><h2 id="0-준비-한글폰트-깨짐현상-해결"><a class="markdownIt-Anchor" href="#0-준비-한글폰트-깨짐현상-해결"></a> <strong>0. 준비 – 한글폰트 깨짐현상 해결</strong></h2><blockquote><p><em><strong>reference:</strong></em></p><ol><li><a href="https://blog.naver.com/itisik/221789012960" target="_blank" rel="noopener">주피터 노트북(Jupyter notebook) - Matplotlib 한글 깨짐 현상 해결</a></li><li><a href="https://teddylee777.github.io/visualization/matplotlib-%EC%8B%9C%EA%B0%81%ED%99%94-%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8%EC%A0%81%EC%9A%A9" target="_blank" rel="noopener">matplotlib/seaborn으로 시각화할 때 한글 폰트 깨짐현상 해결방법</a></li></ol></blockquote><br><p>Jupyter Notebook에서 그래프를 그릴 때 한글 깨짐 현상이 발생한다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179eb070ac8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_9_2.png" alt="png"></p><blockquote><p>우리는 <strong>설정 파일을 수정하여 한글 폰트를 영구 등록</strong>함으로써 이 문제를 해결할 수 있다</p></blockquote><br><p><strong>(1) 설정 파일 위치 찾기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line"><span class="comment">#font 설정 파일 위치 출력</span></span><br><span class="line">mpl.matplotlib_fname()</span><br></pre></td></tr></tbody></table></figure><pre><code>'D:\\Anaconda\\lib\\site-packages\\matplotlib\\mpl-data\\matplotlibrc'</code></pre><br><p><strong>(2) 설정 파일 수정하기</strong></p><p>맨 마지막 <em><strong>matplotlibrc</strong></em> 는 우리가 수정해야할 파일의 이름이다</p><ul><li><p>step 1. 한글 폰트 적용<br>수정전: <em><mark>#</mark> font.family   : <mark>sans-serif</mark></em><br>수정후: <em>font.family   : <mark>Malgun Gothic</mark></em></p></li><li><p>step 2. minus 깨짐 방지<br>수정전: <em><mark>#</mark> axes.unicode_minus  : <mark>True</mark> ## use unicode for the minus symbol</em><br>수정후: <em>axes.unicode_minus  : <mark>False</mark> ## use unicode for the minus symbol</em></p></li></ul><br><p><strong>(3) Tip: 전역으로 시각화 figsize 조절</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">8</span>, <span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure> <br> <p><strong>설정을 완료한 후 jupyter notebook의 kernel을 리셋하고 다시 그래프를 그리면,<br>한글폰트가 깨지지 않고 잘 출력되는 것을 확인하실 수 있다.</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f01b0c48&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_24_1.png" alt="png"></p><br><br><h2 id="1-plot-그래프"><a class="markdownIt-Anchor" href="#1-plot-그래프"></a> <strong>1. Plot 그래프</strong></h2><blockquote><p><em>df_name</em> [ <em>col_name</em> ] <strong>.plot</strong> ( <strong>kind</strong> = ‘…’ )</p></blockquote><blockquote><ul><li>plot은 일반 선그래프를 나타난다</li><li>kind 옵션을 통해 원하는 그패프를 그릴 수 있다</li></ul></blockquote><br><p><strong>kind 옵션:</strong></p><ul><li><p>line: 선 그래프</p></li><li><p>bar: 바 그래프</p></li><li><p>barh: 수평 바 프래프</p></li><li><p>hist: 히스토르램</p></li><li><p>kde: 커널 밀도 그래프</p></li><li><p>hexbin: 고밀도 산점도 그래프</p></li><li><p>box: 박스 플롯</p></li><li><p>area: 면적 그래프</p></li><li><p>pie: 파이 그래프</p></li><li><p>scatter: 산점도 그래프</p><br> </li></ul><h3 id="line-그래프"><a class="markdownIt-Anchor" href="#line-그래프"></a> line 그래프</h3><blockquote><p>line 그래프는 데이터가 연속적인 경우 사용하기 적절하다. (예를 들면, 주가 데이터)</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역</th>      <th>규모</th>      <th>연도</th>      <th>월</th>      <th>분양가</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>4</th>      <td>인천</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>3488</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>3288</th>      <td>경남</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3065</td>    </tr>    <tr>      <th>3289</th>      <td>경남</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3247</td>    </tr>    <tr>      <th>3290</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>3291</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>3292</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>3293 rows × 5 columns</p></div><br>  <p><strong>(1) 모든 observation의 분양가 살펴보기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index - 분양가</span></span><br><span class="line">df[<span class="string">"분양가"</span>].plot(kind = <span class="string">'line'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f01a0bc8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_38_1.png" alt="png"></p><br><p><strong>(2) 연도에 따른 서울 분양가 변화 추세</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select "서울" data</span></span><br><span class="line">df_seoul = df.loc[df[<span class="string">"지역"</span>] == <span class="string">"서울"</span>]</span><br><span class="line">df_seoul</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역</th>      <th>규모</th>      <th>연도</th>      <th>월</th>      <th>분양가</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>64</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>11</td>      <td>6320</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>3178</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2020</td>      <td>1</td>      <td>8779</td>    </tr>    <tr>      <th>3234</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>8193</td>    </tr>    <tr>      <th>3235</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>8140</td>    </tr>    <tr>      <th>3236</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>13835</td>    </tr>    <tr>      <th>3237</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>9039</td>    </tr>  </tbody></table><p>212 rows × 5 columns</p></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group by "year" </span></span><br><span class="line">df_seoul_year = df_seoul.groupby(<span class="string">'연도'</span>).mean()</span><br><span class="line">df_seoul_year</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>월</th>      <th>분양가</th>    </tr>    <tr>      <th>연도</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2015</th>      <td>11.0</td>      <td>6201.000000</td>    </tr>    <tr>      <th>2016</th>      <td>6.5</td>      <td>6674.520833</td>    </tr>    <tr>      <th>2017</th>      <td>6.5</td>      <td>6658.729167</td>    </tr>    <tr>      <th>2018</th>      <td>6.5</td>      <td>7054.687500</td>    </tr>    <tr>      <th>2019</th>      <td>6.5</td>      <td>8735.083333</td>    </tr>    <tr>      <th>2020</th>      <td>1.5</td>      <td>9647.375000</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># line plot</span></span><br><span class="line">df_seoul_year[<span class="string">"분양가"</span>].plot(kind = <span class="string">'line'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f028b5c8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_43_1.png" alt="png"></p><br><h3 id="bar-그래프"><a class="markdownIt-Anchor" href="#bar-그래프"></a> bar 그래프</h3><blockquote><p>bar 그패프는 그룹별로 비교할 때 유용하다</p></blockquote> <br> <p><strong>지역별 평균 분양가 살펴보기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"지역"</span>)[<span class="string">"분양가"</span>].mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>지역강원    2448.156863경기    4133.952830경남    2858.932367경북    2570.465000광주    3055.043750대구    3679.620690대전    3176.127389부산    3691.981132서울    7308.943396세종    2983.543147울산    2990.373913인천    3684.302885전남    2326.250000전북    2381.416268제주    3472.677966충남    2534.950000충북    2348.183962Name: 분양가, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 수직 바 그래프</span></span><br><span class="line">df.groupby(<span class="string">"지역"</span>)[<span class="string">"분양가"</span>].mean().plot(kind = <span class="string">'bar'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f028b548&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_50_1.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 수평 바 그래프</span></span><br><span class="line">df.groupby(<span class="string">"지역"</span>)[<span class="string">"분양가"</span>].mean().plot(kind = <span class="string">'barh'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179edd9d4c8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_51_1.png" alt="png"></p><br><h3 id="히스토그램-hist"><a class="markdownIt-Anchor" href="#히스토그램-hist"></a> 히스토그램 (hist)</h3><blockquote><p>히스토그램은 <strong>분포-빈도 를 시각화</strong>하여 보여준다.<br>가로축에는 분포를, 세로축에는 빈도가 시각화되어 보여짐.</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가"</span>].plot(kind = <span class="string">"hist"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f021cc88&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_56_1.png" alt="png"></p><br><h3 id="커널-밀도-그래프-kde"><a class="markdownIt-Anchor" href="#커널-밀도-그래프-kde"></a> 커널 밀도 그래프 (kde)</h3><blockquote><ul><li>히스토그램과 유사하게 밀도를 보여주는 그래프다</li><li>히스토그램과 유사한 모양새를 각추고 있다</li><li>하지만 히스토그램과 다르게 부드러운 라인을 가지고 있다</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가"</span>].plot(kind = <span class="string">"kde"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f043d608&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_61_1.png" alt="png"></p><br><h3 id="고밀도-산점도-그래프-hexbin"><a class="markdownIt-Anchor" href="#고밀도-산점도-그래프-hexbin"></a> 고밀도 산점도 그래프 (hexbin)</h3><blockquote><ul><li>hexbin은 고밀고 산점도 그래프다</li><li>x와 y 키 값을 넣어 주어야 한다</li><li>x, y 값 모두 numeric value 이어야한다</li><li>데이터의 밀도를 추정한다</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot(kind = <span class="string">"hexbin"</span>, x = <span class="string">"분양가"</span>, y = <span class="string">"연도"</span>, gridsize = <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f028a9c8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_66_1.png" alt="png"></p><br><h3 id="박스-플롯-box"><a class="markdownIt-Anchor" href="#박스-플롯-box"></a> 박스 플롯 (box)</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_seoul = df.loc[df[<span class="string">"지역"</span>] == <span class="string">"서울"</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_seoul[<span class="string">"분양가"</span>].plot(kind = <span class="string">"box"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f226d748&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_70_1.png" alt="png"></p><br><p><strong>box plot 해석</strong></p><p><img src="/images/S-Python-Pandas-visual/R800x0" alt="box plot 해석"></p>  <br><ul><li><p><strong>IQR (Inter Quantile Range)</strong>   = 3Q - 1Q</p></li><li><p><strong>Upper fence</strong> = 75th Percentile + 1.5*IQR</p></li><li><p><strong>Lower fence</strong> = 25th Percentile - 1.5*IQR</p><br></li></ul><p>box plot은 데이터 outlier 감지할 때 가장 많이 활용되며, 25%, median, 75% 분위값을 활용하는 용도로도 많이 활용된다</p>  <br><h3 id="area-plot"><a class="markdownIt-Anchor" href="#area-plot"></a> area plot</h3><blockquote><p>area plot은 line 그래프에서 아래 area를 모두 색칠해 주는 것이 특징이다.</p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역</th>      <th>규모</th>      <th>연도</th>      <th>월</th>      <th>분양가</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>4</th>      <td>인천</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>3488</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>3288</th>      <td>경남</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3065</td>    </tr>    <tr>      <th>3289</th>      <td>경남</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3247</td>    </tr>    <tr>      <th>3290</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>3291</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>3292</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>3293 rows × 5 columns</p></div> <br> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"월"</span>)[<span class="string">"분양가"</span>].count().plot(kind = <span class="string">"line"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f22a6688&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_83_1.png" alt="png"></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"월"</span>)[<span class="string">"분양가"</span>].count().plot(kind = <span class="string">"area"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f2267588&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_84_1.png" alt="png"></p><br><h3 id="파이-그래프-pie-plot"><a class="markdownIt-Anchor" href="#파이-그래프-pie-plot"></a> 파이 그래프 (pie plot)</h3><blockquote><p>pie는 대표적으로 데이터의 점유율을 보유줄 때 유용하다</p></blockquote><br>  <p><strong>연도별 분양가 데이터 점유율</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"연도"</span>)[<span class="string">"분양가"</span>].count().plot(kind = <span class="string">'pie'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f224fec8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_90_1.png" alt="png"></p><br><h3 id="산점도-그래프-scatter-plot"><a class="markdownIt-Anchor" href="#산점도-그래프-scatter-plot"></a> 산점도 그래프 (scatter plot)</h3><blockquote><ul><li>점으로 데이터를 표기해준다</li><li>x, y값을 넣어주어야한다 (hexbin과 유사)</li><li>x축과 y축을 지정해주면 그에 맞는 데이터 분포를 볼 수 있다</li><li>역시 numeric column 만 지정할 수 있다</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot(x = <span class="string">"월"</span>, y = <span class="string">"분양가"</span>, kind = <span class="string">"scatter"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x179f23372c8&gt;</code></pre><p><img src="/images/S-Python-Pandas-visual/output_95_1.png" alt="png"></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas-데이터-시각화&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pandas-데이터-시각화&quot;&gt;&lt;/a&gt; Pandas - 데이터 시각화&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="시각화" scheme="https://hyemin-kim.github.io/tags/%EC%8B%9C%EA%B0%81%ED%99%94/"/>
    
      <category term="Pandas" scheme="https://hyemin-kim.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>【실습】 Python &gt;&gt; Pandas 전처리 -- 부동산 데이터</title>
    <link href="https://hyemin-kim.github.io/2020/06/22/E-Python-Pandas-Pre-1/"/>
    <id>https://hyemin-kim.github.io/2020/06/22/E-Python-Pandas-Pre-1/</id>
    <published>2020-06-22T10:14:57.000Z</published>
    <updated>2020-06-23T16:35:19.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas-전처리-실습-부동산-데이터"><a class="markdownIt-Anchor" href="#pandas-전처리-실습-부동산-데이터"></a> &lt;Pandas 전처리&gt; 실습 – 부동산 데이터</h1><p></p><ul class="markdownIt-TOC"><li><a href="#0-%EC%83%98%ED%94%8C%EB%8D%B0%EC%9D%B4%ED%84%B0"><strong>0. 샘플데이터</strong></a></li><li><a href="#1-column-%EC%9D%B4%EB%A6%84-%EC%A0%9C%EC%A0%95%EC%9D%98-rename"><strong>1. column 이름 제정의 (rename)</strong></a></li><li><a href="#2-data-overview"><strong>2. Data Overview</strong></a><ul><li><a href="#2-1-data-shape-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0">2-1. Data Shape 확인하기</a></li><li><a href="#2-2-%EA%B1%B8%EC%B8%A1%EA%B0%92%EA%B3%BC-data-type-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0">2-2. 걸측값과 Data Type 확인하기</a></li><li><a href="#2-3-%ED%86%B5%EA%B3%84%EA%B0%92-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0">2-3. 통계값 확인하기</a></li></ul></li><li><a href="#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98"><strong>3. 데이터 타입 변환</strong></a><ul><li><a href="#3-1-strstrip%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B3%B5%EB%B0%B1%EC%9D%B4-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EA%B3%B5%EB%B0%B1-%EC%97%86%EC%95%A0%EA%B8%B0">3-1. str.strip()을 활용하여 공백이 있는 데이터의 공백 없애기</a></li><li><a href="#3-2-%EB%B9%88-%EA%B3%B5%EB%B0%B1%EC%97%90-0%EC%9D%84-%EB%84%A3%EC%96%B4%EC%A3%BC%EA%B8%B0">3-2. 빈 공백에 0을 넣어주기</a></li><li><a href="#3-3-nan-%EA%B0%92%EC%9D%80-fillna%EB%A1%9C-%EC%B1%84%EC%9B%8C%EC%A3%BC%EA%B8%B0">3-3. NaN 값은 fillna로 채워주기</a></li><li><a href="#3-4-strreplace-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BD%A4%EB%A7%88%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0">3-4. str.replace() 를 활용하여 콤마를 제거하기</a></li><li><a href="#3-5-strreplace%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0">3-5. str.replace()를 활용하여 “-” 제거하기</a></li><li><a href="#3-6-%EA%B7%9C%EB%AA%A8%EA%B5%AC%EB%B6%84-column%EC%97%90-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%84%EC%9A%A9%EB%A9%B4%EC%A0%81-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0">3-6. 규모구분 column에 불필요한 “전용면적” 제거하기</a></li></ul></li><li><a href="#4-%EC%A0%84%EC%B2%98%EB%A6%AC-%EB%82%B4%EC%9A%A9-%EB%B3%B5%EC%8A%B5%ED%95%98%EA%B8%B0"><strong>4. 전처리 내용 복습하기</strong></a></li><li><a href="#5-%EC%A7%80%EC%97%AD%EB%B3%84-%EB%B6%84%EC%96%91%EA%B0%80%EA%B2%A9%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0"><strong>5. 지역별 분양가격을 확인해보기</strong></a><ul><li><a href="#5-1-%EC%A7%80%EC%97%AD%EB%B3%84-%ED%8F%89%EA%B7%A0-%EB%B6%84%EC%96%91%EA%B0%80%EA%B2%A9-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0">5-1. 지역별 평균 분양가격 확인해보기</a></li><li><a href="#5-2-%EB%B6%84%EC%96%91%EA%B0%80%EA%B2%A9%EC%9D%B4-100%EB%B3%B4%EB%8B%A4-%EC%9E%91%EC%9D%80-%ED%96%89%EC%9D%84-%EC%A0%9C%EA%B1%B0%ED%95%B4%EB%B3%B4%EA%B8%B0">5-2. 분양가격이 100보다 작은 행을 제거해보기</a></li><li><a href="#5-3-%EC%A7%80%EC%97%AD%EB%B3%84-%EB%B6%84%EC%96%91%EA%B0%80%EA%B2%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EA%B0%AF%EC%88%98%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0">5-3. 지역별 “분양가격” 데이터의 갯수를 확인해보기</a></li><li><a href="#5-4-%EC%A7%80%EC%97%AD%EB%B3%84-%EC%A0%9C%EC%9D%BC-%EB%B9%84%EC%8B%BC-%EB%B6%84%EC%96%91%EA%B0%80%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0">5-4. 지역별 제일 비싼 분양가를 확인해보기</a></li></ul></li><li><a href="#6-%EC%97%B0%EB%8F%84%EB%B3%84-%ED%8F%89%EA%B7%A0-%EB%B6%84%EC%96%91%EA%B0%80%EA%B2%A9%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0"><strong>6. 연도별 평균 분양가격을 확인해보기</strong></a></li><li><a href="#7-%ED%94%BC%EB%B2%97%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0"><strong>7. 피벗테이블 활용하기</strong></a></li><li><a href="#8-%EC%97%B0%EB%8F%84%EB%B3%84-%EA%B7%9C%EB%AA%A8%EB%B3%84-%EA%B0%80%EA%B2%A9%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0"><strong>8. 연도별, 규모별 가격을 알아보기</strong></a></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="0-샘플데이터"><a class="markdownIt-Anchor" href="#0-샘플데이터"></a> <strong>0. 샘플데이터</strong></h2><p><a href="https://www.data.go.kr/" target="_blank" rel="noopener">공공데이터포털</a> 에서 제공하는 공공데이터 “민간 아파트 가격동향” 를 활용한다.</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"seoul_house_price.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격(㎡)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>전용면적 102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4505 rows × 5 columns</p></div><p><br><br></p><h2 id="1-column-이름-제정의-rename"><a class="markdownIt-Anchor" href="#1-column-이름-제정의-rename"></a> <strong>1. column 이름 제정의 (rename)</strong></h2><p><strong>[목표] 분양가격 column의 이름을 재정의:</strong></p><blockquote><p>“분양가격(m<sup>2</sup>)​” --&gt; “분양가격”</p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.rename(columns = {<span class="string">"분양가격(㎡)"</span> : <span class="string">"분양가격"</span>})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>전용면적 102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4505 rows × 5 columns</p></div><br> <br><h2 id="2-data-overview"><a class="markdownIt-Anchor" href="#2-data-overview"></a> <strong>2. Data Overview</strong></h2><h3 id="2-1-data-shape-확인하기"><a class="markdownIt-Anchor" href="#2-1-data-shape-확인하기"></a> 2-1. Data Shape 확인하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(4505, 5)</code></pre><br><h3 id="2-2-걸측값과-data-type-확인하기"><a class="markdownIt-Anchor" href="#2-2-걸측값과-data-type-확인하기"></a> 2-2. 걸측값과 Data Type 확인하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 4505 entries, 0 to 4504Data columns (total 5 columns): #   Column  Non-Null Count  Dtype ---  ------  --------------  -----  0   지역명     4505 non-null   object 1   규모구분    4505 non-null   object 2   연도      4505 non-null   int64  3   월       4505 non-null   int64  4   분양가격    4210 non-null   objectdtypes: int64(2), object(3)memory usage: 176.1+ KB</code></pre><br><h3 id="2-3-통계값-확인하기"><a class="markdownIt-Anchor" href="#2-3-통계값-확인하기"></a> 2-3. 통계값 확인하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>연도</th>      <th>월</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>4505.000000</td>      <td>4505.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2017.452830</td>      <td>6.566038</td>    </tr>    <tr>      <th>std</th>      <td>1.311432</td>      <td>3.595519</td>    </tr>    <tr>      <th>min</th>      <td>2015.000000</td>      <td>1.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2016.000000</td>      <td>3.000000</td>    </tr>    <tr>      <th>50%</th>      <td>2017.000000</td>      <td>7.000000</td>    </tr>    <tr>      <th>75%</th>      <td>2019.000000</td>      <td>10.000000</td>    </tr>    <tr>      <th>max</th>      <td>2020.000000</td>      <td>12.000000</td>    </tr>  </tbody></table></div><br> <br><h2 id="3-데이터-타입-변환"><a class="markdownIt-Anchor" href="#3-데이터-타입-변환"></a> <strong>3. 데이터 타입 변환</strong></h2><p><strong>[목표] &lt;object 타입&gt;으로 되어있는 "분양가격"을 &lt;int 타입&gt;으로 변환하기</strong></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-193-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: invalid literal for int() with base 10: '  '</code></pre><br><blockquote><p>!! “분양가격” column에 <font color="blue">“2칸 공백” 값이 있어서</font> Error가 납니다</p></blockquote>  <br><h3 id="3-1-strstrip을-활용하여-공백이-있는-데이터의-공백-없애기"><a class="markdownIt-Anchor" href="#3-1-strstrip을-활용하여-공백이-있는-데이터의-공백-없애기"></a> 3-1. str.strip()을 활용하여 공백이 있는 데이터의 공백 없애기</h3><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] <strong>.str.strip()</strong></p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>] == <span class="string">'  '</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>28</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>29</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>34</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>81</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>113</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>114</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>119</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>166</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>198</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>199</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>204</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>251</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>283</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>284</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>289</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>336</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].str.strip(<span class="string">'  '</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>] == <span class="string">"  "</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div><br>  <h3 id="3-2-빈-공백에-0을-넣어주기"><a class="markdownIt-Anchor" href="#3-2-빈-공백에-0을-넣어주기"></a> 3-2. 빈 공백에 0을 넣어주기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>] == <span class="string">''</span>, <span class="string">"분양가격"</span>] = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-198-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: cannot convert float NaN to integer</code></pre><br><blockquote><p>!! “분양가격” column에 <font color="blue">“NaN” 값이 있어서</font> Error가 또 납니다 ㅠㅠ</p></blockquote><br>  <h3 id="3-3-nan-값은-fillna로-채워주기"><a class="markdownIt-Anchor" href="#3-3-nan-값은-fillna로-채워주기"></a> 3-3. NaN 값은 fillna로 채워주기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>전용면적 102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4505 rows × 5 columns</p></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>].isna()]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>368</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>369</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>374</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>388</th>      <td>강원</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>421</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4461</th>      <td>세종</td>      <td>전용면적 60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4488</th>      <td>전남</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4493</th>      <td>경북</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4499</th>      <td>경남</td>      <td>전용면적 102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>  </tbody></table><p>295 rows × 5 columns</p></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>].isna()]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-203-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: invalid literal for int() with base 10: '6,657'</code></pre><br><blockquote><p>!! 이번에는 <font color="blue">","가 들어간</font> 데이터가 문제네요…</p></blockquote>  <br><h3 id="3-4-strreplace-를-활용하여-콤마를-제거하기"><a class="markdownIt-Anchor" href="#3-4-strreplace-를-활용하여-콤마를-제거하기"></a> 3-4. str.replace() 를 활용하여 콤마를 제거하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>] == <span class="string">"6,657"</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>2125</th>      <td>서울</td>      <td>전체</td>      <td>2017</td>      <td>11</td>      <td>6,657</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].str.replace(<span class="string">','</span>, <span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-206-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: cannot convert float NaN to integer</code></pre><br><blockquote><p>!! 다시 NaN값이 생겨서 fillna로 채워줍니다.</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-208-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: invalid literal for int() with base 10: '-'</code></pre><br><blockquote><p>!! 이번에는 <font color="blue">"-"가</font> 멀썽이네요…</p></blockquote> <br><h3 id="3-5-strreplace를-활용하여-제거하기"><a class="markdownIt-Anchor" href="#3-5-strreplace를-활용하여-제거하기"></a> 3-5. str.replace()를 활용하여 “-” 제거하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].str.replace(<span class="string">"-"</span>, <span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">"분양가격"</span>] == <span class="string">""</span>, <span class="string">"분양가격"</span>] = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-211-5870dcdf031c&gt; in &lt;module&gt;----&gt; 1 df["분양가격"].astype(int)D:\Anaconda\lib\site-packages\pandas\core\generic.py in astype(self, dtype, copy, errors)   5696         else:   5697             # else, only a single dtype is given-&gt; 5698             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)   5699             return self._constructor(new_data).__finalize__(self)   5700 D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in astype(self, dtype, copy, errors)    580     581     def astype(self, dtype, copy: bool = False, errors: str = "raise"):--&gt; 582         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)    583     584     def convert(self, **kwargs):D:\Anaconda\lib\site-packages\pandas\core\internals\managers.py in apply(self, f, filter, **kwargs)    440                 applied = b.apply(f, **kwargs)    441             else:--&gt; 442                 applied = getattr(b, f)(**kwargs)    443             result_blocks = _extend_blocks(applied, result_blocks)    444 D:\Anaconda\lib\site-packages\pandas\core\internals\blocks.py in astype(self, dtype, copy, errors)    623             vals1d = values.ravel()    624             try:--&gt; 625                 values = astype_nansafe(vals1d, dtype, copy=True)    626             except (ValueError, TypeError):    627                 # e.g. astype_nansafe can fail on object-dtype of stringsD:\Anaconda\lib\site-packages\pandas\core\dtypes\cast.py in astype_nansafe(arr, dtype, copy, skipna)    872         # work around NumPy brokenness, #1987    873         if np.issubdtype(dtype.type, np.integer):--&gt; 874             return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)    875     876         # if we have a datetime/timedelta array of objectspandas\_libs\lib.pyx in pandas._libs.lib.astype_intsafe()ValueError: cannot convert float NaN to integer</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"분양가격"</span>] = df[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 4505 entries, 0 to 4504Data columns (total 5 columns): #   Column  Non-Null Count  Dtype ---  ------  --------------  -----  0   지역명     4505 non-null   object 1   규모구분    4505 non-null   object 2   연도      4505 non-null   int64  3   월       4505 non-null   int64  4   분양가격    4505 non-null   int32 dtypes: int32(1), int64(2), object(2)memory usage: 158.5+ KB</code></pre><br><blockquote><p>이제 드디어 “분양가격” column의 Type을 int로 성공적으로 바꿨습니다!!!</p></blockquote><br><h3 id="3-6-규모구분-column에-불필요한-전용면적-제거하기"><a class="markdownIt-Anchor" href="#3-6-규모구분-column에-불필요한-전용면적-제거하기"></a> 3-6. 규모구분 column에 불필요한 “전용면적” 제거하기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"규모구분"</span>] = df[<span class="string">"규모구분"</span>].str.replace(<span class="string">"전용면적"</span>, <span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>  </tbody></table></div> <br>   <br><h2 id="4-전처리-내용-복습하기"><a class="markdownIt-Anchor" href="#4-전처리-내용-복습하기"></a> <strong>4. 전처리 내용 복습하기</strong></h2><p><strong>방급 진행 했던 전처리 과정을 복습해봅시다!</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.read_csv(<span class="string">"seoul_house_price.csv"</span>)</span><br></pre></td></tr></tbody></table></figure>   <br><p><strong>(1) 콤마가 있는 경우</strong></p><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] <strong>.str.replace</strong> (’,’, ‘’)</p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.iloc[<span class="number">2125</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명           서울규모구분          전체연도          2017월             11분양가격(㎡)    6,657Name: 2125, dtype: object</code></pre> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = df2.rename(columns = {<span class="string">"분양가격(㎡)"</span> : <span class="string">"분양가격"</span>})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">"분양가격"</span>] = df2[<span class="string">"분양가격"</span>].str.replace(<span class="string">","</span>, <span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.iloc[<span class="number">2125</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명       서울규모구분      전체연도      2017월         11분양가격    6657Name: 2125, dtype: object</code></pre> <br><p><strong>(2) - 가 있는 경우</strong></p><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] **.str.replace(’-’, ‘’)</p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">"-"</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>3683</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3686</th>      <td>대전</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3688</th>      <td>대전</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3690</th>      <td>울산</td>      <td>전체</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3691</th>      <td>울산</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3692</th>      <td>울산</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3693</th>      <td>울산</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3694</th>      <td>울산</td>      <td>전용면적 102㎡초과</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>    <tr>      <th>3696</th>      <td>세종</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td>-</td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">"분양가격"</span>] = df2[<span class="string">"분양가격"</span>].str.replace(<span class="string">"-"</span>, <span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">"-"</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div> <br><p><strong>(3) 공백이 2개 들어간 경우</strong></p><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] **.str.strip("  ")</p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">"  "</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>28</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>29</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>34</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>81</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>113</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>114</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>119</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>166</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>198</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>199</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>204</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>251</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>283</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>284</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>289</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>336</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">"분양가격"</span>] = df2[<span class="string">"분양가격"</span>].str.strip(<span class="string">"  "</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">"  "</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div>  <br> <p><strong>(4) 빈 칸을 0으로 채우기</strong></p><blockquote><p><em>df_name</em>.loc [ <em>df_name</em> [ “<em>col_name</em>” ] == “” , “<em>col_name</em>”] = 0</p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">""</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>28</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>29</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>34</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>81</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>10</td>      <td></td>    </tr>    <tr>      <th>113</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>114</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>119</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>166</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>11</td>      <td></td>    </tr>    <tr>      <th>198</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>199</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>204</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>251</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2015</td>      <td>12</td>      <td></td>    </tr>    <tr>      <th>283</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>284</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>289</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>336</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2016</td>      <td>1</td>      <td></td>    </tr>    <tr>      <th>3683</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3686</th>      <td>대전</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3688</th>      <td>대전</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3690</th>      <td>울산</td>      <td>전체</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3691</th>      <td>울산</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3692</th>      <td>울산</td>      <td>전용면적 60㎡초과 85㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3693</th>      <td>울산</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3694</th>      <td>울산</td>      <td>전용면적 102㎡초과</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>    <tr>      <th>3696</th>      <td>세종</td>      <td>전용면적 60㎡이하</td>      <td>2019</td>      <td>5</td>      <td></td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">""</span>, <span class="string">"분양가격"</span>] = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>] == <span class="string">""</span>]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div> <br>  <p><strong>(5) NaN 값을 0으로 바꾸기</strong></p><blockquote><p><em>df_name</em>.loc [ <em>df_name</em> [ “<em>col_name</em>” ] <strong>.isna()</strong> ]<br><em>df_name</em> [ “<em>col_name</em>” ].fillna(0)</p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>].isna()]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>368</th>      <td>광주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>369</th>      <td>광주</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>374</th>      <td>대전</td>      <td>전용면적 102㎡초과</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>388</th>      <td>강원</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>421</th>      <td>제주</td>      <td>전용면적 60㎡이하</td>      <td>2016</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4461</th>      <td>세종</td>      <td>전용면적 60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4488</th>      <td>전남</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4493</th>      <td>경북</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4499</th>      <td>경남</td>      <td>전용면적 102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>전용면적 85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>NaN</td>    </tr>  </tbody></table><p>295 rows × 5 columns</p></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">"분양가격"</span>] = df2[<span class="string">"분양가격"</span>].fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.loc[df2[<span class="string">"분양가격"</span>].isna()]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>  </tbody></table></div> <br>  <p><strong>(6) column type 바꾸기</strong></p><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] <strong>.astype(…)</strong></p></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[<span class="string">"분양가격"</span>].astype(int)</span><br></pre></td></tr></tbody></table></figure><pre><code>0       58411       56522       58823       57214       5879        ... 4500    39554501    40394502    39624503       04504    3601Name: 분양가격, Length: 4505, dtype: int32</code></pre> <br>   <br><h2 id="5-지역별-분양가격을-확인해보기"><a class="markdownIt-Anchor" href="#5-지역별-분양가격을-확인해보기"></a> <strong>5. 지역별 분양가격을 확인해보기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4505 rows × 5 columns</p></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 4505 entries, 0 to 4504Data columns (total 5 columns): #   Column  Non-Null Count  Dtype ---  ------  --------------  -----  0   지역명     4505 non-null   object 1   규모구분    4505 non-null   object 2   연도      4505 non-null   int64  3   월       4505 non-null   int64  4   분양가격    4505 non-null   int32 dtypes: int32(1), int64(2), object(2)memory usage: 158.5+ KB</code></pre> <br><h3 id="5-1-지역별-평균-분양가격-확인해보기"><a class="markdownIt-Anchor" href="#5-1-지역별-평균-분양가격-확인해보기"></a> 5-1. 지역별 평균 분양가격 확인해보기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"지역명"</span>)[<span class="string">"분양가격"</span>].mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명강원    2339.807547경기    4072.667925경남    2761.275472경북    2432.128302광주    2450.728302대구    3538.920755대전    2479.135849부산    3679.920755서울    7225.762264세종    2815.098113울산    1826.101887인천    3578.433962전남    2270.177358전북    2322.060377제주    2979.407547충남    2388.324528충북    2316.871698Name: 분양가격, dtype: float64</code></pre>  <br> <h3 id="5-2-분양가격이-100보다-작은-행을-제거해보기"><a class="markdownIt-Anchor" href="#5-2-분양가격이-100보다-작은-행을-제거해보기"></a> 5-2. 분양가격이 100보다 작은 행을 제거해보기</h3><blockquote><p>특정 조건에 만족하는 행을 제거하고자 할 때는</p><ol><li>index를 list로 가져온다<ul><li><em>idx</em> = df.loc [ <em>조건식</em> ] <strong>.index</strong></li></ul></li><li>drop을 활용하여 행을 제거한다<ul><li><em>df_name</em> = <em>df_name</em> <strong>.drop</strong> (<em>idx</em>, axis = 0)</li></ul></li></ol></blockquote> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idx = df.loc[df[<span class="string">"분양가격"</span>] &lt; <span class="number">100</span>].index</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idx</span><br></pre></td></tr></tbody></table></figure><pre><code>Int64Index([  28,   29,   34,   81,  113,  114,  119,  166,  198,  199,            ...            4418, 4448, 4453, 4458, 4459, 4461, 4488, 4493, 4499, 4503],           dtype='int64', length=320)</code></pre> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4503</th>      <td>제주</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4505 rows × 5 columns</p></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.drop(idx, axis = <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>4498</th>      <td>경남</td>      <td>85㎡초과 102㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3247</td>    </tr>    <tr>      <th>4500</th>      <td>제주</td>      <td>전체</td>      <td>2020</td>      <td>2</td>      <td>3955</td>    </tr>    <tr>      <th>4501</th>      <td>제주</td>      <td>60㎡이하</td>      <td>2020</td>      <td>2</td>      <td>4039</td>    </tr>    <tr>      <th>4502</th>      <td>제주</td>      <td>60㎡초과 85㎡이하</td>      <td>2020</td>      <td>2</td>      <td>3962</td>    </tr>    <tr>      <th>4504</th>      <td>제주</td>      <td>102㎡초과</td>      <td>2020</td>      <td>2</td>      <td>3601</td>    </tr>  </tbody></table><p>4185 rows × 5 columns</p></div>   <br><p>다시 한 번 지역명으로 group을 묶어 분양가격을 확인해보자!</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"지역명"</span>)[<span class="string">"분양가격"</span>].mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명강원    2412.642023경기    4072.667925경남    2814.376923경북    2547.486166광주    3049.028169대구    3663.335938대전    3128.433333부산    3679.920755서울    7225.762264세종    2984.004000울산    3043.503145인천    3633.275862전남    2304.969349전북    2348.648855제주    3432.795652충남    2501.604743충북    2316.871698Name: 분양가격, dtype: float64</code></pre> <br><h3 id="5-3-지역별-분양가격-데이터의-갯수를-확인해보기"><a class="markdownIt-Anchor" href="#5-3-지역별-분양가격-데이터의-갯수를-확인해보기"></a> 5-3. 지역별 “분양가격” 데이터의 갯수를 확인해보기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"지역명"</span>)[<span class="string">"분양가격"</span>].count()</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명강원    257경기    265경남    260경북    253광주    213대구    256대전    210부산    265서울    265세종    250울산    159인천    261전남    261전북    262제주    230충남    253충북    265Name: 분양가격, dtype: int64</code></pre> <br>  <h3 id="5-4-지역별-제일-비싼-분양가를-확인해보기"><a class="markdownIt-Anchor" href="#5-4-지역별-제일-비싼-분양가를-확인해보기"></a> 5-4. 지역별 제일 비싼 분양가를 확인해보기</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"지역명"</span>)[<span class="string">"분양가격"</span>].max()</span><br></pre></td></tr></tbody></table></figure><pre><code>지역명강원     3906경기     5670경남     4303경북     3457광주     4881대구     5158대전     4877부산     4623서울    13835세종     3931울산     3594인천     5188전남     3053전북     3052제주     5462충남     3201충북     2855Name: 분양가격, dtype: int32</code></pre><p><br>  <br></p><h2 id="6-연도별-평균-분양가격을-확인해보기"><a class="markdownIt-Anchor" href="#6-연도별-평균-분양가격을-확인해보기"></a> <strong>6. 연도별 평균 분양가격을 확인해보기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"연도"</span>)[<span class="string">"분양가격"</span>].mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>연도2015    2788.7078192016    2934.2500002017    3143.3117952018    3326.9510342019    3693.4221492020    3853.960526Name: 분양가격, dtype: float64</code></pre> <br>   <br><h2 id="7-피벗테이블-활용하기"><a class="markdownIt-Anchor" href="#7-피벗테이블-활용하기"></a> <strong>7. 피벗테이블 활용하기</strong></h2><ul><li><p><strong>행 인덱스:</strong> 연도</p></li><li><p><strong>열 인덱스:</strong> 규모구분</p></li><li><p><strong>값:</strong> 분양가 (평균)</p> <br></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>지역명</th>      <th>규모구분</th>      <th>연도</th>      <th>월</th>      <th>분양가격</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>서울</td>      <td>전체</td>      <td>2015</td>      <td>10</td>      <td>5841</td>    </tr>    <tr>      <th>1</th>      <td>서울</td>      <td>60㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5652</td>    </tr>    <tr>      <th>2</th>      <td>서울</td>      <td>60㎡초과 85㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5882</td>    </tr>    <tr>      <th>3</th>      <td>서울</td>      <td>85㎡초과 102㎡이하</td>      <td>2015</td>      <td>10</td>      <td>5721</td>    </tr>    <tr>      <th>4</th>      <td>서울</td>      <td>102㎡초과</td>      <td>2015</td>      <td>10</td>      <td>5879</td>    </tr>  </tbody></table></div> <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(df, index = <span class="string">"연도"</span>, columns = <span class="string">"규모구분"</span>, values = <span class="string">"분양가격"</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th>규모구분</th>      <th>102㎡초과</th>      <th>60㎡이하</th>      <th>60㎡초과 85㎡이하</th>      <th>85㎡초과 102㎡이하</th>      <th>전체</th>    </tr>    <tr>      <th>연도</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2015</th>      <td>2980.977778</td>      <td>2712.583333</td>      <td>2694.490196</td>      <td>2884.395833</td>      <td>2694.862745</td>    </tr>    <tr>      <th>2016</th>      <td>3148.099476</td>      <td>2848.144279</td>      <td>2816.965686</td>      <td>3067.380435</td>      <td>2816.073529</td>    </tr>    <tr>      <th>2017</th>      <td>3427.649746</td>      <td>3112.538071</td>      <td>2981.950980</td>      <td>3204.075145</td>      <td>3008.279412</td>    </tr>    <tr>      <th>2018</th>      <td>3468.355932</td>      <td>3286.184783</td>      <td>3227.458128</td>      <td>3467.184211</td>      <td>3235.098522</td>    </tr>    <tr>      <th>2019</th>      <td>4039.854839</td>      <td>3486.910112</td>      <td>3538.545918</td>      <td>3933.538462</td>      <td>3515.974490</td>    </tr>    <tr>      <th>2020</th>      <td>4187.566667</td>      <td>3615.968750</td>      <td>3594.852941</td>      <td>4532.090909</td>      <td>3603.911765</td>    </tr>  </tbody></table></div><p><br>  <br></p><h2 id="8-연도별-규모별-가격을-알아보기"><a class="markdownIt-Anchor" href="#8-연도별-규모별-가격을-알아보기"></a> <strong>8. 연도별, 규모별 가격을 알아보기</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby([<span class="string">"연도"</span>, <span class="string">"규모구분"</span>])[<span class="string">"분양가격"</span>].mean()</span><br></pre></td></tr></tbody></table></figure><pre><code>연도    규모구분         2015   102㎡초과          2980.977778       60㎡이하           2712.583333       60㎡초과 85㎡이하     2694.490196       85㎡초과 102㎡이하    2884.395833      전체               2694.8627452016   102㎡초과          3148.099476       60㎡이하           2848.144279       60㎡초과 85㎡이하     2816.965686       85㎡초과 102㎡이하    3067.380435      전체               2816.0735292017   102㎡초과          3427.649746       60㎡이하           3112.538071       60㎡초과 85㎡이하     2981.950980       85㎡초과 102㎡이하    3204.075145      전체               3008.2794122018   102㎡초과          3468.355932       60㎡이하           3286.184783       60㎡초과 85㎡이하     3227.458128       85㎡초과 102㎡이하    3467.184211      전체               3235.0985222019   102㎡초과          4039.854839       60㎡이하           3486.910112       60㎡초과 85㎡이하     3538.545918       85㎡초과 102㎡이하    3933.538462      전체               3515.9744902020   102㎡초과          4187.566667       60㎡이하           3615.968750       60㎡초과 85㎡이하     3594.852941       85㎡초과 102㎡이하    4532.090909      전체               3603.911765Name: 분양가격, dtype: float64</code></pre>  <br> <p>예쁘게 출력이 안되어서 보기가 힘들때는 pd.DataFrame()으로 한 번 더 감싸주면 됩니다.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(df.groupby([<span class="string">"연도"</span>, <span class="string">"규모구분"</span>])[<span class="string">"분양가격"</span>].mean())</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>분양가격</th>    </tr>    <tr>      <th>연도</th>      <th>규모구분</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="5" valign="top">2015</th>      <th>102㎡초과</th>      <td>2980.977778</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>2712.583333</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>2694.490196</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>2884.395833</td>    </tr>    <tr>      <th>전체</th>      <td>2694.862745</td>    </tr>    <tr>      <th rowspan="5" valign="top">2016</th>      <th>102㎡초과</th>      <td>3148.099476</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>2848.144279</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>2816.965686</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>3067.380435</td>    </tr>    <tr>      <th>전체</th>      <td>2816.073529</td>    </tr>    <tr>      <th rowspan="5" valign="top">2017</th>      <th>102㎡초과</th>      <td>3427.649746</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>3112.538071</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>2981.950980</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>3204.075145</td>    </tr>    <tr>      <th>전체</th>      <td>3008.279412</td>    </tr>    <tr>      <th rowspan="5" valign="top">2018</th>      <th>102㎡초과</th>      <td>3468.355932</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>3286.184783</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>3227.458128</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>3467.184211</td>    </tr>    <tr>      <th>전체</th>      <td>3235.098522</td>    </tr>    <tr>      <th rowspan="5" valign="top">2019</th>      <th>102㎡초과</th>      <td>4039.854839</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>3486.910112</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>3538.545918</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>3933.538462</td>    </tr>    <tr>      <th>전체</th>      <td>3515.974490</td>    </tr>    <tr>      <th rowspan="5" valign="top">2020</th>      <th>102㎡초과</th>      <td>4187.566667</td>    </tr>    <tr>      <th>60㎡이하</th>      <td>3615.968750</td>    </tr>    <tr>      <th>60㎡초과 85㎡이하</th>      <td>3594.852941</td>    </tr>    <tr>      <th>85㎡초과 102㎡이하</th>      <td>4532.090909</td>    </tr>    <tr>      <th>전체</th>      <td>3603.911765</td>    </tr>  </tbody></table></div> <br> <br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      column 이름 제정의; Data Overview; 특수부호 처리; 데이터 타입 바꾸기; groupby; 피벗테이블
    
    </summary>
    
    
      <category term="【Exercise】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Exercise%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://hyemin-kim.github.io/tags/Pandas/"/>
    
      <category term="전처리" scheme="https://hyemin-kim.github.io/tags/%EC%A0%84%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Pandas 전처리 - (7) 기타</title>
    <link href="https://hyemin-kim.github.io/2020/06/20/S-Python-Pandas-Pre7/"/>
    <id>https://hyemin-kim.github.io/2020/06/20/S-Python-Pandas-Pre7/</id>
    <published>2020-06-20T13:28:42.000Z</published>
    <updated>2020-06-23T16:53:03.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="기타"><a class="markdownIt-Anchor" href="#기타"></a> 기타</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85%EB%B3%84-column-%EC%84%A0%ED%83%9D-select_dtypes"><strong>1. 데이터 타입별 column 선택 (select_dtypes)</strong></a><ul><li><a href="#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%B4-%EC%9E%88%EB%8A%94-column%EB%A7%8C-%EC%84%A0%ED%83%9D-%EB%B0%B0%EC%A0%9C">문자열이 있는 column만 선택 / 배제</a></li></ul></li><li><a href="#2-one-hot-encoding-%EC%9B%90%ED%95%AB%EC%9D%B8%EC%BD%94%EB%94%A9"><strong>2. One-hot-encoding (원핫인코딩)</strong></a></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"korean-idol.csv"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>    </tr>  </tbody></table></div><br>  <br><h2 id="1-데이터-타입별-column-선택-select_dtypes"><a class="markdownIt-Anchor" href="#1-데이터-타입별-column-선택-select_dtypes"></a> <strong>1. 데이터 타입별 column 선택 (select_dtypes)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 15 entries, 0 to 14Data columns (total 8 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   이름       15 non-null     object  1   그룹       14 non-null     object  2   소속사      15 non-null     object  3   성별       15 non-null     object  4   생년월일     15 non-null     object  5   키        13 non-null     float64 6   혈액형      15 non-null     object  7   브랜드평판지수  15 non-null     int64  dtypes: float64(1), int64(1), object(6)memory usage: 1.1+ KB</code></pre><br><h3 id="문자열이-있는-column만-선택-배제"><a class="markdownIt-Anchor" href="#문자열이-있는-column만-선택-배제"></a> 문자열이 있는 column만 선택 / 배제</h3><blockquote><ul><li><em>df_name</em> <strong>.select_dtypes (include = ‘object’)</strong></li><li><em>df_name</em> <strong>.select_dtypes (exclude = ‘object’)</strong></li></ul></blockquote><br>  <p><strong>(1) 문자열 column만 선택</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.select_dtypes(include = <span class="string">'object'</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>혈액형</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>A</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>A</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>A</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>AB</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>A</td>    </tr>    <tr>      <th>5</th>      <td>정국</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1997-09-01</td>      <td>A</td>    </tr>    <tr>      <th>6</th>      <td>민현</td>      <td>뉴이스트</td>      <td>플레디스</td>      <td>남자</td>      <td>1995-08-09</td>      <td>O</td>    </tr>    <tr>      <th>7</th>      <td>소연</td>      <td>아이들</td>      <td>큐브</td>      <td>여자</td>      <td>1998-08-26</td>      <td>B</td>    </tr>    <tr>      <th>8</th>      <td>진</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1992-12-04</td>      <td>O</td>    </tr>    <tr>      <th>9</th>      <td>하성운</td>      <td>핫샷</td>      <td>스타크루이엔티</td>      <td>남자</td>      <td>1994-03-22</td>      <td>A</td>    </tr>    <tr>      <th>10</th>      <td>태연</td>      <td>소녀시대</td>      <td>SM</td>      <td>여자</td>      <td>1989-03-09</td>      <td>A</td>    </tr>    <tr>      <th>11</th>      <td>차은우</td>      <td>아스트로</td>      <td>판타지오</td>      <td>남자</td>      <td>1997-03-30</td>      <td>B</td>    </tr>    <tr>      <th>12</th>      <td>백호</td>      <td>뉴이스트</td>      <td>플레디스</td>      <td>남자</td>      <td>1995-07-21</td>      <td>AB</td>    </tr>    <tr>      <th>13</th>      <td>JR</td>      <td>뉴이스트</td>      <td>플레디스</td>      <td>남자</td>      <td>1995-06-08</td>      <td>O</td>    </tr>    <tr>      <th>14</th>      <td>슈가</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1993-03-09</td>      <td>O</td>    </tr>  </tbody></table></div><br><p><strong>(2) 문자열 column 배제 (문자열이 아닌 column만 선택)</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.select_dtypes(exclude = <span class="string">'object'</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>키</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>173.6</td>      <td>10523260</td>    </tr>    <tr>      <th>1</th>      <td>177.0</td>      <td>9916947</td>    </tr>    <tr>      <th>2</th>      <td>180.0</td>      <td>8273745</td>    </tr>    <tr>      <th>3</th>      <td>178.0</td>      <td>8073501</td>    </tr>    <tr>      <th>4</th>      <td>162.1</td>      <td>7650928</td>    </tr>    <tr>      <th>5</th>      <td>178.0</td>      <td>5208335</td>    </tr>    <tr>      <th>6</th>      <td>182.3</td>      <td>4989792</td>    </tr>    <tr>      <th>7</th>      <td>NaN</td>      <td>4668615</td>    </tr>    <tr>      <th>8</th>      <td>179.2</td>      <td>4570308</td>    </tr>    <tr>      <th>9</th>      <td>167.1</td>      <td>4036489</td>    </tr>    <tr>      <th>10</th>      <td>NaN</td>      <td>3918661</td>    </tr>    <tr>      <th>11</th>      <td>183.0</td>      <td>3506027</td>    </tr>    <tr>      <th>12</th>      <td>175.0</td>      <td>3301654</td>    </tr>    <tr>      <th>13</th>      <td>176.0</td>      <td>3274137</td>    </tr>    <tr>      <th>14</th>      <td>174.0</td>      <td>2925442</td>    </tr>  </tbody></table></div><br><p><strong>문자열이 포함된 DataFrame의 연산으로 발생되는 Error문제는 이 방법을 이용하여 해결할 수 있다</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df + <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)D:\Anaconda\lib\site-packages\pandas\core\ops\array_ops.py in na_arithmetic_op(left, right, op, str_rep)    148     try:--&gt; 149         result = expressions.evaluate(op, str_rep, left, right)    150     except TypeError:D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in evaluate(op, op_str, a, b, use_numexpr)    207     if use_numexpr:--&gt; 208         return _evaluate(op, op_str, a, b)    209     return _evaluate_standard(op, op_str, a, b)D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_numexpr(op, op_str, a, b)    120     if result is None:--&gt; 121         result = _evaluate_standard(op, op_str, a, b)    122 D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_standard(op, op_str, a, b)     69     with np.errstate(all="ignore"):---&gt; 70         return op(a, b)     71 TypeError: can only concatenate str (not "int") to str</code></pre><p>​    <br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.select_dtypes(exclude = <span class="string">'object'</span>) + <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>키</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>183.6</td>      <td>10523270</td>    </tr>    <tr>      <th>1</th>      <td>187.0</td>      <td>9916957</td>    </tr>    <tr>      <th>2</th>      <td>190.0</td>      <td>8273755</td>    </tr>    <tr>      <th>3</th>      <td>188.0</td>      <td>8073511</td>    </tr>    <tr>      <th>4</th>      <td>172.1</td>      <td>7650938</td>    </tr>    <tr>      <th>5</th>      <td>188.0</td>      <td>5208345</td>    </tr>    <tr>      <th>6</th>      <td>192.3</td>      <td>4989802</td>    </tr>    <tr>      <th>7</th>      <td>NaN</td>      <td>4668625</td>    </tr>    <tr>      <th>8</th>      <td>189.2</td>      <td>4570318</td>    </tr>    <tr>      <th>9</th>      <td>177.1</td>      <td>4036499</td>    </tr>    <tr>      <th>10</th>      <td>NaN</td>      <td>3918671</td>    </tr>    <tr>      <th>11</th>      <td>193.0</td>      <td>3506037</td>    </tr>    <tr>      <th>12</th>      <td>185.0</td>      <td>3301664</td>    </tr>    <tr>      <th>13</th>      <td>186.0</td>      <td>3274147</td>    </tr>    <tr>      <th>14</th>      <td>184.0</td>      <td>2925452</td>    </tr>  </tbody></table></div> <br> <p><strong>(3) “문자열 column” / “비문자열 column” 의 column명을 추출</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></tbody></table></figure><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 15 entries, 0 to 14Data columns (total 8 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   이름       15 non-null     object  1   그룹       14 non-null     object  2   소속사      15 non-null     object  3   성별       15 non-null     object  4   생년월일     15 non-null     object  5   키        13 non-null     float64 6   혈액형      15 non-null     object  7   브랜드평판지수  15 non-null     int64  dtypes: float64(1), int64(1), object(6)memory usage: 1.1+ KB</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj_cols = df.select_dtypes(include = <span class="string">'object'</span>).columns</span><br><span class="line">obj_cols</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['이름', '그룹', '소속사', '성별', '생년월일', '혈액형'], dtype='object')</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_cols = df.select_dtypes(exclude = <span class="string">'object'</span>).columns</span><br><span class="line">num_cols</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['키', '브랜드평판지수'], dtype='object')</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[num_cols]</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>키</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>173.6</td>      <td>10523260</td>    </tr>    <tr>      <th>1</th>      <td>177.0</td>      <td>9916947</td>    </tr>    <tr>      <th>2</th>      <td>180.0</td>      <td>8273745</td>    </tr>    <tr>      <th>3</th>      <td>178.0</td>      <td>8073501</td>    </tr>    <tr>      <th>4</th>      <td>162.1</td>      <td>7650928</td>    </tr>    <tr>      <th>5</th>      <td>178.0</td>      <td>5208335</td>    </tr>    <tr>      <th>6</th>      <td>182.3</td>      <td>4989792</td>    </tr>    <tr>      <th>7</th>      <td>NaN</td>      <td>4668615</td>    </tr>    <tr>      <th>8</th>      <td>179.2</td>      <td>4570308</td>    </tr>    <tr>      <th>9</th>      <td>167.1</td>      <td>4036489</td>    </tr>    <tr>      <th>10</th>      <td>NaN</td>      <td>3918661</td>    </tr>    <tr>      <th>11</th>      <td>183.0</td>      <td>3506027</td>    </tr>    <tr>      <th>12</th>      <td>175.0</td>      <td>3301654</td>    </tr>    <tr>      <th>13</th>      <td>176.0</td>      <td>3274137</td>    </tr>    <tr>      <th>14</th>      <td>174.0</td>      <td>2925442</td>    </tr>  </tbody></table></div><p><br> <br></p><h2 id="2-one-hot-encoding-원핫인코딩"><a class="markdownIt-Anchor" href="#2-one-hot-encoding-원핫인코딩"></a> <strong>2. One-hot-encoding (원핫인코딩)</strong></h2><blockquote><p><strong>One-hot-encoding:</strong> Categorical data를 dummy data로 변환시키는 방법</p><ul><li>Dummy data로 변환 시 한개의 요소는 True (1) 로, 나머지 요소는 Flase (0) 로 변환시킨다</li></ul></blockquote><blockquote><p><strong>pd.get_dummies</strong> (<em>df_name</em> [ ‘<em>col_name</em>’ ], prefix = “…”)</p><ul><li>prefix: dummy data 로 분리된 새 column들의 column name에 접두사 붙이기</li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'혈액형'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0      A1      A2      A3     AB4      A5      A6      O7      B8      O9      A10     A11     B12    AB13     O14     OName: 혈액형, dtype: object</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df[<span class="string">'혈액형'</span>])</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>AB</th>      <th>B</th>      <th>O</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df[<span class="string">'혈액형'</span>], prefix = <span class="string">'혈액형'</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>혈액형_A</th>      <th>혈액형_AB</th>      <th>혈액형_B</th>      <th>혈액형_O</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div> <br> <blockquote><p><strong>categorical data의 각 카테고리가 숫자형식으로 표현됐을 때 one-hot-encoding이 더 중요해지는 이유:</strong></p><ul><li>categorical data의 각 카테고리를 상징하는 숫자들은 <strong>그저 분류의 의미를 가질 뿐</strong>, 숫자의 크기 자체는 아무 의미도 없고, 숫자들의 연산도 역시 무의미하다.</li><li>하지만 이를 one-hot-encoding 작업 없이 머신러닝 알고리즘에 바로 넣으면 컴퓨터가 이 숫자들을 <strong>대소비교가 가능하고 연산이 가능하는 "숫자"로 인식</strong>하게 되므로 카테고리 간에 <strong>잘못된 관계</strong>를 맺을 수 있음.</li><li>따라서 이런 경우에는 one-hot-encoding 작업이 꼭 필요하다</li></ul></blockquote><br>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blood_map = {</span><br><span class="line">    <span class="string">'A'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'B'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'AB'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'O'</span>: <span class="number">3</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"혈액형_code"</span>] = df[<span class="string">"혈액형"</span>].map(blood_map)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>      <th>혈액형_code</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>      <td>0</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"혈액형_code"</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>0    73    42    21    2Name: 혈액형_code, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"혈액형_code"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0     01     02     03     24     05     06     37     18     39     010    011    112    213    314    3Name: 혈액형_code, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df[ <span class="string">"혈액형_code"</span> ])</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df[<span class="string">"혈액형_code"</span>], prefix = <span class="string">"혈액형"</span>)</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>혈액형_0</th>      <th>혈액형_1</th>      <th>혈액형_2</th>      <th>혈액형_3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      데이터 타입별 column 선택; One-hot-encoding (dummy 변환)
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://hyemin-kim.github.io/tags/Pandas/"/>
    
      <category term="전처리" scheme="https://hyemin-kim.github.io/tags/%EC%A0%84%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Pandas 전처리 - (6) 데이터프레임의 산술연산</title>
    <link href="https://hyemin-kim.github.io/2020/06/20/S-Python-Pandas-Pre6/"/>
    <id>https://hyemin-kim.github.io/2020/06/20/S-Python-Pandas-Pre6/</id>
    <published>2020-06-20T13:28:21.000Z</published>
    <updated>2020-06-23T16:52:30.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터프레임의-산술연산"><a class="markdownIt-Anchor" href="#데이터프레임의-산술연산"></a> 데이터프레임의 산술연산</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-column-%EA%B3%BC-column-%EA%B0%84-%EC%97%B0%EC%82%B0-"><strong>1. Column 과 Column 간 연산 (+, -, *, /, %)</strong></a></li><li><a href="#2-column-%EA%B3%BC-%EC%88%AB%EC%9E%90-%EA%B0%84-%EC%97%B0%EC%82%B0-"><strong>2. Column 과 숫자 간 연산 (+, -, *, /, %)</strong></a></li><li><a href="#3-%EB%B3%B5%ED%95%A9-%EC%97%B0%EC%82%B0"><strong>3. 복합 연산</strong></a></li><li><a href="#4-mean-sum-%EC%9D%84-axis-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%97%B0%EC%82%B0"><strong>4. mean(), sum() 을 axis 기준으로 연산</strong></a></li><li><a href="#5-nan-%EA%B0%92%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%A0-%EA%B2%BD%EC%9A%B0-%EC%97%B0%EC%82%B0"><strong>5. NaN 값이 존재할 경우 연산</strong></a></li><li><a href="#6-dataframe-%EA%B3%BC-dataframe-%EA%B0%84-%EC%97%B0%EC%82%B0"><strong>6. DataFrame 과 DataFrame 간 연산</strong></a><ul><li><a href="#6-1-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%B4-%ED%8F%AC%ED%95%A8%EB%90%9C-series-dataframe%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9D%80-%EB%B6%88%EA%B0%80%ED%95%98%EB%8B%A4">6-1. 문자열이 포함된 Series / DataFrame의 연산은 불가하다</a></li><li><a href="#6-2-%EB%91%90-dataframe%EC%9D%98-column-%EC%9D%B4%EB%A6%84%EC%9D%80-%EA%B0%99%EC%9C%BC%EB%82%98-column-%EC%88%9C%EC%84%9C%EB%A7%8C-%EB%B0%94%EB%80%8C%EC%96%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0">6-2. 두 DataFrame의 column 이름은 같으나 column 순서만 바뀌어 있는 경우</a></li><li><a href="#6-3-%ED%96%89%EC%9D%98-%EA%B0%AF%EC%88%98%EA%B0%80-%EB%8B%A4%EB%A5%B8-%EA%B2%BD%EC%9A%B0">6-3. 행의 갯수가 다른 경우</a></li></ul></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>예제 DataFrame 생성</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame({<span class="string">"통계"</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">75</span>], <span class="string">"미술"</span>: [<span class="number">50</span>, <span class="number">55</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">95</span>], <span class="string">"체육"</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60</td>      <td>50</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>70</td>      <td>55</td>      <td>65</td>    </tr>    <tr>      <th>2</th>      <td>80</td>      <td>80</td>      <td>50</td>    </tr>    <tr>      <th>3</th>      <td>85</td>      <td>100</td>      <td>95</td>    </tr>    <tr>      <th>4</th>      <td>75</td>      <td>95</td>      <td>100</td>    </tr>  </tbody></table></div><br><br>  <h2 id="1-column-과-column-간-연산-"><a class="markdownIt-Anchor" href="#1-column-과-column-간-연산-"></a> <strong>1. Column 과 Column 간 연산 (+, -, *, /, %)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(df[<span class="string">"통계"</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>pandas.core.series.Series</code></pre><p>즉 Series 과 Series 간의 연산</p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] + df[<span class="string">"미술"</span>] + df[<span class="string">"체육"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    1801    1902    2103    2804    270dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] - df[<span class="string">"미술"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    101    152     03   -154   -20dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] * df[<span class="string">"미술"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    30001    38502    64003    85004    7125dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] / df[<span class="string">"미술"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    1.2000001    1.2727272    1.0000003    0.8500004    0.789474dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] % df[<span class="string">"미술"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    101    152     03    854    75dtype: int64</code></pre><p><br> <br></p><h2 id="2-column-과-숫자-간-연산-"><a class="markdownIt-Anchor" href="#2-column-과-숫자-간-연산-"></a> <strong>2. Column 과 숫자 간 연산 (+, -, *, /, %)</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    601    702    803    854    75Name: 통계, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] + <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    701    802    903    954    85Name: 통계, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] - <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    501    602    703    754    65Name: 통계, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] * <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    6001    7002    8003    8504    750Name: 통계, dtype: int64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] / <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    6.01    7.02    8.03    8.54    7.5Name: 통계, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] % <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    01    02    03    54    5Name: 통계, dtype: int64</code></pre><br><br><h2 id="3-복합-연산"><a class="markdownIt-Anchor" href="#3-복합-연산"></a> <strong>3. 복합 연산</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame({<span class="string">"통계"</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">75</span>], <span class="string">"미술"</span>: [<span class="number">50</span>, <span class="number">55</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">95</span>], <span class="string">"체육"</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60</td>      <td>50</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>70</td>      <td>55</td>      <td>65</td>    </tr>    <tr>      <th>2</th>      <td>80</td>      <td>80</td>      <td>50</td>    </tr>    <tr>      <th>3</th>      <td>85</td>      <td>100</td>      <td>95</td>    </tr>    <tr>      <th>4</th>      <td>75</td>      <td>95</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계미술+10"</span>] = df[<span class="string">"통계"</span>] + df[<span class="string">"미술"</span>] + <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>      <th>통계미술+10</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60</td>      <td>50</td>      <td>70</td>      <td>120</td>    </tr>    <tr>      <th>1</th>      <td>70</td>      <td>55</td>      <td>65</td>      <td>135</td>    </tr>    <tr>      <th>2</th>      <td>80</td>      <td>80</td>      <td>50</td>      <td>170</td>    </tr>    <tr>      <th>3</th>      <td>85</td>      <td>100</td>      <td>95</td>      <td>195</td>    </tr>    <tr>      <th>4</th>      <td>75</td>      <td>95</td>      <td>100</td>      <td>180</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] + df[<span class="string">"미술"</span>] - df[<span class="string">"체육"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0     401     602    1103     904     70dtype: int64</code></pre><br>  <br><h2 id="4-mean-sum-을-axis-기준으로-연산"><a class="markdownIt-Anchor" href="#4-mean-sum-을-axis-기준으로-연산"></a> <strong>4. mean(), sum() 을 axis 기준으로 연산</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame({<span class="string">"통계"</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">75</span>], <span class="string">"미술"</span>: [<span class="number">50</span>, <span class="number">55</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">95</span>], <span class="string">"체육"</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60</td>      <td>50</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>70</td>      <td>55</td>      <td>65</td>    </tr>    <tr>      <th>2</th>      <td>80</td>      <td>80</td>      <td>50</td>    </tr>    <tr>      <th>3</th>      <td>85</td>      <td>100</td>      <td>95</td>    </tr>    <tr>      <th>4</th>      <td>75</td>      <td>95</td>      <td>100</td>    </tr>  </tbody></table></div><br><p><strong>(1) 각 column의 <font color="blue">모든 row 값의 합</font> 구하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sum(axis = <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>통계    370미술    380체육    380dtype: int64</code></pre><br>  <p><strong>(2) 각 column의 <font color="blue">모든 row 값의 평균</font> 구하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.mean(axis = <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>통계    74.0미술    76.0체육    76.0dtype: float64</code></pre><br><p><strong>(3) 각 row의 <font color="blue">모든 column 값의 합</font> 구하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sum(axis = <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>0    1801    1902    2103    2804    270dtype: int64</code></pre><br><p><strong>(4) 각 row의 <font color="blue">모든 column 값의 평균</font> 구하기</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.mean(axis = <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>0    60.0000001    63.3333332    70.0000003    93.3333334    90.000000dtype: float64</code></pre><br>  <br><h2 id="5-nan-값이-존재할-경우-연산"><a class="markdownIt-Anchor" href="#5-nan-값이-존재할-경우-연산"></a> <strong>5. NaN 값이 존재할 경우 연산</strong></h2><blockquote><p>NaN 값이 포함된 모든 연산의 결과가 다 NaN 값이다</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame({<span class="string">"통계"</span>: [<span class="number">60</span>, np.nan, <span class="number">80</span>, <span class="number">85</span>, <span class="number">75</span>], <span class="string">"미술"</span>: [<span class="number">50</span>, <span class="number">55</span>, np.nan, <span class="number">100</span>, <span class="number">95</span>], <span class="string">"체육"</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">95</span>, np.nan] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60.0</td>      <td>50.0</td>      <td>70.0</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>55.0</td>      <td>65.0</td>    </tr>    <tr>      <th>2</th>      <td>80.0</td>      <td>NaN</td>      <td>50.0</td>    </tr>    <tr>      <th>3</th>      <td>85.0</td>      <td>100.0</td>      <td>95.0</td>    </tr>    <tr>      <th>4</th>      <td>75.0</td>      <td>95.0</td>      <td>NaN</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] / <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><pre><code>0    30.01     NaN2    40.03    42.54    37.5Name: 통계, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span> / df[<span class="string">"통계"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0    16.6666671          NaN2    12.5000003    11.7647064    13.333333Name: 통계, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"통계"</span>] / np.nan</span><br></pre></td></tr></tbody></table></figure><pre><code>0   NaN1   NaN2   NaN3   NaN4   NaNName: 통계, dtype: float64</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.nan / df[<span class="string">"통계"</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0   NaN1   NaN2   NaN3   NaN4   NaNName: 통계, dtype: float64</code></pre><br> <br>  <h2 id="6-dataframe-과-dataframe-간-연산"><a class="markdownIt-Anchor" href="#6-dataframe-과-dataframe-간-연산"></a> <strong>6. DataFrame 과 DataFrame 간 연산</strong></h2><h3 id="6-1-문자열이-포함된-series-dataframe의-연산은-불가하다"><a class="markdownIt-Anchor" href="#6-1-문자열이-포함된-series-dataframe의-연산은-불가하다"></a> 6-1. 문자열이 포함된 Series / DataFrame의 연산은 불가하다</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame({<span class="string">'통계'</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">75</span>], <span class="string">'미술'</span>: [<span class="number">50</span>, <span class="number">55</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">95</span>], <span class="string">'체육'</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame({<span class="string">'통계'</span>: [<span class="string">'good'</span>, <span class="string">'bad'</span>, <span class="string">'ok'</span> , <span class="string">'good'</span>, <span class="string">'ok'</span>], <span class="string">'미술'</span>: [<span class="number">50</span>, <span class="number">60</span> , <span class="number">80</span>, <span class="number">100</span>, <span class="number">95</span>], <span class="string">'체육'</span>: [<span class="number">70</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">70</span> , <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>60</td>      <td>50</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>70</td>      <td>55</td>      <td>65</td>    </tr>    <tr>      <th>2</th>      <td>80</td>      <td>80</td>      <td>50</td>    </tr>    <tr>      <th>3</th>      <td>85</td>      <td>100</td>      <td>95</td>    </tr>    <tr>      <th>4</th>      <td>75</td>      <td>95</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>      <th>체육</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>good</td>      <td>50</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>bad</td>      <td>60</td>      <td>65</td>    </tr>    <tr>      <th>2</th>      <td>ok</td>      <td>80</td>      <td>50</td>    </tr>    <tr>      <th>3</th>      <td>good</td>      <td>100</td>      <td>70</td>    </tr>    <tr>      <th>4</th>      <td>ok</td>      <td>95</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 + df2</span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)D:\Anaconda\lib\site-packages\pandas\core\ops\array_ops.py in na_arithmetic_op(left, right, op, str_rep)    148     try:--&gt; 149         result = expressions.evaluate(op, str_rep, left, right)    150     except TypeError:D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in evaluate(op, op_str, a, b, use_numexpr)    207     if use_numexpr:--&gt; 208         return _evaluate(op, op_str, a, b)    209     return _evaluate_standard(op, op_str, a, b)D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_numexpr(op, op_str, a, b)    120     if result is None:--&gt; 121         result = _evaluate_standard(op, op_str, a, b)    122 D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_standard(op, op_str, a, b)     69     with np.errstate(all="ignore"):---&gt; 70         return op(a, b)     71 TypeError: unsupported operand type(s) for +: 'int' and 'str'</code></pre><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 + <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)D:\Anaconda\lib\site-packages\pandas\core\ops\array_ops.py in na_arithmetic_op(left, right, op, str_rep)    148     try:--&gt; 149         result = expressions.evaluate(op, str_rep, left, right)    150     except TypeError:D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in evaluate(op, op_str, a, b, use_numexpr)    207     if use_numexpr:--&gt; 208         return _evaluate(op, op_str, a, b)    209     return _evaluate_standard(op, op_str, a, b)D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_numexpr(op, op_str, a, b)    120     if result is None:--&gt; 121         result = _evaluate_standard(op, op_str, a, b)    122 D:\Anaconda\lib\site-packages\pandas\core\computation\expressions.py in _evaluate_standard(op, op_str, a, b)     69     with np.errstate(all="ignore"):---&gt; 70         return op(a, b)     71 TypeError: can only concatenate str (not "int") to str</code></pre><br><br><h3 id="6-2-두-dataframe의-column-이름은-같으나-column-순서만-바뀌어-있는-경우"><a class="markdownIt-Anchor" href="#6-2-두-dataframe의-column-이름은-같으나-column-순서만-바뀌어-있는-경우"></a> 6-2. 두 DataFrame의 column 이름은 같으나 column 순서만 바뀌어 있는 경우</h3><blockquote><p>연산시 자동으로 column 이름 기준으로 연산 된다</p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame({<span class="string">'미술'</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="string">'통계'</span>:[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>] })</span><br><span class="line">df2 = pd.DataFrame({<span class="string">'통계'</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="string">'미술'</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>미술</th>      <th>통계</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10</td>      <td>60</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>70</td>    </tr>    <tr>      <th>2</th>      <td>30</td>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>40</td>      <td>90</td>    </tr>    <tr>      <th>4</th>      <td>50</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10</td>      <td>60</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>70</td>    </tr>    <tr>      <th>2</th>      <td>30</td>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>40</td>      <td>90</td>    </tr>    <tr>      <th>4</th>      <td>50</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 + df2</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>미술</th>      <th>통계</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>70</td>      <td>70</td>    </tr>    <tr>      <th>1</th>      <td>90</td>      <td>90</td>    </tr>    <tr>      <th>2</th>      <td>110</td>      <td>110</td>    </tr>    <tr>      <th>3</th>      <td>130</td>      <td>130</td>    </tr>    <tr>      <th>4</th>      <td>150</td>      <td>150</td>    </tr>  </tbody></table></div><br><br> <h3 id="6-3-행의-갯수가-다른-경우"><a class="markdownIt-Anchor" href="#6-3-행의-갯수가-다른-경우"></a> 6-3. 행의 갯수가 다른 경우</h3><blockquote><p>행 index 기준으로 연산하되, 하나의 DataFrame에만 존재하는 행은 연산결과가 NaN으로 나옴</p></blockquote><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame({<span class="string">'미술'</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>], <span class="string">'통계'</span>:[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">110</span>] })</span><br><span class="line">df2 = pd.DataFrame({<span class="string">'통계'</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="string">'미술'</span>: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>] })</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>미술</th>      <th>통계</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10</td>      <td>60</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>70</td>    </tr>    <tr>      <th>2</th>      <td>30</td>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>40</td>      <td>90</td>    </tr>    <tr>      <th>4</th>      <td>50</td>      <td>100</td>    </tr>    <tr>      <th>5</th>      <td>60</td>      <td>110</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>통계</th>      <th>미술</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10</td>      <td>60</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>70</td>    </tr>    <tr>      <th>2</th>      <td>30</td>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>40</td>      <td>90</td>    </tr>    <tr>      <th>4</th>      <td>50</td>      <td>100</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 * df2</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>미술</th>      <th>통계</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>600.0</td>      <td>600.0</td>    </tr>    <tr>      <th>1</th>      <td>1400.0</td>      <td>1400.0</td>    </tr>    <tr>      <th>2</th>      <td>2400.0</td>      <td>2400.0</td>    </tr>    <tr>      <th>3</th>      <td>3600.0</td>      <td>3600.0</td>    </tr>    <tr>      <th>4</th>      <td>5000.0</td>      <td>5000.0</td>    </tr>    <tr>      <th>5</th>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;데이터프레임의-산술연산&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#데이터프레임의-산술연산&quot;&gt;&lt;/a&gt; 데이터프레임의 산술연산&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://hyemin-kim.github.io/tags/Pandas/"/>
    
      <category term="전처리" scheme="https://hyemin-kim.github.io/tags/%EC%A0%84%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>Python &gt;&gt; Pandas 전처리 - (5) column 값을 변환시키는 방법</title>
    <link href="https://hyemin-kim.github.io/2020/06/19/S-Python-Pandas-Pre5/"/>
    <id>https://hyemin-kim.github.io/2020/06/19/S-Python-Pandas-Pre5/</id>
    <published>2020-06-19T12:11:52.000Z</published>
    <updated>2020-06-23T16:51:01.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dataframe의-column-값을-변환시키는-방법"><a class="markdownIt-Anchor" href="#dataframe의-column-값을-변환시키는-방법"></a> DataFrame의 column 값을 변환시키는 방법</h1><p></p><ul class="markdownIt-TOC"><li><a href="#1-apply-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98"><strong>1. apply + 일반 함수</strong></a><ul><li><a href="#1-1-%EB%AA%A9%ED%91%9C-%EC%84%B1%EB%B3%84-column%EC%9D%98-%EB%82%A8%EC%9E%90-%EC%97%AC%EC%9E%90%EB%A5%BC-1-2%EB%A1%9C-%EB%B0%94%EA%BE%BC%EB%8B%A4">1-1. (목표) ‘성별’ column의 “남자” / "여자"를 1 / 2로 바꾼다</a></li><li><a href="#1-2-%EB%AA%A9%ED%91%9C-cm%EB%8B%B9-%EB%B8%8C%EB%9E%9C%EB%93%9C-%ED%8F%89%ED%8C%90%EC%A7%80%EC%88%98%EB%A5%BC-%EA%B5%AC%ED%95%9C%EB%8B%A4-%EB%B8%8C%EB%9E%9C%EB%93%9C%ED%8F%89%ED%8C%90%EC%A7%80%EC%88%98-%ED%82%A4">1-2. (목표) cm당 브랜드 평판지수를 구한다 (브랜드평판지수 / 키)</a></li></ul></li><li><a href="#2-apply-lamda-%ED%95%A8%EC%88%98"><strong>2. apply + lamda 함수</strong></a></li><li><a href="#3-map-map-%ED%95%A8%EC%88%98"><strong>3. map + map 함수</strong></a></li></ul><p></p><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'korean-idol.csv'</span>)</span><br></pre></td></tr></tbody></table></figure>  <br><h2 id="1-apply-일반-함수"><a class="markdownIt-Anchor" href="#1-apply-일반-함수"></a> <strong>1. apply + 일반 함수</strong></h2><blockquote><p>apply는 Series나 DataFrame에 좀 더 <strong>구체적인 로직</strong>을 적용하고 싶은 경우 활용한다</p><ul><li>apply를 적용하기 위해서는 함수가 먼저 정의되어야한다</li><li>apply는 정의한 로직 함수를 인자로 넘겨준다</li></ul></blockquote><blockquote><ul><li><p><strong>Series에 적용할 경우:</strong><br><em>df_name</em> [ “<em>col_name</em>” ] <strong>.apply( <em>func</em> )</strong></p></li><li><p><strong>DataFrame에 적용할 경우:</strong><br><em>df_name</em> <strong>.apply( <em>func</em>, axis = 1)</strong></p></li></ul></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>    </tr>  </tbody></table></div><br>  <h3 id="1-1-목표-성별-column의-남자-여자를-1-2로-바꾼다"><a class="markdownIt-Anchor" href="#1-1-목표-성별-column의-남자-여자를-1-2로-바꾼다"></a> 1-1. (목표) ‘성별’ column의 “남자” / "여자"를 1 / 2로 바꾼다</h3><p><strong>변환 규칙:</strong><br>남자: 1   여자: 2   기타: -1</p><br><p><strong>(1) 로직 함수 정의</strong></p><p><strong>[주의] 반드시 return 값이 존재</strong>하여야한다</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">male_or_female</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">"남자"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="string">"여자"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure> <br> <p><strong>(2) apply로 DataFrame에 적용</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"성별_NEW"</span>] = df[<span class="string">"성별"</span>].apply(male_or_female)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>      <th>성별_NEW</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>      <td>2</td>    </tr>  </tbody></table></div><br>  <h3 id="1-2-목표-cm당-브랜드-평판지수를-구한다-브랜드평판지수-키"><a class="markdownIt-Anchor" href="#1-2-목표-cm당-브랜드-평판지수를-구한다-브랜드평판지수-키"></a> 1-2. (목표) cm당 브랜드 평판지수를 구한다 (브랜드평판지수 / 키)</h3><p><strong>변환 규칙:</strong><br>키: 178  브랜드평판지수: 99000<br>값: 99000 / 178</p><br><p><strong>(1) 로직 함수 정의</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cm_to_brand</span><span class="params">(df)</span>:</span></span><br><span class="line">    value = df[<span class="string">"브랜드평판지수"</span>] / df[<span class="string">"키"</span>]</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></tbody></table></figure>  <br><p><strong>(2) apply로 DataFrame에 적용</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.apply(cm_to_brand, axis = <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>0     60617.8571431     56027.9491532     45965.2500003     45356.7471914     47198.8155465     29260.3089896     27371.3219977              NaN8     25503.9508939     24156.12806710             NaN11    19158.61748612    18866.59428613    18603.05113614    16812.885057dtype: float64</code></pre> <br><br> <h2 id="2-apply-lamda-함수"><a class="markdownIt-Anchor" href="#2-apply-lamda-함수"></a> <strong>2. apply + lamda 함수</strong></h2><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] <strong>.apply (<em>lambda_func</em>)</strong></p></blockquote><blockquote><ul><li>lambda는 1줄로 작성하는 간단 함수식이다</li><li>return을 별도로 멱기하지 않는다</li></ul></blockquote> <br> <p><strong>(1) male_or_female 함수</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">male_or_female = <span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x == <span class="string">"남자"</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"성별"</span>].apply(male_or_female)</span><br></pre></td></tr></tbody></table></figure><pre><code>0     11     12     13     14     05     16     17     08     19     110    011    112    113    114    1Name: 성별, dtype: int64</code></pre><br>  <p><strong>(2) 실제로는 간단한 계산식을 적용하려는 경우에 많이 사용한다</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"키/2"</span>] = df[<span class="string">"키"</span>].apply(<span class="keyword">lambda</span> x: x / <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>      <th>성별_NEW</th>      <th>키/2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>      <td>1</td>      <td>86.80</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>      <td>1</td>      <td>88.50</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>      <td>1</td>      <td>90.00</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>      <td>1</td>      <td>89.00</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>      <td>2</td>      <td>81.05</td>    </tr>  </tbody></table></div> <br> <p>apply에 함수식을 만들어서 적용해주는 것과 동일하기 때문에, <strong>복잠한 조건식은 &lt;함수&gt;로, 간단한 계산식은 &lt; lambda &gt; 로</strong> 적용하면 된다</p><p><br><br></p><h2 id="3-map-map-함수"><a class="markdownIt-Anchor" href="#3-map-map-함수"></a> <strong>3. map + map 함수</strong></h2><blockquote><p><em>df_name</em> [ “<em>col_name</em>” ] <strong>.map ( <em>map_func</em> )</strong></p></blockquote><blockquote><p><strong>Step 1:</strong> dictionary 형식으로 map 함수를 정의하기<br><strong>Step 2:</strong> DataFrame / Series에 map 함수를 적용</p></blockquote>  <br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>이름</th>      <th>그룹</th>      <th>소속사</th>      <th>성별</th>      <th>생년월일</th>      <th>키</th>      <th>혈액형</th>      <th>브랜드평판지수</th>      <th>성별_NEW</th>      <th>키/2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>지민</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-10-13</td>      <td>173.6</td>      <td>A</td>      <td>10523260</td>      <td>1</td>      <td>86.80</td>    </tr>    <tr>      <th>1</th>      <td>지드래곤</td>      <td>빅뱅</td>      <td>YG</td>      <td>남자</td>      <td>1988-08-18</td>      <td>177.0</td>      <td>A</td>      <td>9916947</td>      <td>1</td>      <td>88.50</td>    </tr>    <tr>      <th>2</th>      <td>강다니엘</td>      <td>NaN</td>      <td>커넥트</td>      <td>남자</td>      <td>1996-12-10</td>      <td>180.0</td>      <td>A</td>      <td>8273745</td>      <td>1</td>      <td>90.00</td>    </tr>    <tr>      <th>3</th>      <td>뷔</td>      <td>방탄소년단</td>      <td>빅히트</td>      <td>남자</td>      <td>1995-12-30</td>      <td>178.0</td>      <td>AB</td>      <td>8073501</td>      <td>1</td>      <td>89.00</td>    </tr>    <tr>      <th>4</th>      <td>화사</td>      <td>마마무</td>      <td>RBW</td>      <td>여자</td>      <td>1995-07-23</td>      <td>162.1</td>      <td>A</td>      <td>7650928</td>      <td>2</td>      <td>81.05</td>    </tr>  </tbody></table></div><br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_map = {</span><br><span class="line">    <span class="string">"남자"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="string">"여자"</span>: <span class="string">"female"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"성별"</span>].map(my_map)</span><br></pre></td></tr></tbody></table></figure><pre><code>0       male1       male2       male3       male4     female5       male6       male7     female8       male9       male10    female11      male12      male13      male14      maleName: 성별, dtype: object</code></pre><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      apply (일반 함수 / lambda 함수); map (map 함수)
    
    </summary>
    
    
      <category term="【Study】" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/"/>
    
      <category term="Python" scheme="https://hyemin-kim.github.io/categories/%E3%80%90Study%E3%80%91/Python/"/>
    
    
      <category term="Python" scheme="https://hyemin-kim.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://hyemin-kim.github.io/tags/Pandas/"/>
    
      <category term="전처리" scheme="https://hyemin-kim.github.io/tags/%EC%A0%84%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
</feed>
